-- Autogenerated from MM0

import .set

namespace mm


/-- Restricted uniqueness in terms of "at most one." (Contributed by NM, 23-May-1999.) (Revised by
NM, 16-Jun-2017.) -/
theorem reu5 {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wa (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, ph x3) (λ x3, A2 x3))) :=
@«3bitr4i» (weu (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wa (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))) (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wa (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, ph x3) (λ x3, A2 x3)))
  (@df_eu (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
  (@df_reu (λ x3, ph x3) (λ x3, A2 x3))
  (@anbi12i (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wrmo (λ x3, ph x3) (λ x3, A2 x3)) (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
    (@df_rex (λ x3, ph x3) (λ x3, A2 x3))
    (@df_rmo (λ x3, ph x3) (λ x3, A2 x3)))


/-- Restricted unique existence implies restricted existence. (Contributed by NM, 19-Aug-1999.) -/
theorem reurex {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wi (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, A2 x3)) :=
@simplbi (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, ph x3) (λ x3, A2 x3))
  (@reu5 (λ x3, ph x3) (λ x3, A2 x3))


/-- Restricted existential uniqueness implies restricted "at most one." (Contributed by NM,
16-Jun-2017.) -/
theorem reurmo {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wi (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, ph x3) (λ x3, A2 x3)) :=
@simprbi (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, ph x3) (λ x3, A2 x3))
  (@reu5 (λ x3, ph x3) (λ x3, A2 x3))


/-- Rule used to change bound variables, using implicit substitution. Version of ~ cbvralf with a
disjoint variable condition, which does not require ~ ax-10 , ~ ax-13 . (Contributed by NM,
7-Mar-2004.) (Revised by Gino Giotto, 23-May-2024.) -/
theorem cbvralfw {ph ps : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (cbvralfw_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (cbvralfw_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (cbvralfw_3 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvralfw_4 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvralfw_5 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wb (wral (λ x3, ph x3 y) (λ x3, A2 x3 y)) (wral (λ y, ps x3 y) (λ y, A2 x3 y)) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) (A2 x3 y)) (ph x3 y))) (wal (λ y, wi (wcel (cv y) (A2 x3 y)) (ps x3 y))) (wral (λ x3, ph x3 y) (λ x3, A2 x3 y)) (wral (λ y, ps x3 y) (λ y, A2 x3 y))
  (@cbvalv1 (λ x3 y, wi (wcel (cv x3) (A2 x3 y)) (ph x3 y)) (λ x3 y, wi (wcel (cv y) (A2 x3 y)) (ps x3 y))
    (λ x3, @nfim (λ y, wcel (cv x3) (A2 x3 y)) (λ y, ph x3 y)
      (@nfcri (λ y x3, A2 x3 y)
        (λ x3, cbvralfw_2 x3) x3)
      (cbvralfw_3 x3))
    (λ y, @nfim (λ x3, wcel (cv y) (A2 x3 y)) (λ x3, ps x3 y)
      (@nfcri (λ x3 y, A2 x3 y)
        (λ y, cbvralfw_1 y) y)
      (cbvralfw_4 y))
    (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) (A2 x3 y)) (wcel (cv y) (A2 x3 y)) (ph x3 y) (ps x3 y)
      (@eleq1w (λ x3 y, A2 x3 y) x3 y)
      (cbvralfw_5 x3 y)) x3 y)
  (@df_ral (λ x3, ph x3 y) (λ x3, A2 x3 y))
  (@df_ral (λ y, ps x3 y) (λ y, A2 x3 y))


/-- Rule used to change bound variables, using implicit substitution. Version of ~ cbvrexf with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by FL, 27-Apr-2008.)
(Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvrexfw {ph ps : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (cbvrexfw_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (cbvrexfw_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (cbvrexfw_3 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvrexfw_4 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvrexfw_5 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wb (wrex (λ x3, ph x3 y) (λ x3, A2 x3 y)) (wrex (λ y, ps x3 y) (λ y, A2 x3 y)) :=
@«3bitr4i» (wn (wral (λ x3, wn (ph x3 y)) (λ x3, A2 x3 y))) (wn (wral (λ y, wn (ps x3 y)) (λ y, A2 x3 y))) (wrex (λ x3, ph x3 y) (λ x3, A2 x3 y)) (wrex (λ y, ps x3 y) (λ y, A2 x3 y))
  (@notbii (wral (λ x3, wn (ph x3 y)) (λ x3, A2 x3 y)) (wral (λ y, wn (ps x3 y)) (λ y, A2 x3 y))
    (@cbvralfw (λ x3 y, wn (ph x3 y)) (λ x3 y, wn (ps x3 y)) (λ x3 y, A2 x3 y)
      (λ y, cbvrexfw_1 y)
      (λ x3, cbvrexfw_2 x3)
      (λ x3, @nfn (λ y, ph x3 y)
        (cbvrexfw_3 x3))
      (λ y, @nfn (λ x3, ps x3 y)
        (cbvrexfw_4 y))
      (λ x3 y, @notbid (wceq (cv x3) (cv y)) (ph x3 y) (ps x3 y)
        (cbvrexfw_5 x3 y)) x3 y))
  (@dfrex2 (λ x3, ph x3 y) (λ x3, A2 x3 y))
  (@dfrex2 (λ y, ps x3 y) (λ y, A2 x3 y))


/-- Rule used to change bound variables, using implicit substitution. Version of ~ cbvral with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by NM, 31-Jul-2003.)
(Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvralw {ph ps : setvar → setvar → wff} {A2 : «class»}
  (cbvralw_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvralw_2 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvralw_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wb (wral (λ x3, ph x3 y) (λ x3, A2)) (wral (λ y, ps x3 y) (λ y, A2)) :=
@cbvralfw (λ x3 y, ph x3 y) (λ x3 y, ps x3 y) (λ x3 y, A2)
  (λ y, @nfcv A2)
  (λ x3, @nfcv A2)
  (λ x3, cbvralw_1 x3)
  (λ y, cbvralw_2 y)
  (λ x3 y, cbvralw_3 x3 y) x3 y


/-- Rule used to change bound variables, using implicit substitution. Version of ~ cbvrex with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by NM, 31-Jul-2003.)
(Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvrexw {ph ps : setvar → setvar → wff} {A2 : «class»}
  (cbvralw_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvralw_2 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvralw_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wb (wrex (λ x3, ph x3 y) (λ x3, A2)) (wrex (λ y, ps x3 y) (λ y, A2)) :=
@cbvrexfw (λ x3 y, ph x3 y) (λ x3 y, ps x3 y) (λ x3 y, A2)
  (λ y, @nfcv A2)
  (λ x3, @nfcv A2)
  (λ x3, cbvralw_1 x3)
  (λ y, cbvralw_2 y)
  (λ x3 y, cbvralw_3 x3 y) x3 y


/-- Change the bound variable of a restricted universal quantifier using implicit substitution.
Version of ~ cbvralv with a disjoint variable condition, which does not require ~ ax-10 , ~ ax-11 ,
~ ax-12 , ~ ax-13 . (Contributed by NM, 28-Jan-1997.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvralvw {ph ps : setvar → wff} {A2 : «class»}
  (cbvralvw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ y, ps y) (λ y, A2)) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wal (λ y, wi (wcel (cv y) A2) (ps y))) (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ y, ps y) (λ y, A2))
  (@cbvalvw (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ y, wi (wcel (cv y) A2) (ps y))
    (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
      (@eleq1w (λ x3 y, A2) x3 y)
      (cbvralvw_1 x3 y)))
  (@df_ral (λ x3, ph x3) (λ x3, A2))
  (@df_ral (λ y, ps y) (λ y, A2))


/-- Change the bound variable of a restricted existential quantifier using implicit substitution.
Version of ~ cbvrexv with a disjoint variable condition, which does not require ~ ax-10 , ~ ax-11 ,
~ ax-12 , ~ ax-13 . (Contributed by NM, 2-Jun-1998.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvrexvw {ph ps : setvar → wff} {A2 : «class»}
  (cbvralvw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ y, ps y) (λ y, A2)) :=
@«3bitr4i» (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wex (λ y, wa (wcel (cv y) A2) (ps y))) (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ y, ps y) (λ y, A2))
  (@cbvexvw (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ y, wa (wcel (cv y) A2) (ps y))
    (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
      (@eleq1w (λ x3 y, A2) x3 y)
      (cbvralvw_1 x3 y)))
  (@df_rex (λ x3, ph x3) (λ x3, A2))
  (@df_rex (λ y, ps y) (λ y, A2))


/-- Change the bound variable of a restricted unique existential quantifier using implicit
substitution. Version of ~ cbvreuv with a disjoint variable condition, which requires fewer axioms.
(Contributed by NM, 5-Apr-2004.) (Revised by Gino Giotto, 30-Sep-2024.) -/
theorem cbvreuvw {ph ps : setvar → wff} {A2 : «class»}
  (cbvralvw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2)) (wreu (λ y, ps y) (λ y, A2)) :=
@«3bitr4i» (weu (λ x3, wa (wcel (cv x3) A2) (ph x3))) (weu (λ y, wa (wcel (cv y) A2) (ps y))) (wreu (λ x3, ph x3) (λ x3, A2)) (wreu (λ y, ps y) (λ y, A2))
  (@cbveuvw (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ y, wa (wcel (cv y) A2) (ps y))
    (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
      (@eleq1w (λ x3 y, A2) x3 y)
      (cbvralvw_1 x3 y)))
  (@df_reu (λ x3, ph x3) (λ x3, A2))
  (@df_reu (λ y, ps y) (λ y, A2))


/-- Rule used to change the bound variable in a restricted universal quantifier with implicit
substitution which also changes the quantifier domain. Deduction form. (Contributed by David Moews,
1-May-2017.) -/
theorem cbvraldva2 {ph : wff} {ps ch : setvar → wff} {A2 B2 : setvar → «class»}
  (cbvraldva2_1 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (cv y))) (wb (ps x3) (ch y)))
  (cbvraldva2_2 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (cv y))) (wceq (A2 x3) (B2 y))) :
  ⊦ wi ph (wb (wral (λ x3, ps x3) (λ x3, A2 x3)) (wral (λ y, ch y) (λ y, B2 y))) :=
@«3bitr4g» ph (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ps x3))) (wal (λ y, wi (wcel (cv y) (B2 y)) (ch y))) (wral (λ x3, ps x3) (λ x3, A2 x3)) (wral (λ y, ch y) (λ y, B2 y))
  (@pm5_74ri ph (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ps x3))) (wal (λ y, wi (wcel (cv y) (B2 y)) (ch y)))
    (@«3bitr3i» (wal (λ x3, wi ph (wi (wcel (cv x3) (A2 x3)) (ps x3)))) (wal (λ y, wi ph (wi (wcel (cv y) (B2 y)) (ch y)))) (wi ph (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ps x3)))) (wi ph (wal (λ y, wi (wcel (cv y) (B2 y)) (ch y))))
      (@cbvalvw (λ x3, wi ph (wi (wcel (cv x3) (A2 x3)) (ps x3))) (λ y, wi ph (wi (wcel (cv y) (B2 y)) (ch y)))
        (λ x3 y, @pm5_74d (wceq (cv x3) (cv y)) ph (wi (wcel (cv x3) (A2 x3)) (ps x3)) (wi (wcel (cv y) (B2 y)) (ch y))
          (@expcom ph (wceq (cv x3) (cv y)) (wb (wi (wcel (cv x3) (A2 x3)) (ps x3)) (wi (wcel (cv y) (B2 y)) (ch y)))
            (@imbi12d (wa ph (wceq (cv x3) (cv y))) (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 y)) (ps x3) (ch y)
              (@eleq12d (wa ph (wceq (cv x3) (cv y))) (cv x3) (cv y) (A2 x3) (B2 y)
                (@simpr ph (wceq (cv x3) (cv y)))
                (cbvraldva2_2 x3 y))
              (cbvraldva2_1 x3 y)))))
      (@«19_21v» ph (λ x3, wi (wcel (cv x3) (A2 x3)) (ps x3)))
      (@«19_21v» ph (λ y, wi (wcel (cv y) (B2 y)) (ch y)))))
  (@df_ral (λ x3, ps x3) (λ x3, A2 x3))
  (@df_ral (λ y, ch y) (λ y, B2 y))


/-- Rule used to change the bound variable in a restricted existential quantifier with implicit
substitution which also changes the quantifier domain. Deduction form. (Contributed by David Moews,
1-May-2017.) (Proof shortened by Wolf Lammen, 12-Aug-2023.) -/
theorem cbvrexdva2 {ph : wff} {ps ch : setvar → wff} {A2 B2 : setvar → «class»}
  (cbvraldva2_1 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (cv y))) (wb (ps x3) (ch y)))
  (cbvraldva2_2 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (cv y))) (wceq (A2 x3) (B2 y))) :
  ⊦ wi ph (wb (wrex (λ x3, ps x3) (λ x3, A2 x3)) (wrex (λ y, ch y) (λ y, B2 y))) :=
@«3bitr4g» ph (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))) (wex (λ y, wa (wcel (cv y) (B2 y)) (ch y))) (wrex (λ x3, ps x3) (λ x3, A2 x3)) (wrex (λ y, ch y) (λ y, B2 y))
  (@mpbir (wi ph (wb (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))) (wex (λ y, wa (wcel (cv y) (B2 y)) (ch y))))) (wb (wa ph (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (wa ph (wex (λ y, wa (wcel (cv y) (B2 y)) (ch y)))))
    (@«3bitr3i» (wex (λ x3, wa ph (wa (wcel (cv x3) (A2 x3)) (ps x3)))) (wex (λ y, wa ph (wa (wcel (cv y) (B2 y)) (ch y)))) (wa ph (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (wa ph (wex (λ y, wa (wcel (cv y) (B2 y)) (ch y))))
      (@cbvexvw (λ x3, wa ph (wa (wcel (cv x3) (A2 x3)) (ps x3))) (λ y, wa ph (wa (wcel (cv y) (B2 y)) (ch y)))
        (λ x3 y, @pm5_32da (wceq (cv x3) (cv y)) ph (wa (wcel (cv x3) (A2 x3)) (ps x3)) (wa (wcel (cv y) (B2 y)) (ch y))
          (@ancoms ph (wceq (cv x3) (cv y)) (wb (wa (wcel (cv x3) (A2 x3)) (ps x3)) (wa (wcel (cv y) (B2 y)) (ch y)))
            (@anbi12d (wa ph (wceq (cv x3) (cv y))) (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 y)) (ps x3) (ch y)
              (@eleq12d (wa ph (wceq (cv x3) (cv y))) (cv x3) (cv y) (A2 x3) (B2 y)
                (@simpr ph (wceq (cv x3) (cv y)))
                (cbvraldva2_2 x3 y))
              (cbvraldva2_1 x3 y)))))
      (@«19_42v» ph (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
      (@«19_42v» ph (λ y, wa (wcel (cv y) (B2 y)) (ch y))))
    (@pm5_32 ph (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))) (wex (λ y, wa (wcel (cv y) (B2 y)) (ch y)))))
  (@df_rex (λ x3, ps x3) (λ x3, A2 x3))
  (@df_rex (λ y, ch y) (λ y, B2 y))


/-- Rule used to change the bound variable in a restricted existential quantifier with implicit
substitution. Deduction form. (Contributed by David Moews, 1-May-2017.) -/
theorem cbvrexdva {ph : wff} {ps ch : setvar → wff} {A2 : «class»}
  (cbvraldva_1 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (cv y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wrex (λ x3, ps x3) (λ x3, A2)) (wrex (λ y, ch y) (λ y, A2))) :=
@cbvrexdva2 ph (λ x3, ps x3) (λ y, ch y) (λ x3, A2) (λ y, A2)
  (λ x3 y, cbvraldva_1 x3 y)
  (λ x3 y, @eqidd (wa ph (wceq (cv x3) (cv y))) A2)


/-- Change bound variables of double restricted universal quantification, using implicit
substitution. Version of ~ cbvral2v with a disjoint variable condition, which does not require ~
ax-13 . (Contributed by NM, 10-Aug-2004.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvral2vw {ph ps : setvar → setvar → setvar → wff} {ch : setvar → setvar → wff} {A2 : setvar → setvar → «class»} {B2 : «class»}
  (cbvral2vw_1 : ∀ x3 y z w, ⊦ wi (wceq (cv x3) (cv z)) (wb (ph x3 y w) (ch y z)))
  (cbvral2vw_2 : ∀ x3 y z w, ⊦ wi (wceq (cv y) (cv w)) (wb (ch y z) (ps x3 z w)))
  (x3 y w : setvar) : ⊦ wb (wral (λ x3, wral (λ y, ph x3 y w) (λ y, B2)) (λ x3, A2 y w)) (wral (λ z, wral (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w)) :=
@bitri (wral (λ x3, wral (λ y, ph x3 y w) (λ y, B2)) (λ x3, A2 y w)) (wral (λ z, wral (λ y, ch y z) (λ y, B2)) (λ z, A2 y w)) (wral (λ z, wral (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w))
  (@cbvralvw (λ x3, wral (λ y, ph x3 y w) (λ y, B2)) (λ z, wral (λ y, ch y z) (λ y, B2)) (A2 y w)
    (λ x3 z, @ralbidv (wceq (cv x3) (cv z)) (λ y, ph x3 y w) (λ y, ch y z) (λ y, B2)
      (λ y, cbvral2vw_1 x3 y z w)))
  (@ralbii (λ z, wral (λ y, ch y z) (λ y, B2)) (λ z, wral (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w)
    (λ z, @cbvralvw (λ y, ch y z) (λ w, ps x3 z w) B2
      (λ y w, cbvral2vw_2 x3 y z w)))


/-- Change bound variables of double restricted universal quantification, using implicit
substitution. Version of ~ cbvral2v with a disjoint variable condition, which does not require ~
ax-13 . (Contributed by NM, 10-Aug-2004.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvral2vw_b {ph ps ch : setvar → setvar → wff} {A2 : setvar → «class»} {B2 : «class»}
  (cbvral2vw_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cv z)) (wb (ph x3 y) (ch y z)))
  (cbvral2vw_2 : ∀ x3 y z, ⊦ wi (wceq (cv y) (cv x3)) (wb (ch y z) (ps x3 z)))
  (y : setvar) : ⊦ wb (wral (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ x3, A2 y)) (wral (λ z, wral (λ x3, ps x3 z) (λ x3, B2)) (λ z, A2 y)) :=
@bitri (wral (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ x3, A2 y)) (wral (λ z, wral (λ y, ch y z) (λ y, B2)) (λ z, A2 y)) (wral (λ z, wral (λ x3, ps x3 z) (λ x3, B2)) (λ z, A2 y))
  (@cbvralvw (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ z, wral (λ y, ch y z) (λ y, B2)) (A2 y)
    (λ x3 z, @ralbidv (wceq (cv x3) (cv z)) (λ y, ph x3 y) (λ y, ch y z) (λ y, B2)
      (λ y, cbvral2vw_1 x3 y z)))
  (@ralbii (λ z, wral (λ y, ch y z) (λ y, B2)) (λ z, wral (λ x3, ps x3 z) (λ x3, B2)) (λ z, A2 y)
    (λ z, @cbvralvw (λ y, ch y z) (λ x3, ps x3 z) B2
      (λ y x3, cbvral2vw_2 x3 y z)))


/-- Change bound variables of double restricted universal quantification, using implicit
substitution. Version of ~ cbvrex2v with a disjoint variable condition, which does not require ~
ax-13 . (Contributed by FL, 2-Jul-2012.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvrex2vw {ph ps : setvar → setvar → setvar → wff} {ch : setvar → setvar → wff} {A2 : setvar → setvar → «class»} {B2 : «class»}
  (cbvrex2vw_1 : ∀ x3 y z w, ⊦ wi (wceq (cv x3) (cv z)) (wb (ph x3 y w) (ch y z)))
  (cbvrex2vw_2 : ∀ x3 y z w, ⊦ wi (wceq (cv y) (cv w)) (wb (ch y z) (ps x3 z w)))
  (x3 y w : setvar) : ⊦ wb (wrex (λ x3, wrex (λ y, ph x3 y w) (λ y, B2)) (λ x3, A2 y w)) (wrex (λ z, wrex (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w)) :=
@bitri (wrex (λ x3, wrex (λ y, ph x3 y w) (λ y, B2)) (λ x3, A2 y w)) (wrex (λ z, wrex (λ y, ch y z) (λ y, B2)) (λ z, A2 y w)) (wrex (λ z, wrex (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w))
  (@cbvrexvw (λ x3, wrex (λ y, ph x3 y w) (λ y, B2)) (λ z, wrex (λ y, ch y z) (λ y, B2)) (A2 y w)
    (λ x3 z, @rexbidv (wceq (cv x3) (cv z)) (λ y, ph x3 y w) (λ y, ch y z) (λ y, B2)
      (λ y, cbvrex2vw_1 x3 y z w)))
  (@rexbii (λ z, wrex (λ y, ch y z) (λ y, B2)) (λ z, wrex (λ w, ps x3 z w) (λ w, B2)) (λ z, A2 y w)
    (λ z, @cbvrexvw (λ y, ch y z) (λ w, ps x3 z w) B2
      (λ y w, cbvrex2vw_2 x3 y z w)))


/-- Change bound variable by using a substitution. Version of ~ cbvralsv with a disjoint variable
condition, which does not require ~ ax-13 . (Contributed by NM, 20-Nov-2005.) (Revised by Gino
Giotto, 10-Jan-2024.) -/
theorem cbvralsvw {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ y, wsb (λ x3, ph x3) y) (λ y, A2)) :=
@bitri (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ z, wsb (λ x3, ph x3) z) (λ z, A2)) (wral (λ y, wsb (λ x3, ph x3) y) (λ y, A2))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wb (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ z, wsb (λ x3, ph x3) z) (λ z, A2)), from
    @cbvralw (λ x3 z, ph x3) (λ x3 z, wsb (λ x3, ph x3) z) A2
      (λ x3, @nfv (ph x3))
      (λ z, @nfs1v (λ x3 z, ph x3) z)
      (λ x3 z, @sbequ12 (λ x3 z, ph x3) x3 z) x3 z)
  (setvar.forget $ λ y : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wb (wral (λ z, wsb (λ x3, ph x3) z) (λ z, A2)) (wral (λ y, wsb (λ x3, ph x3) y) (λ y, A2)), from
    @cbvralw (λ z y, wsb (λ x3, ph x3) z) (λ z y, wsb (λ x3, ph x3) y) A2
      (λ z, @nfv (wsb (λ x3, ph x3) z))
      (λ y, @nfv (wsb (λ x3, ph x3) y))
      (λ z y, @sbequ (λ z y x3, ph x3) z y) z y)


/-- Change bound variable by using a substitution. Version of ~ cbvrexsv with a disjoint variable
condition, which does not require ~ ax-13 . (Contributed by NM, 2-Mar-2008.) (Revised by Gino
Giotto, 10-Jan-2024.) -/
theorem cbvrexsvw {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ y, wsb (λ x3, ph x3) y) (λ y, A2)) :=
@bitri (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ z, wsb (λ x3, ph x3) z) (λ z, A2)) (wrex (λ y, wsb (λ x3, ph x3) y) (λ y, A2))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wb (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ z, wsb (λ x3, ph x3) z) (λ z, A2)), from
    @cbvrexw (λ x3 z, ph x3) (λ x3 z, wsb (λ x3, ph x3) z) A2
      (λ x3, @nfv (ph x3))
      (λ z, @nfs1v (λ x3 z, ph x3) z)
      (λ x3 z, @sbequ12 (λ x3 z, ph x3) x3 z) x3 z)
  (setvar.forget $ λ y : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wb (wrex (λ z, wsb (λ x3, ph x3) z) (λ z, A2)) (wrex (λ y, wsb (λ x3, ph x3) y) (λ y, A2)), from
    @cbvrexw (λ z y, wsb (λ x3, ph x3) z) (λ z y, wsb (λ x3, ph x3) y) A2
      (λ z, @nfv (wsb (λ x3, ph x3) z))
      (λ y, @nfv (wsb (λ x3, ph x3) y))
      (λ z y, @sbequ (λ z y x3, ph x3) z y) z y)


/-- Equivalent formulas yield equal restricted class abstractions (inference form). (Contributed by
NM, 22-May-1999.) -/
theorem rabbiia {ph ps : setvar → wff} {A2 : setvar → «class»}
  (rabbiia_1 : ∀ x3, ⊦ wi (wcel (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3)) :=
@«3eqtr4i» (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))) (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))
  (@abbii (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))
    (λ x3, @pm5_32i (wcel (cv x3) (A2 x3)) (ph x3) (ps x3)
      (rabbiia_1 x3)))
  (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
  (@df_rab (λ x3, ps x3) (λ x3, A2 x3))


/-- Equivalent wff's correspond to equal restricted class abstractions. Inference form of ~ rabbidv
. (Contributed by Peter Mazsa, 1-Nov-2019.) -/
theorem rabbii {ph ps : setvar → wff} {A2 : setvar → «class»}
  (rabbii_1 : ∀ x3, ⊦ wb (ph x3) (ps x3)) :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3)) :=
@rabbiia (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3)
  (λ x3, @a1i (wb (ph x3) (ps x3)) (wcel (cv x3) (A2 x3))
    (rabbii_1 x3))


/-- Equivalent wff's yield equal restricted class abstractions. (Contributed by Thierry Arnoux,
4-Feb-2017.) -/
theorem rabbidva2 {ph : wff} {ps ch : setvar → wff} {A2 B2 : setvar → «class»}
  (rabbidva2_1 : ∀ x3, ⊦ wi ph (wb (wa (wcel (cv x3) (A2 x3)) (ps x3)) (wa (wcel (cv x3) (B2 x3)) (ch x3)))) :
  ⊦ wi ph (wceq (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, B2 x3))) :=
@«3eqtr4g» ph (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ch x3))) (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, B2 x3))
  (@abbidv ph (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)) (λ x3, wa (wcel (cv x3) (B2 x3)) (ch x3))
    (λ x3, rabbidva2_1 x3))
  (@df_rab (λ x3, ps x3) (λ x3, A2 x3))
  (@df_rab (λ x3, ch x3) (λ x3, B2 x3))


/-- Equivalent wff's yield equal restricted class abstractions. (Contributed by Glauco Siliprandi,
26-Jun-2021.) -/
theorem rabbia2 {ps ch : setvar → wff} {A2 B2 : setvar → «class»}
  (rabbia2_1 : ∀ x3, ⊦ wb (wa (wcel (cv x3) (A2 x3)) (ps x3)) (wa (wcel (cv x3) (B2 x3)) (ch x3))) :
  ⊦ wceq (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, B2 x3)) :=
@mptru (wceq (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, B2 x3)))
  (@rabbidva2 wtru (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3) (λ x3, B2 x3)
    (λ x3, @a1i (wb (wa (wcel (cv x3) (A2 x3)) (ps x3)) (wa (wcel (cv x3) (B2 x3)) (ch x3))) wtru
      (rabbia2_1 x3)))


/-- Equivalent wff's yield equal restricted class abstractions (deduction form). (Contributed by NM,
28-Nov-2003.) (Proof shortened by SN, 3-Dec-2023.) -/
theorem rabbidva {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»}
  (rabbidva_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wb (ps x3) (ch x3))) :
  ⊦ wi ph (wceq (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, A2 x3))) :=
@rabbidva2 ph (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3) (λ x3, A2 x3)
  (λ x3, @pm5_32da ph (wcel (cv x3) (A2 x3)) (ps x3) (ch x3)
    (rabbidva_1 x3))


/-- Equivalent wff's yield equal restricted class abstractions (deduction form). (Contributed by NM,
10-Feb-1995.) -/
theorem rabbidv {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»}
  (rabbidv_1 : ∀ x3, ⊦ wi ph (wb (ps x3) (ch x3))) :
  ⊦ wi ph (wceq (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, A2 x3))) :=
@rabbidva ph (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3)
  (λ x3, @adantr ph (wb (ps x3) (ch x3)) (wcel (cv x3) (A2 x3))
    (rabbidv_1 x3))


/-- Equality theorem for restricted class abstractions. Inference form of ~ rabeqf . (Contributed by
Glauco Siliprandi, 26-Jun-2021.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto,
3-Jun-2024.) -/
theorem rabeqi {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (rabeqi_1 : ∀ x3, ⊦ wceq (A2 x3) (B2 x3)) :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ph x3) (λ x3, B2 x3)) :=
@rabbia2 (λ x3, ph x3) (λ x3, ph x3) (λ x3, A2 x3) (λ x3, B2 x3)
  (λ x3, @anbi1i (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)) (ph x3)
    (@eleq2i (A2 x3) (B2 x3) (cv x3)
      (rabeqi_1 x3)))


/-- Equality theorem for restricted class abstractions. (Contributed by NM, 15-Oct-2003.) Avoid ~
ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 20-Aug-2023.) -/
theorem rabeq {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (crab (λ x3, ph x3) (λ x3, A2)) (crab (λ x3, ph x3) (λ x3, B2))) :=
@rabbidva2 (wceq A2 B2) (λ x3, ph x3) (λ x3, ph x3) (λ x3, A2) (λ x3, B2)
  (λ x3, @anbi1d (wceq A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (ph x3)
    (@eleq2 A2 B2 (cv x3)))


/-- Equality of restricted class abstractions. Deduction form of ~ rabeq . (Contributed by Glauco
Siliprandi, 5-Apr-2020.) -/
theorem rabeqdv {ph ps : setvar → wff} {A2 B2 : «class»}
  (rabeqdv_1 : ∀ x3, ⊦ wi (ph x3) (wceq A2 B2))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (crab (λ x3, ps x3) (λ x3, A2)) (crab (λ x3, ps x3) (λ x3, B2))) :=
@syl (ph x3) (wceq A2 B2) (wceq (crab (λ x3, ps x3) (λ x3, A2)) (crab (λ x3, ps x3) (λ x3, B2)))
  (rabeqdv_1 x3)
  (@rabeq (λ x3, ps x3) A2 B2)


/-- Equality of restricted class abstractions. (Contributed by Jeff Madsen, 1-Dec-2009.) -/
theorem rabeqbidv {ph : wff} {ps ch : setvar → wff} {A2 B2 : «class»}
  (rabeqbidv_1 : ⊦ wi ph (wceq A2 B2))
  (rabeqbidv_2 : ∀ x3, ⊦ wi ph (wb (ps x3) (ch x3))) :
  ⊦ wi ph (wceq (crab (λ x3, ps x3) (λ x3, A2)) (crab (λ x3, ch x3) (λ x3, B2))) :=
@eqtrd ph (crab (λ x3, ps x3) (λ x3, A2)) (crab (λ x3, ps x3) (λ x3, B2)) (crab (λ x3, ch x3) (λ x3, B2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi ph (wceq (crab (λ x3, ps x3) (λ x3, A2)) (crab (λ x3, ps x3) (λ x3, B2))), from
    @rabeqdv (λ x3, ph) (λ x3, ps x3) A2 B2
      (λ x3, rabeqbidv_1) x3)
  (@rabbidv ph (λ x3, ps x3) (λ x3, ch x3) (λ x3, B2)
    (λ x3, rabeqbidv_2 x3))


/-- Inference from equality of a class variable and a restricted class abstraction. (Contributed by
NM, 16-Feb-2004.) -/
theorem rabeq2i {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (rabeq2i_1 : ∀ x3, ⊦ wceq (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wb (wcel (cv x3) (A2 x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)) :=
@bitri (wcel (cv x3) (A2 x3)) (wcel (cv x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wa (wcel (cv x3) (B2 x3)) (ph x3))
  (@eleq2i (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3)) (cv x3)
    (rabeq2i_1 x3))
  (@rabid (λ x3, ph x3) (λ x3, B2 x3) x3)


/-- Swap with a membership relation in a restricted class abstraction. (Contributed by NM,
4-Jul-2005.) -/
theorem rabswap {A2 B2 : setvar → «class»} :
  ⊦ wceq (crab (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3)) (crab (λ x3, wcel (cv x3) (A2 x3)) (λ x3, B2 x3)) :=
@rabbia2 (λ x3, wcel (cv x3) (B2 x3)) (λ x3, wcel (cv x3) (A2 x3)) (λ x3, A2 x3) (λ x3, B2 x3)
  (λ x3, @ancom (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)))


/-- Rule to change the bound variable in a restricted class abstraction, using implicit
substitution. Version of ~ cbvrab with a disjoint variable condition, which does not require ~ ax-13
. (Contributed by Andrew Salmon, 11-Jul-2011.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem cbvrabw {ph ps : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (cbvrabw_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (cbvrabw_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (cbvrabw_3 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvrabw_4 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvrabw_5 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wceq (crab (λ x3, ph x3 y) (λ x3, A2 x3 y)) (crab (λ y, ps x3 y) (λ y, A2 x3 y)) :=
@«3eqtr4i» (cab (λ x3, wa (wcel (cv x3) (A2 x3 y)) (ph x3 y))) (cab (λ y, wa (wcel (cv y) (A2 x3 y)) (ps x3 y))) (crab (λ x3, ph x3 y) (λ x3, A2 x3 y)) (crab (λ y, ps x3 y) (λ y, A2 x3 y))
  (@eqtri (cab (λ x3, wa (wcel (cv x3) (A2 x3 y)) (ph x3 y))) (cab (λ z, wa (wcel (cv z) (A2 x3 y)) (wsb (λ x3, ph x3 y) z))) (cab (λ y, wa (wcel (cv y) (A2 x3 y)) (ps x3 y)))
    (setvar.forget $ λ z : setvar,
      show ⊦ wceq (cab (λ x3, wa (wcel (cv x3) (A2 x3 y)) (ph x3 y))) (cab (λ z, wa (wcel (cv z) (A2 x3 y)) (wsb (λ x3, ph x3 y) z))), from
      @cbvabw (λ x3 z, wa (wcel (cv x3) (A2 x3 y)) (ph x3 y)) (λ x3 z, wa (wcel (cv z) (A2 x3 y)) (wsb (λ x3, ph x3 y) z))
        (λ x3, @nfv (wa (wcel (cv x3) (A2 x3 y)) (ph x3 y)))
        (λ z, @nfan (λ x3, wcel (cv z) (A2 x3 y)) (λ x3, wsb (λ x3, ph x3 y) z)
          (@nfcri (λ x3 z, A2 x3 y)
            (λ z, cbvrabw_1 y) z)
          (@nfs1v (λ x3 z, ph x3 y) z))
        (λ x3 z, @anbi12d (wceq (cv x3) (cv z)) (wcel (cv x3) (A2 x3 y)) (wcel (cv z) (A2 x3 y)) (ph x3 y) (wsb (λ x3, ph x3 y) z)
          (@eleq1w (λ x3 z, A2 x3 y) x3 z)
          (@sbequ12 (λ x3 z, ph x3 y) x3 z)) x3 z)
    (setvar.forget $ λ z : setvar,
      show ⊦ wceq (cab (λ z, wa (wcel (cv z) (A2 x3 y)) (wsb (λ x3, ph x3 y) z))) (cab (λ y, wa (wcel (cv y) (A2 x3 y)) (ps x3 y))), from
      @cbvabw (λ z y, wa (wcel (cv z) (A2 x3 y)) (wsb (λ x3, ph x3 y) z)) (λ z y, wa (wcel (cv y) (A2 x3 y)) (ps x3 y))
        (λ z, @nfan (λ y, wcel (cv z) (A2 x3 y)) (λ y, wsb (λ x3, ph x3 y) z)
          (@nfcri (λ y z, A2 x3 y)
            (λ z, cbvrabw_2 x3) z)
          (@nfsbv (λ x3 y, ph x3 y) z
            (λ x3, cbvrabw_3 x3)))
        (λ y, @nfv (wa (wcel (cv y) (A2 x3 y)) (ps x3 y)))
        (λ z y, @anbi12d (wceq (cv z) (cv y)) (wcel (cv z) (A2 x3 y)) (wcel (cv y) (A2 x3 y)) (wsb (λ x3, ph x3 y) z) (ps x3 y)
          (@eleq1w (λ z y, A2 x3 y) z y)
          (@bitrdi (wceq (cv z) (cv y)) (wsb (λ x3, ph x3 y) z) (wsb (λ x3, ph x3 y) y) (ps x3 y)
            (@sbequ (λ z y x3, ph x3 y) z y)
            (@sbiev (λ x3 y, ph x3 y) (λ x3 y, ps x3 y)
              (λ y, cbvrabw_4 y)
              (λ x3 y, cbvrabw_5 x3 y) x3 y))) z y))
  (@df_rab (λ x3, ph x3 y) (λ x3, A2 x3 y))
  (@df_rab (λ y, ps x3 y) (λ y, A2 x3 y))


/-- Rule to change the bound variable in a restricted class abstraction, using implicit
substitution. (Contributed by NM, 26-May-1999.) Require ` x ` , ` y ` be disjoint to avoid ~ ax-11
and ~ ax-13 . (Revised by Steven Nguyen, 4-Dec-2022.) -/
theorem cbvrabv {ph ps : setvar → wff} {A2 : «class»}
  (cbvrabv_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, A2)) (crab (λ y, ps y) (λ y, A2)) :=
@«3eqtr4i» (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) (cab (λ y, wa (wcel (cv y) A2) (ps y))) (crab (λ x3, ph x3) (λ x3, A2)) (crab (λ y, ps y) (λ y, A2))
  (@cbvabv (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ y, wa (wcel (cv y) A2) (ps y))
    (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
      (@eleq1w (λ x3 y, A2) x3 y)
      (cbvrabv_1 x3 y)))
  (@df_rab (λ x3, ph x3) (λ x3, A2))
  (@df_rab (λ y, ps y) (λ y, A2))


-- /-- Extend class notation to include the universal class symbol. -/
-- constant cvv : «class»


-- /-- Define the universal class. Definition 5.20 of [TakeutiZaring] p. 21. Also Definition 2.9 of
-- [Quine] p. 19. The class ` _V ` can be described as the "class of all sets"; ~ vprc proves that `
-- _V ` is not itself a set in ZF. We will frequently use the expression ` A e. _V ` as a short way
-- to say " ` A ` is a set", and ~ isset proves that this expression has the same meaning as ` E. x
-- x = A ` . In well-founded set theories without urelements, like ZF, the class ` _V ` is equal to
-- the von Neumann universe. However, the letter "V" does not stand for "von Neumann". The letter
-- "V" was used earlier by Peano in 1889 for the universe of sets, where the letter V is derived
-- from the Latin word "Verum", referring to the true truth constant ` T ` . Peano's notation ` _V `
-- was adopted by Whitehead and Russell in Principia Mathematica for the class of all sets in 1910.
-- The class constant ` _V ` is the first class constant introduced in this database. As a constant,
-- as opposed to a variable, it cannot be substituted with anything, and in particular it is not
-- part of any disjoint variable condition. For a general discussion of the theory of classes, see ~
-- mmset.html#class . See ~ dfv2 for an alternate definition. (Contributed by NM, 26-May-1993.) -/
-- axiom df_v : ⊦ wceq cvv (cab (λ x3, wceq (cv x3) (cv x3)))


/-- Alternate definition of the universal class (see ~ df-v ). (Contributed by BJ, 30-Nov-2019.) -/
theorem dfv2 :
  ⊦ wceq cvv (cab (λ x3, wtru)) :=
@eqtri cvv (cab (λ x3, wceq (cv x3) (cv x3))) (cab (λ x3, wtru))
  df_v
  (@abbii (λ x3, wceq (cv x3) (cv x3)) (λ x3, wtru)
    (λ x3, @bitru (wceq (cv x3) (cv x3))
      (@equid x3)))


/-- All setvar variables are sets (see ~ isset ). Theorem 6.8 of [Quine] p. 43. A shorter proof is
possible from ~ eleq2i but it uses more axioms. (Contributed by NM, 26-May-1993.) Remove use of ~
ax-12 . (Revised by SN, 28-Aug-2023.) (Proof shortened by BJ, 4-Sep-2024.) -/
theorem vex
  (x3 : setvar) : ⊦ wcel (cv x3) cvv :=
@eleqtrri (cv x3) (cab (λ x3, wtru)) cvv
  (@vextru_b x3)
  dfv2


/-- If a proposition is implied by ` x e. _V ` (which is true, see ~ vex ), then it is true.
(Contributed by Peter Mazsa, 13-Oct-2018.) -/
theorem elv {ph : setvar → wff}
  (elv_1 : ∀ x3, ⊦ wi (wcel (cv x3) cvv) (ph x3))
  (x3 : setvar) : ⊦ ph x3 :=
@ax_mp (wcel (cv x3) cvv) (ph x3)
  (@vex x3)
  (elv_1 x3)


/-- If a proposition is implied by ` x e. _V ` (which is true, see ~ vex ) and another antecedent,
then it is implied by that other antecedent. Deduction associated with ~ elv . (Contributed by Peter
Mazsa, 23-Oct-2018.) -/
theorem elvd {ph ps : setvar → wff}
  (elvd_1 : ∀ x3, ⊦ wi (wa (ph x3) (wcel (cv x3) cvv)) (ps x3))
  (x3 : setvar) : ⊦ wi (ph x3) (ps x3) :=
@mpan2 (ph x3) (wcel (cv x3) cvv) (ps x3)
  (@vex x3)
  (elvd_1 x3)


/-- If a proposition is implied by ` x e. _V ` and ` y e. _V ` (which is true, see ~ vex ), then it
is true. (Contributed by Peter Mazsa, 13-Oct-2018.) -/
theorem el2v {ph : setvar → setvar → wff}
  (el2v_1 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) cvv) (wcel (cv y) cvv)) (ph x3 y))
  (x3 y : setvar) : ⊦ ph x3 y :=
@mp2an (wcel (cv x3) cvv) (wcel (cv y) cvv) (ph x3 y)
  (@vex x3)
  (@vex y)
  (el2v_1 x3 y)


/-- If a proposition is implied by ` x e. _V ` and ` y e. _V ` (which is true, see ~ vex ), then it
is true. (Contributed by Peter Mazsa, 13-Oct-2018.) -/
theorem el2v_b {ph : setvar → wff}
  (el2v_1 : ∀ x3, ⊦ wi (wa (wcel (cv x3) cvv) (wcel (cv x3) cvv)) (ph x3))
  (x3 : setvar) : ⊦ ph x3 :=
@mp2an (wcel (cv x3) cvv) (wcel (cv x3) cvv) (ph x3)
  (@vex x3)
  (@vex x3)
  (el2v_1 x3)


/-- The universe contains every set. (Contributed by NM, 11-Sep-2006.) Remove dependency on ~ ax-10
, ~ ax-11 , ~ ax-13 . (Revised by BJ, 10-Aug-2022.) -/
theorem eqv {A2 : «class»} :
  ⊦ wb (wceq A2 cvv) (wal (λ x3, wcel (cv x3) A2)) :=
@bitr4i (wceq A2 cvv) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) cvv))) (wal (λ x3, wcel (cv x3) A2))
  (@dfcleq A2 cvv)
  (@albii (λ x3, wcel (cv x3) A2) (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) cvv))
    (λ x3, @tbt (wcel (cv x3) cvv) (wcel (cv x3) A2)
      (@vex x3)))


/-- Two ways to express that " ` A ` is a set": A class ` A ` is a member of the universal class `
_V ` (see ~ df-v ) if and only if the class ` A ` exists (i.e., there exists some set ` x ` equal to
class ` A ` ). Theorem 6.9 of [Quine] p. 43. A class ` A ` which is not a set is called a _proper
class_. _Conventions_: We will often use the expression " ` A e. _V ` " to mean " ` A ` is a set",
for example in ~ uniex . To make some theorems more readily applicable, we will also use the more
general expression ` A e. V ` instead of ` A e. _V ` to mean " ` A ` is a set", typically in an
antecedent, or in a hypothesis for theorems in deduction form (see for instance ~ uniexg compared
with ~ uniex ). That this is more general is seen either by substitution (when the variable ` V `
has no other occurrences), or by ~ elex . (Contributed by NM, 26-May-1993.) -/
theorem isset {A2 : «class»} :
  ⊦ wb (wcel A2 cvv) (wex (λ x3, wceq (cv x3) A2)) :=
@bitr4i (wcel A2 cvv) (wex (λ x3, wa (wceq (cv x3) A2) (wcel (cv x3) cvv))) (wex (λ x3, wceq (cv x3) A2))
  (@dfclel A2 cvv)
  (@exbii (λ x3, wceq (cv x3) A2) (λ x3, wa (wceq (cv x3) A2) (wcel (cv x3) cvv))
    (λ x3, @biantru (wcel (cv x3) cvv) (wceq (cv x3) A2)
      (@vex x3)))


/-- A version of ~ isset that does not require ` x ` and ` A ` to be distinct. (Contributed by
Andrew Salmon, 6-Jun-2011.) (Revised by Mario Carneiro, 10-Oct-2016.) -/
theorem issetf {A2 : setvar → «class»}
  (issetf_1 : ⊦ wnfc (λ x3, A2 x3))
  (x3 : setvar) : ⊦ wb (wcel (A2 x3) cvv) (wex (λ x3, wceq (cv x3) (A2 x3))) :=
@bitri (wcel (A2 x3) cvv) (wex (λ y, wceq (cv y) (A2 x3))) (wex (λ x3, wceq (cv x3) (A2 x3)))
  (@isset (A2 x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wb (wex (λ y, wceq (cv y) (A2 x3))) (wex (λ x3, wceq (cv x3) (A2 x3))), from
    @cbvexv1 (λ y x3, wceq (cv y) (A2 x3)) (λ y x3, wceq (cv x3) (A2 x3))
      (λ y, @nfeq2 (cv y) (λ x3, A2 x3)
        issetf_1)
      (λ x3, @nfv (wceq (cv x3) (A2 x3)))
      (λ y x3, @eqeq1 (cv y) (cv x3) (A2 x3)) y x3)


/-- A way to say " ` A ` is a set" (inference form). (Contributed by NM, 24-Jun-1993.) Remove
dependencies on axioms. (Revised by BJ, 13-Jul-2019.) -/
theorem isseti {A2 : «class»}
  (isseti_1 : ⊦ wcel A2 cvv) :
  ⊦ wex (λ x3, wceq (cv x3) A2) :=
@ax_mp (wcel A2 cvv) (wex (λ x3, wceq (cv x3) A2))
  isseti_1
  (@elissetv A2 cvv)


/-- A way to say " ` A ` is a set" (inference form). (Contributed by NM, 21-Jun-1993.) -/
theorem issetri {A2 : «class»}
  (issetri_1 : ⊦ wex (λ x3, wceq (cv x3) A2)) :
  ⊦ wcel A2 cvv :=
@mpbir (wcel A2 cvv) (wex (λ x3, wceq (cv x3) A2))
  issetri_1
  (@isset A2)


/-- A class equal to a variable is a set. Note the absence of disjoint variable condition, contrary
to ~ isset and ~ issetri . (Contributed by BJ, 27-Apr-2019.) -/
theorem eqvisset {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (cv x3) (A2 x3)) (wcel (A2 x3) cvv) :=
@mpbii (wceq (cv x3) (A2 x3)) (wcel (cv x3) cvv) (wcel (A2 x3) cvv)
  (@vex x3)
  (@eleq1 (cv x3) (A2 x3) cvv)


/-- If a class is a member of another class, then it is a set. Theorem 6.12 of [Quine] p. 44.
(Contributed by NM, 26-May-1993.) (Proof shortened by Andrew Salmon, 8-Jun-2011.) -/
theorem elex {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wcel A2 cvv) :=
@«3imtr4i» (wex (λ x3, wa (wceq (cv x3) A2) (wcel (cv x3) B2))) (wex (λ x3, wceq (cv x3) A2)) (wcel A2 B2) (wcel A2 cvv)
  (@exsimpl (λ x3, wceq (cv x3) A2) (λ x3, wcel (cv x3) B2))
  (@dfclel A2 B2)
  (@isset A2)


/-- If a class is a member of another class, then it is a set. Inference associated with ~ elex .
(Contributed by NM, 11-Jun-1994.) -/
theorem elexi {A2 B2 : «class»}
  (elexi_1 : ⊦ wcel A2 B2) :
  ⊦ wcel A2 cvv :=
@ax_mp (wcel A2 B2) (wcel A2 cvv)
  elexi_1
  (@elex A2 B2)


/-- If a class is a member of another class, then it is a set. Deduction associated with ~ elex .
(Contributed by Glauco Siliprandi, 11-Oct-2020.) -/
theorem elexd {ph : wff} {A2 V : «class»}
  (elexd_1 : ⊦ wi ph (wcel A2 V)) :
  ⊦ wi ph (wcel A2 cvv) :=
@syl ph (wcel A2 V) (wcel A2 cvv)
  elexd_1
  (@elex A2 V)


/-- A proper class doesn't belong to any class. (Contributed by Glauco Siliprandi, 17-Aug-2020.)
(Proof shortened by AV, 14-Nov-2020.) -/
theorem prcnel {A2 V : «class»} :
  ⊦ wi (wn (wcel A2 cvv)) (wn (wcel A2 V)) :=
@con3i (wcel A2 V) (wcel A2 cvv)
  (@elex A2 V)


/-- An existential quantifier restricted to the universe is unrestricted. (Contributed by NM,
26-Mar-2004.) -/
theorem rexv {ph : setvar → wff} :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, cvv)) (wex (λ x3, ph x3)) :=
@bitr4i (wrex (λ x3, ph x3) (λ x3, cvv)) (wex (λ x3, wa (wcel (cv x3) cvv) (ph x3))) (wex (λ x3, ph x3))
  (@df_rex (λ x3, ph x3) (λ x3, cvv))
  (@exbii (λ x3, ph x3) (λ x3, wa (wcel (cv x3) cvv) (ph x3))
    (λ x3, @biantrur (wcel (cv x3) cvv) (ph x3)
      (@vex x3)))


/-- A class abstraction restricted to the universe is unrestricted. (Contributed by NM,
27-Dec-2004.) (Proof shortened by Andrew Salmon, 8-Jun-2011.) -/
theorem rabab {ph : setvar → wff} :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, cvv)) (cab (λ x3, ph x3)) :=
@eqtr4i (crab (λ x3, ph x3) (λ x3, cvv)) (cab (λ x3, wa (wcel (cv x3) cvv) (ph x3))) (cab (λ x3, ph x3))
  (@df_rab (λ x3, ph x3) (λ x3, cvv))
  (@abbii (λ x3, ph x3) (λ x3, wa (wcel (cv x3) cvv) (ph x3))
    (λ x3, @biantrur (wcel (cv x3) cvv) (ph x3)
      (@vex x3)))


/-- Closed theorem version of ~ ceqsalg . (Contributed by NM, 28-Feb-2013.) (Revised by Mario
Carneiro, 10-Oct-2016.) -/
theorem ceqsalt {ph ps : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (w3a (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3))) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (ps x3)) :=
@impbid (w3a (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (ps x3)
  (@mpid (w3a (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wex (λ x3, wceq (cv x3) A2)) (ps x3)
    (@«3ad2ant3» (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wex (λ x3, wceq (cv x3) A2)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))
      (@elisset A2 (λ x3, V x3) x3))
    (@sylibd (w3a (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ps x3))) (wi (wex (λ x3, wceq (cv x3) A2)) (ps x3))
      (@«3ad2ant2» (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wnf (λ x3, ps x3)) (wi (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ps x3)))) (wcel A2 (V x3))
        (@al2imi (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, wi (wceq (cv x3) A2) (ps x3))
          (λ x3, @imim3i (wb (ph x3) (ps x3)) (ph x3) (ps x3) (wceq (cv x3) A2)
            (@biimp (ph x3) (ps x3)))))
      (@«3ad2ant1» (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ps x3))) (wi (wex (λ x3, wceq (cv x3) A2)) (ps x3))) (wcel A2 (V x3))
        (@«19_23t» (λ x3, wceq (cv x3) A2) (λ x3, ps x3) x3))))
  (@mpbid (w3a (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3))) (wal (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))) (wi (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))))
    (@«3ad2ant2» (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wnf (λ x3, ps x3)) (wal (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))) (wcel A2 (V x3))
      (@alimi (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))
        (λ x3, @com23 (wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (wceq (cv x3) A2) (ps x3) (ph x3)
          (@imim2i (wb (ph x3) (ps x3)) (wi (ps x3) (ph x3)) (wceq (cv x3) A2)
            (@biimpr (ph x3) (ps x3))))))
    (@«3ad2ant1» (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wb (wal (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))) (wi (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))))) (wcel A2 (V x3))
      (@«19_21t» (λ x3, ps x3) (λ x3, wi (wceq (cv x3) A2) (ph x3)) x3)))


/-- A representation of explicit substitution of a class for a variable, inferred from an implicit
substitution hypothesis. For an alternate proof, see ~ ceqsalgALT . (Contributed by NM,
29-Oct-2003.) (Proof shortened by BJ, 29-Sep-2019.) -/
theorem ceqsalg {ph ps : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (ceqsalg_1 : ⊦ wnf (λ x3, ps x3))
  (ceqsalg_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (ps x3)) :=
@mp3an12 (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wcel A2 (V x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (ps x3))
  ceqsalg_1
  (@ax_gen (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
    (λ x3, ceqsalg_2 x3))
  (@ceqsalt (λ x3, ph x3) (λ x3, ps x3) A2 (λ x3, V x3) x3)


/-- A representation of explicit substitution of a class for a variable, inferred from an implicit
substitution hypothesis. (Contributed by NM, 18-Aug-1993.) Avoid ~ ax-12 . (Revised by SN,
8-Sep-2024.) -/
theorem ceqsalv {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (ceqsalv_1 : ⊦ wcel A2 cvv)
  (ceqsalv_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) ps :=
@«3bitri» (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) ps)) (wi (wex (λ x3, wceq (cv x3) A2)) ps) ps
  (@albii (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, wi (wceq (cv x3) A2) ps)
    (λ x3, @pm5_74i (wceq (cv x3) A2) (ph x3) ps
      (ceqsalv_2 x3)))
  (@«19_23v» (λ x3, wceq (cv x3) A2) ps)
  (@ax_mp (wex (λ x3, wceq (cv x3) A2)) (wb (wi (wex (λ x3, wceq (cv x3) A2)) ps) ps)
    (@isseti A2
      ceqsalv_1)
    (@pm5_5 (wex (λ x3, wceq (cv x3) A2)) ps))


/-- Restricted quantifier version of ~ ceqsalv . (Contributed by NM, 21-Jun-2013.) Avoid ~ ax-9 , ~
ax-12 , ~ ax-ext . (Revised by SN, 8-Sep-2024.) -/
theorem ceqsralv {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (ceqsralv_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wcel A2 B2) (wb (wral (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, B2)) ps) :=
@syl5bb (wral (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, B2)) (wral (λ x3, wi (wceq (cv x3) A2) ps) (λ x3, B2)) (wcel A2 B2) ps
  (@ralbii (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, wi (wceq (cv x3) A2) ps) (λ x3, B2)
    (λ x3, @pm5_74i (wceq (cv x3) A2) (ph x3) ps
      (ceqsralv_2 x3)))
  (@syl5bb (wral (λ x3, wi (wceq (cv x3) A2) ps) (λ x3, B2)) (wi (wrex (λ x3, wceq (cv x3) A2) (λ x3, B2)) ps) (wcel A2 B2) ps
    (@r19_23v (λ x3, wceq (cv x3) A2) ps (λ x3, B2))
    (@sylbi (wcel A2 B2) (wrex (λ x3, wceq (cv x3) A2) (λ x3, B2)) (wb (wi (wrex (λ x3, wceq (cv x3) A2) (λ x3, B2)) ps) ps)
      (@risset A2 B2)
      (@pm5_5 (wrex (λ x3, wceq (cv x3) A2) (λ x3, B2)) ps)))


/-- Implicit substitution for class with embedded variable. (Contributed by NM, 17-May-1996.) -/
theorem gencl {ph : setvar → wff} {ps : wff} {ch th : setvar → wff} {A2 B2 : setvar → «class»}
  (gencl_1 : ∀ x3, ⊦ wb (th x3) (wex (λ x3, wa (ch x3) (wceq (A2 x3) (B2 x3)))))
  (gencl_2 : ∀ x3, ⊦ wi (wceq (A2 x3) (B2 x3)) (wb (ph x3) ps))
  (gencl_3 : ∀ x3, ⊦ wi (ch x3) (ph x3))
  (x3 : setvar) : ⊦ wi (th x3) ps :=
@sylbi (th x3) (wex (λ x3, wa (ch x3) (wceq (A2 x3) (B2 x3)))) ps
  (gencl_1 x3)
  (@exlimiv (λ x3, wa (ch x3) (wceq (A2 x3) (B2 x3))) ps
    (λ x3, @impcom (wceq (A2 x3) (B2 x3)) (ch x3) ps
      (@syl5ib (ch x3) (ph x3) (wceq (A2 x3) (B2 x3)) ps
        (gencl_3 x3)
        (gencl_2 x3))))


/-- Implicit substitution for class with embedded variable. (Contributed by NM, 17-May-1996.) -/
theorem «2gencl» {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 B2 : setvar → setvar → «class»} {C : setvar → «class»} {D : setvar → setvar → «class»} {R S : setvar → «class»}
  («2gencl_1» : ∀ x3 y, ⊦ wb (wcel (C x3) (S x3)) (wrex (λ x3, wceq (A2 x3 y) (C x3)) (λ x3, R y)))
  («2gencl_2» : ∀ x3 y, ⊦ wb (wcel (D x3 y) (S x3)) (wrex (λ y, wceq (B2 x3 y) (D x3 y)) (λ y, R y)))
  («2gencl_3» : ∀ x3 y, ⊦ wi (wceq (A2 x3 y) (C x3)) (wb (ph x3 y) (ps y)))
  («2gencl_4» : ∀ x3 y, ⊦ wi (wceq (B2 x3 y) (D x3 y)) (wb (ps y) (ch x3)))
  («2gencl_5» : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) (R y)) (wcel (cv y) (R y))) (ph x3 y))
  (x3 y : setvar) : ⊦ wi (wa (wcel (C x3) (S x3)) (wcel (D x3 y) (S x3))) (ch x3) :=
@impcom (wcel (D x3 y) (S x3)) (wcel (C x3) (S x3)) (ch x3)
  (@gencl (λ y, wi (wcel (C x3) (S x3)) (ps y)) (wi (wcel (C x3) (S x3)) (ch x3)) (λ y, wcel (cv y) (R y)) (λ y, wcel (D x3 y) (S x3)) (λ y, B2 x3 y) (λ y, D x3 y)
    (λ y, @bitri (wcel (D x3 y) (S x3)) (wrex (λ y, wceq (B2 x3 y) (D x3 y)) (λ y, R y)) (wex (λ y, wa (wcel (cv y) (R y)) (wceq (B2 x3 y) (D x3 y))))
      («2gencl_2» x3 y)
      (@df_rex (λ y, wceq (B2 x3 y) (D x3 y)) (λ y, R y)))
    (λ y, @imbi2d (wceq (B2 x3 y) (D x3 y)) (ps y) (ch x3) (wcel (C x3) (S x3))
      («2gencl_4» x3 y))
    (λ y, @com12 (wcel (C x3) (S x3)) (wcel (cv y) (R y)) (ps y)
      (@gencl (λ x3, wi (wcel (cv y) (R y)) (ph x3 y)) (wi (wcel (cv y) (R y)) (ps y)) (λ x3, wcel (cv x3) (R y)) (λ x3, wcel (C x3) (S x3)) (λ x3, A2 x3 y) (λ x3, C x3)
        (λ x3, @bitri (wcel (C x3) (S x3)) (wrex (λ x3, wceq (A2 x3 y) (C x3)) (λ x3, R y)) (wex (λ x3, wa (wcel (cv x3) (R y)) (wceq (A2 x3 y) (C x3))))
          («2gencl_1» x3 y)
          (@df_rex (λ x3, wceq (A2 x3 y) (C x3)) (λ x3, R y)))
        (λ x3, @imbi2d (wceq (A2 x3 y) (C x3)) (ph x3 y) (ps y) (wcel (cv y) (R y))
          («2gencl_3» x3 y))
        (λ x3, @ex (wcel (cv x3) (R y)) (wcel (cv y) (R y)) (ph x3 y)
          («2gencl_5» x3 y)) x3)) y)


/-- Implicit substitution for class with embedded variable. (Contributed by NM, 17-May-1996.) -/
theorem «3gencl» {ph : setvar → setvar → setvar → wff} {ps ch th : setvar → setvar → wff} {A2 B2 C : setvar → setvar → setvar → «class»} {D R S : setvar → «class»} {F : setvar → setvar → «class»} {G : setvar → setvar → setvar → «class»}
  («3gencl_1» : ∀ x3 y z, ⊦ wb (wcel (D x3) (S x3)) (wrex (λ x3, wceq (A2 x3 y z) (D x3)) (λ x3, R z)))
  («3gencl_2» : ∀ x3 y z, ⊦ wb (wcel (F x3 y) (S x3)) (wrex (λ y, wceq (B2 x3 y z) (F x3 y)) (λ y, R z)))
  («3gencl_3» : ∀ x3 y z, ⊦ wb (wcel (G x3 y z) (S x3)) (wrex (λ z, wceq (C x3 y z) (G x3 y z)) (λ z, R z)))
  («3gencl_4» : ∀ x3 y z, ⊦ wi (wceq (A2 x3 y z) (D x3)) (wb (ph x3 y z) (ps y z)))
  («3gencl_5» : ∀ x3 y z, ⊦ wi (wceq (B2 x3 y z) (F x3 y)) (wb (ps y z) (ch x3 z)))
  («3gencl_6» : ∀ x3 y z, ⊦ wi (wceq (C x3 y z) (G x3 y z)) (wb (ch x3 z) (th x3 y)))
  («3gencl_7» : ∀ x3 y z, ⊦ wi (w3a (wcel (cv x3) (R z)) (wcel (cv y) (R z)) (wcel (cv z) (R z))) (ph x3 y z))
  (x3 y z : setvar) : ⊦ wi (w3a (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3)) (wcel (G x3 y z) (S x3))) (th x3 y) :=
@«3impia» (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3)) (wcel (G x3 y z) (S x3)) (th x3 y)
  (@com12 (wcel (G x3 y z) (S x3)) (wa (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3))) (th x3 y)
    (@gencl (λ z, wi (wa (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3))) (ch x3 z)) (wi (wa (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3))) (th x3 y)) (λ z, wcel (cv z) (R z)) (λ z, wcel (G x3 y z) (S x3)) (λ z, C x3 y z) (λ z, G x3 y z)
      (λ z, @bitri (wcel (G x3 y z) (S x3)) (wrex (λ z, wceq (C x3 y z) (G x3 y z)) (λ z, R z)) (wex (λ z, wa (wcel (cv z) (R z)) (wceq (C x3 y z) (G x3 y z))))
        («3gencl_3» x3 y z)
        (@df_rex (λ z, wceq (C x3 y z) (G x3 y z)) (λ z, R z)))
      (λ z, @imbi2d (wceq (C x3 y z) (G x3 y z)) (ch x3 z) (th x3 y) (wa (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3)))
        («3gencl_6» x3 y z))
      (λ z, @com12 (wa (wcel (D x3) (S x3)) (wcel (F x3 y) (S x3))) (wcel (cv z) (R z)) (ch x3 z)
        (@«2gencl» (λ x3 y, wi (wcel (cv z) (R z)) (ph x3 y z)) (λ y, wi (wcel (cv z) (R z)) (ps y z)) (λ x3, wi (wcel (cv z) (R z)) (ch x3 z)) (λ x3 y, A2 x3 y z) (λ x3 y, B2 x3 y z) (λ x3, D x3) (λ x3 y, F x3 y) (λ y, R z) (λ x3, S x3)
          (λ x3 y, «3gencl_1» x3 y z)
          (λ x3 y, «3gencl_2» x3 y z)
          (λ x3 y, @imbi2d (wceq (A2 x3 y z) (D x3)) (ph x3 y z) (ps y z) (wcel (cv z) (R z))
            («3gencl_4» x3 y z))
          (λ x3 y, @imbi2d (wceq (B2 x3 y z) (F x3 y)) (ps y z) (ch x3 z) (wcel (cv z) (R z))
            («3gencl_5» x3 y z))
          (λ x3 y, @«3expia» (wcel (cv x3) (R z)) (wcel (cv y) (R z)) (wcel (cv z) (R z)) (ph x3 y z)
            («3gencl_7» x3 y z)) x3 y)) z))


/-- Implicit substitution inference for general classes. (Contributed by NM, 26-Aug-2007.) -/
theorem cgsexg {ph : setvar → wff} {ps : wff} {ch : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (cgsexg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (ch x3))
  (cgsexg_2 : ∀ x3, ⊦ wi (ch x3) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wex (λ x3, wa (ch x3) (ph x3))) ps) :=
@impbid2 (wcel A2 (V x3)) (wex (λ x3, wa (ch x3) (ph x3))) ps
  (@exlimiv (λ x3, wa (ch x3) (ph x3)) ps
    (λ x3, @biimpa (ch x3) (ph x3) ps
      (cgsexg_2 x3)))
  (@syl5com (wcel A2 (V x3)) (wex (λ x3, ch x3)) ps (wex (λ x3, wa (ch x3) (ph x3)))
    (@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) (wex (λ x3, ch x3))
      (@elisset A2 (λ x3, V x3) x3)
      (@eximi (λ x3, wceq (cv x3) A2) (λ x3, ch x3)
        (λ x3, cgsexg_1 x3)))
    (@eximdv ps (λ x3, ch x3) (λ x3, wa (ch x3) (ph x3))
      (λ x3, @ancld ps (ch x3) (ph x3)
        (@biimprcd (ch x3) (ph x3) ps
          (cgsexg_2 x3)))))


/-- Implicit substitution inference for general classes. (Contributed by NM, 26-Jul-1995.) -/
theorem cgsex2g {ph : setvar → setvar → wff} {ps : wff} {ch : setvar → setvar → wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (cgsex2g_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ch x3 y))
  (cgsex2g_2 : ∀ x3 y, ⊦ wi (ch x3 y) (wb (ph x3 y) ps))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wb (wex (λ x3, wex (λ y, wa (ch x3 y) (ph x3 y)))) ps) :=
@impbid2 (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wex (λ x3, wex (λ y, wa (ch x3 y) (ph x3 y)))) ps
  (@exlimivv (λ x3 y, wa (ch x3 y) (ph x3 y)) ps
    (λ x3 y, @biimpa (ch x3 y) (ph x3 y) ps
      (cgsex2g_2 x3 y)))
  (@syl5com (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wex (λ x3, wex (λ y, ch x3 y))) ps (wex (λ x3, wex (λ y, wa (ch x3 y) (ph x3 y))))
    (@syl (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2)))) (wex (λ x3, wex (λ y, ch x3 y)))
      (@sylibr (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wa (wex (λ x3, wceq (cv x3) A2)) (wex (λ y, wceq (cv y) B2))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2))))
        (@anim12i (wcel A2 (V x3 y)) (wex (λ x3, wceq (cv x3) A2)) (wcel B2 (W x3 y)) (wex (λ y, wceq (cv y) B2))
          (@elisset A2 (λ x3, V x3 y) x3)
          (@elisset B2 (λ y, W x3 y) y))
        (@exdistrv (λ x3, wceq (cv x3) A2) (λ y, wceq (cv y) B2)))
      (@«2eximi» (λ x3 y, wa (wceq (cv x3) A2) (wceq (cv y) B2)) (λ x3 y, ch x3 y)
        (λ x3 y, cgsex2g_1 x3 y)))
    (@«2eximdv» ps (λ x3 y, ch x3 y) (λ x3 y, wa (ch x3 y) (ph x3 y))
      (λ x3 y, @ancld ps (ch x3 y) (ph x3 y)
        (@biimprcd (ch x3 y) (ph x3 y) ps
          (cgsex2g_2 x3 y)))))


/-- An implicit substitution inference for 4 general classes. (Contributed by NM, 5-Aug-1995.) Avoid
~ ax-10 , ~ ax-11 . (Revised by Gino Giotto, 28-Jun-2024.) -/
theorem cgsex4g {ph : setvar → setvar → setvar → setvar → wff} {ps : wff} {ch : setvar → setvar → setvar → setvar → wff} {A2 B2 C D : «class»} {R S : setvar → setvar → setvar → setvar → «class»}
  (cgsex4g_1 : ∀ x3 y z w, ⊦ wi (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ch x3 y z w))
  (cgsex4g_2 : ∀ x3 y z w, ⊦ wi (ch x3 y z w) (wb (ph x3 y z w) ps))
  (x3 y z w : setvar) : ⊦ wi (wa (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w)))) (wb (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (ch x3 y z w) (ph x3 y z w)))))) ps) :=
@impbid2 (wa (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w)))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (ch x3 y z w) (ph x3 y z w)))))) ps
  (@exlimivv (λ x3 y, wex (λ z, wex (λ w, wa (ch x3 y z w) (ph x3 y z w)))) ps
    (λ x3 y, @exlimivv (λ z w, wa (ch x3 y z w) (ph x3 y z w)) ps
      (λ z w, @biimpa (ch x3 y z w) (ph x3 y z w) ps
        (cgsex4g_2 x3 y z w))))
  (@syl5com (wa (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w)))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, ch x3 y z w))))) ps (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (ch x3 y z w) (ph x3 y z w))))))
    (@syl (wa (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w)))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, ch x3 y z w)))))
      (@sylibr (wa (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w)))) (wa (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2)))) (wex (λ z, wex (λ w, wa (wceq (cv z) C) (wceq (cv w) D))))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))
        (@anim12i (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2)))) (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w))) (wex (λ z, wex (λ w, wa (wceq (cv z) C) (wceq (cv w) D))))
          (@sylibr (wa (wcel A2 (R x3 y z w)) (wcel B2 (S x3 y z w))) (wa (wex (λ x3, wceq (cv x3) A2)) (wex (λ y, wceq (cv y) B2))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2))))
            (@anim12i (wcel A2 (R x3 y z w)) (wex (λ x3, wceq (cv x3) A2)) (wcel B2 (S x3 y z w)) (wex (λ y, wceq (cv y) B2))
              (@elisset A2 (λ x3, R x3 y z w) x3)
              (@elisset B2 (λ y, S x3 y z w) y))
            (@exdistrv (λ x3, wceq (cv x3) A2) (λ y, wceq (cv y) B2)))
          (@sylibr (wa (wcel C (R x3 y z w)) (wcel D (S x3 y z w))) (wa (wex (λ z, wceq (cv z) C)) (wex (λ w, wceq (cv w) D))) (wex (λ z, wex (λ w, wa (wceq (cv z) C) (wceq (cv w) D))))
            (@anim12i (wcel C (R x3 y z w)) (wex (λ z, wceq (cv z) C)) (wcel D (S x3 y z w)) (wex (λ w, wceq (cv w) D))
              (@elisset C (λ z, R x3 y z w) z)
              (@elisset D (λ w, S x3 y z w) w))
            (@exdistrv (λ z, wceq (cv z) C) (λ w, wceq (cv w) D))))
        (@bitri (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))) (wex (λ x3, wex (λ z, wex (λ y, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))) (wa (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2)))) (wex (λ z, wex (λ w, wa (wceq (cv z) C) (wceq (cv w) D)))))
          (@exbii (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))) (λ x3, wex (λ z, wex (λ y, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))
            (λ x3, @«3bitr4i» (wn (wal (λ y, wal (λ z, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))) (wn (wal (λ z, wal (λ y, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))) (wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))) (wex (λ z, wex (λ y, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))
              (@notbii (wal (λ y, wal (λ z, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))) (wal (λ z, wal (λ y, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))
                (@impbii (wal (λ y, wal (λ z, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))))) (wal (λ z, wal (λ y, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))
                  (@alcomiw (λ y z, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))) (λ y v, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv v) C) (wceq (cv w) D)))))
                    (λ y z v, @notbid (wceq (cv z) (cv v)) (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))) (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv v) C) (wceq (cv w) D))))
                      (@exbidv (wceq (cv z) (cv v)) (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv v) C) (wceq (cv w) D)))
                        (λ w, @anbi2d (wceq (cv z) (cv v)) (wa (wceq (cv z) C) (wceq (cv w) D)) (wa (wceq (cv v) C) (wceq (cv w) D)) (wa (wceq (cv x3) A2) (wceq (cv y) B2))
                          (@anbi1d (wceq (cv z) (cv v)) (wceq (cv z) C) (wceq (cv v) C) (wceq (cv w) D)
                            (@eqeq1 (cv z) (cv v) C))))))
                  (@alcomiw (λ z y, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))) (λ z v, wn (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv v) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))
                    (λ z y v, @notbid (wceq (cv y) (cv v)) (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))) (wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv v) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))
                      (@exbidv (wceq (cv y) (cv v)) (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv v) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))
                        (λ w, @anbi1d (wceq (cv y) (cv v)) (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv x3) A2) (wceq (cv v) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))
                          (@anbi2d (wceq (cv y) (cv v)) (wceq (cv y) B2) (wceq (cv v) B2) (wceq (cv x3) A2)
                            (@eqeq1 (cv y) (cv v) B2))))))))
              (@«2exnaln» (λ y z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))
              (@«2exnaln» (λ z y, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D)))))))
          (@«4exdistrv» (λ x3 y, wa (wceq (cv x3) A2) (wceq (cv y) B2)) (λ z w, wa (wceq (cv z) C) (wceq (cv w) D)))))
      (@«2eximi» (λ x3 y, wex (λ z, wex (λ w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))) (λ x3 y, wex (λ z, wex (λ w, ch x3 y z w)))
        (λ x3 y, @«2eximi» (λ z w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (λ z w, ch x3 y z w)
          (λ z w, cgsex4g_1 x3 y z w))))
    (@«2eximdv» ps (λ x3 y, wex (λ z, wex (λ w, ch x3 y z w))) (λ x3 y, wex (λ z, wex (λ w, wa (ch x3 y z w) (ph x3 y z w))))
      (λ x3 y, @«2eximdv» ps (λ z w, ch x3 y z w) (λ z w, wa (ch x3 y z w) (ph x3 y z w))
        (λ z w, @ancld ps (ch x3 y z w) (ph x3 y z w)
          (@biimprcd (ch x3 y z w) (ph x3 y z w) ps
            (cgsex4g_2 x3 y z w))))))


/-- Elimination of an existential quantifier, using implicit substitution. (Contributed by NM,
2-Mar-1995.) (Revised by Mario Carneiro, 10-Oct-2016.) -/
theorem ceqsex {ph ps : setvar → wff} {A2 : «class»}
  (ceqsex_1 : ⊦ wnf (λ x3, ps x3))
  (ceqsex_2 : ⊦ wcel A2 cvv)
  (ceqsex_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wb (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (ps x3) :=
@impbii (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (ps x3)
  (@exlimi (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, ps x3)
    ceqsex_1
    (λ x3, @biimpa (wceq (cv x3) A2) (ph x3) (ps x3)
      (ceqsex_3 x3)) x3)
  (@mpisyl (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wex (λ x3, wceq (cv x3) A2)) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3)))
    (@alrimi (λ x3, ps x3) (λ x3, wi (wceq (cv x3) A2) (ph x3))
      ceqsex_1
      (λ x3, @biimprcd (wceq (cv x3) A2) (ph x3) (ps x3)
        (ceqsex_3 x3)) x3)
    (@isseti A2
      ceqsex_2)
    (@exintr (λ x3, wceq (cv x3) A2) (λ x3, ph x3)))


/-- Elimination of an existential quantifier, using implicit substitution. (Contributed by NM,
2-Mar-1995.) -/
theorem ceqsexv {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (ceqsexv_1 : ⊦ wcel A2 cvv)
  (ceqsexv_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) ps :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wb (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) ps, from
  @ceqsex (λ x3, ph x3) (λ x3, ps) A2
    (@nfv ps)
    ceqsexv_1
    (λ x3, ceqsexv_2 x3) x3


/-- Elimination of an existential quantifier, using implicit substitution. (Contributed by Thierry
Arnoux, 10-Sep-2016.) -/
theorem ceqsexv2d {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (ceqsexv2d_1 : ⊦ wcel A2 cvv)
  (ceqsexv2d_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ceqsexv2d_3 : ⊦ ps) :
  ⊦ wex (λ x3, ph x3) :=
@mp2b ps (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (wex (λ x3, ph x3))
  ceqsexv2d_3
  (@biimpri (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) ps
    (@ceqsexv (λ x3, ph x3) ps A2
      ceqsexv2d_1
      (λ x3, ceqsexv2d_2 x3)))
  (@exsimpr (λ x3, wceq (cv x3) A2) (λ x3, ph x3))


/-- Introduce an explicit substitution into an implicit substitution hypothesis. See also ~ csbhypf
. (Contributed by Raph Levien, 10-Apr-2004.) -/
theorem sbhypf {ph ps : setvar → setvar → wff} {A2 : setvar → «class»}
  (sbhypf_1 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (sbhypf_2 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wi (wceq (cv y) (A2 y)) (wb (wsb (λ x3, ph x3 y) y) (ps x3 y)) :=
@sylbir (wceq (cv y) (A2 y)) (wex (λ x3, wa (wceq (cv x3) (cv y)) (wceq (cv x3) (A2 y)))) (wb (wsb (λ x3, ph x3 y) y) (ps x3 y))
  (@equsexvw (λ x3 y, wceq (cv x3) (A2 y)) (λ y, wceq (cv y) (A2 y))
    (λ x3 y, @eqeq1 (cv x3) (cv y) (A2 y)) y)
  (@exlimi (λ x3, wa (wceq (cv x3) (cv y)) (wceq (cv x3) (A2 y))) (λ x3, wb (wsb (λ x3, ph x3 y) y) (ps x3 y))
    (@nfbi (λ x3, wsb (λ x3, ph x3 y) y) (λ x3, ps x3 y)
      (@nfs1v (λ x3 y, ph x3 y) y)
      (sbhypf_1 y))
    (λ x3, @sylan9bb (wceq (cv x3) (cv y)) (wsb (λ x3, ph x3 y) y) (ph x3 y) (wceq (cv x3) (A2 y)) (ps x3 y)
      (@bicomd (wceq (cv x3) (cv y)) (ph x3 y) (wsb (λ x3, ph x3 y) y)
        (@sbequ12 (λ x3 y, ph x3 y) x3 y))
      (sbhypf_2 x3 y)) x3)


/-- Closed theorem form of ~ vtoclgf . (Contributed by NM, 17-Feb-2013.) (Revised by Mario Carneiro,
12-Oct-2016.) (Proof shortened by JJ, 11-Aug-2021.) Avoid ~ ax-13 . (Revised by Gino Giotto,
6-Oct-2023.) -/
theorem vtoclgft {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (w3a (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wcel (A2 x3) (V x3))) (ps x3) :=
@mpd (w3a (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wcel (A2 x3) (V x3))) (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3)
  (@«3impia» (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wcel (A2 x3) (V x3)) (wex (λ x3, wceq (cv x3) (A2 x3)))
    (@ad2antrr (wnfc (λ x3, A2 x3)) (wi (wcel (A2 x3) (V x3)) (wex (λ x3, wceq (cv x3) (A2 x3)))) (wnf (λ x3, ps x3)) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3)))
      (@syl5ib (wcel (A2 x3) (V x3)) (wex (λ z, wceq (cv z) (A2 x3))) (wnfc (λ x3, A2 x3)) (wex (λ x3, wceq (cv x3) (A2 x3)))
        (setvar.forget $ λ z : setvar,
          show ⊦ wi (wcel (A2 x3) (V x3)) (wex (λ z, wceq (cv z) (A2 x3))), from
          @elisset (A2 x3) (λ z, V x3) z)
        (@con4bid (wnfc (λ x3, A2 x3)) (wex (λ z, wceq (cv z) (A2 x3))) (wex (λ x3, wceq (cv x3) (A2 x3)))
          (@«3bitr3g» (wnfc (λ x3, A2 x3)) (wal (λ z, wn (wceq (cv z) (A2 x3)))) (wal (λ x3, wn (wceq (cv x3) (A2 x3)))) (wn (wex (λ z, wceq (cv z) (A2 x3)))) (wn (wex (λ x3, wceq (cv x3) (A2 x3))))
            (@impbid (wnfc (λ x3, A2 x3)) (wal (λ z, wn (wceq (cv z) (A2 x3)))) (wal (λ x3, wn (wceq (cv x3) (A2 x3))))
              (setvar.forget $ λ z : setvar,
                show ⊦ wi (wnfc (λ x3, A2 x3)) (wi (wal (λ z, wn (wceq (cv z) (A2 x3)))) (wal (λ x3, wn (wceq (cv x3) (A2 x3))))), from
                @cbv1v (λ z x3, wnfc (λ x3, A2 x3)) (λ z x3, wn (wceq (cv z) (A2 x3))) (λ z x3, wn (wceq (cv x3) (A2 x3)))
                  (λ x3, @nfv (wnfc (λ x3, A2 x3)))
                  (λ z, @nfnfc1 (λ x3, A2 x3))
                  (λ z x3, setvar.forget $ λ x3 : setvar,
                    show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ x3, wn (wceq (cv z) (A2 x3)))), from
                    @nfnd (λ x3, wnfc (λ x3, A2 x3)) (λ x3, wceq (cv z) (A2 x3))
                      (λ x3, setvar.forget $ λ x3 : setvar,
                        show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ x3, wceq (cv z) (A2 x3))), from
                        @nfeqd (λ x3, wnfc (λ x3, A2 x3)) (λ x3, cv z) (λ x3, A2 x3)
                          (λ x3, setvar.forget $ λ x3 : setvar,
                            show ⊦ wi (wnfc (λ x3, A2 x3)) (wnfc (λ x3, cv z)), from
                            @nfcvd (λ x3, wnfc (λ x3, A2 x3)) (cv z) x3)
                          (λ x3, @id (wnfc (λ x3, A2 x3))) x3) x3)
                  (λ z x3, setvar.forget $ λ z : setvar,
                    show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ z, wn (wceq (cv x3) (A2 x3)))), from
                    @nfvd (λ z, wnfc (λ x3, A2 x3)) (wn (wceq (cv x3) (A2 x3))) z)
                  (λ z x3, @syl6 (wnfc (λ x3, A2 x3)) (wceq (cv z) (cv x3)) (wb (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3)))) (wi (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3))))
                    (@syl6ib (wnfc (λ x3, A2 x3)) (wceq (cv z) (cv x3)) (wb (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3))) (wb (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3))))
                      (@a1i (wi (wceq (cv z) (cv x3)) (wb (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3)))) (wnfc (λ x3, A2 x3))
                        (@eqeq1 (cv z) (cv x3) (A2 x3)))
                      (@notbi (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3))))
                    (@biimp (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3))))) z x3)
              (setvar.forget $ λ z : setvar,
                show ⊦ wi (wnfc (λ x3, A2 x3)) (wi (wal (λ x3, wn (wceq (cv x3) (A2 x3)))) (wal (λ z, wn (wceq (cv z) (A2 x3))))), from
                @cbv1v (λ x3 z, wnfc (λ x3, A2 x3)) (λ x3 z, wn (wceq (cv x3) (A2 x3))) (λ x3 z, wn (wceq (cv z) (A2 x3)))
                  (λ z, @nfnfc1 (λ x3, A2 x3))
                  (λ x3, @nfv (wnfc (λ x3, A2 x3)))
                  (λ x3 z, setvar.forget $ λ z : setvar,
                    show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ z, wn (wceq (cv x3) (A2 x3)))), from
                    @nfvd (λ z, wnfc (λ x3, A2 x3)) (wn (wceq (cv x3) (A2 x3))) z)
                  (λ x3 z, setvar.forget $ λ x3 : setvar,
                    show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ x3, wn (wceq (cv z) (A2 x3)))), from
                    @nfnd (λ x3, wnfc (λ x3, A2 x3)) (λ x3, wceq (cv z) (A2 x3))
                      (λ x3, setvar.forget $ λ x3 : setvar,
                        show ⊦ wi (wnfc (λ x3, A2 x3)) (wnf (λ x3, wceq (cv z) (A2 x3))), from
                        @nfeqd (λ x3, wnfc (λ x3, A2 x3)) (λ x3, cv z) (λ x3, A2 x3)
                          (λ x3, setvar.forget $ λ x3 : setvar,
                            show ⊦ wi (wnfc (λ x3, A2 x3)) (wnfc (λ x3, cv z)), from
                            @nfcvd (λ x3, wnfc (λ x3, A2 x3)) (cv z) x3)
                          (λ x3, @id (wnfc (λ x3, A2 x3))) x3) x3)
                  (λ x3 z, @syl56 (wceq (cv x3) (cv z)) (wceq (cv z) (cv x3)) (wnfc (λ x3, A2 x3)) (wb (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3)))) (wi (wn (wceq (cv x3) (A2 x3))) (wn (wceq (cv z) (A2 x3))))
                    (@equcomi x3 z)
                    (@syl6ib (wnfc (λ x3, A2 x3)) (wceq (cv z) (cv x3)) (wb (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3))) (wb (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3))))
                      (@a1i (wi (wceq (cv z) (cv x3)) (wb (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3)))) (wnfc (λ x3, A2 x3))
                        (@eqeq1 (cv z) (cv x3) (A2 x3)))
                      (@notbi (wceq (cv z) (A2 x3)) (wceq (cv x3) (A2 x3))))
                    (@biimpr (wn (wceq (cv z) (A2 x3))) (wn (wceq (cv x3) (A2 x3))))) x3 z))
            (@alnex (λ z, wceq (cv z) (A2 x3)))
            (@alnex (λ x3, wceq (cv x3) (A2 x3))))))))
  (@«3adant3» (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wi (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3)) (wcel (A2 x3) (V x3))
    (@imp (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wi (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3))
      (@syl5ib (wa (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, ph x3))) (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (ps x3))) (wa (wnfc (λ x3, A2 x3)) (wnf (λ x3, ps x3))) (wi (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3))
        (@alanimi (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) (λ x3, ph x3) (λ x3, wi (wceq (cv x3) (A2 x3)) (ps x3))
          (λ x3, @imp (wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) (ph x3) (wi (wceq (cv x3) (A2 x3)) (ps x3))
            (@com23 (wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) (wceq (cv x3) (A2 x3)) (ph x3) (ps x3)
              (@imim2i (wb (ph x3) (ps x3)) (wi (ph x3) (ps x3)) (wceq (cv x3) (A2 x3))
                (@biimp (ph x3) (ps x3))))))
        (@adantl (wnf (λ x3, ps x3)) (wb (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (ps x3))) (wi (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3))) (wnfc (λ x3, A2 x3))
          (@«19_23t» (λ x3, wceq (cv x3) (A2 x3)) (λ x3, ps x3) x3)))))


/-- Implicit substitution of a class for a setvar variable. (Contributed by Mario Carneiro,
15-Oct-2016.) -/
theorem vtocldf {ph ps ch : setvar → wff} {A2 V : setvar → «class»}
  (vtocld_1 : ∀ x3, ⊦ wi (ph x3) (wcel (A2 x3) (V x3)))
  (vtocld_2 : ∀ x3, ⊦ wi (wa (ph x3) (wceq (cv x3) (A2 x3))) (wb (ps x3) (ch x3)))
  (vtocld_3 : ∀ x3, ⊦ wi (ph x3) (ps x3))
  (vtocldf_4 : ⊦ wnf (λ x3, ph x3))
  (vtocldf_5 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (vtocldf_6 : ∀ x3, ⊦ wi (ph x3) (wnf (λ x3, ch x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (ch x3) :=
@syl221anc (ph x3) (wnfc (λ x3, A2 x3)) (wnf (λ x3, ch x3)) (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ps x3) (ch x3)))) (wal (λ x3, ps x3)) (wcel (A2 x3) (V x3)) (ch x3)
  (vtocldf_5 x3)
  (vtocldf_6 x3)
  (@alrimi (λ x3, ph x3) (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ps x3) (ch x3)))
    vtocldf_4
    (λ x3, @ex (ph x3) (wceq (cv x3) (A2 x3)) (wb (ps x3) (ch x3))
      (vtocld_2 x3)) x3)
  (@alrimi (λ x3, ph x3) (λ x3, ps x3)
    vtocldf_4
    (λ x3, vtocld_3 x3) x3)
  (vtocld_1 x3)
  (@vtoclgft (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3) (λ x3, V x3) x3)


/-- Implicit substitution of a class for a setvar variable. This is a generalization of ~ chvar .
(Contributed by NM, 30-Aug-1993.) -/
theorem vtoclf {ph ps : setvar → wff} {A2 : «class»}
  (vtoclf_1 : ⊦ wnf (λ x3, ps x3))
  (vtoclf_2 : ⊦ wcel A2 cvv)
  (vtoclf_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (vtoclf_4 : ∀ x3, ⊦ ph x3)
  (x3 : setvar) : ⊦ ps x3 :=
@mpg (λ x3, ph x3) (λ x3, ps x3)
  (λ x3, @«19_36i» (λ x3, ph x3) (λ x3, ps x3)
    vtoclf_1
    (@eximii (λ x3, wceq (cv x3) A2) (λ x3, wi (ph x3) (ps x3))
      (@isseti A2
        vtoclf_2)
      (λ x3, @biimpd (wceq (cv x3) A2) (ph x3) (ps x3)
        (vtoclf_3 x3))) x3)
  (λ x3, vtoclf_4 x3) x3


/-- Implicit substitution of a class for a setvar variable. See also ~ vtoclALT . (Contributed by
NM, 30-Aug-1993.) Remove dependency on ~ ax-10 . (Revised by BJ, 29-Nov-2020.) (Proof shortened by
SN, 20-Apr-2024.) -/
theorem vtocl {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (vtocl_1 : ⊦ wcel A2 cvv)
  (vtocl_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (vtocl_3 : ∀ x3, ⊦ ph x3) :
  ⊦ ps :=
@exlimiiv (λ x3, wceq (cv x3) A2) ps
  (λ x3, @mpbii (wceq (cv x3) A2) (ph x3) ps
    (vtocl_3 x3)
    (vtocl_2 x3))
  (@isseti A2
    vtocl_1)


/-- Implicit substitution of classes for setvar variables. (Contributed by NM, 26-Jul-1995.) (Proof
shortened by Andrew Salmon, 8-Jun-2011.) -/
theorem vtocl2 {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»}
  (vtocl2_1 : ⊦ wcel A2 cvv)
  (vtocl2_2 : ⊦ wcel B2 cvv)
  (vtocl2_3 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (vtocl2_4 : ∀ x3 y, ⊦ ph x3 y) :
  ⊦ ps :=
setvar.forget $ λ x3 : setvar,
  show ⊦ ps, from
  @vtocl (λ y, ph x3 y) ps B2
    vtocl2_2
    (λ y, @«2thd» (wceq (cv y) B2) (ph x3 y) ps
      (@a1i (ph x3 y) (wceq (cv y) B2)
        (vtocl2_4 x3 y))
      (@vtocl (λ x3, wi (wceq (cv y) B2) (ph x3 y)) (wi (wceq (cv y) B2) ps) A2
        vtocl2_1
        (λ x3, @pm5_74da (wceq (cv x3) A2) (wceq (cv y) B2) (ph x3 y) ps
          (vtocl2_3 x3 y))
        (λ x3, @a1i (ph x3 y) (wceq (cv y) B2)
          (vtocl2_4 x3 y))))
    (λ y, vtocl2_4 x3 y)


/-- Implicit substitution of a class for a setvar variable, with bound-variable hypotheses in place
of disjoint variable restrictions. (Contributed by NM, 21-Sep-2003.) (Proof shortened by Mario
Carneiro, 10-Oct-2016.) -/
theorem vtoclgf {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (vtoclgf_1 : ⊦ wnfc (λ x3, A2 x3))
  (vtoclgf_2 : ⊦ wnf (λ x3, ps x3))
  (vtoclgf_3 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (vtoclgf_4 : ∀ x3, ⊦ ph x3)
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (ps x3) :=
@syl (wcel (A2 x3) (V x3)) (wcel (A2 x3) cvv) (ps x3)
  (@elex (A2 x3) (V x3))
  (@sylbi (wcel (A2 x3) cvv) (wex (λ x3, wceq (cv x3) (A2 x3))) (ps x3)
    (@issetf (λ x3, A2 x3)
      vtoclgf_1 x3)
    (@exlimi (λ x3, wceq (cv x3) (A2 x3)) (λ x3, ps x3)
      vtoclgf_2
      (λ x3, @mpbii (wceq (cv x3) (A2 x3)) (ph x3) (ps x3)
        (vtoclgf_4 x3)
        (vtoclgf_3 x3)) x3))


/-- Version of ~ vtoclgf with one nonfreeness hypothesis replaced with a disjoint variable
condition, thus avoiding dependency on ~ ax-11 and ~ ax-13 . (Contributed by BJ, 1-May-2019.) -/
theorem vtoclg1f {ph ps : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (vtoclg1f_nf : ⊦ wnf (λ x3, ps x3))
  (vtoclg1f_maj : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (vtoclg1f_min : ∀ x3, ⊦ ph x3)
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (ps x3) :=
@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) (ps x3)
  (@elisset A2 (λ x3, V x3) x3)
  (@exlimi (λ x3, wceq (cv x3) A2) (λ x3, ps x3)
    vtoclg1f_nf
    (λ x3, @mpbii (wceq (cv x3) A2) (ph x3) (ps x3)
      (vtoclg1f_min x3)
      (vtoclg1f_maj x3)) x3)


/-- Implicit substitution of a class expression for a setvar variable. (Contributed by NM,
17-Apr-1995.) Avoid ~ ax-12 . (Revised by SN, 20-Apr-2024.) -/
theorem vtoclg {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (vtoclg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (vtoclg_2 : ∀ x3, ⊦ ph x3)
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) ps :=
@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) ps
  (@elisset A2 (λ x3, V x3) x3)
  (@exlimiv (λ x3, wceq (cv x3) A2) ps
    (λ x3, @mpbii (wceq (cv x3) A2) (ph x3) ps
      (vtoclg_2 x3)
      (vtoclg_1 x3)))


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 29-Apr-1994.) -/
theorem vtoclbg {ph ps : setvar → wff} {ch th : wff} {A2 : «class»} {V : setvar → «class»}
  (vtoclbg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ch))
  (vtoclbg_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ps x3) th))
  (vtoclbg_3 : ∀ x3, ⊦ wb (ph x3) (ps x3))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb ch th) :=
@vtoclg (λ x3, wb (ph x3) (ps x3)) (wb ch th) A2 (λ x3, V x3)
  (λ x3, @bibi12d (wceq (cv x3) A2) (ph x3) ch (ps x3) th
    (vtoclbg_1 x3)
    (vtoclbg_2 x3))
  (λ x3, vtoclbg_3 x3) x3


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 25-Apr-1995.) -/
theorem vtocl2gf {ph ps ch : setvar → setvar → wff} {A2 B2 V W : setvar → setvar → «class»}
  (vtocl2gf_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (vtocl2gf_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (vtocl2gf_3 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y))
  (vtocl2gf_4 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (vtocl2gf_5 : ∀ x3, ⊦ wnf (λ y, ch x3 y))
  (vtocl2gf_6 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 x3 y)) (wb (ph x3 y) (ps x3 y)))
  (vtocl2gf_7 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3 y)) (wb (ps x3 y) (ch x3 y)))
  (vtocl2gf_8 : ∀ x3 y, ⊦ ph x3 y)
  (x3 y : setvar) : ⊦ wi (wa (wcel (A2 x3 y) (V x3 y)) (wcel (B2 x3 y) (W x3 y))) (ch x3 y) :=
@mpan9 (wcel (A2 x3 y) (V x3 y)) (wcel (A2 x3 y) cvv) (wcel (B2 x3 y) (W x3 y)) (ch x3 y)
  (@elex (A2 x3 y) (V x3 y))
  (@vtoclgf (λ y, wi (wcel (A2 x3 y) cvv) (ps x3 y)) (λ y, wi (wcel (A2 x3 y) cvv) (ch x3 y)) (λ y, B2 x3 y) (λ y, W x3 y)
    (vtocl2gf_3 x3)
    (@nfim (λ y, wcel (A2 x3 y) cvv) (λ y, ch x3 y)
      (@nfel1 (λ y, A2 x3 y) cvv
        (vtocl2gf_2 x3))
      (vtocl2gf_5 x3))
    (λ y, @imbi2d (wceq (cv y) (B2 x3 y)) (ps x3 y) (ch x3 y) (wcel (A2 x3 y) cvv)
      (vtocl2gf_7 x3 y))
    (λ y, @vtoclgf (λ x3, ph x3 y) (λ x3, ps x3 y) (λ x3, A2 x3 y) (λ x3, cvv)
      (vtocl2gf_1 y)
      (vtocl2gf_4 y)
      (λ x3, vtocl2gf_6 x3 y)
      (λ x3, vtocl2gf_8 x3 y) x3) y)


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 10-Aug-2013.)
(Revised by Mario Carneiro, 10-Oct-2016.) -/
theorem vtocl3gf {ph ps ch th : setvar → setvar → setvar → wff} {A2 B2 C V W X : setvar → setvar → setvar → «class»}
  (vtocl3gf_a : ∀ y z, ⊦ wnfc (λ x3, A2 x3 y z))
  (vtocl3gf_b : ∀ x3 z, ⊦ wnfc (λ y, A2 x3 y z))
  (vtocl3gf_c : ∀ x3 y, ⊦ wnfc (λ z, A2 x3 y z))
  (vtocl3gf_d : ∀ x3 z, ⊦ wnfc (λ y, B2 x3 y z))
  (vtocl3gf_e : ∀ x3 y, ⊦ wnfc (λ z, B2 x3 y z))
  (vtocl3gf_f : ∀ x3 y, ⊦ wnfc (λ z, C x3 y z))
  (vtocl3gf_1 : ∀ y z, ⊦ wnf (λ x3, ps x3 y z))
  (vtocl3gf_2 : ∀ x3 z, ⊦ wnf (λ y, ch x3 y z))
  (vtocl3gf_3 : ∀ x3 y, ⊦ wnf (λ z, th x3 y z))
  (vtocl3gf_4 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (A2 x3 y z)) (wb (ph x3 y z) (ps x3 y z)))
  (vtocl3gf_5 : ∀ x3 y z, ⊦ wi (wceq (cv y) (B2 x3 y z)) (wb (ps x3 y z) (ch x3 y z)))
  (vtocl3gf_6 : ∀ x3 y z, ⊦ wi (wceq (cv z) (C x3 y z)) (wb (ch x3 y z) (th x3 y z)))
  (vtocl3gf_7 : ∀ x3 y z, ⊦ ph x3 y z)
  (x3 y z : setvar) : ⊦ wi (w3a (wcel (A2 x3 y z) (V x3 y z)) (wcel (B2 x3 y z) (W x3 y z)) (wcel (C x3 y z) (X x3 y z))) (th x3 y z) :=
@«3impb» (wcel (A2 x3 y z) (V x3 y z)) (wcel (B2 x3 y z) (W x3 y z)) (wcel (C x3 y z) (X x3 y z)) (th x3 y z)
  (@mpan9 (wcel (A2 x3 y z) (V x3 y z)) (wcel (A2 x3 y z) cvv) (wa (wcel (B2 x3 y z) (W x3 y z)) (wcel (C x3 y z) (X x3 y z))) (th x3 y z)
    (@elex (A2 x3 y z) (V x3 y z))
    (@vtocl2gf (λ y z, wi (wcel (A2 x3 y z) cvv) (ps x3 y z)) (λ y z, wi (wcel (A2 x3 y z) cvv) (ch x3 y z)) (λ y z, wi (wcel (A2 x3 y z) cvv) (th x3 y z)) (λ y z, B2 x3 y z) (λ y z, C x3 y z) (λ y z, W x3 y z) (λ y z, X x3 y z)
      (λ z, vtocl3gf_d x3 z)
      (λ y, vtocl3gf_e x3 y)
      (λ y, vtocl3gf_f x3 y)
      (λ z, @nfim (λ y, wcel (A2 x3 y z) cvv) (λ y, ch x3 y z)
        (@nfel1 (λ y, A2 x3 y z) cvv
          (vtocl3gf_b x3 z))
        (vtocl3gf_2 x3 z))
      (λ y, @nfim (λ z, wcel (A2 x3 y z) cvv) (λ z, th x3 y z)
        (@nfel1 (λ z, A2 x3 y z) cvv
          (vtocl3gf_c x3 y))
        (vtocl3gf_3 x3 y))
      (λ y z, @imbi2d (wceq (cv y) (B2 x3 y z)) (ps x3 y z) (ch x3 y z) (wcel (A2 x3 y z) cvv)
        (vtocl3gf_5 x3 y z))
      (λ y z, @imbi2d (wceq (cv z) (C x3 y z)) (ch x3 y z) (th x3 y z) (wcel (A2 x3 y z) cvv)
        (vtocl3gf_6 x3 y z))
      (λ y z, @vtoclgf (λ x3, ph x3 y z) (λ x3, ps x3 y z) (λ x3, A2 x3 y z) (λ x3, cvv)
        (vtocl3gf_a y z)
        (vtocl3gf_1 y z)
        (λ x3, vtocl3gf_4 x3 y z)
        (λ x3, vtocl3gf_7 x3 y z) x3) y z))


/-- Implicit substitution of 2 classes for 2 setvar variables. (Contributed by NM, 25-Apr-1995.)
Remove dependency on ~ ax-10 , ~ ax-11 , and ~ ax-13 . (Revised by Steven Nguyen, 29-Nov-2022.) -/
theorem vtocl2g {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 : setvar → «class»} {V W : setvar → setvar → «class»}
  (vtocl2g_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps y)))
  (vtocl2g_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ps y) (ch x3)))
  (vtocl2g_3 : ∀ x3 y, ⊦ ph x3 y)
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel (B2 x3) (W x3 y))) (ch x3) :=
@mpan9 (wcel A2 (V x3 y)) (wcel A2 cvv) (wcel (B2 x3) (W x3 y)) (ch x3)
  (@elex A2 (V x3 y))
  (@vtoclg (λ y, wi (wcel A2 cvv) (ps y)) (wi (wcel A2 cvv) (ch x3)) (B2 x3) (λ y, W x3 y)
    (λ y, @imbi2d (wceq (cv y) (B2 x3)) (ps y) (ch x3) (wcel A2 cvv)
      (vtocl2g_2 x3 y))
    (λ y, setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel A2 cvv) (ps y), from
      @vtoclg (λ x3, ph x3 y) (ps y) A2 (λ x3, cvv)
        (λ x3, vtocl2g_1 x3 y)
        (λ x3, vtocl2g_3 x3 y) x3) y)


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 17-Feb-2006.)
(Revised by Mario Carneiro, 10-Oct-2016.) -/
theorem vtoclgaf {ph ps : setvar → wff} {A2 : setvar → «class»} {B2 : «class»}
  (vtoclgaf_1 : ⊦ wnfc (λ x3, A2 x3))
  (vtoclgaf_2 : ⊦ wnf (λ x3, ps x3))
  (vtoclgaf_3 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (vtoclgaf_4 : ∀ x3, ⊦ wi (wcel (cv x3) B2) (ph x3))
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) B2) (ps x3) :=
@pm2_43i (wcel (A2 x3) B2) (ps x3)
  (@vtoclgf (λ x3, wi (wcel (cv x3) B2) (ph x3)) (λ x3, wi (wcel (A2 x3) B2) (ps x3)) (λ x3, A2 x3) (λ x3, B2)
    vtoclgaf_1
    (@nfim (λ x3, wcel (A2 x3) B2) (λ x3, ps x3)
      (@nfel1 (λ x3, A2 x3) B2
        vtoclgaf_1)
      vtoclgaf_2)
    (λ x3, @imbi12d (wceq (cv x3) (A2 x3)) (wcel (cv x3) B2) (wcel (A2 x3) B2) (ph x3) (ps x3)
      (@eleq1 (cv x3) (A2 x3) B2)
      (vtoclgaf_3 x3))
    (λ x3, vtoclgaf_4 x3) x3)


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 20-Aug-1995.) Avoid
~ ax-10 and ~ ax-11 . (Revised by Gino Giotto, 20-Aug-2023.) -/
theorem vtoclga {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (vtoclga_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (vtoclga_2 : ∀ x3, ⊦ wi (wcel (cv x3) B2) (ph x3)) :
  ⊦ wi (wcel A2 B2) ps :=
@pm2_43i (wcel A2 B2) ps
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 B2) (wi (wcel A2 B2) ps), from
    @vtoclg (λ x3, wi (wcel (cv x3) B2) (ph x3)) (wi (wcel A2 B2) ps) A2 (λ x3, B2)
      (λ x3, @imbi12d (wceq (cv x3) A2) (wcel (cv x3) B2) (wcel A2 B2) (ph x3) ps
        (@eleq1 (cv x3) A2 B2)
        (vtoclga_1 x3))
      (λ x3, vtoclga_2 x3) x3)


/-- Implicit substitution of 2 classes for 2 setvar variables. (Contributed by NM, 20-Aug-1995.)
Avoid ~ ax-10 and ~ ax-11 . (Revised by Gino Giotto, 20-Aug-2023.) (Proof shortened by Wolf Lammen,
23-Aug-2023.) -/
theorem vtocl2ga {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 : setvar → «class»} {C D : «class»}
  (vtocl2ga_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps y)))
  (vtocl2ga_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ps y) (ch x3)))
  (vtocl2ga_3 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))
  (x3 : setvar) : ⊦ wi (wa (wcel A2 C) (wcel (B2 x3) D)) (ch x3) :=
@impcom (wcel (B2 x3) D) (wcel A2 C) (ch x3)
  (@vtoclga (λ y, wi (wcel A2 C) (ps y)) (wi (wcel A2 C) (ch x3)) (B2 x3) D
    (λ y, @imbi2d (wceq (cv y) (B2 x3)) (ps y) (ch x3) (wcel A2 C)
      (vtocl2ga_2 x3 y))
    (λ y, @com12 (wcel A2 C) (wcel (cv y) D) (ps y)
      (@vtoclga (λ x3, wi (wcel (cv y) D) (ph x3 y)) (wi (wcel (cv y) D) (ps y)) A2 C
        (λ x3, @imbi2d (wceq (cv x3) A2) (ph x3 y) (ps y) (wcel (cv y) D)
          (vtocl2ga_1 x3 y))
        (λ x3, @ex (wcel (cv x3) C) (wcel (cv y) D) (ph x3 y)
          (vtocl2ga_3 x3 y)))))


/-- Implicit substitution of 2 classes for 2 setvar variables. (Contributed by NM, 10-Aug-2013.) -/
theorem vtocl2gaf {ph ps ch : setvar → setvar → wff} {A2 B2 : setvar → setvar → «class»} {C D : «class»}
  (vtocl2gaf_a : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (vtocl2gaf_b : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (vtocl2gaf_c : ∀ x3, ⊦ wnfc (λ y, B2 x3 y))
  (vtocl2gaf_1 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (vtocl2gaf_2 : ∀ x3, ⊦ wnf (λ y, ch x3 y))
  (vtocl2gaf_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 x3 y)) (wb (ph x3 y) (ps x3 y)))
  (vtocl2gaf_4 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3 y)) (wb (ps x3 y) (ch x3 y)))
  (vtocl2gaf_5 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))
  (x3 y : setvar) : ⊦ wi (wa (wcel (A2 x3 y) C) (wcel (B2 x3 y) D)) (ch x3 y) :=
@pm2_43i (wa (wcel (A2 x3 y) C) (wcel (B2 x3 y) D)) (ch x3 y)
  (@vtocl2gf (λ x3 y, wi (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)) (λ x3 y, wi (wa (wcel (A2 x3 y) C) (wcel (cv y) D)) (ps x3 y)) (λ x3 y, wi (wa (wcel (A2 x3 y) C) (wcel (B2 x3 y) D)) (ch x3 y)) (λ x3 y, A2 x3 y) (λ x3 y, B2 x3 y) (λ x3 y, C) (λ x3 y, D)
    (λ y, vtocl2gaf_a y)
    (λ x3, vtocl2gaf_b x3)
    (λ x3, vtocl2gaf_c x3)
    (λ y, @nfim (λ x3, wa (wcel (A2 x3 y) C) (wcel (cv y) D)) (λ x3, ps x3 y)
      (@nfan (λ x3, wcel (A2 x3 y) C) (λ x3, wcel (cv y) D)
        (@nfel1 (λ x3, A2 x3 y) C
          (vtocl2gaf_a y))
        (@nfv (wcel (cv y) D)))
      (vtocl2gaf_1 y))
    (λ x3, @nfim (λ y, wa (wcel (A2 x3 y) C) (wcel (B2 x3 y) D)) (λ y, ch x3 y)
      (@nfan (λ y, wcel (A2 x3 y) C) (λ y, wcel (B2 x3 y) D)
        (@nfel1 (λ y, A2 x3 y) C
          (vtocl2gaf_b x3))
        (@nfel1 (λ y, B2 x3 y) D
          (vtocl2gaf_c x3)))
      (vtocl2gaf_2 x3))
    (λ x3 y, @imbi12d (wceq (cv x3) (A2 x3 y)) (wa (wcel (cv x3) C) (wcel (cv y) D)) (wa (wcel (A2 x3 y) C) (wcel (cv y) D)) (ph x3 y) (ps x3 y)
      (@anbi1d (wceq (cv x3) (A2 x3 y)) (wcel (cv x3) C) (wcel (A2 x3 y) C) (wcel (cv y) D)
        (@eleq1 (cv x3) (A2 x3 y) C))
      (vtocl2gaf_3 x3 y))
    (λ x3 y, @imbi12d (wceq (cv y) (B2 x3 y)) (wa (wcel (A2 x3 y) C) (wcel (cv y) D)) (wa (wcel (A2 x3 y) C) (wcel (B2 x3 y) D)) (ps x3 y) (ch x3 y)
      (@anbi2d (wceq (cv y) (B2 x3 y)) (wcel (cv y) D) (wcel (B2 x3 y) D) (wcel (A2 x3 y) C)
        (@eleq1 (cv y) (B2 x3 y) D))
      (vtocl2gaf_4 x3 y))
    (λ x3 y, vtocl2gaf_5 x3 y) x3 y)


/-- Implicit substitution of 3 classes for 3 setvar variables. (Contributed by NM, 10-Aug-2013.)
(Revised by Mario Carneiro, 11-Oct-2016.) -/
theorem vtocl3gaf {ph ps ch th : setvar → setvar → setvar → wff} {A2 B2 C : setvar → setvar → setvar → «class»} {R S T : «class»}
  (vtocl3gaf_a : ∀ y z, ⊦ wnfc (λ x3, A2 x3 y z))
  (vtocl3gaf_b : ∀ x3 z, ⊦ wnfc (λ y, A2 x3 y z))
  (vtocl3gaf_c : ∀ x3 y, ⊦ wnfc (λ z, A2 x3 y z))
  (vtocl3gaf_d : ∀ x3 z, ⊦ wnfc (λ y, B2 x3 y z))
  (vtocl3gaf_e : ∀ x3 y, ⊦ wnfc (λ z, B2 x3 y z))
  (vtocl3gaf_f : ∀ x3 y, ⊦ wnfc (λ z, C x3 y z))
  (vtocl3gaf_1 : ∀ y z, ⊦ wnf (λ x3, ps x3 y z))
  (vtocl3gaf_2 : ∀ x3 z, ⊦ wnf (λ y, ch x3 y z))
  (vtocl3gaf_3 : ∀ x3 y, ⊦ wnf (λ z, th x3 y z))
  (vtocl3gaf_4 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (A2 x3 y z)) (wb (ph x3 y z) (ps x3 y z)))
  (vtocl3gaf_5 : ∀ x3 y z, ⊦ wi (wceq (cv y) (B2 x3 y z)) (wb (ps x3 y z) (ch x3 y z)))
  (vtocl3gaf_6 : ∀ x3 y z, ⊦ wi (wceq (cv z) (C x3 y z)) (wb (ch x3 y z) (th x3 y z)))
  (vtocl3gaf_7 : ∀ x3 y z, ⊦ wi (w3a (wcel (cv x3) R) (wcel (cv y) S) (wcel (cv z) T)) (ph x3 y z))
  (x3 y z : setvar) : ⊦ wi (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (C x3 y z) T)) (th x3 y z) :=
@pm2_43i (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (C x3 y z) T)) (th x3 y z)
  (@vtocl3gf (λ x3 y z, wi (w3a (wcel (cv x3) R) (wcel (cv y) S) (wcel (cv z) T)) (ph x3 y z)) (λ x3 y z, wi (w3a (wcel (A2 x3 y z) R) (wcel (cv y) S) (wcel (cv z) T)) (ps x3 y z)) (λ x3 y z, wi (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (cv z) T)) (ch x3 y z)) (λ x3 y z, wi (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (C x3 y z) T)) (th x3 y z)) (λ x3 y z, A2 x3 y z) (λ x3 y z, B2 x3 y z) (λ x3 y z, C x3 y z) (λ x3 y z, R) (λ x3 y z, S) (λ x3 y z, T)
    (λ y z, vtocl3gaf_a y z)
    (λ x3 z, vtocl3gaf_b x3 z)
    (λ x3 y, vtocl3gaf_c x3 y)
    (λ x3 z, vtocl3gaf_d x3 z)
    (λ x3 y, vtocl3gaf_e x3 y)
    (λ x3 y, vtocl3gaf_f x3 y)
    (λ y z, @nfim (λ x3, w3a (wcel (A2 x3 y z) R) (wcel (cv y) S) (wcel (cv z) T)) (λ x3, ps x3 y z)
      (@nf3an (λ x3, wcel (A2 x3 y z) R) (λ x3, wcel (cv y) S) (λ x3, wcel (cv z) T)
        (@nfel1 (λ x3, A2 x3 y z) R
          (vtocl3gaf_a y z))
        (@nfv (wcel (cv y) S))
        (@nfv (wcel (cv z) T)))
      (vtocl3gaf_1 y z))
    (λ x3 z, @nfim (λ y, w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (cv z) T)) (λ y, ch x3 y z)
      (@nf3an (λ y, wcel (A2 x3 y z) R) (λ y, wcel (B2 x3 y z) S) (λ y, wcel (cv z) T)
        (@nfel1 (λ y, A2 x3 y z) R
          (vtocl3gaf_b x3 z))
        (@nfel1 (λ y, B2 x3 y z) S
          (vtocl3gaf_d x3 z))
        (@nfv (wcel (cv z) T)))
      (vtocl3gaf_2 x3 z))
    (λ x3 y, @nfim (λ z, w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (C x3 y z) T)) (λ z, th x3 y z)
      (@nf3an (λ z, wcel (A2 x3 y z) R) (λ z, wcel (B2 x3 y z) S) (λ z, wcel (C x3 y z) T)
        (@nfel1 (λ z, A2 x3 y z) R
          (vtocl3gaf_c x3 y))
        (@nfel1 (λ z, B2 x3 y z) S
          (vtocl3gaf_e x3 y))
        (@nfel1 (λ z, C x3 y z) T
          (vtocl3gaf_f x3 y)))
      (vtocl3gaf_3 x3 y))
    (λ x3 y z, @imbi12d (wceq (cv x3) (A2 x3 y z)) (w3a (wcel (cv x3) R) (wcel (cv y) S) (wcel (cv z) T)) (w3a (wcel (A2 x3 y z) R) (wcel (cv y) S) (wcel (cv z) T)) (ph x3 y z) (ps x3 y z)
      (@«3anbi1d» (wceq (cv x3) (A2 x3 y z)) (wcel (cv x3) R) (wcel (A2 x3 y z) R) (wcel (cv y) S) (wcel (cv z) T)
        (@eleq1 (cv x3) (A2 x3 y z) R))
      (vtocl3gaf_4 x3 y z))
    (λ x3 y z, @imbi12d (wceq (cv y) (B2 x3 y z)) (w3a (wcel (A2 x3 y z) R) (wcel (cv y) S) (wcel (cv z) T)) (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (cv z) T)) (ps x3 y z) (ch x3 y z)
      (@«3anbi2d» (wceq (cv y) (B2 x3 y z)) (wcel (cv y) S) (wcel (B2 x3 y z) S) (wcel (A2 x3 y z) R) (wcel (cv z) T)
        (@eleq1 (cv y) (B2 x3 y z) S))
      (vtocl3gaf_5 x3 y z))
    (λ x3 y z, @imbi12d (wceq (cv z) (C x3 y z)) (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (cv z) T)) (w3a (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S) (wcel (C x3 y z) T)) (ch x3 y z) (th x3 y z)
      (@«3anbi3d» (wceq (cv z) (C x3 y z)) (wcel (cv z) T) (wcel (C x3 y z) T) (wcel (A2 x3 y z) R) (wcel (B2 x3 y z) S)
        (@eleq1 (cv z) (C x3 y z) T))
      (vtocl3gaf_6 x3 y z))
    (λ x3 y z, vtocl3gaf_7 x3 y z) x3 y z)


/-- Implicit substitution of 3 classes for 3 setvar variables. (Contributed by NM, 20-Aug-1995.) -/
theorem vtocl3ga {ph : setvar → setvar → setvar → wff} {ps ch th : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»} {C : setvar → setvar → «class»} {D R S : «class»}
  (vtocl3ga_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y z) (ps y z)))
  (vtocl3ga_2 : ∀ x3 y z, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ps y z) (ch x3 z)))
  (vtocl3ga_3 : ∀ x3 y z, ⊦ wi (wceq (cv z) (C x3 y)) (wb (ch x3 z) (th x3 y)))
  (vtocl3ga_4 : ∀ x3 y z, ⊦ wi (w3a (wcel (cv x3) D) (wcel (cv y) R) (wcel (cv z) S)) (ph x3 y z))
  (x3 y : setvar) : ⊦ wi (w3a (wcel A2 D) (wcel (B2 x3) R) (wcel (C x3 y) S)) (th x3 y) :=
setvar.forget $ λ z : setvar,
  show ⊦ wi (w3a (wcel A2 D) (wcel (B2 x3) R) (wcel (C x3 y) S)) (th x3 y), from
  @vtocl3gaf (λ x3 y z, ph x3 y z) (λ x3 y z, ps y z) (λ x3 y z, ch x3 z) (λ x3 y z, th x3 y) (λ x3 y z, A2) (λ x3 y z, B2 x3) (λ x3 y z, C x3 y) D R S
    (λ y z, @nfcv A2)
    (λ x3 z, @nfcv A2)
    (λ x3 y, @nfcv A2)
    (λ x3 z, @nfcv (B2 x3))
    (λ x3 y, @nfcv (B2 x3))
    (λ x3 y, @nfcv (C x3 y))
    (λ y z, @nfv (ps y z))
    (λ x3 z, @nfv (ch x3 z))
    (λ x3 y, @nfv (th x3 y))
    (λ x3 y z, vtocl3ga_1 x3 y z)
    (λ x3 y z, vtocl3ga_2 x3 y z)
    (λ x3 y z, vtocl3ga_3 x3 y z)
    (λ x3 y z, vtocl3ga_4 x3 y z) x3 y z


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 21-Jun-1993.) -/
theorem vtocleg {ph : wff} {A2 : «class»} {V : setvar → «class»}
  (vtocleg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) ph)
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) ph :=
@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) ph
  (@elisset A2 (λ x3, V x3) x3)
  (@exlimiv (λ x3, wceq (cv x3) A2) ph
    (λ x3, vtocleg_1 x3))


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 9-Sep-1993.) -/
theorem vtocle {ph : wff} {A2 : «class»}
  (vtocle_1 : ⊦ wcel A2 cvv)
  (vtocle_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) ph) :
  ⊦ ph :=
@ax_mp (wcel A2 cvv) ph
  vtocle_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) ph, from
    @vtocleg ph A2 (λ x3, cvv)
      (λ x3, vtocle_2 x3) x3)


/-- Implicit substitution of a class for a setvar variable. (Contributed by NM, 21-Nov-1994.) -/
theorem vtoclri {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (vtoclri_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (vtoclri_2 : ⊦ wral (λ x3, ph x3) (λ x3, B2)) :
  ⊦ wi (wcel A2 B2) ps :=
@vtoclga (λ x3, ph x3) ps A2 B2
  (λ x3, vtoclri_1 x3)
  (λ x3, @rspec (λ x3, ph x3) (λ x3, B2)
    vtoclri_2 x3)


/-- A closed version of ~ spcimgf . (Contributed by Mario Carneiro, 4-Jan-2017.) -/
theorem spcimgft {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (spcimgft_1 : ⊦ wnf (λ x3, ps x3))
  (spcimgft_2 : ⊦ wnfc (λ x3, A2 x3))
  (x3 : setvar) : ⊦ wi (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wi (wcel (A2 x3) (B2 x3)) (wi (wal (λ x3, ph x3)) (ps x3))) :=
@syl5 (wcel (A2 x3) (B2 x3)) (wcel (A2 x3) cvv) (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wi (wal (λ x3, ph x3)) (ps x3))
  (@elex (A2 x3) (B2 x3))
  (@syl6ib (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wcel (A2 x3) cvv) (wex (λ x3, wi (ph x3) (ps x3))) (wi (wal (λ x3, ph x3)) (ps x3))
    (@syl5bi (wcel (A2 x3) cvv) (wex (λ x3, wceq (cv x3) (A2 x3))) (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wex (λ x3, wi (ph x3) (ps x3)))
      (@issetf (λ x3, A2 x3)
        spcimgft_2 x3)
      (@exim (λ x3, wceq (cv x3) (A2 x3)) (λ x3, wi (ph x3) (ps x3))))
    (@«19_36» (λ x3, ph x3) (λ x3, ps x3)
      spcimgft_1 x3))


/-- A closed version of ~ spcgf . (Contributed by Andrew Salmon, 6-Jun-2011.) (Revised by Mario
Carneiro, 4-Jan-2017.) -/
theorem spcgft {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (spcimgft_1 : ⊦ wnf (λ x3, ps x3))
  (spcimgft_2 : ⊦ wnfc (λ x3, A2 x3))
  (x3 : setvar) : ⊦ wi (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wi (wcel (A2 x3) (B2 x3)) (wi (wal (λ x3, ph x3)) (ps x3))) :=
@syl (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))) (wal (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wi (wcel (A2 x3) (B2 x3)) (wi (wal (λ x3, ph x3)) (ps x3)))
  (@alimi (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) (λ x3, wi (wceq (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))
    (λ x3, @imim2i (wb (ph x3) (ps x3)) (wi (ph x3) (ps x3)) (wceq (cv x3) (A2 x3))
      (@biimp (ph x3) (ps x3))))
  (@spcimgft (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3) (λ x3, B2 x3)
    spcimgft_1
    spcimgft_2 x3)


/-- Rule of specialization, using implicit substitution. Compare Theorem 7.3 of [Quine] p. 44.
(Contributed by NM, 2-Feb-1997.) (Revised by Andrew Salmon, 12-Aug-2011.) -/
theorem spcgf {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (spcgf_1 : ⊦ wnfc (λ x3, A2 x3))
  (spcgf_2 : ⊦ wnf (λ x3, ps x3))
  (spcgf_3 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wi (wal (λ x3, ph x3)) (ps x3)) :=
@mpg (λ x3, wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3))) (λ x3, wi (wcel (A2 x3) (V x3)) (wi (wal (λ x3, ph x3)) (ps x3)))
  (λ x3, @spcgft (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3) (λ x3, V x3)
    spcgf_2
    spcgf_1 x3)
  (λ x3, spcgf_3 x3) x3


/-- Restricted specialization, using implicit substitution. (Contributed by Mario Carneiro,
4-Jan-2017.) Avoid ~ ax-10 and ~ ax-11 . (Revised by Gino Giotto, 20-Aug-2023.) -/
theorem spcimdv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 : «class»} {B2 : setvar → «class»}
  (spcimdv_1 : ∀ x3, ⊦ wi ph (wcel A2 (B2 x3)))
  (spcimdv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wi (ps x3) ch)) :
  ⊦ wi ph (wi (wal (λ x3, ps x3)) ch) :=
@sylib ph (wex (λ x3, wi (ps x3) ch)) (wi (wal (λ x3, ps x3)) ch)
  (@mpd ph (wex (λ x3, wceq (cv x3) A2)) (wex (λ x3, wi (ps x3) ch))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi ph (wex (λ x3, wceq (cv x3) A2)), from
      @syl ph (wcel A2 (B2 x3)) (wex (λ x3, wceq (cv x3) A2))
        (spcimdv_1 x3)
        (@elisset A2 (λ x3, B2 x3) x3))
    (@eximdv ph (λ x3, wceq (cv x3) A2) (λ x3, wi (ps x3) ch)
      (λ x3, @ex ph (wceq (cv x3) A2) (wi (ps x3) ch)
        (spcimdv_2 x3))))
  (@«19_36v» (λ x3, ps x3) ch)


/-- Rule of specialization, using implicit substitution. Analogous to ~ rspcdv . (Contributed by
David Moews, 1-May-2017.) -/
theorem spcdv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 : «class»} {B2 : setvar → «class»}
  (spcimdv_1 : ∀ x3, ⊦ wi ph (wcel A2 (B2 x3)))
  (spcdv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wb (ps x3) ch)) :
  ⊦ wi ph (wi (wal (λ x3, ps x3)) ch) :=
@spcimdv ph (λ x3, ps x3) ch A2 (λ x3, B2 x3)
  (λ x3, spcimdv_1 x3)
  (λ x3, @biimpd (wa ph (wceq (cv x3) A2)) (ps x3) ch
    (spcdv_2 x3))


/-- Rule of specialization, using implicit substitution. Compare Theorem 7.3 of [Quine] p. 44.
(Contributed by NM, 22-Jun-1994.) Avoid ~ ax-10 , ~ ax-11 . (Revised by Wolf Lammen, 25-Aug-2023.)
-/
theorem spcgv {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (spcgv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wi (wal (λ x3, ph x3)) ps) :=
@syl (wcel A2 (V x3)) (wcel A2 cvv) (wi (wal (λ x3, ph x3)) ps)
  (@elex A2 (V x3))
  (@spcdv (wcel A2 cvv) (λ x3, ph x3) ps A2 (λ x3, cvv)
    (λ x3, @id (wcel A2 cvv))
    (λ x3, @adantl (wceq (cv x3) A2) (wb (ph x3) ps) (wcel A2 cvv)
      (spcgv_1 x3)))


/-- Existential specialization, using implicit substitution. (Contributed by NM, 14-Aug-1994.) Avoid
~ ax-10 , ~ ax-11 . (Revised by Wolf Lammen, 25-Aug-2023.) -/
theorem spcegv {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (spcgv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wi ps (wex (λ x3, ph x3))) :=
@syl5com (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) ps (wex (λ x3, ph x3))
  (@elisset A2 (λ x3, V x3) x3)
  (@eximdv ps (λ x3, wceq (cv x3) A2) (λ x3, ph x3)
    (λ x3, @biimprcd (wceq (cv x3) A2) (ph x3) ps
      (spcgv_1 x3)))


/-- Existential specialization, using implicit substitution, deduction version. (Contributed by RP,
12-Aug-2020.) (Revised by AV, 16-Aug-2024.) -/
theorem spcedv {ph ps : setvar → wff} {ch : wff} {V : setvar → «class»} {X : «class»}
  (spcedv_1 : ∀ x3, ⊦ wi (ph x3) (wcel X (V x3)))
  (spcedv_2 : ∀ x3, ⊦ wi (ph x3) ch)
  (spcedv_3 : ∀ x3, ⊦ wi (wceq (cv x3) X) (wb (ps x3) ch))
  (x3 : setvar) : ⊦ wi (ph x3) (wex (λ x3, ps x3)) :=
@sylc (ph x3) (wcel X (V x3)) ch (wex (λ x3, ps x3))
  (spcedv_1 x3)
  (spcedv_2 x3)
  (@spcegv (λ x3, ps x3) ch X (λ x3, V x3)
    (λ x3, spcedv_3 x3) x3)


/-- Existential specialization with two quantifiers, using implicit substitution. (Contributed by
NM, 3-Aug-1995.) -/
theorem spc2egv {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (spc2egv_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wi ps (wex (λ x3, wex (λ y, ph x3 y)))) :=
@syl5com (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2)))) ps (wex (λ x3, wex (λ y, ph x3 y)))
  (@sylibr (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wa (wex (λ x3, wceq (cv x3) A2)) (wex (λ y, wceq (cv y) B2))) (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wceq (cv y) B2))))
    (@anim12i (wcel A2 (V x3 y)) (wex (λ x3, wceq (cv x3) A2)) (wcel B2 (W x3 y)) (wex (λ y, wceq (cv y) B2))
      (@elisset A2 (λ x3, V x3 y) x3)
      (@elisset B2 (λ y, W x3 y) y))
    (@exdistrv (λ x3, wceq (cv x3) A2) (λ y, wceq (cv y) B2)))
  (@«2eximdv» ps (λ x3 y, wa (wceq (cv x3) A2) (wceq (cv y) B2)) (λ x3 y, ph x3 y)
    (λ x3 y, @biimprcd (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ph x3 y) ps
      (spc2egv_1 x3 y)))


/-- Specialization with two quantifiers, using implicit substitution. (Contributed by NM,
27-Apr-2004.) -/
theorem spc2gv {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (spc2egv_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wi (wal (λ x3, wal (λ y, ph x3 y))) ps) :=
@con4d (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) ps (wal (λ x3, wal (λ y, ph x3 y)))
  (@syl6ibr (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wn ps) (wex (λ x3, wex (λ y, wn (ph x3 y)))) (wn (wal (λ x3, wal (λ y, ph x3 y))))
    (@spc2egv (λ x3 y, wn (ph x3 y)) (wn ps) A2 B2 (λ x3 y, V x3 y) (λ x3 y, W x3 y)
      (λ x3 y, @notbid (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ph x3 y) ps
        (spc2egv_1 x3 y)) x3 y)
    (@«2nalexn» (λ x3 y, ph x3 y)))


/-- Rule of specialization, using implicit substitution. (Contributed by NM, 22-Jun-1994.) -/
theorem spcv {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (spcv_1 : ⊦ wcel A2 cvv)
  (spcv_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wal (λ x3, ph x3)) ps :=
@ax_mp (wcel A2 cvv) (wi (wal (λ x3, ph x3)) ps)
  spcv_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wi (wal (λ x3, ph x3)) ps), from
    @spcgv (λ x3, ph x3) ps A2 (λ x3, cvv)
      (λ x3, spcv_2 x3) x3)


/-- Existential specialization, using implicit substitution. (Contributed by NM, 31-Dec-1993.)
(Proof shortened by Eric Schmidt, 22-Dec-2006.) -/
theorem spcev {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (spcv_1 : ⊦ wcel A2 cvv)
  (spcv_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi ps (wex (λ x3, ph x3)) :=
@ax_mp (wcel A2 cvv) (wi ps (wex (λ x3, ph x3)))
  spcv_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wi ps (wex (λ x3, ph x3))), from
    @spcegv (λ x3, ph x3) ps A2 (λ x3, cvv)
      (λ x3, spcv_2 x3) x3)


/-- Existential specialization, using implicit substitution. (Contributed by NM, 3-Aug-1995.) -/
theorem spc2ev {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»}
  (spc2ev_1 : ⊦ wcel A2 cvv)
  (spc2ev_2 : ⊦ wcel B2 cvv)
  (spc2ev_3 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps)) :
  ⊦ wi ps (wex (λ x3, wex (λ y, ph x3 y))) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wi ps (wex (λ x3, wex (λ y, ph x3 y))))
  spc2ev_1
  spc2ev_2
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wi ps (wex (λ x3, wex (λ y, ph x3 y)))), from
    @spc2egv (λ x3 y, ph x3 y) ps A2 B2 (λ x3 y, cvv) (λ x3 y, cvv)
      (λ x3 y, spc2ev_3 x3 y) x3 y)


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 19-Apr-2005.)
(Revised by Mario Carneiro, 11-Oct-2016.) -/
theorem rspc {ph ps : setvar → wff} {A2 B2 : «class»}
  (rspc_1 : ⊦ wnf (λ x3, ps x3))
  (rspc_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wcel A2 B2) (wi (wral (λ x3, ph x3) (λ x3, B2)) (ps x3)) :=
@syl5bi (wral (λ x3, ph x3) (λ x3, B2)) (wal (λ x3, wi (wcel (cv x3) B2) (ph x3))) (wcel A2 B2) (ps x3)
  (@df_ral (λ x3, ph x3) (λ x3, B2))
  (@pm2_43a (wal (λ x3, wi (wcel (cv x3) B2) (ph x3))) (wcel A2 B2) (ps x3)
    (@spcgf (λ x3, wi (wcel (cv x3) B2) (ph x3)) (λ x3, wi (wcel A2 B2) (ps x3)) (λ x3, A2) (λ x3, B2)
      (@nfcv A2)
      (@nfim (λ x3, wcel A2 B2) (λ x3, ps x3)
        (@nfv (wcel A2 B2))
        rspc_1)
      (λ x3, @imbi12d (wceq (cv x3) A2) (wcel (cv x3) B2) (wcel A2 B2) (ph x3) (ps x3)
        (@eleq1 (cv x3) A2 B2)
        (rspc_2 x3)) x3))


/-- Restricted specialization, using implicit substitution. (Contributed by Mario Carneiro,
4-Jan-2017.) -/
theorem rspcimdv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (rspcimdv_1 : ⊦ wi ph (wcel A2 B2))
  (rspcimdv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wi (ps x3) ch)) :
  ⊦ wi ph (wi (wral (λ x3, ps x3) (λ x3, B2)) ch) :=
@syl5bi (wral (λ x3, ps x3) (λ x3, B2)) (wal (λ x3, wi (wcel (cv x3) B2) (ps x3))) ph ch
  (@df_ral (λ x3, ps x3) (λ x3, B2))
  (@mpid ph (wal (λ x3, wi (wcel (cv x3) B2) (ps x3))) (wcel A2 B2) ch
    rspcimdv_1
    (@spcimdv ph (λ x3, wi (wcel (cv x3) B2) (ps x3)) (wi (wcel A2 B2) ch) A2 (λ x3, B2)
      (λ x3, rspcimdv_1)
      (λ x3, @imim12d (wa ph (wceq (cv x3) A2)) (wcel A2 B2) (wcel (cv x3) B2) (ps x3) ch
        (@biimprd (wa ph (wceq (cv x3) A2)) (wcel (cv x3) B2) (wcel A2 B2)
          (@eleq1d (wa ph (wceq (cv x3) A2)) (cv x3) A2 B2
            (@simpr ph (wceq (cv x3) A2))))
        (rspcimdv_2 x3))))


/-- Restricted existential specialization, using implicit substitution. (Contributed by Mario
Carneiro, 4-Jan-2017.) -/
theorem rspcimedv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (rspcimdv_1 : ⊦ wi ph (wcel A2 B2))
  (rspcimedv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wi ch (ps x3))) :
  ⊦ wi ph (wi ch (wrex (λ x3, ps x3) (λ x3, B2))) :=
@syl6ibr ph ch (wn (wral (λ x3, wn (ps x3)) (λ x3, B2))) (wrex (λ x3, ps x3) (λ x3, B2))
  (@con2d ph (wral (λ x3, wn (ps x3)) (λ x3, B2)) ch
    (@rspcimdv ph (λ x3, wn (ps x3)) (wn ch) A2 B2
      rspcimdv_1
      (λ x3, @con3d (wa ph (wceq (cv x3) A2)) ch (ps x3)
        (rspcimedv_2 x3))))
  (@dfrex2 (λ x3, ps x3) (λ x3, B2))


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 17-Feb-2007.)
(Revised by Mario Carneiro, 4-Jan-2017.) -/
theorem rspcdv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (rspcdv_1 : ⊦ wi ph (wcel A2 B2))
  (rspcdv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wb (ps x3) ch)) :
  ⊦ wi ph (wi (wral (λ x3, ps x3) (λ x3, B2)) ch) :=
@rspcimdv ph (λ x3, ps x3) ch A2 B2
  rspcdv_1
  (λ x3, @biimpd (wa ph (wceq (cv x3) A2)) (ps x3) ch
    (rspcdv_2 x3))


/-- Restricted existential specialization, using implicit substitution. (Contributed by FL,
17-Apr-2007.) (Revised by Mario Carneiro, 4-Jan-2017.) -/
theorem rspcedv {ph : wff} {ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (rspcdv_1 : ⊦ wi ph (wcel A2 B2))
  (rspcdv_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wb (ps x3) ch)) :
  ⊦ wi ph (wi ch (wrex (λ x3, ps x3) (λ x3, B2))) :=
@rspcimedv ph (λ x3, ps x3) ch A2 B2
  rspcdv_1
  (λ x3, @biimprd (wa ph (wceq (cv x3) A2)) (ps x3) ch
    (rspcdv_2 x3))


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 26-May-1998.) Drop ~
ax-10 , ~ ax-11 , ~ ax-12 . (Revised by SN, 12-Dec-2023.) -/
theorem rspcv {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (rspcv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wcel A2 B2) (wi (wral (λ x3, ph x3) (λ x3, B2)) ps) :=
@rspcdv (wcel A2 B2) (λ x3, ph x3) ps A2 B2
  (@id (wcel A2 B2))
  (λ x3, @adantl (wceq (cv x3) A2) (wb (ph x3) ps) (wcel A2 B2)
    (rspcv_1 x3))


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 2-Feb-2006.) -/
theorem rspccv {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (rspcv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wral (λ x3, ph x3) (λ x3, B2)) (wi (wcel A2 B2) ps) :=
@com12 (wcel A2 B2) (wral (λ x3, ph x3) (λ x3, B2)) ps
  (@rspcv (λ x3, ph x3) ps A2 B2
    (λ x3, rspcv_1 x3))


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 13-Sep-2005.) -/
theorem rspcva {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (rspcv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wa (wcel A2 B2) (wral (λ x3, ph x3) (λ x3, B2))) ps :=
@imp (wcel A2 B2) (wral (λ x3, ph x3) (λ x3, B2)) ps
  (@rspcv (λ x3, ph x3) ps A2 B2
    (λ x3, rspcv_1 x3))


/-- Restricted specialization, using implicit substitution. (Contributed by NM, 26-Jul-2006.) (Proof
shortened by Andrew Salmon, 8-Jun-2011.) -/
theorem rspccva {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (rspcv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wa (wral (λ x3, ph x3) (λ x3, B2)) (wcel A2 B2)) ps :=
@impcom (wcel A2 B2) (wral (λ x3, ph x3) (λ x3, B2)) ps
  (@rspcv (λ x3, ph x3) ps A2 B2
    (λ x3, rspcv_1 x3))


/-- Restricted existential specialization, using implicit substitution. (Contributed by NM,
26-May-1998.) Drop ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by SN, 12-Dec-2023.) -/
theorem rspcev {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (rspcv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wa (wcel A2 B2) ps) (wrex (λ x3, ph x3) (λ x3, B2)) :=
@imp (wcel A2 B2) ps (wrex (λ x3, ph x3) (λ x3, B2))
  (@rspcedv (wcel A2 B2) (λ x3, ph x3) ps A2 B2
    (@id (wcel A2 B2))
    (λ x3, @adantl (wceq (cv x3) A2) (wb (ph x3) ps) (wcel A2 B2)
      (rspcv_1 x3)))


/-- Restricted specialization, using implicit substitution. (Contributed by Thierry Arnoux,
21-Jun-2020.) -/
theorem rspcdva {ph ps : setvar → wff} {ch : wff} {A2 C : «class»}
  (rspcdva_1 : ∀ x3, ⊦ wi (wceq (cv x3) C) (wb (ps x3) ch))
  (rspcdva_2 : ∀ x3, ⊦ wi (ph x3) (wral (λ x3, ps x3) (λ x3, A2)))
  (rspcdva_3 : ∀ x3, ⊦ wi (ph x3) (wcel C A2))
  (x3 : setvar) : ⊦ wi (ph x3) ch :=
@sylc (ph x3) (wcel C A2) (wral (λ x3, ps x3) (λ x3, A2)) ch
  (rspcdva_3 x3)
  (rspcdva_2 x3)
  (@rspcv (λ x3, ps x3) ch C A2
    (λ x3, rspcdva_1 x3))


/-- Restricted existential specialization, using implicit substitution. Variant of ~ rspcedv .
(Contributed by AV, 27-Nov-2019.) -/
theorem rspcedvd {ph : wff} {ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (rspcedvd_1 : ⊦ wi ph (wcel A2 B2))
  (rspcedvd_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wb (ps x3) ch))
  (rspcedvd_3 : ⊦ wi ph ch) :
  ⊦ wi ph (wrex (λ x3, ps x3) (λ x3, B2)) :=
@mpd ph ch (wrex (λ x3, ps x3) (λ x3, B2))
  rspcedvd_3
  (@rspcedv ph (λ x3, ps x3) ch A2 B2
    rspcedvd_1
    (λ x3, rspcedvd_2 x3))


/-- Restricted existential specialization of a universally quantified implication. (Contributed by
BJ, 24-Aug-2022.) -/
theorem rspceaimv {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 C : setvar → «class»}
  (rspceaimv_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps y)))
  (y : setvar) : ⊦ wi (wa (wcel A2 (B2 y)) (wral (λ y, wi (ps y) (ch y)) (λ y, C y))) (wrex (λ x3, wral (λ y, wi (ph x3 y) (ch y)) (λ y, C y)) (λ x3, B2 y)) :=
@rspcev (λ x3, wral (λ y, wi (ph x3 y) (ch y)) (λ y, C y)) (wral (λ y, wi (ps y) (ch y)) (λ y, C y)) A2 (B2 y)
  (λ x3, @ralbidv (wceq (cv x3) A2) (λ y, wi (ph x3 y) (ch y)) (λ y, wi (ps y) (ch y)) (λ y, C y)
    (λ y, @imbi1d (wceq (cv x3) A2) (ph x3 y) (ps y) (ch y)
      (rspceaimv_1 x3 y)))


/-- Restricted specialization with two quantifiers, using implicit substitution. (Contributed by NM,
9-Nov-2012.) -/
theorem rspc2 {ph ps ch : setvar → setvar → wff} {A2 : «class»} {B2 C : setvar → «class»} {D : «class»}
  (rspc2_1 : ∀ y, ⊦ wnf (λ x3, ch x3 y))
  (rspc2_2 : ∀ x3, ⊦ wnf (λ y, ps x3 y))
  (rspc2_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ch x3 y)))
  (rspc2_4 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ch x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (C y)) (wcel (B2 x3) D)) (wi (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) (ps x3 y)) :=
@sylan9 (wcel A2 (C y)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) (wral (λ y, ch x3 y) (λ y, D)) (wcel (B2 x3) D) (ps x3 y)
  (@rspc (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, wral (λ y, ch x3 y) (λ y, D)) A2 (C y)
    (@nfralw (λ x3 y, ch x3 y) (λ x3 y, D)
      (λ y, @nfcv D)
      (λ y, rspc2_1 y))
    (λ x3, @ralbidv (wceq (cv x3) A2) (λ y, ph x3 y) (λ y, ch x3 y) (λ y, D)
      (λ y, rspc2_3 x3 y)) x3)
  (@rspc (λ y, ch x3 y) (λ y, ps x3 y) (B2 x3) D
    (rspc2_2 x3)
    (λ y, rspc2_4 x3 y) y)


/-- 2-variable restricted specialization, using implicit substitution. (Contributed by NM,
13-Sep-1999.) -/
theorem rspc2v {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 C : setvar → «class»} {D : «class»}
  (rspc2v_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ch y)))
  (rspc2v_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ch y) (ps x3)))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (C y)) (wcel (B2 x3) D)) (wi (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) (ps x3)) :=
@sylan9 (wcel A2 (C y)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) (wral (λ y, ch y) (λ y, D)) (wcel (B2 x3) D) (ps x3)
  (@rspcv (λ x3, wral (λ y, ph x3 y) (λ y, D)) (wral (λ y, ch y) (λ y, D)) A2 (C y)
    (λ x3, @ralbidv (wceq (cv x3) A2) (λ y, ph x3 y) (λ y, ch y) (λ y, D)
      (λ y, rspc2v_1 x3 y)))
  (@rspcv (λ y, ch y) (ps x3) (B2 x3) D
    (λ y, rspc2v_2 x3 y))


/-- 2-variable restricted specialization, using implicit substitution. (Contributed by NM,
18-Jun-2014.) -/
theorem rspc2va {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 C : setvar → «class»} {D : «class»}
  (rspc2v_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ch y)))
  (rspc2v_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ch y) (ps x3)))
  (x3 y : setvar) : ⊦ wi (wa (wa (wcel A2 (C y)) (wcel (B2 x3) D)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y))) (ps x3) :=
@imp (wa (wcel A2 (C y)) (wcel (B2 x3) D)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) (ps x3)
  (@rspc2v (λ x3 y, ph x3 y) (λ x3, ps x3) (λ y, ch y) A2 (λ x3, B2 x3) (λ y, C y) D
    (λ x3 y, rspc2v_1 x3 y)
    (λ x3 y, rspc2v_2 x3 y) x3 y)


/-- 2-variable restricted existential specialization, using implicit substitution. (Contributed by
NM, 16-Oct-1999.) -/
theorem rspc2ev {ph : setvar → setvar → wff} {ps ch : setvar → wff} {A2 : «class»} {B2 C : setvar → «class»} {D : «class»}
  (rspc2v_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ch y)))
  (rspc2v_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ch y) (ps x3)))
  (x3 y : setvar) : ⊦ wi (w3a (wcel A2 (C y)) (wcel (B2 x3) D) (ps x3)) (wrex (λ x3, wrex (λ y, ph x3 y) (λ y, D)) (λ x3, C y)) :=
@syl (w3a (wcel A2 (C y)) (wcel (B2 x3) D) (ps x3)) (wa (wcel A2 (C y)) (wrex (λ y, ch y) (λ y, D))) (wrex (λ x3, wrex (λ y, ph x3 y) (λ y, D)) (λ x3, C y))
  (@«3impb» (wcel A2 (C y)) (wcel (B2 x3) D) (ps x3) (wa (wcel A2 (C y)) (wrex (λ y, ch y) (λ y, D)))
    (@anim2i (wa (wcel (B2 x3) D) (ps x3)) (wrex (λ y, ch y) (λ y, D)) (wcel A2 (C y))
      (@rspcev (λ y, ch y) (ps x3) (B2 x3) D
        (λ y, rspc2v_2 x3 y))))
  (@rspcev (λ x3, wrex (λ y, ph x3 y) (λ y, D)) (wrex (λ y, ch y) (λ y, D)) A2 (C y)
    (λ x3, @rexbidv (wceq (cv x3) A2) (λ y, ph x3 y) (λ y, ch y) (λ y, D)
      (λ y, rspc2v_1 x3 y)))


/-- 3-variable restricted specialization, using implicit substitution. (Contributed by NM,
10-May-2005.) -/
theorem rspc3v {ph : setvar → setvar → setvar → wff} {ps ch th : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»} {C R : setvar → setvar → «class»} {S : setvar → «class»} {T : «class»}
  (rspc3v_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y z) (ch y z)))
  (rspc3v_2 : ∀ x3 y z, ⊦ wi (wceq (cv y) (B2 x3)) (wb (ch y z) (th x3 z)))
  (rspc3v_3 : ∀ x3 y z, ⊦ wi (wceq (cv z) (C x3 y)) (wb (th x3 z) (ps x3 y)))
  (x3 y z : setvar) : ⊦ wi (w3a (wcel A2 (R y z)) (wcel (B2 x3) (S z)) (wcel (C x3 y) T)) (wi (wral (λ x3, wral (λ y, wral (λ z, ph x3 y z) (λ z, T)) (λ y, S z)) (λ x3, R y z)) (ps x3 y)) :=
@«3impa» (wcel A2 (R y z)) (wcel (B2 x3) (S z)) (wcel (C x3 y) T) (wi (wral (λ x3, wral (λ y, wral (λ z, ph x3 y z) (λ z, T)) (λ y, S z)) (λ x3, R y z)) (ps x3 y))
  (@sylan9 (wa (wcel A2 (R y z)) (wcel (B2 x3) (S z))) (wral (λ x3, wral (λ y, wral (λ z, ph x3 y z) (λ z, T)) (λ y, S z)) (λ x3, R y z)) (wral (λ z, th x3 z) (λ z, T)) (wcel (C x3 y) T) (ps x3 y)
    (@rspc2v (λ x3 y, wral (λ z, ph x3 y z) (λ z, T)) (λ x3, wral (λ z, th x3 z) (λ z, T)) (λ y, wral (λ z, ch y z) (λ z, T)) A2 (λ x3, B2 x3) (λ y, R y z) (S z)
      (λ x3 y, @ralbidv (wceq (cv x3) A2) (λ z, ph x3 y z) (λ z, ch y z) (λ z, T)
        (λ z, rspc3v_1 x3 y z))
      (λ x3 y, @ralbidv (wceq (cv y) (B2 x3)) (λ z, ch y z) (λ z, th x3 z) (λ z, T)
        (λ z, rspc3v_2 x3 y z)) x3 y)
    (@rspcv (λ z, th x3 z) (ps x3 y) (C x3 y) T
      (λ z, rspc3v_3 x3 y z)))


/-- Restricted existential specialization in an equality, using implicit substitution. (Contributed
by BJ, 2-Sep-2022.) -/
theorem rspceeqv {A2 B2 : «class»} {C : setvar → «class»} {D E : «class»}
  (rspceeqv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (C x3) D)) :
  ⊦ wi (wa (wcel A2 B2) (wceq E D)) (wrex (λ x3, wceq E (C x3)) (λ x3, B2)) :=
@rspcev (λ x3, wceq E (C x3)) (wceq E D) A2 B2
  (λ x3, @eqeq2d (wceq (cv x3) A2) (C x3) D E
    (rspceeqv_1 x3))


/-- A variable introduction law for class equality, closed form. (Contributed by Thierry Arnoux,
2-Mar-2017.) -/
theorem eqvincg {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2)))) :=
@impbid1 (wcel A2 (V x3)) (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2)))
  (@sylib (wcel A2 (V x3)) (wex (λ x3, wi (wceq A2 B2) (wa (wceq (cv x3) A2) (wceq (cv x3) B2)))) (wi (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2))))
    (@«3syl» (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) (wex (λ x3, wa (wi (wceq A2 B2) (wceq (cv x3) A2)) (wi (wceq A2 B2) (wceq (cv x3) B2)))) (wex (λ x3, wi (wceq A2 B2) (wa (wceq (cv x3) A2) (wceq (cv x3) B2))))
      (@elisset A2 (λ x3, V x3) x3)
      (@eximi (λ x3, wceq (cv x3) A2) (λ x3, wa (wi (wceq A2 B2) (wceq (cv x3) A2)) (wi (wceq A2 B2) (wceq (cv x3) B2)))
        (λ x3, @jca (wceq (cv x3) A2) (wi (wceq A2 B2) (wceq (cv x3) A2)) (wi (wceq A2 B2) (wceq (cv x3) B2))
          (@ax_1 (wceq (cv x3) A2) (wceq A2 B2))
          (@ex (wceq (cv x3) A2) (wceq A2 B2) (wceq (cv x3) B2)
            (@eqtr (cv x3) A2 B2))))
      (@eximi (λ x3, wa (wi (wceq A2 B2) (wceq (cv x3) A2)) (wi (wceq A2 B2) (wceq (cv x3) B2))) (λ x3, wi (wceq A2 B2) (wa (wceq (cv x3) A2) (wceq (cv x3) B2)))
        (λ x3, @pm3_43 (wceq A2 B2) (wceq (cv x3) A2) (wceq (cv x3) B2))))
    (@«19_37v» (wceq A2 B2) (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2))))
  (@exlimiv (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2)) (wceq A2 B2)
    (λ x3, @eqtr2 (cv x3) A2 B2))


/-- A variable introduction law for class equality. (Contributed by NM, 14-Apr-1995.) (Proof
shortened by Andrew Salmon, 8-Jun-2011.) (Proof shortened by Thierry Arnoux, 23-Jan-2022.) -/
theorem eqvinc {A2 B2 : «class»}
  (eqvinc_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2))) :=
@ax_mp (wcel A2 cvv) (wb (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2))))
  eqvinc_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wceq A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wceq (cv x3) B2)))), from
    @eqvincg A2 B2 (λ x3, cvv) x3)


/-- Two ways to express substitution of ` A ` for ` x ` in ` ph ` . This is the analogue for classes
of ~ sbalex . (Contributed by NM, 2-Mar-1995.) (Revised by BJ, 27-Apr-2019.) -/
theorem alexeqg {ph : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3)))) :=
@bicomd (wcel A2 (V x3)) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 (V x3)) (wb (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))), from
    @vtoclbg (λ y, wex (λ x3, wa (wceq (cv x3) (cv y)) (ph x3))) (λ y, wal (λ x3, wi (wceq (cv x3) (cv y)) (ph x3))) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) A2 (λ y, V x3)
      (λ y, @exbidv (wceq (cv y) A2) (λ x3, wa (wceq (cv x3) (cv y)) (ph x3)) (λ x3, wa (wceq (cv x3) A2) (ph x3))
        (λ x3, @anbi1d (wceq (cv y) A2) (wceq (cv x3) (cv y)) (wceq (cv x3) A2) (ph x3)
          (@eqeq2 (cv y) A2 (cv x3))))
      (λ y, @albidv (wceq (cv y) A2) (λ x3, wi (wceq (cv x3) (cv y)) (ph x3)) (λ x3, wi (wceq (cv x3) A2) (ph x3))
        (λ x3, @imbi1d (wceq (cv y) A2) (wceq (cv x3) (cv y)) (wceq (cv x3) A2) (ph x3)
          (@eqeq2 (cv y) A2 (cv x3))))
      (λ y, @sbalex (λ x3 y, ph x3) y) y)


/-- Elimination of an existential quantifier, using implicit substitution. (Contributed by NM,
29-Dec-1996.) Drop ~ ax-10 and ~ ax-12 . (Revised by Gino Giotto, 1-Dec-2023.) -/
theorem ceqsexgv {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (ceqsexgv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) ps) :=
@cgsexg (λ x3, ph x3) ps (λ x3, wceq (cv x3) A2) A2 (λ x3, V x3)
  (λ x3, @id (wceq (cv x3) A2))
  (λ x3, ceqsexgv_1 x3) x3


/-- Elimination of a restricted existential quantifier, using implicit substitution. (Contributed by
NM, 30-Apr-2004.) -/
theorem ceqsrexv {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (ceqsrexv_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wcel A2 B2) (wb (wrex (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, B2)) ps) :=
@syl5bb (wrex (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, B2)) (wex (λ x3, wa (wceq (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3)))) (wcel A2 B2) ps
  (@bitr4i (wrex (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, B2)) (wex (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) A2) (ph x3)))) (wex (λ x3, wa (wceq (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3))))
    (@df_rex (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, B2))
    (@exbii (λ x3, wa (wceq (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3))) (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) A2) (ph x3)))
      (λ x3, @an12 (wceq (cv x3) A2) (wcel (cv x3) B2) (ph x3))))
  (@bianabs (wcel A2 B2) (wex (λ x3, wa (wceq (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3)))) ps
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel A2 B2) (wb (wex (λ x3, wa (wceq (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3)))) (wa (wcel A2 B2) ps)), from
      @ceqsexgv (λ x3, wa (wcel (cv x3) B2) (ph x3)) (wa (wcel A2 B2) ps) A2 (λ x3, B2)
        (λ x3, @anbi12d (wceq (cv x3) A2) (wcel (cv x3) B2) (wcel A2 B2) (ph x3) ps
          (@eleq1 (cv x3) A2 B2)
          (ceqsrexv_1 x3)) x3))


/-- Alternate definition of membership when the member is a set. (Contributed by NM, 18-Aug-1993.)
Strengthen from sethood hypothesis to sethood antecedent. (Revised by BJ, 12-Feb-2022.) Avoid ~
ax-12 . (Revised by BJ, 1-Sep-2024.) -/
theorem clel2g {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 B2) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2)))) :=
@bitrdi (wcel A2 (V x3)) (wcel A2 B2) (wi (wex (λ x3, wceq (cv x3) A2)) (wcel A2 B2)) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2)))
  (@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) (wb (wcel A2 B2) (wi (wex (λ x3, wceq (cv x3) A2)) (wcel A2 B2)))
    (@elisset A2 (λ x3, V x3) x3)
    (@biimt (wex (λ x3, wceq (cv x3) A2)) (wcel A2 B2)))
  (@bitr3i (wi (wex (λ x3, wceq (cv x3) A2)) (wcel A2 B2)) (wal (λ x3, wi (wceq (cv x3) A2) (wcel A2 B2))) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2)))
    (@«19_23v» (λ x3, wceq (cv x3) A2) (wcel A2 B2))
    (@albii (λ x3, wi (wceq (cv x3) A2) (wcel A2 B2)) (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2))
      (λ x3, @pm5_74i (wceq (cv x3) A2) (wcel A2 B2) (wcel (cv x3) B2)
        (@bicomd (wceq (cv x3) A2) (wcel (cv x3) B2) (wcel A2 B2)
          (@eleq1 (cv x3) A2 B2)))))


/-- Alternate definition of membership in a set. (Contributed by NM, 13-Aug-2005.) -/
theorem clel3g {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel B2 (V x3)) (wb (wcel A2 B2) (wex (λ x3, wa (wceq (cv x3) B2) (wcel A2 (cv x3))))) :=
@bicomd (wcel B2 (V x3)) (wex (λ x3, wa (wceq (cv x3) B2) (wcel A2 (cv x3)))) (wcel A2 B2)
  (@ceqsexgv (λ x3, wcel A2 (cv x3)) (wcel A2 B2) B2 (λ x3, V x3)
    (λ x3, @eleq2 (cv x3) B2 A2) x3)


/-- Alternate definition of membership in a set. (Contributed by NM, 18-Aug-1993.) Strengthen from
sethood hypothesis to sethood antecedent and avoid ~ ax-12 . (Revised by BJ, 1-Sep-2024.) -/
theorem clel4g {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel B2 (V x3)) (wb (wcel A2 B2) (wal (λ x3, wi (wceq (cv x3) B2) (wcel A2 (cv x3))))) :=
@bitrdi (wcel B2 (V x3)) (wcel A2 B2) (wal (λ x3, wi (wceq (cv x3) B2) (wcel A2 B2))) (wal (λ x3, wi (wceq (cv x3) B2) (wcel A2 (cv x3))))
  (@bitr4di (wcel B2 (V x3)) (wcel A2 B2) (wi (wex (λ x3, wceq (cv x3) B2)) (wcel A2 B2)) (wal (λ x3, wi (wceq (cv x3) B2) (wcel A2 B2)))
    (@syl (wcel B2 (V x3)) (wex (λ x3, wceq (cv x3) B2)) (wb (wcel A2 B2) (wi (wex (λ x3, wceq (cv x3) B2)) (wcel A2 B2)))
      (@elisset B2 (λ x3, V x3) x3)
      (@biimt (wex (λ x3, wceq (cv x3) B2)) (wcel A2 B2)))
    (@«19_23v» (λ x3, wceq (cv x3) B2) (wcel A2 B2)))
  (@albii (λ x3, wi (wceq (cv x3) B2) (wcel A2 B2)) (λ x3, wi (wceq (cv x3) B2) (wcel A2 (cv x3)))
    (λ x3, @pm5_74i (wceq (cv x3) B2) (wcel A2 B2) (wcel A2 (cv x3))
      (@bicomd (wceq (cv x3) B2) (wcel A2 (cv x3)) (wcel A2 B2)
        (@eleq2 (cv x3) B2 A2))))


/-- Membership in a class abstraction, using implicit substitution. Compare Theorem 6.13 of [Quine]
p. 44. This version has bound-variable hypotheses in place of distinct variable restrictions.
(Contributed by NM, 21-Sep-2003.) (Revised by Mario Carneiro, 12-Oct-2016.) -/
theorem elabgf {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (elabgf_1 : ⊦ wnfc (λ x3, A2 x3))
  (elabgf_2 : ⊦ wnf (λ x3, ps x3))
  (elabgf_3 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (B2 x3)) (wb (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3)) :=
@vtoclgf (λ x3, wb (wcel (cv x3) (cab (λ x3, ph x3))) (ph x3)) (λ x3, wb (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3)) (λ x3, A2 x3) (λ x3, B2 x3)
  elabgf_1
  (@nfbi (λ x3, wcel (A2 x3) (cab (λ x3, ph x3))) (λ x3, ps x3)
    (@nfel (λ x3, A2 x3) (λ x3, cab (λ x3, ph x3))
      elabgf_1
      (@nfab1 (λ x3, ph x3)))
    elabgf_2)
  (λ x3, @bibi12d (wceq (cv x3) (A2 x3)) (wcel (cv x3) (cab (λ x3, ph x3))) (wcel (A2 x3) (cab (λ x3, ph x3))) (ph x3) (ps x3)
    (@eleq1 (cv x3) (A2 x3) (cab (λ x3, ph x3)))
    (elabgf_3 x3))
  (λ x3, @abid (λ x3, ph x3) x3) x3


/-- Membership in a class abstraction, using implicit substitution. (Contributed by NM, 1-Aug-1994.)
(Revised by Mario Carneiro, 12-Oct-2016.) -/
theorem elabf {ph ps : setvar → wff} {A2 : «class»}
  (elabf_1 : ⊦ wnf (λ x3, ps x3))
  (elabf_2 : ⊦ wcel A2 cvv)
  (elabf_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wb (wcel A2 (cab (λ x3, ph x3))) (ps x3) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cab (λ x3, ph x3))) (ps x3))
  elabf_2
  (@elabgf (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2) (λ x3, cvv)
    (@nfcv A2)
    elabf_1
    (λ x3, elabf_3 x3) x3)


/-- Membership in a class abstraction, using implicit substitution and an intermediate setvar ` y `
to avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . It also avoids a disjoint variable condition on ` x ` and ` A
` . This is to ~ elabg what ~ sbievw2 is to ~ sbievw . (Contributed by SN, 20-Apr-2024.) -/
theorem elabgw {ph ps ch : setvar → wff} {A2 : setvar → «class»} {V : setvar → setvar → «class»}
  (elabgw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y)))
  (elabgw_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (A2 x3)) (wb (ps y) (ch x3)))
  (x3 y : setvar) : ⊦ wi (wcel (A2 x3) (V x3 y)) (wb (wcel (A2 x3) (cab (λ x3, ph x3))) (ch x3)) :=
@vtoclbg (λ y, wcel (cv y) (cab (λ x3, ph x3))) (λ y, ps y) (wcel (A2 x3) (cab (λ x3, ph x3))) (ch x3) (A2 x3) (λ y, V x3 y)
  (λ y, @eleq1 (cv y) (A2 x3) (cab (λ x3, ph x3)))
  (λ y, elabgw_2 x3 y)
  (λ y, @bitri (wcel (cv y) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) y) (ps y)
    (@df_clab (λ x3, ph x3) y)
    (@sbievw (λ x3 y, ph x3) (λ y, ps y)
      (λ x3 y, elabgw_1 x3 y) y)) y


/-- Membership in a class abstraction, using implicit substitution and an intermediate setvar ` y `
to avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . It also avoids a disjoint variable condition on ` x ` and ` A
` . (Contributed by SN, 16-May-2024.) -/
theorem elab2gw {ph ps ch : setvar → wff} {A2 : setvar → «class»} {B2 V : setvar → setvar → «class»}
  (elabgw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y)))
  (elabgw_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (A2 x3)) (wb (ps y) (ch x3)))
  (elab2gw_3 : ∀ x3 y, ⊦ wceq (B2 x3 y) (cab (λ x3, ph x3)))
  (x3 y : setvar) : ⊦ wi (wcel (A2 x3) (V x3 y)) (wb (wcel (A2 x3) (B2 x3 y)) (ch x3)) :=
@syl5bb (wcel (A2 x3) (B2 x3 y)) (wcel (A2 x3) (cab (λ x3, ph x3))) (wcel (A2 x3) (V x3 y)) (ch x3)
  (@eleq2i (B2 x3 y) (cab (λ x3, ph x3)) (A2 x3)
    (elab2gw_3 x3 y))
  (@elabgw (λ x3, ph x3) (λ y, ps y) (λ x3, ch x3) (λ x3, A2 x3) (λ x3 y, V x3 y)
    (λ x3 y, elabgw_1 x3 y)
    (λ x3 y, elabgw_2 x3 y) x3 y)


/-- Membership in a class abstraction, using implicit substitution. Compare Theorem 6.13 of [Quine]
p. 44. (Contributed by NM, 14-Apr-1995.) Remove dependency on ~ ax-13 . (Revised by Steven Nguyen,
23-Nov-2022.) -/
theorem elabg {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (elabg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (cab (λ x3, ph x3))) ps) :=
@vtoclg1f (λ x3, wb (wcel (cv x3) (cab (λ x3, ph x3))) (ph x3)) (λ x3, wb (wcel A2 (cab (λ x3, ph x3))) ps) A2 (λ x3, V x3)
  (@nfbi (λ x3, wcel A2 (cab (λ x3, ph x3))) (λ x3, ps)
    (@nfel2 A2 (λ x3, cab (λ x3, ph x3))
      (@nfab1 (λ x3, ph x3)))
    (@nfv ps))
  (λ x3, @bibi12d (wceq (cv x3) A2) (wcel (cv x3) (cab (λ x3, ph x3))) (wcel A2 (cab (λ x3, ph x3))) (ph x3) ps
    (@eleq1 (cv x3) A2 (cab (λ x3, ph x3)))
    (elabg_1 x3))
  (λ x3, @abid (λ x3, ph x3) x3) x3


/-- Membership in a class abstraction, using implicit substitution. Compare Theorem 6.13 of [Quine]
p. 44. (Contributed by NM, 1-Aug-1994.) -/
theorem elab {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (elab_1 : ⊦ wcel A2 cvv)
  (elab_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wcel A2 (cab (λ x3, ph x3))) ps :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wb (wcel A2 (cab (λ x3, ph x3))) ps, from
  @elabf (λ x3, ph x3) (λ x3, ps) A2
    (@nfv ps)
    elab_1
    (λ x3, elab_2 x3) x3


/-- Membership in a class abstraction, using implicit substitution. (Contributed by NM,
13-Sep-1995.) -/
theorem elab2g {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 V : setvar → «class»}
  (elab2g_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (elab2g_2 : ∀ x3, ⊦ wceq (B2 x3) (cab (λ x3, ph x3)))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (B2 x3)) ps) :=
@syl5bb (wcel A2 (B2 x3)) (wcel A2 (cab (λ x3, ph x3))) (wcel A2 (V x3)) ps
  (@eleq2i (B2 x3) (cab (λ x3, ph x3)) A2
    (elab2g_2 x3))
  (@elabg (λ x3, ph x3) ps A2 (λ x3, V x3)
    (λ x3, elab2g_1 x3) x3)


/-- Membership in a class abstraction, using implicit substitution. (Contributed by NM,
13-Sep-1995.) -/
theorem elab2 {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (elab2_1 : ⊦ wcel A2 cvv)
  (elab2_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (elab2_3 : ∀ x3, ⊦ wceq (B2 x3) (cab (λ x3, ph x3)))
  (x3 : setvar) : ⊦ wb (wcel A2 (B2 x3)) ps :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (B2 x3)) ps)
  elab2_1
  (@elab2g (λ x3, ph x3) ps A2 (λ x3, B2 x3) (λ x3, cvv)
    (λ x3, elab2_2 x3)
    (λ x3, elab2_3 x3) x3)


/-- Membership in a class abstraction, with a weaker antecedent than ~ elabgf . (Contributed by NM,
6-Sep-2011.) -/
theorem elab3gf {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (elab3gf_1 : ⊦ wnfc (λ x3, A2 x3))
  (elab3gf_2 : ⊦ wnf (λ x3, ps x3))
  (elab3gf_3 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wi (ps x3) (wcel (A2 x3) (B2 x3))) (wb (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3)) :=
@ja (ps x3) (wcel (A2 x3) (B2 x3)) (wb (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3))
  (@impbid2 (wn (ps x3)) (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3)
    (@ibi (wcel (A2 x3) (cab (λ x3, ph x3))) (ps x3)
      (@elabgf (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3) (λ x3, cab (λ x3, ph x3))
        elab3gf_1
        elab3gf_2
        (λ x3, elab3gf_3 x3) x3))
    (@pm2_21 (ps x3) (wcel (A2 x3) (cab (λ x3, ph x3)))))
  (@elabgf (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3) (λ x3, B2 x3)
    elab3gf_1
    elab3gf_2
    (λ x3, elab3gf_3 x3) x3)


/-- Membership in a class abstraction, with a weaker antecedent than ~ elabg . (Contributed by NM,
29-Aug-2006.) -/
theorem elab3g {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (elab3g_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wi ps (wcel A2 (B2 x3))) (wb (wcel A2 (cab (λ x3, ph x3))) ps) :=
@elab3gf (λ x3, ph x3) (λ x3, ps) (λ x3, A2) (λ x3, B2 x3)
  (@nfcv A2)
  (@nfv ps)
  (λ x3, elab3g_1 x3) x3


/-- Membership in a class abstraction using implicit substitution. (Contributed by NM, 10-Nov-2000.)
(Revised by AV, 16-Aug-2024.) -/
theorem elab3 {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (elab3_1 : ∀ x3, ⊦ wi ps (wcel A2 (V x3)))
  (elab3_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wcel A2 (cab (λ x3, ph x3))) ps :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wb (wcel A2 (cab (λ x3, ph x3))) ps, from
  @ax_mp (wi ps (wcel A2 (V x3))) (wb (wcel A2 (cab (λ x3, ph x3))) ps)
    (elab3_1 x3)
    (@elab3g (λ x3, ph x3) ps A2 (λ x3, V x3)
      (λ x3, elab3_2 x3) x3)


/-- Implication for the membership in a restricted class abstraction. (Contributed by Alexander van
der Vekens, 31-Dec-2017.) Remove disjoint variable condition on ` A , x ` and avoid ~ ax-10 , ~
ax-11 , ~ ax-12 . (Revised by SN, 5-Aug-2024.) -/
theorem elrabi {ph : setvar → wff} {A2 : setvar → «class»} {V : «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, V))) (wcel (A2 x3) V) :=
@eleq2s (wcel (A2 x3) V) (A2 x3) (cab (λ x3, wa (wcel (cv x3) V) (ph x3))) (crab (λ x3, ph x3) (λ x3, V))
  (@sylbi (wcel (A2 x3) (cab (λ x3, wa (wcel (cv x3) V) (ph x3)))) (wex (λ y, wa (wceq (cv y) (A2 x3)) (wcel (cv y) (cab (λ x3, wa (wcel (cv x3) V) (ph x3)))))) (wcel (A2 x3) V)
    (@dfclel (A2 x3) (cab (λ x3, wa (wcel (cv x3) V) (ph x3))))
    (@exlimiv (λ y, wa (wceq (cv y) (A2 x3)) (wcel (cv y) (cab (λ x3, wa (wcel (cv x3) V) (ph x3))))) (wcel (A2 x3) V)
      (λ y, @sylan2 (wcel (cv y) (cab (λ x3, wa (wcel (cv x3) V) (ph x3)))) (wceq (cv y) (A2 x3)) (wcel (cv y) V) (wcel (A2 x3) V)
        (@sylbi (wcel (cv y) (cab (λ x3, wa (wcel (cv x3) V) (ph x3)))) (wsb (λ x3, wa (wcel (cv x3) V) (ph x3)) y) (wcel (cv y) V)
          (@df_clab (λ x3, wa (wcel (cv x3) V) (ph x3)) y)
          (@sylib (wsb (λ x3, wa (wcel (cv x3) V) (ph x3)) y) (wsb (λ x3, wcel (cv x3) V) y) (wcel (cv y) V)
            (@sbimi (λ x3, wa (wcel (cv x3) V) (ph x3)) (λ x3, wcel (cv x3) V) y
              (λ x3, @simpl (wcel (cv x3) V) (ph x3)))
            (@clelsb3 (λ y, V) y)))
        (@biimpa (wceq (cv y) (A2 x3)) (wcel (cv y) V) (wcel (A2 x3) V)
          (@eleq1 (cv y) (A2 x3) V)))))
  (@df_rab (λ x3, ph x3) (λ x3, V))


/-- Membership in a restricted class abstraction, using implicit substitution. This version has
bound-variable hypotheses in place of distinct variable restrictions. (Contributed by NM,
21-Sep-2003.) -/
theorem elrabf {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (elrabf_1 : ⊦ wnfc (λ x3, A2 x3))
  (elrabf_2 : ⊦ wnfc (λ x3, B2 x3))
  (elrabf_3 : ⊦ wnf (λ x3, ps x3))
  (elrabf_4 : ∀ x3, ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wb (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wa (wcel (A2 x3) (B2 x3)) (ps x3)) :=
@pm5_21nii (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wcel (A2 x3) cvv) (wa (wcel (A2 x3) (B2 x3)) (ps x3))
  (@elex (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3)))
  (@adantr (wcel (A2 x3) (B2 x3)) (wcel (A2 x3) cvv) (ps x3)
    (@elex (A2 x3) (B2 x3)))
  (@syl5bb (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wcel (A2 x3) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))) (wcel (A2 x3) cvv) (wa (wcel (A2 x3) (B2 x3)) (ps x3))
    (@eleq2i (crab (λ x3, ph x3) (λ x3, B2 x3)) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3))) (A2 x3)
      (@df_rab (λ x3, ph x3) (λ x3, B2 x3)))
    (@elabgf (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)) (λ x3, wa (wcel (A2 x3) (B2 x3)) (ps x3)) (λ x3, A2 x3) (λ x3, cvv)
      elrabf_1
      (@nfan (λ x3, wcel (A2 x3) (B2 x3)) (λ x3, ps x3)
        (@nfel (λ x3, A2 x3) (λ x3, B2 x3)
          elrabf_1
          elrabf_2)
        elrabf_3)
      (λ x3, @anbi12d (wceq (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)) (wcel (A2 x3) (B2 x3)) (ph x3) (ps x3)
        (@eleq1 (cv x3) (A2 x3) (B2 x3))
        (elrabf_4 x3)) x3))


/-- Membership in a restricted class abstraction, using implicit substitution. (Contributed by NM,
21-May-1999.) Remove dependency on ~ ax-13 . (Revised by Steven Nguyen, 23-Nov-2022.) -/
theorem elrab {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (elrab_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wa (wcel A2 B2) ps) :=
@pm5_21nii (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wcel A2 cvv) (wa (wcel A2 B2) ps)
  (@elex A2 (crab (λ x3, ph x3) (λ x3, B2)))
  (@adantr (wcel A2 B2) (wcel A2 cvv) ps
    (@elex A2 B2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wa (wcel A2 B2) ps)), from
    @elab2g (λ x3, wa (wcel (cv x3) B2) (ph x3)) (wa (wcel A2 B2) ps) A2 (λ x3, crab (λ x3, ph x3) (λ x3, B2)) (λ x3, cvv)
      (λ x3, @anbi12d (wceq (cv x3) A2) (wcel (cv x3) B2) (wcel A2 B2) (ph x3) ps
        (@eleq1 (cv x3) A2 B2)
        (elrab_1 x3))
      (λ x3, @df_rab (λ x3, ph x3) (λ x3, B2)) x3)


/-- Membership in a restricted class abstraction, using implicit substitution. (Contributed by NM,
5-Oct-2006.) -/
theorem elrab3 {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (elrab_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wcel A2 B2) (wb (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) ps) :=
@baib (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wcel A2 B2) ps
  (@elrab (λ x3, ph x3) ps A2 B2
    (λ x3, elrab_1 x3))


/-- Membership in a restricted class abstraction, using implicit substitution. Deduction version of
~ elrab . (Contributed by Glauco Siliprandi, 23-Oct-2021.) -/
theorem elrabd {ph ps : setvar → wff} {ch : wff} {A2 B2 : «class»}
  (elrabd_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ps x3) ch))
  (elrabd_2 : ∀ x3, ⊦ wi (ph x3) (wcel A2 B2))
  (elrabd_3 : ∀ x3, ⊦ wi (ph x3) ch)
  (x3 : setvar) : ⊦ wi (ph x3) (wcel A2 (crab (λ x3, ps x3) (λ x3, B2))) :=
@sylanbrc (ph x3) (wcel A2 B2) ch (wcel A2 (crab (λ x3, ps x3) (λ x3, B2)))
  (elrabd_2 x3)
  (elrabd_3 x3)
  (@elrab (λ x3, ps x3) ch A2 B2
    (λ x3, elrabd_1 x3))


/-- Membership in a restricted class abstraction, using implicit substitution. (Contributed by NM,
2-Nov-2006.) -/
theorem elrab2 {ph : setvar → wff} {ps : wff} {A2 B2 : «class»} {C : setvar → «class»}
  (elrab2_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (elrab2_2 : ∀ x3, ⊦ wceq (C x3) (crab (λ x3, ph x3) (λ x3, B2)))
  (x3 : setvar) : ⊦ wb (wcel A2 (C x3)) (wa (wcel A2 B2) ps) :=
@bitri (wcel A2 (C x3)) (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wa (wcel A2 B2) ps)
  (@eleq2i (C x3) (crab (λ x3, ph x3) (λ x3, B2)) A2
    (elrab2_2 x3))
  (@elrab (λ x3, ph x3) ps A2 B2
    (λ x3, elrab2_1 x3))


/-- Membership in a restricted class abstraction. This is to ~ elrab2 what ~ elab2gw is to ~ elab2g
. (Contributed by SN, 2-Sep-2024.) -/
theorem elrab2w {ph ps ch : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → setvar → «class»}
  (elrab2w_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y)))
  (elrab2w_2 : ∀ x3 y, ⊦ wi (wceq (cv y) (A2 x3)) (wb (ps y) (ch x3)))
  (elrab2w_3 : ∀ x3 y, ⊦ wceq (C x3 y) (crab (λ x3, ph x3) (λ x3, B2)))
  (x3 y : setvar) : ⊦ wb (wcel (A2 x3) (C x3 y)) (wa (wcel (A2 x3) B2) (ch x3)) :=
@pm5_21nii (wcel (A2 x3) (C x3 y)) (wcel (A2 x3) cvv) (wa (wcel (A2 x3) B2) (ch x3))
  (@elex (A2 x3) (C x3 y))
  (@adantr (wcel (A2 x3) B2) (wcel (A2 x3) cvv) (ch x3)
    (@elex (A2 x3) B2))
  (@elab2gw (λ x3, wa (wcel (cv x3) B2) (ph x3)) (λ y, wa (wcel (cv y) B2) (ps y)) (λ x3, wa (wcel (A2 x3) B2) (ch x3)) (λ x3, A2 x3) (λ x3 y, C x3 y) (λ x3 y, cvv)
    (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) B2) (wcel (cv y) B2) (ph x3) (ps y)
      (@eleq1w (λ x3 y, B2) x3 y)
      (elrab2w_1 x3 y))
    (λ x3 y, @anbi12d (wceq (cv y) (A2 x3)) (wcel (cv y) B2) (wcel (A2 x3) B2) (ps y) (ch x3)
      (@eleq1 (cv y) (A2 x3) B2)
      (elrab2w_2 x3 y))
    (λ x3 y, @eqtri (C x3 y) (crab (λ x3, ph x3) (λ x3, B2)) (cab (λ x3, wa (wcel (cv x3) B2) (ph x3)))
      (elrab2w_3 x3 y)
      (@df_rab (λ x3, ph x3) (λ x3, B2))) x3 y)


/-- Universal quantification over a class abstraction. (Contributed by Jeff Madsen, 10-Jun-2010.) -/
theorem ralab {ph : setvar → setvar → wff} {ps : setvar → wff} {ch : setvar → setvar → wff}
  (ralab_1 : ∀ x3 y, ⊦ wi (wceq (cv y) (cv x3)) (wb (ph x3 y) (ps x3)))
  (y : setvar) : ⊦ wb (wral (λ x3, ch x3 y) (λ x3, cab (λ y, ph x3 y))) (wal (λ x3, wi (ps x3) (ch x3 y))) :=
@bitri (wral (λ x3, ch x3 y) (λ x3, cab (λ y, ph x3 y))) (wal (λ x3, wi (wcel (cv x3) (cab (λ y, ph x3 y))) (ch x3 y))) (wal (λ x3, wi (ps x3) (ch x3 y)))
  (@df_ral (λ x3, ch x3 y) (λ x3, cab (λ y, ph x3 y)))
  (@albii (λ x3, wi (wcel (cv x3) (cab (λ y, ph x3 y))) (ch x3 y)) (λ x3, wi (ps x3) (ch x3 y))
    (λ x3, @imbi1i (wcel (cv x3) (cab (λ y, ph x3 y))) (ps x3) (ch x3 y)
      (@elab (λ y, ph x3 y) (ps x3) (cv x3)
        (@vex x3)
        (λ y, ralab_1 x3 y))))


/-- Universal quantification over a restricted class abstraction. (Contributed by Jeff Madsen,
10-Jun-2010.) -/
theorem ralrab {ph : setvar → setvar → wff} {ps : setvar → wff} {ch : setvar → setvar → wff} {A2 : setvar → «class»}
  (ralab_1 : ∀ x3 y, ⊦ wi (wceq (cv y) (cv x3)) (wb (ph x3 y) (ps x3)))
  (y : setvar) : ⊦ wb (wral (λ x3, ch x3 y) (λ x3, crab (λ y, ph x3 y) (λ y, A2 x3))) (wral (λ x3, wi (ps x3) (ch x3 y)) (λ x3, A2 x3)) :=
@ralbii2 (λ x3, ch x3 y) (λ x3, wi (ps x3) (ch x3 y)) (λ x3, crab (λ y, ph x3 y) (λ y, A2 x3)) (λ x3, A2 x3)
  (λ x3, @bitri (wi (wcel (cv x3) (crab (λ y, ph x3 y) (λ y, A2 x3))) (ch x3 y)) (wi (wa (wcel (cv x3) (A2 x3)) (ps x3)) (ch x3 y)) (wi (wcel (cv x3) (A2 x3)) (wi (ps x3) (ch x3 y)))
    (@imbi1i (wcel (cv x3) (crab (λ y, ph x3 y) (λ y, A2 x3))) (wa (wcel (cv x3) (A2 x3)) (ps x3)) (ch x3 y)
      (@elrab (λ y, ph x3 y) (ps x3) (cv x3) (A2 x3)
        (λ y, ralab_1 x3 y)))
    (@impexp (wcel (cv x3) (A2 x3)) (ps x3) (ch x3 y)))


/-- Existential quantification over a class abstraction. (Contributed by Jeff Madsen, 17-Jun-2011.)
(Revised by Mario Carneiro, 3-Sep-2015.) -/
theorem rexrab {ph : setvar → setvar → wff} {ps : setvar → wff} {ch : setvar → setvar → wff} {A2 : setvar → «class»}
  (ralab_1 : ∀ x3 y, ⊦ wi (wceq (cv y) (cv x3)) (wb (ph x3 y) (ps x3)))
  (y : setvar) : ⊦ wb (wrex (λ x3, ch x3 y) (λ x3, crab (λ y, ph x3 y) (λ y, A2 x3))) (wrex (λ x3, wa (ps x3) (ch x3 y)) (λ x3, A2 x3)) :=
@rexbii2 (λ x3, ch x3 y) (λ x3, wa (ps x3) (ch x3 y)) (λ x3, crab (λ y, ph x3 y) (λ y, A2 x3)) (λ x3, A2 x3)
  (λ x3, @bitri (wa (wcel (cv x3) (crab (λ y, ph x3 y) (λ y, A2 x3))) (ch x3 y)) (wa (wa (wcel (cv x3) (A2 x3)) (ps x3)) (ch x3 y)) (wa (wcel (cv x3) (A2 x3)) (wa (ps x3) (ch x3 y)))
    (@anbi1i (wcel (cv x3) (crab (λ y, ph x3 y) (λ y, A2 x3))) (wa (wcel (cv x3) (A2 x3)) (ps x3)) (ch x3 y)
      (@elrab (λ y, ph x3 y) (ps x3) (cv x3) (A2 x3)
        (λ y, ralab_1 x3 y)))
    (@anass (wcel (cv x3) (A2 x3)) (ps x3) (ch x3 y)))


/-- Universal quantification over a class abstraction. (Contributed by Mario Carneiro, 3-Sep-2015.)
Drop ~ ax-8 . (Revised by Gino Giotto, 1-Dec-2023.) -/
theorem ralab2 {ph ps ch : setvar → wff}
  (ralab2_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ps x3) (ch y))) :
  ⊦ wb (wral (λ x3, ps x3) (λ x3, cab (λ y, ph y))) (wal (λ y, wi (ph y) (ch y))) :=
@bitri (wral (λ x3, ps x3) (λ x3, cab (λ y, ph y))) (wal (λ x3, wi (wcel (cv x3) (cab (λ y, ph y))) (ps x3))) (wal (λ y, wi (ph y) (ch y)))
  (@df_ral (λ x3, ps x3) (λ x3, cab (λ y, ph y)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wb (wal (λ x3, wi (wcel (cv x3) (cab (λ y, ph y))) (ps x3))) (wal (λ y, wi (ph y) (ch y))), from
    @cbvalv1 (λ x3 y, wi (wcel (cv x3) (cab (λ y, ph y))) (ps x3)) (λ x3 y, wi (ph y) (ch y))
      (λ x3, @nfim (λ y, wcel (cv x3) (cab (λ y, ph y))) (λ y, ps x3)
        (@nfsab1 (λ y x3, ph y) x3)
        (@nfv (ps x3)))
      (λ y, @nfv (wi (ph y) (ch y)))
      (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) (cab (λ y, ph y))) (ph y) (ps x3) (ch y)
        (@bitrdi (wceq (cv x3) (cv y)) (wcel (cv x3) (cab (λ y, ph y))) (wcel (cv y) (cab (λ y, ph y))) (ph y)
          (@eleq1ab_b (λ x3 y, ph y) x3 y)
          (@abid (λ y, ph y) y))
        (ralab2_1 x3 y)) x3 y)


/-- Identity used to create closed-form versions of bound-variable hypothesis builders for class
expressions. (Contributed by NM, 10-Nov-2005.) (Proof shortened by Mario Carneiro, 12-Oct-2016.) -/
theorem abidnf {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wnfc (λ x3, A2 x3)) (wceq (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (A2 x3)) :=
@abbi1dv (wnfc (λ x3, A2 x3)) (λ z, wal (λ x3, wcel (cv z) (A2 x3))) (A2 x3)
  (λ z, @impbid2 (wnfc (λ x3, A2 x3)) (wal (λ x3, wcel (cv z) (A2 x3))) (wcel (cv z) (A2 x3))
    (@sp (λ x3, wcel (cv z) (A2 x3)) x3)
    (@nf5rd (λ x3, wnfc (λ x3, A2 x3)) (λ x3, wcel (cv z) (A2 x3))
      (λ x3, @nfcr (λ x3 z, A2 x3) z) x3))


/-- There exists at most one set equal to a given class. (Contributed by NM, 8-Mar-1995.) Shorten
combined proofs of ~ moeq and ~ eueq . (Proof shortened by BJ, 24-Sep-2022.) -/
theorem moeq {A2 : «class»} :
  ⊦ wmo (λ x3, wceq (cv x3) A2) :=
@mpbir (wmo (λ x3, wceq (cv x3) A2)) (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) A2)) (wceq (cv x3) (cv y)))))
  (@gen2 (λ x3 y, wi (wa (wceq (cv x3) A2) (wceq (cv y) A2)) (wceq (cv x3) (cv y)))
    (λ x3 y, @eqtr3 (cv x3) (cv y) A2))
  (@mo4 (λ x3, wceq (cv x3) A2) (λ y, wceq (cv y) A2)
    (λ x3 y, @eqeq1 (cv x3) (cv y) A2))


/-- A class is a set if and only if there exists a unique set equal to it. (Contributed by NM,
25-Nov-1994.) Shorten combined proofs of ~ moeq and ~ eueq . (Proof shortened by BJ, 24-Sep-2022.)
-/
theorem eueq {A2 : «class»} :
  ⊦ wb (wcel A2 cvv) (weu (λ x3, wceq (cv x3) A2)) :=
@«3bitr4i» (wex (λ x3, wceq (cv x3) A2)) (wa (wex (λ x3, wceq (cv x3) A2)) (wmo (λ x3, wceq (cv x3) A2))) (wcel A2 cvv) (weu (λ x3, wceq (cv x3) A2))
  (@biantru (wmo (λ x3, wceq (cv x3) A2)) (wex (λ x3, wceq (cv x3) A2))
    (@moeq A2))
  (@isset A2)
  (@df_eu (λ x3, wceq (cv x3) A2))


/-- There exists a unique set equal to a given set. Inference associated with ~ euequ . See ~ euequ
in the case of a setvar. (Contributed by NM, 5-Apr-1995.) -/
theorem eueqi {A2 : «class»}
  (eueqi_1 : ⊦ wcel A2 cvv) :
  ⊦ weu (λ x3, wceq (cv x3) A2) :=
@mpbi (wcel A2 cvv) (weu (λ x3, wceq (cv x3) A2))
  eueqi_1
  (@eueq A2)


/-- Theorem for inferring "at most one." (Contributed by NM, 17-Oct-1996.) -/
theorem mo2icl {ph : setvar → wff} {A2 : «class»} :
  ⊦ wi (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wmo (λ x3, ph x3)) :=
@pm2_61i (wcel A2 cvv) (wi (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wmo (λ x3, ph x3)))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wi (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wmo (λ x3, ph x3))), from
    @vtoclg (λ y, wi (wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) (wmo (λ x3, ph x3))) (wi (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wmo (λ x3, ph x3))) A2 (λ y, cvv)
      (λ y, @imbi1d (wceq (cv y) A2) (wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wmo (λ x3, ph x3))
        (@albidv (wceq (cv y) A2) (λ x3, wi (ph x3) (wceq (cv x3) (cv y))) (λ x3, wi (ph x3) (wceq (cv x3) A2))
          (λ x3, @imbi2d (wceq (cv y) A2) (wceq (cv x3) (cv y)) (wceq (cv x3) A2) (ph x3)
            (@eqeq2 (cv y) A2 (cv x3)))))
      (λ y, @sylibr (wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) (wex (λ y, wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y))))) (wmo (λ x3, ph x3))
        (@«19_8a» (λ y, wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) y)
        (@df_mo (λ x3, ph x3))) y)
  (@syl6 (wn (wcel A2 cvv)) (wal (λ x3, wi (ph x3) (wceq (cv x3) A2))) (wal (λ x3, wn (ph x3))) (wmo (λ x3, ph x3))
    (@alimdv (wn (wcel A2 cvv)) (λ x3, wi (ph x3) (wceq (cv x3) A2)) (λ x3, wn (ph x3))
      (λ x3, @con3rr3 (wi (ph x3) (wceq (cv x3) A2)) (ph x3) (wcel A2 cvv)
        (@imim2i (wceq (cv x3) A2) (wcel A2 cvv) (ph x3)
          (@eqvisset (λ x3, A2) x3))))
    (@sylbi (wal (λ x3, wn (ph x3))) (wn (wex (λ x3, ph x3))) (wmo (λ x3, ph x3))
      (@alnex (λ x3, ph x3))
      (@nexmo (λ x3, ph x3))))


/-- Consequence of "at most one." (Contributed by NM, 2-Jan-2015.) -/
theorem mob2 {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (moi2_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (w3a (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3)) (wb (wceq (cv x3) A2) ps) :=
@impbid (w3a (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3)) (wceq (cv x3) A2) ps
  (@syl5ibcom (w3a (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3)) (ph x3) (wceq (cv x3) A2) ps
    (@simp3 (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3))
    (moi2_1 x3))
  (@«3impia» (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3) (wi ps (wceq (cv x3) A2))
    (@expd (wa (wcel A2 (B2 x3)) (wmo (λ x3, ph x3))) (ph x3) ps (wceq (cv x3) A2)
      (@impel (wcel A2 (B2 x3)) (wal (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y)))) (wi (wa (ph x3) ps) (wceq (cv x3) A2)) (wmo (λ x3, ph x3))
        (setvar.forget $ λ y : setvar,
          show ⊦ wi (wcel A2 (B2 x3)) (wi (wal (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y)))) (wi (wa (ph x3) ps) (wceq (cv x3) A2))), from
          @spcgv (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y))) (wi (wa (ph x3) ps) (wceq (cv x3) A2)) A2 (λ y, B2 x3)
            (λ y, @imbi12d (wceq (cv y) A2) (wa (ph x3) (wsb (λ x3, ph x3) y)) (wa (ph x3) ps) (wceq (cv x3) (cv y)) (wceq (cv x3) A2)
              (@anbi2d (wceq (cv y) A2) (wsb (λ x3, ph x3) y) ps (ph x3)
                (setvar.forget $ λ x3 : setvar,
                  show ⊦ wi (wceq (cv y) A2) (wb (wsb (λ x3, ph x3) y) ps), from
                  @sbhypf (λ x3 y, ph x3) (λ x3 y, ps) (λ y, A2)
                    (λ y, @nfv ps)
                    (λ x3 y, moi2_1 x3) x3 y))
              (@eqeq2 (cv y) A2 (cv x3))) y)
        (@sylbi (wmo (λ x3, ph x3)) (wal (λ x3, wal (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y))))) (wal (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y))))
          (@mo4f (λ x3, ph x3) (λ x3 y, wsb (λ x3, ph x3) y)
            (λ y, @nfs1v (λ x3 y, ph x3) y)
            (λ x3 y, @sbequ12 (λ x3 y, ph x3) x3 y))
          (@sp (λ x3, wal (λ y, wi (wa (ph x3) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y)))) x3)))))


/-- Consequence of "at most one." (Contributed by NM, 29-Jun-2008.) -/
theorem moi2 {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (moi2_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wa (wa (wcel A2 (B2 x3)) (wmo (λ x3, ph x3))) (wa (ph x3) ps)) (wceq (cv x3) A2) :=
@impr (wa (wcel A2 (B2 x3)) (wmo (λ x3, ph x3))) (ph x3) ps (wceq (cv x3) A2)
  (@biimprd (wa (wa (wcel A2 (B2 x3)) (wmo (λ x3, ph x3))) (ph x3)) (wceq (cv x3) A2) ps
    (@«3expa» (wcel A2 (B2 x3)) (wmo (λ x3, ph x3)) (ph x3) (wb (wceq (cv x3) A2) ps)
      (@mob2 (λ x3, ph x3) ps A2 (λ x3, B2 x3)
        (λ x3, moi2_1 x3) x3)))


/-- Equality implied by "at most one." (Contributed by NM, 18-Feb-2006.) -/
theorem mob {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»} {C D : setvar → «class»}
  (moi_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (moi_2 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch))
  (x3 : setvar) : ⊦ wi (w3a (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) ps) (wb (wceq A2 B2) ch) :=
@«3impib» (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) ps (wb (wceq A2 B2) ch)
  (@imp (wcel A2 (C x3)) (wcel B2 (D x3)) (wi (wa (wmo (λ x3, ph x3)) ps) (wb (wceq A2 B2) ch))
    (@com3r (wcel B2 (D x3)) (wa (wmo (λ x3, ph x3)) ps) (wcel A2 (C x3)) (wb (wceq A2 B2) ch)
      (@syl (wcel B2 (D x3)) (wcel B2 cvv) (wi (wa (wmo (λ x3, ph x3)) ps) (wi (wcel A2 (C x3)) (wb (wceq A2 B2) ch)))
        (@elex B2 (D x3))
        (@«3expib» (wcel B2 cvv) (wmo (λ x3, ph x3)) ps (wi (wcel A2 (C x3)) (wb (wceq A2 B2) ch))
          (@com12 (wcel A2 (C x3)) (w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) ps) (wb (wceq A2 B2) ch)
            (@vtoclg1f (λ x3, wi (w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) (ph x3)) (wb (wceq (cv x3) B2) ch)) (λ x3, wi (w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) ps) (wb (wceq A2 B2) ch)) A2 (λ x3, C x3)
              (@nfim (λ x3, w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) ps) (λ x3, wb (wceq A2 B2) ch)
                (@nf3an (λ x3, wcel B2 cvv) (λ x3, wmo (λ x3, ph x3)) (λ x3, ps)
                  (@nfv (wcel B2 cvv))
                  (@nfmo1 (λ x3, ph x3))
                  (@nfv ps))
                (@nfv (wb (wceq A2 B2) ch)))
              (λ x3, @imbi12d (wceq (cv x3) A2) (w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) (ph x3)) (w3a (wcel B2 cvv) (wmo (λ x3, ph x3)) ps) (wb (wceq (cv x3) B2) ch) (wb (wceq A2 B2) ch)
                (@«3anbi3d» (wceq (cv x3) A2) (ph x3) ps (wcel B2 cvv) (wmo (λ x3, ph x3))
                  (moi_1 x3))
                (@bibi1d (wceq (cv x3) A2) (wceq (cv x3) B2) (wceq A2 B2) ch
                  (@eqeq1 (cv x3) A2 B2)))
              (λ x3, @mob2 (λ x3, ph x3) ch B2 (λ x3, cvv)
                (λ x3, moi_2 x3) x3) x3))))))


/-- Equality implied by "at most one." (Contributed by NM, 18-Feb-2006.) -/
theorem moi {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»} {C D : setvar → «class»}
  (moi_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (moi_2 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch))
  (x3 : setvar) : ⊦ wi (w3a (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) (wa ps ch)) (wceq A2 B2) :=
@«3impia» (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) (wa ps ch) (wceq A2 B2)
  (@impd (wa (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3))) ps ch (wceq A2 B2)
    (@«3expia» (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) ps (wi ch (wceq A2 B2))
      (@biimprd (w3a (wa (wcel A2 (C x3)) (wcel B2 (D x3))) (wmo (λ x3, ph x3)) ps) (wceq A2 B2) ch
        (@mob (λ x3, ph x3) ps ch A2 B2 (λ x3, C x3) (λ x3, D x3)
          (λ x3, moi_1 x3)
          (λ x3, moi_2 x3) x3))))


/-- A way to express restricted uniqueness. (Contributed by NM, 20-Oct-2006.) -/
theorem reu6 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2)) (wrex (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (λ y, A2)) :=
@bitri (wreu (λ x3, ph x3) (λ x3, A2)) (weu (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wrex (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (λ y, A2))
  (@df_reu (λ x3, ph x3) (λ x3, A2))
  (@«3bitr4i» (wex (λ y, wal (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))))) (wex (λ y, wa (wcel (cv y) A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)))) (weu (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wrex (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (λ y, A2))
    (@exbii (λ y, wal (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))) (λ y, wa (wcel (cv y) A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)))
      (λ y, @«3bitr4i» (wal (λ x3, wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))))) (wa (wcel (cv y) A2) (wal (λ x3, wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))))) (wal (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))) (wa (wcel (cv y) A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)))
        (@«19_28v» (wcel (cv y) A2) (λ x3, wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))))
        (@impbii (wal (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))) (wal (λ x3, wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))))
          (@axc4i (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))) (λ x3, wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))))
            (λ x3, @jca (wal (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))) (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))
              (@spimvw (λ x3 y, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))) (λ y, wcel (cv y) A2)
                (λ x3 y, @syl6bi (wceq (cv x3) (cv y)) (wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))) (wb (wa (wcel (cv y) A2) (wsb (λ x3, ph x3) y)) (wceq (cv y) (cv y))) (wcel (cv y) A2)
                  (@bibi12d (wceq (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (wsb (λ x3, ph x3) y)) (wceq (cv x3) (cv y)) (wceq (cv y) (cv y))
                    (@anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (wsb (λ x3, ph x3) y)
                      (@eleq1w (λ x3 y, A2) x3 y)
                      (@sbequ12 (λ x3 y, ph x3) x3 y))
                    (@equequ1_b1 x3 y))
                  (@sylbir (wb (wa (wcel (cv y) A2) (wsb (λ x3, ph x3) y)) (wceq (cv y) (cv y))) (wa (wcel (cv y) A2) (wsb (λ x3, ph x3) y)) (wcel (cv y) A2)
                    (@tbt (wceq (cv y) (cv y)) (wa (wcel (cv y) A2) (wsb (λ x3, ph x3) y))
                      (@equid y))
                    (@simpl (wcel (cv y) A2) (wsb (λ x3, ph x3) y)))) y)
              (@sps (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))) (λ x3, wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))
                (λ x3, @biimprcd (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))) (wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))
                  (@bibi1d (wcel (cv x3) A2) (ph x3) (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))
                    (@ibar (wcel (cv x3) A2) (ph x3)))) x3)))
          (@alimi (λ x3, wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (λ x3, wb (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y)))
            (λ x3, @impbid (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))
              (@adantl (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))) (wi (wa (wcel (cv x3) A2) (ph x3)) (wceq (cv x3) (cv y))) (wcel (cv y) A2)
                (@impd (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))) (wcel (cv x3) A2) (ph x3) (wceq (cv x3) (cv y))
                  (@imim2i (wb (ph x3) (wceq (cv x3) (cv y))) (wi (ph x3) (wceq (cv x3) (cv y))) (wcel (cv x3) A2)
                    (@biimp (ph x3) (wceq (cv x3) (cv y))))))
              (@ex (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wceq (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3))
                (@jcai (wa (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wceq (cv x3) (cv y))) (wcel (cv x3) A2) (ph x3)
                  (@imp (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wceq (cv x3) (cv y)) (wcel (cv x3) A2)
                    (@adantr (wcel (cv y) A2) (wi (wceq (cv x3) (cv y)) (wcel (cv x3) A2)) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))
                      (@biimprcd (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2)
                        (@eleq1w (λ x3 y, A2) x3 y))))
                  (@syl6ci (wa (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wceq (cv x3) (cv y))) (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))) (wceq (cv x3) (cv y)) (ph x3)
                    (@simplr (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y)))) (wceq (cv x3) (cv y)))
                    (@simpr (wa (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wceq (cv x3) (cv y)))
                    (@biimpr (ph x3) (wceq (cv x3) (cv y)))))))))
        (@anbi2i (wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wb (ph x3) (wceq (cv x3) (cv y))))) (wcel (cv y) A2)
          (@df_ral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)))))
    (@eu6 (λ x3, wa (wcel (cv x3) A2) (ph x3)))
    (@df_rex (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (λ y, A2)))


/-- A condition which implies existential uniqueness. (Contributed by Mario Carneiro, 2-Oct-2015.)
-/
theorem reu6i {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wa (wcel B2 A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2))) (wreu (λ x3, ph x3) (λ x3, A2)) :=
@sylibr (wa (wcel B2 A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2))) (wrex (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (λ y, A2)) (wreu (λ x3, ph x3) (λ x3, A2))
  (@rspcev (λ y, wral (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, A2)) (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) B2 A2
    (λ y, @ralbidv (wceq (cv y) B2) (λ x3, wb (ph x3) (wceq (cv x3) (cv y))) (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2)
      (λ x3, @bibi2d (wceq (cv y) B2) (wceq (cv x3) (cv y)) (wceq (cv x3) B2) (ph x3)
        (@eqeq2 (cv y) B2 (cv x3)))))
  (@reu6 (λ x3, ph x3) A2)


/-- A condition which implies existential uniqueness. (Contributed by Mario Carneiro, 2-Oct-2015.)
-/
theorem eqreu {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (eqreu_1 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ps)) :
  ⊦ wi (w3a (wcel B2 A2) ps (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2))) (wreu (λ x3, ph x3) (λ x3, A2)) :=
@«3com23» (wcel B2 A2) (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) ps (wreu (λ x3, ph x3) (λ x3, A2))
  (@«3impib» (wcel B2 A2) (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) ps (wreu (λ x3, ph x3) (λ x3, A2))
    (@sylbird (wcel B2 A2) (wa (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) ps) (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) (wreu (λ x3, ph x3) (λ x3, A2))
      (@syl5bb (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) (wa (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) (wral (λ x3, wi (wceq (cv x3) B2) (ph x3)) (λ x3, A2))) (wcel B2 A2) (wa (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) ps)
        (@ralbiim (λ x3, ph x3) (λ x3, wceq (cv x3) B2) (λ x3, A2))
        (@anbi2d (wcel B2 A2) (wral (λ x3, wi (wceq (cv x3) B2) (ph x3)) (λ x3, A2)) ps (wral (λ x3, wi (ph x3) (wceq (cv x3) B2)) (λ x3, A2))
          (@ceqsralv (λ x3, ph x3) ps B2 A2
            (λ x3, eqreu_1 x3))))
      (@ex (wcel B2 A2) (wral (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, A2)) (wreu (λ x3, ph x3) (λ x3, A2))
        (@reu6i (λ x3, ph x3) A2 B2))))


/-- Restricted "at most one" using implicit substitution. (Contributed by NM, 24-Oct-2006.) (Revised
by NM, 16-Jun-2017.) -/
theorem rmo4 {ph ps : setvar → wff} {A2 : «class»}
  (rmo4_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wrmo (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2)) :=
@bitri (wrmo (λ x3, ph x3) (λ x3, A2)) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2))
  (@df_rmo (λ x3, ph x3) (λ x3, A2))
  (@«3bitr4i» (wal (λ x3, wal (λ y, wi (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wceq (cv x3) (cv y))))) (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)))) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2))
    (@albii (λ x3, wal (λ y, wi (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wceq (cv x3) (cv y)))) (λ x3, wi (wcel (cv x3) A2) (wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)))
      (λ x3, @«3bitr2i» (wal (λ y, wi (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wceq (cv x3) (cv y)))) (wal (λ y, wi (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))))) (wral (λ y, wi (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))) (λ y, A2)) (wi (wcel (cv x3) A2) (wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)))
        (@albii (λ y, wi (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wceq (cv x3) (cv y))) (λ y, wi (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))))
          (λ y, @«3bitri» (wi (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wceq (cv x3) (cv y))) (wi (wa (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wa (ph x3) (ps y))) (wceq (cv x3) (cv y))) (wi (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))) (wi (wcel (cv y) A2) (wi (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))))
            (@imbi1i (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wa (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wa (ph x3) (ps y))) (wceq (cv x3) (cv y))
              (@bitri (wa (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv y) A2) (ps y))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wa (ph x3) (ps y))) (wa (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wa (ph x3) (ps y)))
                (@an4 (wcel (cv x3) A2) (ph x3) (wcel (cv y) A2) (ps y))
                (@anbi1i (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wa (ph x3) (ps y))
                  (@ancom (wcel (cv x3) A2) (wcel (cv y) A2)))))
            (@impexp (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))
            (@impexp (wcel (cv y) A2) (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))))))
        (@df_ral (λ y, wi (wcel (cv x3) A2) (wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y)))) (λ y, A2))
        (@r19_21v (wcel (cv x3) A2) (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2))))
    (@mo4 (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ y, wa (wcel (cv y) A2) (ps y))
      (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
        (@eleq1w (λ x3 y, A2) x3 y)
        (rmo4_1 x3 y)))
    (@df_ral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2)))


/-- Restricted uniqueness using implicit substitution. (Contributed by NM, 23-Nov-1994.) -/
theorem reu4 {ph ps : setvar → wff} {A2 : «class»}
  (rmo4_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2)) (wa (wrex (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2))) :=
@bitri (wreu (λ x3, ph x3) (λ x3, A2)) (wa (wrex (λ x3, ph x3) (λ x3, A2)) (wrmo (λ x3, ph x3) (λ x3, A2))) (wa (wrex (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2)))
  (@reu5 (λ x3, ph x3) (λ x3, A2))
  (@anbi2i (wrmo (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, wral (λ y, wi (wa (ph x3) (ps y)) (wceq (cv x3) (cv y))) (λ y, A2)) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, A2))
    (@rmo4 (λ x3, ph x3) (λ y, ps y) A2
      (λ x3 y, rmo4_1 x3 y)))


/-- Restricted uniqueness using implicit substitution. (Contributed by NM, 24-Oct-2006.) -/
theorem reu8 {ph ps : setvar → wff} {A2 : «class»}
  (rmo4_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2))) (λ x3, A2)) :=
@«3bitri» (wreu (λ x3, ph x3) (λ x3, A2)) (wreu (λ y, ps y) (λ y, A2)) (wrex (λ x3, wral (λ y, wb (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (λ x3, A2)) (wrex (λ x3, wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2))) (λ x3, A2))
  (@cbvreuvw (λ x3, ph x3) (λ y, ps y) A2
    (λ x3 y, rmo4_1 x3 y))
  (@reu6 (λ y, ps y) A2)
  (@rexbiia (λ x3, wral (λ y, wb (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (λ x3, wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2))) (λ x3, A2)
    (λ x3, @syl5bb (wral (λ y, wb (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (wral (λ y, wa (wi (ps y) (wceq (cv y) (cv x3))) (wi (wceq (cv y) (cv x3)) (ps y))) (λ y, A2)) (wcel (cv x3) A2) (wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)))
      (@ralbii (λ y, wb (ps y) (wceq (cv y) (cv x3))) (λ y, wa (wi (ps y) (wceq (cv y) (cv x3))) (wi (wceq (cv y) (cv x3)) (ps y))) (λ y, A2)
        (λ y, @dfbi2 (ps y) (wceq (cv y) (cv x3))))
      (@bitr4id (wcel (cv x3) A2) (wral (λ y, wa (wi (ps y) (wceq (cv y) (cv x3))) (wi (wceq (cv y) (cv x3)) (ps y))) (λ y, A2)) (wa (wral (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (wral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2))) (wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)))
        (@r19_26 (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2))
        (@syl5bb (wa (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2))) (wa (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)) (ph x3)) (wcel (cv x3) A2) (wa (wral (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (wral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2)))
          (@ancom (ph x3) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)))
          (@anbi12d (wcel (cv x3) A2) (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)) (wral (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, A2)) (ph x3) (wral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2))
            (@a1i (wb (wral (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, A2)) (wral (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, A2))) (wcel (cv x3) A2)
              (@ralbii (λ y, wi (ps y) (wceq (cv x3) (cv y))) (λ y, wi (ps y) (wceq (cv y) (cv x3))) (λ y, A2)
                (λ y, @imbi2i (wceq (cv x3) (cv y)) (wceq (cv y) (cv x3)) (ps y)
                  (@equcom x3 y))))
            (@bitrdi (wcel (cv x3) A2) (ph x3) (wi (wcel (cv x3) A2) (ph x3)) (wral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2))
              (@biimt (wcel (cv x3) A2) (ph x3))
              (@«3bitrri» (wral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2)) (wal (λ y, wi (wcel (cv y) A2) (wi (wceq (cv y) (cv x3)) (ps y)))) (wal (λ y, wi (wceq (cv y) (cv x3)) (wi (wcel (cv y) A2) (ps y)))) (wi (wcel (cv x3) A2) (ph x3))
                (@df_ral (λ y, wi (wceq (cv y) (cv x3)) (ps y)) (λ y, A2))
                (@albii (λ y, wi (wcel (cv y) A2) (wi (wceq (cv y) (cv x3)) (ps y))) (λ y, wi (wceq (cv y) (cv x3)) (wi (wcel (cv y) A2) (ps y)))
                  (λ y, @bi2_04 (wcel (cv y) A2) (wceq (cv y) (cv x3)) (ps y)))
                (@equsalvw (λ y x3, wi (wcel (cv y) A2) (ps y)) (λ x3, wi (wcel (cv x3) A2) (ph x3))
                  (λ y x3, @equcoms (λ x3 y, wb (wi (wcel (cv y) A2) (ps y)) (wi (wcel (cv x3) A2) (ph x3)))
                    (λ x3 y, @bicomd (wceq (cv x3) (cv y)) (wi (wcel (cv x3) A2) (ph x3)) (wi (wcel (cv y) A2) (ps y))
                      (@imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
                        (@eleq1w (λ x3 y, A2) x3 y)
                        (rmo4_1 x3 y))) x3 y) x3))))))))


/-- Restricted "at most one" still holds when a conjunct is added. (Contributed by NM, 16-Jun-2017.)
-/
theorem rmoan {ph ps : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wi (wrmo (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, wa (ps x3) (ph x3)) (λ x3, A2 x3)) :=
@«3imtr4i» (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ps x3) (ph x3)))) (wrmo (λ x3, ph x3) (λ x3, A2 x3)) (wrmo (λ x3, wa (ps x3) (ph x3)) (λ x3, A2 x3))
  (@sylib (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wmo (λ x3, wa (ps x3) (wa (wcel (cv x3) (A2 x3)) (ph x3)))) (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ps x3) (ph x3))))
    (@moan (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, ps x3))
    (@mobii (λ x3, wa (ps x3) (wa (wcel (cv x3) (A2 x3)) (ph x3))) (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ps x3) (ph x3)))
      (λ x3, @an12 (ps x3) (wcel (cv x3) (A2 x3)) (ph x3))))
  (@df_rmo (λ x3, ph x3) (λ x3, A2 x3))
  (@df_rmo (λ x3, wa (ps x3) (ph x3)) (λ x3, A2 x3))


/-- A condition allowing swap of uniqueness and existential quantifiers. (Contributed by Thierry
Arnoux, 7-Apr-2017.) (Revised by NM, 16-Jun-2017.) -/
theorem «2reuswap» {ph : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»} :
  ⊦ wi (wral (λ x3, wrmo (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wi (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))) :=
@sylbi (wral (λ x3, wrmo (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wi (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y)))
  (@ralbii (λ x3, wrmo (λ y, ph x3 y) (λ y, B2 y)) (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)
    (λ x3, @df_rmo (λ y, ph x3 y) (λ y, B2 y)))
  (@sylbi (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wi (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y)))
    (@bitr4i (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
      (@df_ral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2))
      (@albii (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))) (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))))
        (λ x3, @moanimv (wcel (cv x3) A2) (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))))
    (@«3imtr4g» (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (weu (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (weu (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))
      (@«2euswapv» (λ x3 y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
      (@bitri (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (weu (λ x3, wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y)))) (weu (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
        (@df_reu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2))
        (@eubii (λ x3, wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
          (λ x3, @bitri (wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (wex (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y)))) (wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
            (@bitr3i (wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (wrex (λ y, wa (wcel (cv x3) A2) (ph x3 y)) (λ y, B2 y)) (wex (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y))))
              (@r19_42v (wcel (cv x3) A2) (λ y, ph x3 y) (λ y, B2 y))
              (@df_rex (λ y, wa (wcel (cv x3) A2) (ph x3 y)) (λ y, B2 y)))
            (@exbii (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y))) (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))
              (λ y, @an12 (wcel (cv y) (B2 y)) (wcel (cv x3) A2) (ph x3 y))))))
      (@bitri (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y)) (weu (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2)))) (weu (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
        (@df_reu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))
        (@eubii (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2))) (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
          (λ y, @bitr3i (wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2))) (wrex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)) (wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
            (@r19_42v (wcel (cv y) (B2 y)) (λ x3, ph x3 y) (λ x3, A2))
            (@df_rex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)))))))


/-- A condition allowing swap of uniqueness and existential quantifiers. (Contributed by Thierry
Arnoux, 7-Apr-2017.) -/
theorem «2reuswap2» {ph : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»} :
  ⊦ wi (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wi (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))) :=
@sylbi (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wi (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y)))
  (@bitr4i (wral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
    (@df_ral (λ x3, wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))) (λ x3, A2))
    (@albii (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))) (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y))))
      (λ x3, @moanimv (wcel (cv x3) A2) (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))))
  (@«3imtr4g» (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (weu (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (weu (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))) (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))
    (@«2euswapv» (λ x3 y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
    (@bitri (wreu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2)) (weu (λ x3, wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y)))) (weu (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
      (@df_reu (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2))
      (@eubii (λ x3, wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
        (λ x3, @bitri (wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (wex (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y)))) (wex (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
          (@bitr3i (wa (wcel (cv x3) A2) (wrex (λ y, ph x3 y) (λ y, B2 y))) (wrex (λ y, wa (wcel (cv x3) A2) (ph x3 y)) (λ y, B2 y)) (wex (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y))))
            (@r19_42v (wcel (cv x3) A2) (λ y, ph x3 y) (λ y, B2 y))
            (@df_rex (λ y, wa (wcel (cv x3) A2) (ph x3 y)) (λ y, B2 y)))
          (@exbii (λ y, wa (wcel (cv y) (B2 y)) (wa (wcel (cv x3) A2) (ph x3 y))) (λ y, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))
            (λ y, @an12 (wcel (cv y) (B2 y)) (wcel (cv x3) A2) (ph x3 y))))))
    (@bitri (wreu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y)) (weu (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2)))) (weu (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y)))))
      (@df_reu (λ y, wrex (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))
      (@eubii (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2))) (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
        (λ y, @bitr3i (wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2))) (wrex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)) (wex (λ x3, wa (wcel (cv x3) A2) (wa (wcel (cv y) (B2 y)) (ph x3 y))))
          (@r19_42v (wcel (cv y) (B2 y)) (λ x3, ph x3 y) (λ x3, A2))
          (@df_rex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2))))))


/-- Transfer existential uniqueness from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by NM, 16-Jan-2012.) Separate variables ` B ` and ` C ` . (Revised
by Thierry Arnoux, 8-Oct-2017.) -/
theorem reuxfrd {ph : wff} {ps : setvar → wff} {A2 : setvar → «class»} {B2 C : «class»}
  (reuxfrd_1 : ∀ y, ⊦ wi (wa ph (wcel (cv y) C)) (wcel (A2 y) B2))
  (reuxfrd_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wrmo (λ y, wceq (cv x3) (A2 y)) (λ y, C))) :
  ⊦ wi ph (wb (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)) (wreu (λ y, ps y) (λ y, C))) :=
@bitrd ph (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)) (wreu (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, C)) (wreu (λ y, ps y) (λ y, C))
  (@impbid1 ph (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)) (wreu (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, C))
    (@syl ph (wral (λ x3, wrmo (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)) (wi (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)) (wreu (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, C)))
      (@ralrimiva ph (λ x3, wrmo (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)
        (λ x3, @sylib (wa ph (wcel (cv x3) B2)) (wrmo (λ y, wa (ps y) (wceq (cv x3) (A2 y))) (λ y, C)) (wrmo (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C))
          (@syl (wa ph (wcel (cv x3) B2)) (wrmo (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (wrmo (λ y, wa (ps y) (wceq (cv x3) (A2 y))) (λ y, C))
            (reuxfrd_2 x3)
            (@rmoan (λ y, wceq (cv x3) (A2 y)) (λ y, ps y) (λ y, C)))
          (@rmobii (λ y, wa (ps y) (wceq (cv x3) (A2 y))) (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)
            (λ y, @ancom (ps y) (wceq (cv x3) (A2 y))))))
      (@«2reuswap» (λ x3 y, wa (wceq (cv x3) (A2 y)) (ps y)) B2 (λ y, C)))
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wreu (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, C)) (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2)), from
      @mprg (λ y, wmo (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) (A2 y)) (ps y)))) (λ y, wi (wreu (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, C)) (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps y)) (λ y, C)) (λ x3, B2))) (λ y, C)
        (λ y, @«2reuswap2» (λ y x3, wa (wceq (cv x3) (A2 y)) (ps y)) C (λ x3, B2))
        (λ y, @a1i (wmo (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) (A2 y)) (ps y)))) (wcel (cv y) C)
          (@mpbi (wmo (λ x3, wa (wa (wcel (cv x3) B2) (ps y)) (wceq (cv x3) (A2 y)))) (wmo (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) (A2 y)) (ps y))))
            (@moani (λ x3, wceq (cv x3) (A2 y)) (λ x3, wa (wcel (cv x3) B2) (ps y))
              (@moeq (A2 y)))
            (@mobii (λ x3, wa (wa (wcel (cv x3) B2) (ps y)) (wceq (cv x3) (A2 y))) (λ x3, wa (wcel (cv x3) B2) (wa (wceq (cv x3) (A2 y)) (ps y)))
              (λ x3, @bitri (wa (wa (wcel (cv x3) B2) (ps y)) (wceq (cv x3) (A2 y))) (wa (wceq (cv x3) (A2 y)) (wa (wcel (cv x3) B2) (ps y))) (wa (wcel (cv x3) B2) (wa (wceq (cv x3) (A2 y)) (ps y)))
                (@ancom (wa (wcel (cv x3) B2) (ps y)) (wceq (cv x3) (A2 y)))
                (@an12 (wceq (cv x3) (A2 y)) (wcel (cv x3) B2) (ps y)))))) y))
  (@reubidva ph (λ y, wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (λ y, ps y) (λ y, C)
    (λ y, @syl (wa ph (wcel (cv y) C)) (wcel (A2 y) B2) (wb (wrex (λ x3, wa (wceq (cv x3) (A2 y)) (ps y)) (λ x3, B2)) (ps y))
      (reuxfrd_1 y)
      (@ceqsrexv (λ x3, ps y) (ps y) (A2 y) B2
        (λ x3, @biidd (wceq (cv x3) (A2 y)) (ps y)))))


/-- Transfer existential uniqueness from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . Cf. ~ reuxfr1ds . (Contributed by Thierry Arnoux, 7-Apr-2017.) -/
theorem reuxfr1d {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 C : «class»}
  (reuxfr1d_1 : ∀ y, ⊦ wi (wa ph (wcel (cv y) C)) (wcel (A2 y) B2))
  (reuxfr1d_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)))
  (reuxfr1d_3 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (A2 y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wreu (λ x3, ps x3) (λ x3, B2)) (wreu (λ y, ch y) (λ y, C))) :=
@bitrd ph (wreu (λ x3, ps x3) (λ x3, B2)) (wreu (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C)) (λ x3, B2)) (wreu (λ y, ch y) (λ y, C))
  (@reubidva ph (λ x3, ps x3) (λ x3, wrex (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C)) (λ x3, B2)
    (λ x3, @bitrd (wa ph (wcel (cv x3) B2)) (ps x3) (wa (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (ps x3)) (wrex (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C))
      (@biantrurd (wa ph (wcel (cv x3) B2)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (ps x3)
        (@syl (wa ph (wcel (cv x3) B2)) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C))
          (reuxfr1d_2 x3)
          (@reurex (λ y, wceq (cv x3) (A2 y)) (λ y, C))))
      (@adantr ph (wb (wa (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (ps x3)) (wrex (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C))) (wcel (cv x3) B2)
        (@bitr3id (wa (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (ps x3)) (wrex (λ y, wa (wceq (cv x3) (A2 y)) (ps x3)) (λ y, C)) ph (wrex (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C))
          (@r19_41v (λ y, wceq (cv x3) (A2 y)) (ps x3) (λ y, C))
          (@rexbidv ph (λ y, wa (wceq (cv x3) (A2 y)) (ps x3)) (λ y, wa (wceq (cv x3) (A2 y)) (ch y)) (λ y, C)
            (λ y, @pm5_32da ph (wceq (cv x3) (A2 y)) (ps x3) (ch y)
              (reuxfr1d_3 x3 y)))))))
  (@reuxfrd ph (λ y, ch y) (λ y, A2 y) B2 C
    (λ y, reuxfr1d_1 y)
    (λ x3, @syl (wa ph (wcel (cv x3) B2)) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)) (wrmo (λ y, wceq (cv x3) (A2 y)) (λ y, C))
      (reuxfr1d_2 x3)
      (@reurmo (λ y, wceq (cv x3) (A2 y)) (λ y, C))))


/-- Transfer existential uniqueness from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . Use ~ reuhypd to eliminate the second hypothesis. (Contributed by NM,
16-Jan-2012.) -/
theorem reuxfr1ds {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 C : «class»}
  (reuxfr1ds_1 : ∀ y, ⊦ wi (wa ph (wcel (cv y) C)) (wcel (A2 y) B2))
  (reuxfr1ds_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)))
  (reuxfr1ds_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 y)) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wreu (λ x3, ps x3) (λ x3, B2)) (wreu (λ y, ch y) (λ y, C))) :=
@reuxfr1d ph (λ x3, ps x3) (λ y, ch y) (λ y, A2 y) B2 C
  (λ y, reuxfr1ds_1 y)
  (λ x3, reuxfr1ds_2 x3)
  (λ x3 y, @adantl (wceq (cv x3) (A2 y)) (wb (ps x3) (ch y)) ph
    (reuxfr1ds_3 x3 y))


/-- Transfer existential uniqueness from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . Use ~ reuhyp to eliminate the second hypothesis. (Contributed by NM,
14-Nov-2004.) -/
theorem reuxfr1 {ph ps : setvar → wff} {A2 : setvar → «class»} {B2 C : «class»}
  (reuxfr1_1 : ∀ y, ⊦ wi (wcel (cv y) C) (wcel (A2 y) B2))
  (reuxfr1_2 : ∀ x3, ⊦ wi (wcel (cv x3) B2) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)))
  (reuxfr1_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, B2)) (wreu (λ y, ps y) (λ y, C)) :=
@mptru (wb (wreu (λ x3, ph x3) (λ x3, B2)) (wreu (λ y, ps y) (λ y, C)))
  (@reuxfr1ds wtru (λ x3, ph x3) (λ y, ps y) (λ y, A2 y) B2 C
    (λ y, @adantl (wcel (cv y) C) (wcel (A2 y) B2) wtru
      (reuxfr1_1 y))
    (λ x3, @adantl (wcel (cv x3) B2) (wreu (λ y, wceq (cv x3) (A2 y)) (λ y, C)) wtru
      (reuxfr1_2 x3))
    (λ x3 y, reuxfr1_3 x3 y))


/-- Relative version of Russell's paradox ~ ru (which corresponds to the case ` A = _V ` ).
Originally a subproof in ~ pwnss . (Contributed by Stefan O'Rear, 22-Feb-2015.) Avoid ~ df-nel .
(Revised by Steven Nguyen, 23-Nov-2022.) Reduce axiom usage. (Revised by Gino Giotto, 30-Aug-2024.)
-/
theorem rru {A2 : «class»} :
  ⊦ wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) :=
@ax_mp (wb (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wa (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)))))) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2))
  (@bitri (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2))) (wa (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)))))
    (@eleq2i (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))
      (@cbvrabv (λ x3, wn (wcel (cv x3) (cv x3))) (λ y, wn (wcel (cv y) (cv y))) A2
        (λ x3 y, @notbid (wceq (cv x3) (cv y)) (wcel (cv x3) (cv x3)) (wcel (cv y) (cv y))
          (@anidms (wceq (cv x3) (cv y)) (wb (wcel (cv x3) (cv x3)) (wcel (cv y) (cv y)))
            (@eleq12 (cv x3) (cv y) (cv x3) (cv y))))))
    (@pm5_21nii (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2))) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) cvv) (wa (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)))))
      (@elex (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2)))
      (@adantr (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) cvv) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))
        (@elex (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2))
      (setvar.forget $ λ y : setvar,
        setvar.forget $ λ z : setvar,
        show ⊦ wi (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) cvv) (wb (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2))) (wa (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)))))), from
        @elab2gw (λ y, wa (wcel (cv y) A2) (wn (wcel (cv y) (cv y)))) (λ z, wa (wcel (cv z) A2) (wn (wcel (cv z) (cv z)))) (λ y, wa (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))) (λ y, crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (λ y z, crab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2)) (λ y z, cvv)
          (λ y z, @anbi12d (wceq (cv y) (cv z)) (wcel (cv y) A2) (wcel (cv z) A2) (wn (wcel (cv y) (cv y))) (wn (wcel (cv z) (cv z)))
            (@eleq1 (cv y) (cv z) A2)
            (@notbid (wceq (cv y) (cv z)) (wcel (cv y) (cv y)) (wcel (cv z) (cv z))
              (@eleq12d (wceq (cv y) (cv z)) (cv y) (cv z) (cv y) (cv z)
                (@id (wceq (cv y) (cv z)))
                (@id (wceq (cv y) (cv z))))))
          (λ y z, @anbi12d (wceq (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wcel (cv z) A2) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2) (wn (wcel (cv z) (cv z))) (wn (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))
            (@eleq1 (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2)
            (@notbid (wceq (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wcel (cv z) (cv z)) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)))
              (@anidms (wceq (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wb (wcel (cv z) (cv z)) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))
                (@eleq12 (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (cv z) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))))
          (λ y z, @df_rab (λ y, wn (wcel (cv y) (cv y))) (λ y, A2)) y z)))
  (@pclem6 (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2))


-- /-- Extend wff notation to include the proper substitution of a class for a set. Read this
-- notation as "the proper substitution of class ` A ` for setvar variable ` x ` in wff ` ph ` ". -/
-- constant wsbc : (setvar → wff) → «class» → wff


-- /-- Define the proper substitution of a class for a set. When ` A ` is a proper class, our
-- definition evaluates to false (see ~ sbcex ). This is somewhat arbitrary: we could have, instead,
-- chosen the conclusion of ~ sbc6 for our definition, whose right-hand side always evaluates to
-- true for proper classes. Our definition also does not produce the same results as discussed in
-- the proof of Theorem 6.6 of [Quine] p. 42 (although Theorem 6.6 itself does hold, as shown by ~
-- dfsbcq below). For example, if ` A ` is a proper class, Quine's substitution of ` A ` for ` y `
-- in ` 0 e. y ` evaluates to ` 0 e. A ` rather than our falsehood. (This can be seen by
-- substituting ` A ` , ` y ` , and ` 0 ` for alpha, beta, and gamma in Subcase 1 of Quine's
-- discussion on p. 42.) Unfortunately, Quine's definition requires a recursive syntactic breakdown
-- of ` ph ` , and it does not seem possible to express it with a single closed formula. If we did
-- not want to commit to any specific proper class behavior, we could use this definition _only_ to
-- prove Theorem ~ dfsbcq , which holds for both our definition and Quine's, and from which we can
-- derive a weaker version of ~ df-sbc in the form of ~ sbc8g . However, the behavior of Quine's
-- definition at proper classes is similarly arbitrary, and for practical reasons (to avoid having
-- to prove sethood of ` A ` in every use of this definition) we allow direct reference to ~ df-sbc
-- and assert that ` [. A / x ]. ph ` is always false when ` A ` is a proper class. Theorem ~ sbc2or
-- shows the apparently "strongest" statement we can make regarding behavior at proper classes if we
-- start from ~ dfsbcq . The related definition ~ df-csb defines proper substitution into a class
-- variable (as opposed to a wff variable). (Contributed by NM, 14-Apr-1995.) (Revised by NM,
-- 25-Dec-2016.) -/
-- axiom df_sbc {ph : setvar → wff} {A2 : setvar → «class»} : ∀ x3, ⊦ wb (wsbc (λ x3, ph x3) (A2 x3)) (wcel (A2 x3) (cab (λ x3, ph x3)))


/-- Proper substitution of a class for a set in a wff given equal classes. This is the essence of
the sixth axiom of Frege, specifically Proposition 52 of [Frege1879] p. 50. This theorem, which is
similar to Theorem 6.7 of [Quine] p. 42 and holds under both our definition and Quine's, provides us
with a weak definition of the proper substitution of a class for a set. Since our ~ df-sbc does not
result in the same behavior as Quine's for proper classes, if we wished to avoid conflict with
Quine's definition we could start with this theorem and ~ dfsbcq2 instead of ~ df-sbc . ( ~ dfsbcq2
is needed because unlike Quine we do not overload the ~ df-sb syntax.) As a consequence of these
theorems, we can derive ~ sbc8g , which is a weaker version of ~ df-sbc that leaves substitution
undefined when ` A ` is a proper class. However, it is often a nuisance to have to prove the sethood
hypothesis of ~ sbc8g , so we will allow direct use of ~ df-sbc after Theorem ~ sbc2or below. Proper
substitution with a proper class is rarely needed, and when it is, we can simply use the expansion
of Quine's definition. (Contributed by NM, 14-Apr-1995.) -/
theorem dfsbcq {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (A2 x3) (B2 x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ph x3) (B2 x3))) :=
@«3bitr4g» (wceq (A2 x3) (B2 x3)) (wcel (A2 x3) (cab (λ x3, ph x3))) (wcel (B2 x3) (cab (λ x3, ph x3))) (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ph x3) (B2 x3))
  (@eleq1 (A2 x3) (B2 x3) (cab (λ x3, ph x3)))
  (@df_sbc (λ x3, ph x3) (λ x3, A2 x3) x3)
  (@df_sbc (λ x3, ph x3) (λ x3, B2 x3) x3)


/-- This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds under both our
definition and Quine's, relates logic substitution ~ df-sb and substitution for class variables ~
df-sbc . Unlike Quine, we use a different syntax for each in order to avoid overloading it. See
remarks in ~ dfsbcq . (Contributed by NM, 31-Dec-2016.) -/
theorem dfsbcq2 {ph : setvar → wff} {y : setvar} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (cv y) (A2 x3)) (wb (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3))) :=
@«3bitr3g» (wceq (cv y) (A2 x3)) (wcel (cv y) (cab (λ x3, ph x3))) (wcel (A2 x3) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3))
  (@eleq1 (cv y) (A2 x3) (cab (λ x3, ph x3)))
  (@df_clab (λ x3, ph x3) y)
  (@bicomi (wsbc (λ x3, ph x3) (A2 x3)) (wcel (A2 x3) (cab (λ x3, ph x3)))
    (@df_sbc (λ x3, ph x3) (λ x3, A2 x3) x3))


/-- This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds under both our
definition and Quine's, relates logic substitution ~ df-sb and substitution for class variables ~
df-sbc . Unlike Quine, we use a different syntax for each in order to avoid overloading it. See
remarks in ~ dfsbcq . (Contributed by NM, 31-Dec-2016.) -/
theorem dfsbcq2_b {ph : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (cv x3) (A2 x3)) (wb (wsb (λ x3, ph x3) x3) (wsbc (λ x3, ph x3) (A2 x3))) :=
@«3bitr3g» (wceq (cv x3) (A2 x3)) (wcel (cv x3) (cab (λ x3, ph x3))) (wcel (A2 x3) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) x3) (wsbc (λ x3, ph x3) (A2 x3))
  (@eleq1 (cv x3) (A2 x3) (cab (λ x3, ph x3)))
  (@df_clab_b (λ x3, ph x3) x3)
  (@bicomi (wsbc (λ x3, ph x3) (A2 x3)) (wcel (A2 x3) (cab (λ x3, ph x3)))
    (@df_sbc (λ x3, ph x3) (λ x3, A2 x3) x3))


/-- Show that ~ df-sb and ~ df-sbc are equivalent when the class term ` A ` in ~ df-sbc is a setvar
variable. This theorem lets us reuse theorems based on ~ df-sb for proofs involving ~ df-sbc .
(Contributed by NM, 31-Dec-2016.) (Proof modification is discouraged.) -/
theorem sbsbc {ph : setvar → wff} {y : setvar} :
  ⊦ wb (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (cv y)) :=
@ax_mp (wceq (cv y) (cv y)) (wb (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (cv y)))
  (@eqid (cv y))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wceq (cv y) (cv y)) (wb (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (cv y))), from
    @dfsbcq2 (λ x3, ph x3) y (λ x3, cv y) x3)


/-- Show that ~ df-sb and ~ df-sbc are equivalent when the class term ` A ` in ~ df-sbc is a setvar
variable. This theorem lets us reuse theorems based on ~ df-sb for proofs involving ~ df-sbc .
(Contributed by NM, 31-Dec-2016.) (Proof modification is discouraged.) -/
theorem sbsbc_b {ph : setvar → wff}
  (x3 : setvar) : ⊦ wb (wsb (λ x3, ph x3) x3) (wsbc (λ x3, ph x3) (cv x3)) :=
@ax_mp (wceq (cv x3) (cv x3)) (wb (wsb (λ x3, ph x3) x3) (wsbc (λ x3, ph x3) (cv x3)))
  (@eqid (cv x3))
  (@dfsbcq2_b (λ x3, ph x3) (λ x3, cv x3) x3)


/-- Equality theorem for class substitution. (Contributed by Mario Carneiro, 9-Feb-2017.) (Revised
by NM, 30-Jun-2018.) -/
theorem sbceq1d {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (sbceq1d_1 : ∀ x3, ⊦ wi (ph x3) (wceq (A2 x3) (B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wb (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ps x3) (B2 x3))) :=
@syl (ph x3) (wceq (A2 x3) (B2 x3)) (wb (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ps x3) (B2 x3)))
  (sbceq1d_1 x3)
  (@dfsbcq (λ x3, ps x3) (λ x3, A2 x3) (λ x3, B2 x3) x3)


/-- Equality theorem for class substitution. (Contributed by Mario Carneiro, 9-Feb-2017.) (Revised
by NM, 30-Jun-2018.) -/
theorem sbceq1dd {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (sbceq1d_1 : ∀ x3, ⊦ wi (ph x3) (wceq (A2 x3) (B2 x3)))
  (sbceq1dd_2 : ∀ x3, ⊦ wi (ph x3) (wsbc (λ x3, ps x3) (A2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wsbc (λ x3, ps x3) (B2 x3)) :=
@mpbid (ph x3) (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ps x3) (B2 x3))
  (sbceq1dd_2 x3)
  (@sbceq1d (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3) (λ x3, B2 x3)
    (λ x3, sbceq1d_1 x3) x3)


/-- Equality theorem for class substitution. (Contributed by Thierry Arnoux, 4-Sep-2018.) -/
theorem sbceqbid {ph : wff} {ps ch : setvar → wff} {A2 B2 : setvar → «class»}
  (sbceqbid_1 : ∀ x3, ⊦ wi ph (wceq (A2 x3) (B2 x3)))
  (sbceqbid_2 : ∀ x3, ⊦ wi ph (wb (ps x3) (ch x3)))
  (x3 : setvar) : ⊦ wi ph (wb (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ch x3) (B2 x3))) :=
@«3bitr4g» ph (wcel (A2 x3) (cab (λ x3, ps x3))) (wcel (B2 x3) (cab (λ x3, ch x3))) (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ch x3) (B2 x3))
  (@eleq12d ph (A2 x3) (B2 x3) (cab (λ x3, ps x3)) (cab (λ x3, ch x3))
    (sbceqbid_1 x3)
    (@abbidv ph (λ x3, ps x3) (λ x3, ch x3)
      (λ x3, sbceqbid_2 x3)))
  (@df_sbc (λ x3, ps x3) (λ x3, A2 x3) x3)
  (@df_sbc (λ x3, ch x3) (λ x3, B2 x3) x3)


/-- By our definition of proper substitution, it can only be true if the substituted expression is a
set. (Contributed by Mario Carneiro, 13-Oct-2016.) -/
theorem sbcex {ph : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wsbc (λ x3, ph x3) (A2 x3)) (wcel (A2 x3) cvv) :=
@sylbi (wsbc (λ x3, ph x3) (A2 x3)) (wcel (A2 x3) (cab (λ x3, ph x3))) (wcel (A2 x3) cvv)
  (@df_sbc (λ x3, ph x3) (λ x3, A2 x3) x3)
  (@elex (A2 x3) (cab (λ x3, ph x3)))


/-- Equality theorem for class substitution. Class version of ~ sbequ12 . (Contributed by NM,
26-Sep-2003.) -/
theorem sbceq1a {ph : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (cv x3) (A2 x3)) (wb (ph x3) (wsbc (λ x3, ph x3) (A2 x3))) :=
@bitr3id (ph x3) (wsb (λ x3, ph x3) x3) (wceq (cv x3) (A2 x3)) (wsbc (λ x3, ph x3) (A2 x3))
  (@sbid (λ x3, ph x3) x3)
  (@dfsbcq2_b (λ x3, ph x3) (λ x3, A2 x3) x3)


/-- Equality theorem for class substitution. Class version of ~ sbequ12r . (Contributed by NM,
4-Jan-2017.) -/
theorem sbceq2a {ph : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (A2 x3) (cv x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3)) :=
@bicomd (wceq (A2 x3) (cv x3)) (ph x3) (wsbc (λ x3, ph x3) (A2 x3))
  (@eqcoms (wb (ph x3) (wsbc (λ x3, ph x3) (A2 x3))) (cv x3) (A2 x3)
    (@sbceq1a (λ x3, ph x3) (λ x3, A2 x3) x3))


/-- Specialization: if a formula is true for all sets, it is true for any class which is a set.
Similar to Theorem 6.11 of [Quine] p. 44. This is Frege's ninth axiom per Proposition 58 of
[Frege1879] p. 51. See also ~ stdpc4 and ~ rspsbc . (Contributed by NM, 16-Jan-2004.) -/
theorem spsbc {ph : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wi (wal (λ x3, ph x3)) (wsbc (λ x3, ph x3) (A2 x3))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel (A2 x3) (V x3)) (wi (wal (λ x3, ph x3)) (wsbc (λ x3, ph x3) (A2 x3))), from
  @vtocleg (wi (wal (λ x3, ph x3)) (wsbc (λ x3, ph x3) (A2 x3))) (A2 x3) (λ y, V x3)
    (λ y, @syl5ib (wal (λ x3, ph x3)) (wsbc (λ x3, ph x3) (cv y)) (wceq (cv y) (A2 x3)) (wsbc (λ x3, ph x3) (A2 x3))
      (@sylib (wal (λ x3, ph x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (cv y))
        (@stdpc4 (λ x3, ph x3) y)
        (@sbsbc (λ x3, ph x3) y))
      (@dfsbcq (λ x3, ph x3) (λ x3, cv y) (λ x3, A2 x3) x3)) y


/-- Specialization: if a formula is true for all sets, it is true for any class which is a set.
Similar to Theorem 6.11 of [Quine] p. 44. See also ~ stdpc4 and ~ rspsbc . (Contributed by Mario
Carneiro, 9-Feb-2017.) -/
theorem spsbcd {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (spsbcd_1 : ∀ x3, ⊦ wi (ph x3) (wcel (A2 x3) (V x3)))
  (spsbcd_2 : ∀ x3, ⊦ wi (ph x3) (wal (λ x3, ps x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wsbc (λ x3, ps x3) (A2 x3)) :=
@sylc (ph x3) (wcel (A2 x3) (V x3)) (wal (λ x3, ps x3)) (wsbc (λ x3, ps x3) (A2 x3))
  (spsbcd_1 x3)
  (spsbcd_2 x3)
  (@spsbc (λ x3, ps x3) (λ x3, A2 x3) (λ x3, V x3) x3)


/-- A substitution into a theorem remains true (when ` A ` is a set). (Contributed by NM,
5-Nov-2005.) -/
theorem sbcth {ph : setvar → wff} {A2 V : setvar → «class»}
  (sbcth_1 : ∀ x3, ⊦ ph x3)
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wsbc (λ x3, ph x3) (A2 x3)) :=
@mpi (wcel (A2 x3) (V x3)) (wal (λ x3, ph x3)) (wsbc (λ x3, ph x3) (A2 x3))
  (@ax_gen (λ x3, ph x3)
    (λ x3, sbcth_1 x3))
  (@spsbc (λ x3, ph x3) (λ x3, A2 x3) (λ x3, V x3) x3)


/-- An identity theorem for substitution. See ~ sbid . (Contributed by Mario Carneiro, 18-Feb-2017.)
-/
theorem sbcid {ph : setvar → wff}
  (x3 : setvar) : ⊦ wb (wsbc (λ x3, ph x3) (cv x3)) (ph x3) :=
@bitr3i (wsbc (λ x3, ph x3) (cv x3)) (wsb (λ x3, ph x3) x3) (ph x3)
  (@sbsbc_b (λ x3, ph x3) x3)
  (@sbid (λ x3, ph x3) x3)


/-- Deduction version of ~ nfsbc1 . (Contributed by NM, 23-May-2006.) (Revised by Mario Carneiro,
12-Oct-2016.) -/
theorem nfsbc1d {ph ps : setvar → wff} {A2 : setvar → «class»}
  (nfsbc1d_2 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnf (λ x3, wsbc (λ x3, ps x3) (A2 x3))) :=
@nfxfrd (λ x3, wsbc (λ x3, ps x3) (A2 x3)) (λ x3, wcel (A2 x3) (cab (λ x3, ps x3))) (λ x3, ph x3)
  (λ x3, @df_sbc (λ x3, ps x3) (λ x3, A2 x3) x3)
  (λ x3, @nfeld (λ x3, ph x3) (λ x3, A2 x3) (λ x3, cab (λ x3, ps x3))
    (λ x3, nfsbc1d_2 x3)
    (λ x3, @a1i (wnfc (λ x3, cab (λ x3, ps x3))) (ph x3)
      (@nfab1 (λ x3, ps x3))) x3) x3


/-- Bound-variable hypothesis builder for class substitution. (Contributed by NM, 5-Aug-1993.)
(Revised by Mario Carneiro, 12-Oct-2016.) -/
theorem nfsbc1 {ph : setvar → wff} {A2 : setvar → «class»}
  (nfsbc1_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnf (λ x3, wsbc (λ x3, ph x3) (A2 x3)) :=
@mptru (wnf (λ x3, wsbc (λ x3, ph x3) (A2 x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnf (λ x3, wsbc (λ x3, ph x3) (A2 x3))), from
    @nfsbc1d (λ x3, wtru) (λ x3, ph x3) (λ x3, A2 x3)
      (λ x3, @a1i (wnfc (λ x3, A2 x3)) wtru
        nfsbc1_1) x3)


/-- Bound-variable hypothesis builder for class substitution. (Contributed by Mario Carneiro,
12-Oct-2016.) -/
theorem nfsbc1v {ph : setvar → wff} {A2 : «class»} :
  ⊦ wnf (λ x3, wsbc (λ x3, ph x3) A2) :=
@nfsbc1 (λ x3, ph x3) (λ x3, A2)
  (@nfcv A2)


/-- Deduction version of ~ nfsbcw . Version of ~ nfsbcd with a disjoint variable condition, which
does not require ~ ax-13 . (Contributed by NM, 23-Nov-2005.) (Revised by Gino Giotto, 10-Jan-2024.)
-/
theorem nfsbcdw {ph ps : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (nfsbcdw_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (nfsbcdw_2 : ∀ x3 y, ⊦ wi (ph x3 y) (wnfc (λ x3, A2 x3 y)))
  (nfsbcdw_3 : ∀ x3 y, ⊦ wi (ph x3 y) (wnf (λ x3, ps x3 y)))
  (x3 y : setvar) : ⊦ wi (ph x3 y) (wnf (λ x3, wsbc (λ y, ps x3 y) (A2 x3 y))) :=
@nfxfrd (λ x3, wsbc (λ y, ps x3 y) (A2 x3 y)) (λ x3, wcel (A2 x3 y) (cab (λ y, ps x3 y))) (λ x3, ph x3 y)
  (λ x3, @df_sbc (λ y, ps x3 y) (λ y, A2 x3 y) y)
  (λ x3, @nfeld (λ x3, ph x3 y) (λ x3, A2 x3 y) (λ x3, cab (λ y, ps x3 y))
    (λ x3, nfsbcdw_2 x3 y)
    (λ x3, @nfabdw (λ x3 y, ph x3 y) (λ x3 y, ps x3 y)
      (λ x3, nfsbcdw_1 x3)
      (λ x3 y, nfsbcdw_3 x3 y) x3 y) x3) x3


/-- Bound-variable hypothesis builder for class substitution. Version of ~ nfsbc with a disjoint
variable condition, which does not require ~ ax-13 . (Contributed by NM, 7-Sep-2014.) (Revised by
Gino Giotto, 10-Jan-2024.) -/
theorem nfsbcw {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (nfsbcw_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (nfsbcw_2 : ∀ y, ⊦ wnf (λ x3, ph x3 y))
  (y : setvar) : ⊦ wnf (λ x3, wsbc (λ y, ph x3 y) (A2 x3 y)) :=
@mptru (wnf (λ x3, wsbc (λ y, ph x3 y) (A2 x3 y)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnf (λ x3, wsbc (λ y, ph x3 y) (A2 x3 y))), from
    @nfsbcdw (λ x3 y, wtru) (λ x3 y, ph x3 y) (λ x3 y, A2 x3 y)
      (λ x3, nftru)
      (λ x3 y, @a1i (wnfc (λ x3, A2 x3 y)) wtru
        (nfsbcw_1 y))
      (λ x3 y, @a1i (wnf (λ x3, ph x3 y)) wtru
        (nfsbcw_2 y)) x3 y)


/-- A composition law for class substitution. Version of ~ sbcco with a disjoint variable condition,
which requires fewer axioms. (Contributed by NM, 26-Sep-2003.) (Revised by Gino Giotto,
10-Jan-2024.) -/
theorem sbccow {ph : setvar → wff} {A2 : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wb (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (A2 x3 y)) (wsbc (λ x3, ph x3) (A2 x3 y)) :=
@pm5_21nii (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (A2 x3 y)) (wcel (A2 x3 y) cvv) (wsbc (λ x3, ph x3) (A2 x3 y))
  (@sbcex (λ y, wsbc (λ x3, ph x3) (cv y)) (λ y, A2 x3 y) y)
  (@sbcex (λ x3, ph x3) (λ x3, A2 x3 y) x3)
  (setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (A2 x3 y) cvv) (wb (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (A2 x3 y)) (wsbc (λ x3, ph x3) (A2 x3 y))), from
    @vtoclbg (λ z, wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (cv z)) (λ z, wsbc (λ x3, ph x3) (cv z)) (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (A2 x3 y)) (wsbc (λ x3, ph x3) (A2 x3 y)) (A2 x3 y) (λ z, cvv)
      (λ z, @dfsbcq (λ y, wsbc (λ x3, ph x3) (cv y)) (λ y, cv z) (λ y, A2 x3 y) y)
      (λ z, @dfsbcq (λ x3, ph x3) (λ x3, cv z) (λ x3, A2 x3 y) x3)
      (λ z, @bitri (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (cv z)) (wsb (λ x3, ph x3) z) (wsbc (λ x3, ph x3) (cv z))
        (@«3bitr3ri» (wsb (λ y, wsb (λ x3, ph x3) y) z) (wsb (λ y, wsbc (λ x3, ph x3) (cv y)) z) (wsb (λ x3, ph x3) z) (wsbc (λ y, wsbc (λ x3, ph x3) (cv y)) (cv z))
          (@sbbii (λ y, wsb (λ x3, ph x3) y) (λ y, wsbc (λ x3, ph x3) (cv y)) z
            (λ y, @sbsbc (λ x3, ph x3) y))
          (@sbco2vv (λ x3 z, ph x3) z)
          (@sbsbc (λ y, wsbc (λ x3, ph x3) (cv y)) z))
        (@sbsbc (λ x3, ph x3) z)) z)


/-- An equivalence for class substitution. (Contributed by NM, 23-Aug-1993.) (Revised by Mario
Carneiro, 12-Oct-2016.) (Proof shortened by SN, 2-Sep-2024.) -/
theorem sbc5 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wsbc (λ x3, ph x3) A2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) :=
@bitri (wsbc (λ x3, ph x3) A2) (wcel A2 (cab (λ x3, ph x3))) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wsbc (λ x3, ph x3) A2) (wcel A2 (cab (λ x3, ph x3))), from
    @df_sbc (λ x3, ph x3) (λ x3, A2) x3)
  (@clelab (λ x3, ph x3) A2)


/-- An equivalence for class substitution. (Contributed by NM, 11-Oct-2004.) (Proof shortened by
Andrew Salmon, 8-Jun-2011.) -/
theorem sbc6g {ph : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wsbc (λ x3, ph x3) A2) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))) :=
@bitr4id (wcel A2 (V x3)) (wsbc (λ x3, ph x3) A2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))
  (@sbc5 (λ x3, ph x3) A2)
  (@alexeqg (λ x3, ph x3) A2 (λ x3, V x3) x3)


/-- Change bound variables in a wff substitution. Version of ~ cbvsbc with a disjoint variable
condition, which does not require ~ ax-13 . (Contributed by Jeff Hankins, 19-Sep-2009.) (Revised by
Gino Giotto, 10-Jan-2024.) -/
theorem cbvsbcw {ph ps : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (cbvsbcw_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (cbvsbcw_2 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (cbvsbcw_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wb (wsbc (λ x3, ph x3 y) (A2 x3 y)) (wsbc (λ y, ps x3 y) (A2 x3 y)) :=
@«3bitr4i» (wcel (A2 x3 y) (cab (λ x3, ph x3 y))) (wcel (A2 x3 y) (cab (λ y, ps x3 y))) (wsbc (λ x3, ph x3 y) (A2 x3 y)) (wsbc (λ y, ps x3 y) (A2 x3 y))
  (@eleq2i (cab (λ x3, ph x3 y)) (cab (λ y, ps x3 y)) (A2 x3 y)
    (@cbvabw (λ x3 y, ph x3 y) (λ x3 y, ps x3 y)
      (λ x3, cbvsbcw_1 x3)
      (λ y, cbvsbcw_2 y)
      (λ x3 y, cbvsbcw_3 x3 y) x3 y))
  (@df_sbc (λ x3, ph x3 y) (λ x3, A2 x3 y) x3)
  (@df_sbc (λ y, ps x3 y) (λ y, A2 x3 y) y)


/-- Conversion of implicit substitution to explicit class substitution, using a bound-variable
hypothesis instead of distinct variables. (Closed theorem version of ~ sbciegf .) (Contributed by
NM, 10-Nov-2005.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem sbciegft {ph ps : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (w3a (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))) (wb (wsbc (λ x3, ph x3) A2) (ps x3)) :=
@impbid (w3a (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))) (wsbc (λ x3, ph x3) A2) (ps x3)
  (@syl5bi (wsbc (λ x3, ph x3) A2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (w3a (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))) (ps x3)
    (@sbc5 (λ x3, ph x3) A2)
    (@«3adant1» (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wi (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (ps x3)) (wcel A2 (V x3))
      (@sylan2 (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wa (wceq (cv x3) A2) (ph x3)) (ps x3))) (wi (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (ps x3))
        (@alimi (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (λ x3, wi (wa (wceq (cv x3) A2) (ph x3)) (ps x3))
          (λ x3, @impd (wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (wceq (cv x3) A2) (ph x3) (ps x3)
            (@imim2i (wb (ph x3) (ps x3)) (wi (ph x3) (ps x3)) (wceq (cv x3) A2)
              (@biimp (ph x3) (ps x3)))))
        (@biimpa (wnf (λ x3, ps x3)) (wal (λ x3, wi (wa (wceq (cv x3) A2) (ph x3)) (ps x3))) (wi (wex (λ x3, wa (wceq (cv x3) A2) (ph x3))) (ps x3))
          (@«19_23t» (λ x3, wa (wceq (cv x3) A2) (ph x3)) (λ x3, ps x3) x3)))))
  (@sylibrd (w3a (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))) (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wsbc (λ x3, ph x3) A2)
    (@«3adant1» (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wi (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))) (wcel A2 (V x3))
      (@sylan2 (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wnf (λ x3, ps x3)) (wal (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))) (wi (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))))
        (@alimi (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))
          (λ x3, @com23 (wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))) (wceq (cv x3) A2) (ps x3) (ph x3)
            (@imim2i (wb (ph x3) (ps x3)) (wi (ps x3) (ph x3)) (wceq (cv x3) A2)
              (@biimpr (ph x3) (ps x3)))))
        (@biimpa (wnf (λ x3, ps x3)) (wal (λ x3, wi (ps x3) (wi (wceq (cv x3) A2) (ph x3)))) (wi (ps x3) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))))
          (@«19_21t» (λ x3, ps x3) (λ x3, wi (wceq (cv x3) A2) (ph x3)) x3))))
    (@«3ad2ant1» (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wb (wsbc (λ x3, ph x3) A2) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3))))
      (@sbc6g (λ x3, ph x3) A2 (λ x3, V x3) x3)))


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by NM,
14-Dec-2005.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem sbciegf {ph ps : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (sbciegf_1 : ⊦ wnf (λ x3, ps x3))
  (sbciegf_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wsbc (λ x3, ph x3) A2) (ps x3)) :=
@mp3an23 (wcel A2 (V x3)) (wnf (λ x3, ps x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))) (wb (wsbc (λ x3, ph x3) A2) (ps x3))
  sbciegf_1
  (@ax_gen (λ x3, wi (wceq (cv x3) A2) (wb (ph x3) (ps x3)))
    (λ x3, sbciegf_2 x3))
  (@sbciegft (λ x3, ph x3) (λ x3, ps x3) A2 (λ x3, V x3) x3)


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by NM,
10-Nov-2005.) -/
theorem sbcieg {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (sbcieg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wsbc (λ x3, ph x3) A2) ps) :=
@sbciegf (λ x3, ph x3) (λ x3, ps) A2 (λ x3, V x3)
  (@nfv ps)
  (λ x3, sbcieg_1 x3) x3


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by NM,
4-Sep-2004.) -/
theorem sbcie {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (sbcie_1 : ⊦ wcel A2 cvv)
  (sbcie_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wsbc (λ x3, ph x3) A2) ps :=
@ax_mp (wcel A2 cvv) (wb (wsbc (λ x3, ph x3) A2) ps)
  sbcie_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wsbc (λ x3, ph x3) A2) ps), from
    @sbcieg (λ x3, ph x3) ps A2 (λ x3, cvv)
      (λ x3, sbcie_2 x3) x3)


/-- Conversion of implicit substitution to explicit class substitution, deduction form. (Contributed
by NM, 29-Dec-2014.) -/
theorem sbciedf {ph ps ch : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (sbcied_1 : ∀ x3, ⊦ wi (ph x3) (wcel A2 (V x3)))
  (sbcied_2 : ∀ x3, ⊦ wi (wa (ph x3) (wceq (cv x3) A2)) (wb (ps x3) (ch x3)))
  (sbciedf_3 : ⊦ wnf (λ x3, ph x3))
  (sbciedf_4 : ∀ x3, ⊦ wi (ph x3) (wnf (λ x3, ch x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wb (wsbc (λ x3, ps x3) A2) (ch x3)) :=
@syl3anc (ph x3) (wcel A2 (V x3)) (wnf (λ x3, ch x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wb (ps x3) (ch x3)))) (wb (wsbc (λ x3, ps x3) A2) (ch x3))
  (sbcied_1 x3)
  (sbciedf_4 x3)
  (@alrimi (λ x3, ph x3) (λ x3, wi (wceq (cv x3) A2) (wb (ps x3) (ch x3)))
    sbciedf_3
    (λ x3, @ex (ph x3) (wceq (cv x3) A2) (wb (ps x3) (ch x3))
      (sbcied_2 x3)) x3)
  (@sbciegft (λ x3, ps x3) (λ x3, ch x3) A2 (λ x3, V x3) x3)


/-- Conversion of implicit substitution to explicit class substitution, deduction form. (Contributed
by NM, 13-Dec-2014.) -/
theorem sbcied {ph : wff} {ps : setvar → wff} {ch : wff} {A2 : «class»} {V : setvar → «class»}
  (sbcied_1 : ∀ x3, ⊦ wi ph (wcel A2 (V x3)))
  (sbcied_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wb (ps x3) ch)) :
  ⊦ wi ph (wb (wsbc (λ x3, ps x3) A2) ch) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi ph (wb (wsbc (λ x3, ps x3) A2) ch), from
  @sbciedf (λ x3, ph) (λ x3, ps x3) (λ x3, ch) A2 (λ x3, V x3)
    (λ x3, sbcied_1 x3)
    (λ x3, sbcied_2 x3)
    (@nfv ph)
    (λ x3, setvar.forget $ λ x3 : setvar,
      show ⊦ wi ph (wnf (λ x3, ch)), from
      @nfvd (λ x3, ph) ch x3) x3


/-- Conversion of implicit substitution to explicit class substitution, deduction form. (Contributed
by NM, 13-Dec-2014.) -/
theorem sbcied2 {ph : wff} {ps : setvar → wff} {ch : wff} {A2 : «class»} {B2 V : setvar → «class»}
  (sbcied2_1 : ∀ x3, ⊦ wi ph (wcel A2 (V x3)))
  (sbcied2_2 : ∀ x3, ⊦ wi ph (wceq A2 (B2 x3)))
  (sbcied2_3 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) (B2 x3))) (wb (ps x3) ch)) :
  ⊦ wi ph (wb (wsbc (λ x3, ps x3) A2) ch) :=
@sbcied ph (λ x3, ps x3) ch A2 (λ x3, V x3)
  (λ x3, sbcied2_1 x3)
  (λ x3, @syldan ph (wceq (cv x3) A2) (wceq (cv x3) (B2 x3)) (wb (ps x3) ch)
    (@sylan9eqr (wceq (cv x3) A2) ph (cv x3) A2 (B2 x3)
      (@id (wceq (cv x3) A2))
      (sbcied2_2 x3))
    (sbcied2_3 x3))


/-- Membership in a restricted class abstraction, expressed with explicit class substitution. (The
variation ~ elrabf has implicit substitution). The hypothesis specifies that ` x ` must not be a
free variable in ` B ` . (Contributed by NM, 30-Sep-2003.) (Proof shortened by Mario Carneiro,
13-Oct-2016.) -/
theorem elrabsf {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (elrabsf_1 : ⊦ wnfc (λ x3, B2 x3))
  (x3 : setvar) : ⊦ wb (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wa (wcel (A2 x3) (B2 x3)) (wsbc (λ x3, ph x3) (A2 x3))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wb (wcel (A2 x3) (crab (λ x3, ph x3) (λ x3, B2 x3))) (wa (wcel (A2 x3) (B2 x3)) (wsbc (λ x3, ph x3) (A2 x3))), from
  @elrab2 (λ y, wsbc (λ x3, ph x3) (cv y)) (wsbc (λ x3, ph x3) (A2 x3)) (A2 x3) (B2 x3) (λ y, crab (λ x3, ph x3) (λ x3, B2 x3))
    (λ y, @dfsbcq (λ x3, ph x3) (λ x3, cv y) (λ x3, A2 x3) x3)
    (λ y, setvar.forget $ λ y : setvar,
      show ⊦ wceq (crab (λ x3, ph x3) (λ x3, B2 x3)) (crab (λ y, wsbc (λ x3, ph x3) (cv y)) (λ y, B2 x3)), from
      @cbvrabw (λ x3 y, ph x3) (λ x3 y, wsbc (λ x3, ph x3) (cv y)) (λ x3 y, B2 x3)
        (λ y, elrabsf_1)
        (λ x3, @nfcv (B2 x3))
        (λ x3, @nfv (ph x3))
        (λ y, @nfsbc1v (λ x3, ph x3) (cv y))
        (λ x3 y, @sbceq1a (λ x3, ph x3) (λ x3, cv y) x3) x3 y) y


/-- Substitution applied to an atomic wff. Class version of ~ eqsb3 . (Contributed by Andrew Salmon,
29-Jun-2011.) Avoid ~ ax-13 . (Revised by Wolf Lammen, 29-Apr-2023.) -/
theorem eqsbc3 {A2 : setvar → «class»} {B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wceq (cv x3) B2) (A2 x3)) (wceq (A2 x3) B2)) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wceq (cv x3) B2) (A2 x3)) (wceq (A2 x3) B2)), from
  @vtoclbg (λ y, wsbc (λ x3, wceq (cv x3) B2) (cv y)) (λ y, wceq (cv y) B2) (wsbc (λ x3, wceq (cv x3) B2) (A2 x3)) (wceq (A2 x3) B2) (A2 x3) (λ y, V x3)
    (λ y, @dfsbcq (λ x3, wceq (cv x3) B2) (λ x3, cv y) (λ x3, A2 x3) x3)
    (λ y, @eqeq1 (cv y) (A2 x3) B2)
    (λ y, @bitr3i (wsbc (λ x3, wceq (cv x3) B2) (cv y)) (wsb (λ x3, wceq (cv x3) B2) y) (wceq (cv y) B2)
      (@sbsbc (λ x3, wceq (cv x3) B2) y)
      (@eqsb3 (λ y, B2) y)) y


/-- Move negation in and out of class substitution. (Contributed by NM, 16-Jan-2004.) -/
theorem sbcng {ph : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wn (ph x3)) (A2 x3)) (wn (wsbc (λ x3, ph x3) (A2 x3)))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wn (ph x3)) (A2 x3)) (wn (wsbc (λ x3, ph x3) (A2 x3)))), from
  @vtoclbg (λ y, wsb (λ x3, wn (ph x3)) y) (λ y, wn (wsb (λ x3, ph x3) y)) (wsbc (λ x3, wn (ph x3)) (A2 x3)) (wn (wsbc (λ x3, ph x3) (A2 x3))) (A2 x3) (λ y, V x3)
    (λ y, @dfsbcq2 (λ x3, wn (ph x3)) y (λ x3, A2 x3) x3)
    (λ y, @notbid (wceq (cv y) (A2 x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3))
      (@dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3))
    (λ y, @sbn (λ x3 y, ph x3) y) y


/-- Distribution of class substitution over implication. (Contributed by NM, 16-Jan-2004.) -/
theorem sbcimg {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wi (ph x3) (ps x3)) (A2 x3)) (wi (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wi (ph x3) (ps x3)) (A2 x3)) (wi (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))), from
  @vtoclbg (λ y, wsb (λ x3, wi (ph x3) (ps x3)) y) (λ y, wi (wsb (λ x3, ph x3) y) (wsb (λ x3, ps x3) y)) (wsbc (λ x3, wi (ph x3) (ps x3)) (A2 x3)) (wi (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3))) (A2 x3) (λ y, V x3)
    (λ y, @dfsbcq2 (λ x3, wi (ph x3) (ps x3)) y (λ x3, A2 x3) x3)
    (λ y, @imbi12d (wceq (cv y) (A2 x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (wsb (λ x3, ps x3) y) (wsbc (λ x3, ps x3) (A2 x3))
      (@dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3)
      (@dfsbcq2 (λ x3, ps x3) y (λ x3, A2 x3) x3))
    (λ y, @sbim (λ x3 y, ph x3) (λ x3 y, ps x3) y) y


/-- Distribution of class substitution over conjunction. (Contributed by NM, 31-Dec-2016.) (Revised
by NM, 17-Aug-2018.) -/
theorem sbcan {ph ps : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wsbc (λ x3, wa (ph x3) (ps x3)) (A2 x3)) (wa (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3))) :=
@pm5_21nii (wsbc (λ x3, wa (ph x3) (ps x3)) (A2 x3)) (wcel (A2 x3) cvv) (wa (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))
  (@sbcex (λ x3, wa (ph x3) (ps x3)) (λ x3, A2 x3) x3)
  (@adantl (wsbc (λ x3, ps x3) (A2 x3)) (wcel (A2 x3) cvv) (wsbc (λ x3, ph x3) (A2 x3))
    (@sbcex (λ x3, ps x3) (λ x3, A2 x3) x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel (A2 x3) cvv) (wb (wsbc (λ x3, wa (ph x3) (ps x3)) (A2 x3)) (wa (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))), from
    @vtoclbg (λ y, wsb (λ x3, wa (ph x3) (ps x3)) y) (λ y, wa (wsb (λ x3, ph x3) y) (wsb (λ x3, ps x3) y)) (wsbc (λ x3, wa (ph x3) (ps x3)) (A2 x3)) (wa (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3))) (A2 x3) (λ y, cvv)
      (λ y, @dfsbcq2 (λ x3, wa (ph x3) (ps x3)) y (λ x3, A2 x3) x3)
      (λ y, @anbi12d (wceq (cv y) (A2 x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (wsb (λ x3, ps x3) y) (wsbc (λ x3, ps x3) (A2 x3))
        (@dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3)
        (@dfsbcq2 (λ x3, ps x3) y (λ x3, A2 x3) x3))
      (λ y, @sban (λ x3, ph x3) (λ x3, ps x3) y) y)


/-- Distribution of class substitution over biconditional. (Contributed by Raph Levien,
10-Apr-2004.) -/
theorem sbcbig {ph ps : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wb (ph x3) (ps x3)) (A2 x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wb (ph x3) (ps x3)) (A2 x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))), from
  @vtoclbg (λ y, wsb (λ x3, wb (ph x3) (ps x3)) y) (λ y, wb (wsb (λ x3, ph x3) y) (wsb (λ x3, ps x3) y)) (wsbc (λ x3, wb (ph x3) (ps x3)) (A2 x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3))) (A2 x3) (λ y, V x3)
    (λ y, @dfsbcq2 (λ x3, wb (ph x3) (ps x3)) y (λ x3, A2 x3) x3)
    (λ y, @bibi12d (wceq (cv y) (A2 x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (wsb (λ x3, ps x3) y) (wsbc (λ x3, ps x3) (A2 x3))
      (@dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3)
      (@dfsbcq2 (λ x3, ps x3) y (λ x3, A2 x3) x3))
    (λ y, @sbbi (λ x3 y, ph x3) (λ x3 y, ps x3) y) y


/-- Formula-building deduction for class substitution. (Contributed by NM, 29-Dec-2014.) -/
theorem sbcbid {ph ps ch : setvar → wff} {A2 : setvar → «class»}
  (sbcbid_1 : ⊦ wnf (λ x3, ph x3))
  (sbcbid_2 : ∀ x3, ⊦ wi (ph x3) (wb (ps x3) (ch x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wb (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ch x3) (A2 x3))) :=
@«3bitr4g» (ph x3) (wcel (A2 x3) (cab (λ x3, ps x3))) (wcel (A2 x3) (cab (λ x3, ch x3))) (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ch x3) (A2 x3))
  (@eleq2d (ph x3) (cab (λ x3, ps x3)) (cab (λ x3, ch x3)) (A2 x3)
    (@abbid (λ x3, ph x3) (λ x3, ps x3) (λ x3, ch x3)
      sbcbid_1
      (λ x3, sbcbid_2 x3) x3))
  (@df_sbc (λ x3, ps x3) (λ x3, A2 x3) x3)
  (@df_sbc (λ x3, ch x3) (λ x3, A2 x3) x3)


/-- Formula-building deduction for class substitution. (Contributed by NM, 29-Dec-2014.) Drop ~
ax-12 . (Revised by Gino Giotto, 1-Dec-2023.) -/
theorem sbcbidv {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»}
  (sbcbidv_1 : ∀ x3, ⊦ wi ph (wb (ps x3) (ch x3)))
  (x3 : setvar) : ⊦ wi ph (wb (wsbc (λ x3, ps x3) (A2 x3)) (wsbc (λ x3, ch x3) (A2 x3))) :=
@sbceqbid ph (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3) (λ x3, A2 x3)
  (λ x3, @eqidd ph (A2 x3))
  (λ x3, sbcbidv_1 x3) x3


/-- Formula-building inference for class substitution. (Contributed by NM, 11-Nov-2005.) -/
theorem sbcbii {ph ps : setvar → wff} {A2 : setvar → «class»}
  (sbcbii_1 : ∀ x3, ⊦ wb (ph x3) (ps x3))
  (x3 : setvar) : ⊦ wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)) :=
@mptru (wb (wsbc (λ x3, ph x3) (A2 x3)) (wsbc (λ x3, ps x3) (A2 x3)))
  (@sbcbidv wtru (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3)
    (λ x3, @a1i (wb (ph x3) (ps x3)) wtru
      (sbcbii_1 x3)) x3)


/-- Move universal quantifier in and out of class substitution. (Contributed by NM, 31-Dec-2016.)
(Revised by NM, 18-Aug-2018.) -/
theorem sbcal {ph : setvar → setvar → wff} {A2 : setvar → «class»}
  (y : setvar) : ⊦ wb (wsbc (λ y, wal (λ x3, ph x3 y)) (A2 y)) (wal (λ x3, wsbc (λ y, ph x3 y) (A2 y))) :=
@pm5_21nii (wsbc (λ y, wal (λ x3, ph x3 y)) (A2 y)) (wcel (A2 y) cvv) (wal (λ x3, wsbc (λ y, ph x3 y) (A2 y)))
  (@sbcex (λ y, wal (λ x3, ph x3 y)) (λ y, A2 y) y)
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wal (λ x3, wsbc (λ y, ph x3 y) (A2 y))) (wcel (A2 y) cvv), from
    @sps (λ x3, wsbc (λ y, ph x3 y) (A2 y)) (λ x3, wcel (A2 y) cvv)
      (λ x3, @sbcex (λ y, ph x3 y) (λ y, A2 y) y) x3)
  (setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (A2 y) cvv) (wb (wsbc (λ y, wal (λ x3, ph x3 y)) (A2 y)) (wal (λ x3, wsbc (λ y, ph x3 y) (A2 y)))), from
    @vtoclbg (λ z, wsb (λ y, wal (λ x3, ph x3 y)) z) (λ z, wal (λ x3, wsb (λ y, ph x3 y) z)) (wsbc (λ y, wal (λ x3, ph x3 y)) (A2 y)) (wal (λ x3, wsbc (λ y, ph x3 y) (A2 y))) (A2 y) (λ z, cvv)
      (λ z, @dfsbcq2 (λ y, wal (λ x3, ph x3 y)) z (λ y, A2 y) y)
      (λ z, @albidv (wceq (cv z) (A2 y)) (λ x3, wsb (λ y, ph x3 y) z) (λ x3, wsbc (λ y, ph x3 y) (A2 y))
        (λ x3, @dfsbcq2 (λ y, ph x3 y) z (λ y, A2 y) y))
      (λ z, @sbal (λ x3 y, ph x3 y) z) z)


/-- Move existential quantifier in and out of class substitution. (Contributed by NM, 21-May-2004.)
(Revised by NM, 18-Aug-2018.) -/
theorem sbcex2 {ph : setvar → setvar → wff} {A2 : setvar → «class»}
  (y : setvar) : ⊦ wb (wsbc (λ y, wex (λ x3, ph x3 y)) (A2 y)) (wex (λ x3, wsbc (λ y, ph x3 y) (A2 y))) :=
@pm5_21nii (wsbc (λ y, wex (λ x3, ph x3 y)) (A2 y)) (wcel (A2 y) cvv) (wex (λ x3, wsbc (λ y, ph x3 y) (A2 y)))
  (@sbcex (λ y, wex (λ x3, ph x3 y)) (λ y, A2 y) y)
  (@exlimiv (λ x3, wsbc (λ y, ph x3 y) (A2 y)) (wcel (A2 y) cvv)
    (λ x3, @sbcex (λ y, ph x3 y) (λ y, A2 y) y))
  (setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (A2 y) cvv) (wb (wsbc (λ y, wex (λ x3, ph x3 y)) (A2 y)) (wex (λ x3, wsbc (λ y, ph x3 y) (A2 y)))), from
    @vtoclbg (λ z, wsb (λ y, wex (λ x3, ph x3 y)) z) (λ z, wex (λ x3, wsb (λ y, ph x3 y) z)) (wsbc (λ y, wex (λ x3, ph x3 y)) (A2 y)) (wex (λ x3, wsbc (λ y, ph x3 y) (A2 y))) (A2 y) (λ z, cvv)
      (λ z, @dfsbcq2 (λ y, wex (λ x3, ph x3 y)) z (λ y, A2 y) y)
      (λ z, @exbidv (wceq (cv z) (A2 y)) (λ x3, wsb (λ y, ph x3 y) z) (λ x3, wsbc (λ y, ph x3 y) (A2 y))
        (λ x3, @dfsbcq2 (λ y, ph x3 y) z (λ y, A2 y) y))
      (λ z, @sbex (λ x3 y z, ph x3 y) z) z)


/-- Class version of one implication of ~ equvelv . (Contributed by Andrew Salmon, 28-Jun-2011.) -/
theorem sbceqal {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wi (wal (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2))) (wceq A2 B2)) :=
@sylibd (wcel A2 (V x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2))) (wsbc (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2)) A2) (wceq A2 B2)
  (@spsbc (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2)) (λ x3, A2) (λ x3, V x3) x3)
  (@«3bitrd» (wcel A2 (V x3)) (wsbc (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2)) A2) (wi (wsbc (λ x3, wceq (cv x3) A2) A2) (wsbc (λ x3, wceq (cv x3) B2) A2)) (wsbc (λ x3, wceq (cv x3) B2) A2) (wceq A2 B2)
    (@sbcimg (λ x3, wceq (cv x3) A2) (λ x3, wceq (cv x3) B2) (λ x3, A2) (λ x3, V x3) x3)
    (@syl (wcel A2 (V x3)) (wsbc (λ x3, wceq (cv x3) A2) A2) (wb (wi (wsbc (λ x3, wceq (cv x3) A2) A2) (wsbc (λ x3, wceq (cv x3) B2) A2)) (wsbc (λ x3, wceq (cv x3) B2) A2))
      (@mpbiri (wcel A2 (V x3)) (wsbc (λ x3, wceq (cv x3) A2) A2) (wceq A2 A2)
        (@eqid A2)
        (@eqsbc3 (λ x3, A2) A2 (λ x3, V x3) x3))
      (@pm5_5 (wsbc (λ x3, wceq (cv x3) A2) A2) (wsbc (λ x3, wceq (cv x3) B2) A2)))
    (@eqsbc3 (λ x3, A2) B2 (λ x3, V x3) x3))


/-- Theorem *14.121 in [WhiteheadRussell] p. 185. (Contributed by Andrew Salmon, 28-Jun-2011.)
(Proof shortened by Wolf Lammen, 9-May-2013.) -/
theorem sbeqalb {ph : setvar → wff} {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wi (wa (wal (λ x3, wb (ph x3) (wceq (cv x3) A2))) (wal (λ x3, wb (ph x3) (wceq (cv x3) B2)))) (wceq A2 B2)) :=
@syl5 (wa (wal (λ x3, wb (ph x3) (wceq (cv x3) A2))) (wal (λ x3, wb (ph x3) (wceq (cv x3) B2)))) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2))) (wcel A2 (V x3)) (wceq A2 B2)
  (@alanimi (λ x3, wb (ph x3) (wceq (cv x3) A2)) (λ x3, wb (ph x3) (wceq (cv x3) B2)) (λ x3, wi (wceq (cv x3) A2) (wceq (cv x3) B2))
    (λ x3, @biimpd (wa (wb (ph x3) (wceq (cv x3) A2)) (wb (ph x3) (wceq (cv x3) B2))) (wceq (cv x3) A2) (wceq (cv x3) B2)
      (@biimpa (wb (ph x3) (wceq (cv x3) A2)) (wb (ph x3) (wceq (cv x3) B2)) (wb (wceq (cv x3) A2) (wceq (cv x3) B2))
        (@bibi1 (ph x3) (wceq (cv x3) A2) (wceq (cv x3) B2)))))
  (@sbceqal A2 B2 (λ x3, V x3) x3)


/-- Substitution for a variable not free in a wff does not affect it. (Contributed by Mario
Carneiro, 14-Oct-2016.) -/
theorem sbctt {ph : setvar → wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wa (wcel (A2 x3) (V x3)) (wnf (λ x3, ph x3))) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3)) :=
@imp (wcel (A2 x3) (V x3)) (wnf (λ x3, ph x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel (A2 x3) (V x3)) (wi (wnf (λ x3, ph x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3))), from
    @vtoclg (λ y, wi (wnf (λ x3, ph x3)) (wb (wsb (λ x3, ph x3) y) (ph x3))) (wi (wnf (λ x3, ph x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3))) (A2 x3) (λ y, V x3)
      (λ y, @imbi2d (wceq (cv y) (A2 x3)) (wb (wsb (λ x3, ph x3) y) (ph x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3)) (wnf (λ x3, ph x3))
        (@bibi1d (wceq (cv y) (A2 x3)) (wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (ph x3)
          (@dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3)))
      (λ y, @sbft (λ x3, ph x3) y x3) y)


/-- Substitution for a variable not free in a wff does not affect it. (Contributed by NM,
11-Oct-2004.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem sbcgf {ph : setvar → wff} {A2 V : setvar → «class»}
  (sbcgf_1 : ⊦ wnf (λ x3, ph x3))
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3)) :=
@mpan2 (wcel (A2 x3) (V x3)) (wnf (λ x3, ph x3)) (wb (wsbc (λ x3, ph x3) (A2 x3)) (ph x3))
  sbcgf_1
  (@sbctt (λ x3, ph x3) (λ x3, A2 x3) (λ x3, V x3) x3)


/-- Substitution for a variable not occurring in a wff does not affect it. Distinct variable form of
~ sbcgf . (Contributed by Alan Sare, 10-Nov-2012.) -/
theorem sbcg {ph : wff} {A2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, ph) (A2 x3)) ph) :=
@sbcgf (λ x3, ph) (λ x3, A2 x3) (λ x3, V x3)
  (@nfv ph) x3


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by Mario
Carneiro, 19-Dec-2013.) -/
theorem sbc2iegf {ph ps : setvar → setvar → wff} {A2 : «class»} {B2 V W : setvar → «class»}
  (sbc2iegf_1 : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (sbc2iegf_2 : ∀ x3, ⊦ wnf (λ y, ps x3 y))
  (sbc2iegf_3 : ⊦ wnf (λ x3, wcel (B2 x3) (W x3)))
  (sbc2iegf_4 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) (B2 x3))) (wb (ph x3 y) (ps x3 y)))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V y)) (wcel (B2 x3) (W x3))) (wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) A2) (ps x3 y)) :=
@sbciedf (λ x3, wa (wcel A2 (V y)) (wcel (B2 x3) (W x3))) (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) (λ x3, ps x3 y) A2 (λ x3, V y)
  (λ x3, @simpl (wcel A2 (V y)) (wcel (B2 x3) (W x3)))
  (λ x3, @adantll (wcel (B2 x3) (W x3)) (wceq (cv x3) A2) (wb (wsbc (λ y, ph x3 y) (B2 x3)) (ps x3 y)) (wcel A2 (V y))
    (@sbciedf (λ y, wa (wcel (B2 x3) (W x3)) (wceq (cv x3) A2)) (λ y, ph x3 y) (λ y, ps x3 y) (B2 x3) (λ y, W x3)
      (λ y, @simpl (wcel (B2 x3) (W x3)) (wceq (cv x3) A2))
      (λ y, @adantll (wceq (cv x3) A2) (wceq (cv y) (B2 x3)) (wb (ph x3 y) (ps x3 y)) (wcel (B2 x3) (W x3))
        (sbc2iegf_4 x3 y))
      (@nfv (wa (wcel (B2 x3) (W x3)) (wceq (cv x3) A2)))
      (λ y, @a1i (wnf (λ y, ps x3 y)) (wa (wcel (B2 x3) (W x3)) (wceq (cv x3) A2))
        (sbc2iegf_2 x3)) y))
  (@nfan (λ x3, wcel A2 (V y)) (λ x3, wcel (B2 x3) (W x3))
    (@nfv (wcel A2 (V y)))
    sbc2iegf_3)
  (λ x3, @a1i (wnf (λ x3, ps x3 y)) (wa (wcel A2 (V y)) (wcel (B2 x3) (W x3)))
    (sbc2iegf_1 y)) x3


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by NM,
16-Dec-2008.) (Revised by Mario Carneiro, 19-Dec-2013.) -/
theorem sbc2ie {ph : setvar → setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (sbc2ie_1 : ⊦ wcel A2 cvv)
  (sbc2ie_2 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (sbc2ie_3 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) (B2 x3))) (wb (ph x3 y) ps)) :
  ⊦ wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) A2) ps :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) A2) ps, from
  @mp2an (wcel A2 cvv) (wcel (B2 x3) cvv) (wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) A2) ps)
    sbc2ie_1
    (sbc2ie_2 x3)
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wa (wcel A2 cvv) (wcel (B2 x3) cvv)) (wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 x3)) A2) ps), from
      @sbc2iegf (λ x3 y, ph x3 y) (λ x3 y, ps) A2 (λ x3, B2 x3) (λ y, cvv) (λ x3, cvv)
        (λ y, @nfv ps)
        (λ x3, @nfv ps)
        (@nfth (λ x3, wcel (B2 x3) cvv)
          (λ x3, sbc2ie_2 x3))
        (λ x3 y, sbc2ie_3 x3 y) x3 y)


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by NM,
16-Dec-2008.) (Proof shortened by Mario Carneiro, 18-Oct-2016.) -/
theorem sbc2iedv {ph : wff} {ps : setvar → setvar → wff} {ch : wff} {A2 : «class»} {B2 : setvar → «class»}
  (sbc2iedv_1 : ⊦ wcel A2 cvv)
  (sbc2iedv_2 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (sbc2iedv_3 : ∀ x3 y, ⊦ wi ph (wi (wa (wceq (cv x3) A2) (wceq (cv y) (B2 x3))) (wb (ps x3 y) ch))) :
  ⊦ wi ph (wb (wsbc (λ x3, wsbc (λ y, ps x3 y) (B2 x3)) A2) ch) :=
@sbcied ph (λ x3, wsbc (λ y, ps x3 y) (B2 x3)) ch A2 (λ x3, cvv)
  (λ x3, @a1i (wcel A2 cvv) ph
    sbc2iedv_1)
  (λ x3, @sbcied (wa ph (wceq (cv x3) A2)) (λ y, ps x3 y) ch (B2 x3) (λ y, cvv)
    (λ y, @a1i (wcel (B2 x3) cvv) (wa ph (wceq (cv x3) A2))
      (sbc2iedv_2 x3))
    (λ y, @impl ph (wceq (cv x3) A2) (wceq (cv y) (B2 x3)) (wb (ps x3 y) ch)
      (sbc2iedv_3 x3 y)))


/-- Conversion of implicit substitution to explicit class substitution. (Contributed by Mario
Carneiro, 19-Jun-2014.) (Revised by Mario Carneiro, 29-Dec-2014.) -/
theorem sbc3ie {ph : setvar → setvar → setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»} {C : setvar → setvar → «class»}
  (sbc3ie_1 : ⊦ wcel A2 cvv)
  (sbc3ie_2 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (sbc3ie_3 : ∀ x3 y, ⊦ wcel (C x3 y) cvv)
  (sbc3ie_4 : ∀ x3 y z, ⊦ wi (w3a (wceq (cv x3) A2) (wceq (cv y) (B2 x3)) (wceq (cv z) (C x3 y))) (wb (ph x3 y z) ps)) :
  ⊦ wb (wsbc (λ x3, wsbc (λ y, wsbc (λ z, ph x3 y z) (C x3 y)) (B2 x3)) A2) ps :=
@sbc2ie (λ x3 y, wsbc (λ z, ph x3 y z) (C x3 y)) ps A2 (λ x3, B2 x3)
  sbc3ie_1
  (λ x3, sbc3ie_2 x3)
  (λ x3 y, @sbcied (wa (wceq (cv x3) A2) (wceq (cv y) (B2 x3))) (λ z, ph x3 y z) ps (C x3 y) (λ z, cvv)
    (λ z, @a1i (wcel (C x3 y) cvv) (wa (wceq (cv x3) A2) (wceq (cv y) (B2 x3)))
      (sbc3ie_3 x3 y))
    (λ z, @«3expa» (wceq (cv x3) A2) (wceq (cv y) (B2 x3)) (wceq (cv z) (C x3 y)) (wb (ph x3 y z) ps)
      (sbc3ie_4 x3 y z)))


/-- Lemma for ~ sbccom . (Contributed by NM, 14-Nov-2005.) (Revised by Mario Carneiro, 18-Oct-2016.)
-/
theorem sbccomlem {ph : setvar → setvar → wff} {A2 B2 : «class»} :
  ⊦ wb (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2) (wsbc (λ y, wsbc (λ x3, ph x3 y) A2) B2) :=
@«3bitr4i» (wsbc (λ x3, wex (λ y, wa (wceq (cv y) B2) (ph x3 y))) A2) (wsbc (λ y, wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))) B2) (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2) (wsbc (λ y, wsbc (λ x3, ph x3 y) A2) B2)
  (@«3bitr4i» (wex (λ x3, wa (wceq (cv x3) A2) (wex (λ y, wa (wceq (cv y) B2) (ph x3 y))))) (wex (λ y, wa (wceq (cv y) B2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))))) (wsbc (λ x3, wex (λ y, wa (wceq (cv y) B2) (ph x3 y))) A2) (wsbc (λ y, wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))) B2)
    (@«3bitr3i» (wex (λ x3, wex (λ y, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y))))) (wex (λ y, wex (λ x3, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y))))) (wex (λ x3, wa (wceq (cv x3) A2) (wex (λ y, wa (wceq (cv y) B2) (ph x3 y))))) (wex (λ y, wa (wceq (cv y) B2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y)))))
      (@excom (λ x3 y, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y))))
      (@exdistr (λ x3, wceq (cv x3) A2) (λ x3 y, wa (wceq (cv y) B2) (ph x3 y)))
      (@exbii (λ y, wex (λ x3, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y)))) (λ y, wa (wceq (cv y) B2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))))
        (λ y, @bitri (wex (λ x3, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y)))) (wex (λ x3, wa (wceq (cv y) B2) (wa (wceq (cv x3) A2) (ph x3 y)))) (wa (wceq (cv y) B2) (wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))))
          (@exbii (λ x3, wa (wceq (cv x3) A2) (wa (wceq (cv y) B2) (ph x3 y))) (λ x3, wa (wceq (cv y) B2) (wa (wceq (cv x3) A2) (ph x3 y)))
            (λ x3, @an12 (wceq (cv x3) A2) (wceq (cv y) B2) (ph x3 y)))
          (@«19_42v» (wceq (cv y) B2) (λ x3, wa (wceq (cv x3) A2) (ph x3 y))))))
    (@sbc5 (λ x3, wex (λ y, wa (wceq (cv y) B2) (ph x3 y))) A2)
    (@sbc5 (λ y, wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))) B2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2) (wsbc (λ x3, wex (λ y, wa (wceq (cv y) B2) (ph x3 y))) A2), from
    @sbcbii (λ x3, wsbc (λ y, ph x3 y) B2) (λ x3, wex (λ y, wa (wceq (cv y) B2) (ph x3 y))) (λ x3, A2)
      (λ x3, @sbc5 (λ y, ph x3 y) B2) x3)
  (setvar.forget $ λ y : setvar,
    show ⊦ wb (wsbc (λ y, wsbc (λ x3, ph x3 y) A2) B2) (wsbc (λ y, wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))) B2), from
    @sbcbii (λ y, wsbc (λ x3, ph x3 y) A2) (λ y, wex (λ x3, wa (wceq (cv x3) A2) (ph x3 y))) (λ y, B2)
      (λ y, @sbc5 (λ x3, ph x3 y) A2) y)


/-- Commutative law for double class substitution. (Contributed by NM, 15-Nov-2005.) (Proof
shortened by Mario Carneiro, 18-Oct-2016.) -/
theorem sbccom {ph : setvar → setvar → wff} {A2 B2 : setvar → «class»}
  (x3 y : setvar) : ⊦ wb (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3)) (wsbc (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (B2 y)) :=
@«3bitr3i» (wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (A2 x3)) (wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (B2 y)) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3)) (wsbc (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (B2 y))
  (@«3bitr3i» (wsbc (λ z, wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z)) (A2 x3)) (wsbc (λ w, wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (cv w)) (B2 y)) (wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (A2 x3)) (wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (B2 y))
    (@«3bitr3i» (wsbc (λ z, wsbc (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (B2 y)) (A2 x3)) (wsbc (λ w, wsbc (λ z, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (A2 x3)) (B2 y)) (wsbc (λ z, wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z)) (A2 x3)) (wsbc (λ w, wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (cv w)) (B2 y))
      (@sbccomlem (λ z w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (A2 x3) (B2 y))
      (setvar.forget $ λ z : setvar,
        show ⊦ wb (wsbc (λ z, wsbc (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (B2 y)) (A2 x3)) (wsbc (λ z, wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z)) (A2 x3)), from
        @sbcbii (λ z, wsbc (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (B2 y)) (λ z, wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z)) (λ z, A2 x3)
          (λ z, @bitri (wsbc (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (B2 y)) (wsbc (λ w, wsbc (λ x3, wsbc (λ y, ph x3 y) (cv w)) (cv z)) (B2 y)) (wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z))
            (setvar.forget $ λ w : setvar,
              show ⊦ wb (wsbc (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (B2 y)) (wsbc (λ w, wsbc (λ x3, wsbc (λ y, ph x3 y) (cv w)) (cv z)) (B2 y)), from
              @sbcbii (λ w, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (λ w, wsbc (λ x3, wsbc (λ y, ph x3 y) (cv w)) (cv z)) (λ w, B2 y)
                (λ w, @sbccomlem (λ y x3, ph x3 y) (cv w) (cv z)) w)
            (@sbccomlem (λ w x3, wsbc (λ y, ph x3 y) (cv w)) (B2 y) (cv z))) z)
      (setvar.forget $ λ w : setvar,
        show ⊦ wb (wsbc (λ w, wsbc (λ z, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (A2 x3)) (B2 y)) (wsbc (λ w, wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (cv w)) (B2 y)), from
        @sbcbii (λ w, wsbc (λ z, wsbc (λ y, wsbc (λ x3, ph x3 y) (cv z)) (cv w)) (A2 x3)) (λ w, wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (cv w)) (λ w, B2 y)
          (λ w, @sbccomlem (λ z y, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3) (cv w)) w))
    (setvar.forget $ λ z : setvar,
      show ⊦ wb (wsbc (λ z, wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (cv z)) (A2 x3)) (wsbc (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (A2 x3)), from
      @sbccow (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (λ x3 z, A2 x3) x3 z)
    (setvar.forget $ λ w : setvar,
      show ⊦ wb (wsbc (λ w, wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (cv w)) (B2 y)) (wsbc (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (B2 y)), from
      @sbccow (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (λ y w, B2 y) y w))
  (@sbcbii (λ x3, wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (λ x3, A2 x3)
    (λ x3, setvar.forget $ λ w : setvar,
      show ⊦ wb (wsbc (λ w, wsbc (λ y, ph x3 y) (cv w)) (B2 y)) (wsbc (λ y, ph x3 y) (B2 y)), from
      @sbccow (λ y, ph x3 y) (λ y w, B2 y) y w) x3)
  (@sbcbii (λ y, wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (λ y, B2 y)
    (λ y, setvar.forget $ λ z : setvar,
      show ⊦ wb (wsbc (λ z, wsbc (λ x3, ph x3 y) (cv z)) (A2 x3)) (wsbc (λ x3, ph x3 y) (A2 x3)), from
      @sbccow (λ x3, ph x3 y) (λ x3 z, A2 x3) x3 z) y)


/-- Interchange class substitution and restricted quantifier. (Contributed by NM, 1-Mar-2008.)
(Revised by David Abernethy, 22-Feb-2010.) -/
theorem sbcralt {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»} {B2 : setvar → «class»} {V : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wa (wcel (A2 x3 y) (V x3 y)) (wnfc (λ y, A2 x3 y))) (wb (wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wral (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))) :=
@bitr3id (wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wsbc (λ z, wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (cv z)) (A2 x3 y)) (wa (wcel (A2 x3 y) (V x3 y)) (wnfc (λ y, A2 x3 y))) (wral (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))
  (setvar.forget $ λ z : setvar,
    show ⊦ wb (wsbc (λ z, wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (cv z)) (A2 x3 y)) (wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)), from
    @sbccow (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (λ x3 z, A2 x3 y) x3 z)
  (@sbcied (wa (wcel (A2 x3 y) (V x3 y)) (wnfc (λ y, A2 x3 y))) (λ z, wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (cv z)) (wral (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y)) (A2 x3 y) (λ z, V x3 y)
    (λ z, @simpl (wcel (A2 x3 y) (V x3 y)) (wnfc (λ y, A2 x3 y)))
    (λ z, @syl5bb (wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (cv z)) (wral (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y)) (wa (wa (wcel (A2 x3 y) (V x3 y)) (wnfc (λ y, A2 x3 y))) (wceq (cv z) (A2 x3 y))) (wral (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))
      (@bitr3i (wsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) (cv z)) (wsb (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) z) (wral (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y))
        (@sbsbc (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) z)
        (setvar.forget $ λ x3 : setvar,
          show ⊦ wb (wsb (λ x3, wral (λ y, ph x3 y) (λ y, B2 y)) z) (wral (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y)), from
          @sbiev (λ x3 z, wral (λ y, ph x3 y) (λ y, B2 y)) (λ x3 z, wral (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y))
            (λ z, @nfralw (λ x3 y, wsb (λ x3, ph x3 y) z) (λ x3 y, B2 y)
              (λ y, @nfcv (B2 y))
              (λ y, @nfs1v (λ x3 z, ph x3 y) z))
            (λ x3 z, @ralbidv (wceq (cv x3) (cv z)) (λ y, ph x3 y) (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y)
              (λ y, @sbequ12 (λ x3 z, ph x3 y) x3 z)) x3 z))
      (@adantll (wnfc (λ y, A2 x3 y)) (wceq (cv z) (A2 x3 y)) (wb (wral (λ y, wsb (λ x3, ph x3 y) z) (λ y, B2 y)) (wral (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))) (wcel (A2 x3 y) (V x3 y))
        (@ralbid (λ y, wa (wnfc (λ y, A2 x3 y)) (wceq (cv z) (A2 x3 y))) (λ y, wsb (λ x3, ph x3 y) z) (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y)
          (@nfan1 (λ y, wnfc (λ y, A2 x3 y)) (λ y, wceq (cv z) (A2 x3 y))
            (@nfnfc1 (λ y, A2 x3 y))
            (λ y, setvar.forget $ λ y : setvar,
              show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnf (λ y, wceq (cv z) (A2 x3 y))), from
              @nfeqd (λ y, wnfc (λ y, A2 x3 y)) (λ y, cv z) (λ y, A2 x3 y)
                (λ y, setvar.forget $ λ y : setvar,
                  show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnfc (λ y, cv z)), from
                  @nfcvd (λ y, wnfc (λ y, A2 x3 y)) (cv z) y)
                (λ y, @id (wnfc (λ y, A2 x3 y))) y))
          (λ y, @adantl (wceq (cv z) (A2 x3 y)) (wb (wsb (λ x3, ph x3 y) z) (wsbc (λ x3, ph x3 y) (A2 x3 y))) (wnfc (λ y, A2 x3 y))
            (@dfsbcq2 (λ x3, ph x3 y) z (λ x3, A2 x3 y) x3)) y))))


/-- Interchange class substitution and restricted existential quantifier. (Contributed by NM,
1-Mar-2008.) (Proof shortened by Mario Carneiro, 13-Oct-2016.) (Revised by NM, 18-Aug-2018.) (Proof
shortened by JJ, 7-Jul-2021.) -/
theorem sbcrext {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»} {B2 : setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wnfc (λ y, A2 x3 y)) (wb (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))) :=
@pm5_21ndd (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv) (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))
  (@a1i (wi (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wcel (A2 x3 y) cvv)) (wnfc (λ y, A2 x3 y))
    (@sbcex (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, A2 x3 y) x3))
  (@rexlimd2 (λ y, wnfc (λ y, A2 x3 y)) (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, wcel (A2 x3 y) cvv) (λ y, B2 y)
    (@nfnfc1 (λ y, A2 x3 y))
    (λ y, setvar.forget $ λ y : setvar,
      show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnf (λ y, wcel (A2 x3 y) cvv)), from
      @nfeld (λ y, wnfc (λ y, A2 x3 y)) (λ y, A2 x3 y) (λ y, cvv)
        (λ y, @id (wnfc (λ y, A2 x3 y)))
        (λ y, setvar.forget $ λ y : setvar,
          show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnfc (λ y, cvv)), from
          @nfcvd (λ y, wnfc (λ y, A2 x3 y)) cvv y) y)
    (λ y, @«2a1i» (wi (wsbc (λ x3, ph x3 y) (A2 x3 y)) (wcel (A2 x3 y) cvv)) (wnfc (λ y, A2 x3 y)) (wcel (cv y) (B2 y))
      (@sbcex (λ x3, ph x3 y) (λ x3, A2 x3 y) x3)) y)
  (@ex (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv) (wb (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y)))
    (@«3bitr4g» (wa (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv)) (wsbc (λ x3, wn (wral (λ y, wn (ph x3 y)) (λ y, B2 y))) (A2 x3 y)) (wn (wral (λ y, wn (wsbc (λ x3, ph x3 y) (A2 x3 y))) (λ y, B2 y))) (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3 y)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))
      (@bitrd (wa (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv)) (wsbc (λ x3, wn (wral (λ y, wn (ph x3 y)) (λ y, B2 y))) (A2 x3 y)) (wn (wsbc (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (A2 x3 y))) (wn (wral (λ y, wn (wsbc (λ x3, ph x3 y) (A2 x3 y))) (λ y, B2 y)))
        (@adantl (wcel (A2 x3 y) cvv) (wb (wsbc (λ x3, wn (wral (λ y, wn (ph x3 y)) (λ y, B2 y))) (A2 x3 y)) (wn (wsbc (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (A2 x3 y)))) (wnfc (λ y, A2 x3 y))
          (@sbcng (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (λ x3, A2 x3 y) (λ x3, cvv) x3))
        (@notbid (wa (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv)) (wsbc (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (A2 x3 y)) (wral (λ y, wn (wsbc (λ x3, ph x3 y) (A2 x3 y))) (λ y, B2 y))
          (@bitrd (wa (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv)) (wsbc (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (A2 x3 y)) (wral (λ y, wsbc (λ x3, wn (ph x3 y)) (A2 x3 y)) (λ y, B2 y)) (wral (λ y, wn (wsbc (λ x3, ph x3 y) (A2 x3 y))) (λ y, B2 y))
            (@ancoms (wcel (A2 x3 y) cvv) (wnfc (λ y, A2 x3 y)) (wb (wsbc (λ x3, wral (λ y, wn (ph x3 y)) (λ y, B2 y)) (A2 x3 y)) (wral (λ y, wsbc (λ x3, wn (ph x3 y)) (A2 x3 y)) (λ y, B2 y)))
              (@sbcralt (λ x3 y, wn (ph x3 y)) (λ x3 y, A2 x3 y) (λ y, B2 y) (λ x3 y, cvv) x3 y))
            (@ralbid (λ y, wa (wnfc (λ y, A2 x3 y)) (wcel (A2 x3 y) cvv)) (λ y, wsbc (λ x3, wn (ph x3 y)) (A2 x3 y)) (λ y, wn (wsbc (λ x3, ph x3 y) (A2 x3 y))) (λ y, B2 y)
              (@nfan1 (λ y, wnfc (λ y, A2 x3 y)) (λ y, wcel (A2 x3 y) cvv)
                (@nfnfc1 (λ y, A2 x3 y))
                (λ y, setvar.forget $ λ y : setvar,
                  show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnf (λ y, wcel (A2 x3 y) cvv)), from
                  @nfeld (λ y, wnfc (λ y, A2 x3 y)) (λ y, A2 x3 y) (λ y, cvv)
                    (λ y, @id (wnfc (λ y, A2 x3 y)))
                    (λ y, setvar.forget $ λ y : setvar,
                      show ⊦ wi (wnfc (λ y, A2 x3 y)) (wnfc (λ y, cvv)), from
                      @nfcvd (λ y, wnfc (λ y, A2 x3 y)) cvv y) y))
              (λ y, @adantl (wcel (A2 x3 y) cvv) (wb (wsbc (λ x3, wn (ph x3 y)) (A2 x3 y)) (wn (wsbc (λ x3, ph x3 y) (A2 x3 y)))) (wnfc (λ y, A2 x3 y))
                (@sbcng (λ x3, ph x3 y) (λ x3, A2 x3 y) (λ x3, cvv) x3)) y))))
      (@sbcbii (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (λ x3, wn (wral (λ y, wn (ph x3 y)) (λ y, B2 y))) (λ x3, A2 x3 y)
        (λ x3, @dfrex2 (λ y, ph x3 y) (λ y, B2 y)) x3)
      (@dfrex2 (λ y, wsbc (λ x3, ph x3 y) (A2 x3 y)) (λ y, B2 y))))


/-- Interchange class substitution and restricted existential quantifier. (Contributed by NM,
15-Nov-2005.) (Revised by NM, 18-Aug-2018.) -/
theorem sbcrex {ph : setvar → setvar → wff} {A2 B2 : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (λ y, B2 y)) :=
@ax_mp (wnfc (λ y, A2 x3)) (wb (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (λ y, B2 y)))
  (@nfcv (A2 x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wnfc (λ y, A2 x3)) (wb (wsbc (λ x3, wrex (λ y, ph x3 y) (λ y, B2 y)) (A2 x3)) (wrex (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (λ y, B2 y))), from
    @sbcrext (λ x3 y, ph x3 y) (λ x3 y, A2 x3) (λ y, B2 y) x3 y)


/-- Interchange class substitution and class abstraction. (Contributed by NM, 5-Nov-2005.) -/
theorem sbcabel {ph : setvar → setvar → wff} {A2 : setvar → «class»} {B2 V : setvar → setvar → «class»}
  (sbcabel_1 : ∀ y, ⊦ wnfc (λ x3, B2 x3 y))
  (x3 y : setvar) : ⊦ wi (wcel (A2 x3) (V x3 y)) (wb (wsbc (λ x3, wcel (cab (λ y, ph x3 y)) (B2 x3 y)) (A2 x3)) (wcel (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) (B2 x3 y))) :=
@syl (wcel (A2 x3) (V x3 y)) (wcel (A2 x3) cvv) (wb (wsbc (λ x3, wcel (cab (λ y, ph x3 y)) (B2 x3 y)) (A2 x3)) (wcel (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) (B2 x3 y)))
  (@elex (A2 x3) (V x3 y))
  (@«3bitr4g» (wcel (A2 x3) cvv) (wsbc (λ x3, wex (λ w, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y)))) (A2 x3)) (wex (λ w, wa (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wcel (cv w) (B2 x3 y)))) (wsbc (λ x3, wcel (cab (λ y, ph x3 y)) (B2 x3 y)) (A2 x3)) (wcel (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) (B2 x3 y))
    (@syl5bb (wsbc (λ x3, wex (λ w, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y)))) (A2 x3)) (wex (λ w, wsbc (λ x3, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y))) (A2 x3))) (wcel (A2 x3) cvv) (wex (λ w, wa (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wcel (cv w) (B2 x3 y))))
      (@sbcex2 (λ w x3, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y))) (λ x3, A2 x3) x3)
      (@exbidv (wcel (A2 x3) cvv) (λ w, wsbc (λ x3, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y))) (A2 x3)) (λ w, wa (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wcel (cv w) (B2 x3 y)))
        (λ w, @syl5bb (wsbc (λ x3, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y))) (A2 x3)) (wa (wsbc (λ x3, wceq (cv w) (cab (λ y, ph x3 y))) (A2 x3)) (wsbc (λ x3, wcel (cv w) (B2 x3 y)) (A2 x3))) (wcel (A2 x3) cvv) (wa (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wcel (cv w) (B2 x3 y)))
          (@sbcan (λ x3, wceq (cv w) (cab (λ y, ph x3 y))) (λ x3, wcel (cv w) (B2 x3 y)) (λ x3, A2 x3) x3)
          (@anbi12d (wcel (A2 x3) cvv) (wsbc (λ x3, wceq (cv w) (cab (λ y, ph x3 y))) (A2 x3)) (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wsbc (λ x3, wcel (cv w) (B2 x3 y)) (A2 x3)) (wcel (cv w) (B2 x3 y))
            (@«3bitr4g» (wcel (A2 x3) cvv) (wsbc (λ x3, wal (λ y, wb (wcel (cv y) (cv w)) (ph x3 y))) (A2 x3)) (wal (λ y, wb (wcel (cv y) (cv w)) (wsbc (λ x3, ph x3 y) (A2 x3)))) (wsbc (λ x3, wceq (cv w) (cab (λ y, ph x3 y))) (A2 x3)) (wceq (cv w) (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3))))
              (@syl5bb (wsbc (λ x3, wal (λ y, wb (wcel (cv y) (cv w)) (ph x3 y))) (A2 x3)) (wal (λ y, wsbc (λ x3, wb (wcel (cv y) (cv w)) (ph x3 y)) (A2 x3))) (wcel (A2 x3) cvv) (wal (λ y, wb (wcel (cv y) (cv w)) (wsbc (λ x3, ph x3 y) (A2 x3))))
                (@sbcal (λ y x3, wb (wcel (cv y) (cv w)) (ph x3 y)) (λ x3, A2 x3) x3)
                (@albidv (wcel (A2 x3) cvv) (λ y, wsbc (λ x3, wb (wcel (cv y) (cv w)) (ph x3 y)) (A2 x3)) (λ y, wb (wcel (cv y) (cv w)) (wsbc (λ x3, ph x3 y) (A2 x3)))
                  (λ y, @bitrd (wcel (A2 x3) cvv) (wsbc (λ x3, wb (wcel (cv y) (cv w)) (ph x3 y)) (A2 x3)) (wb (wsbc (λ x3, wcel (cv y) (cv w)) (A2 x3)) (wsbc (λ x3, ph x3 y) (A2 x3))) (wb (wcel (cv y) (cv w)) (wsbc (λ x3, ph x3 y) (A2 x3)))
                    (@sbcbig (λ x3, wcel (cv y) (cv w)) (λ x3, ph x3 y) (λ x3, A2 x3) (λ x3, cvv) x3)
                    (@bibi1d (wcel (A2 x3) cvv) (wsbc (λ x3, wcel (cv y) (cv w)) (A2 x3)) (wcel (cv y) (cv w)) (wsbc (λ x3, ph x3 y) (A2 x3))
                      (@sbcg (wcel (cv y) (cv w)) (λ x3, A2 x3) (λ x3, cvv) x3)))))
              (@sbcbii (λ x3, wceq (cv w) (cab (λ y, ph x3 y))) (λ x3, wal (λ y, wb (wcel (cv y) (cv w)) (ph x3 y))) (λ x3, A2 x3)
                (λ x3, @abeq2 (λ y, ph x3 y) (cv w)) x3)
              (@abeq2 (λ y, wsbc (λ x3, ph x3 y) (A2 x3)) (cv w)))
            (@sbcgf (λ x3, wcel (cv w) (B2 x3 y)) (λ x3, A2 x3) (λ x3, cvv)
              (@nfcri (λ x3 w, B2 x3 y)
                (λ w, sbcabel_1 y) w) x3)))))
    (@sbcbii (λ x3, wcel (cab (λ y, ph x3 y)) (B2 x3 y)) (λ x3, wex (λ w, wa (wceq (cv w) (cab (λ y, ph x3 y))) (wcel (cv w) (B2 x3 y)))) (λ x3, A2 x3)
      (λ x3, @dfclel (cab (λ y, ph x3 y)) (B2 x3 y)) x3)
    (@dfclel (cab (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) (B2 x3 y)))


/-- Restricted quantifier version of Axiom 4 of [Mendelson] p. 69. This provides an axiom for a
predicate calculus for a restricted domain. This theorem generalizes the unrestricted ~ stdpc4 and ~
spsbc . See also ~ rspsbca and ~ rspcsbela . (Contributed by NM, 17-Nov-2006.) (Proof shortened by
Mario Carneiro, 13-Oct-2016.) -/
theorem rspsbc {ph : setvar → wff} {A2 : setvar → «class»} {B2 : «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) B2) (wi (wral (λ x3, ph x3) (λ x3, B2)) (wsbc (λ x3, ph x3) (A2 x3))) :=
@syl5bi (wral (λ x3, ph x3) (λ x3, B2)) (wral (λ y, wsb (λ x3, ph x3) y) (λ y, B2)) (wcel (A2 x3) B2) (wsbc (λ x3, ph x3) (A2 x3))
  (@cbvralsvw (λ x3, ph x3) B2)
  (@rspcv (λ y, wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (A2 x3) B2
    (λ y, @dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3))


/-- Existence form of ~ rspsbca . (Contributed by NM, 29-Feb-2008.) (Proof shortened by Mario
Carneiro, 13-Oct-2016.) -/
theorem rspesbca {ph : setvar → wff} {A2 : setvar → «class»} {B2 : «class»}
  (x3 : setvar) : ⊦ wi (wa (wcel (A2 x3) B2) (wsbc (λ x3, ph x3) (A2 x3))) (wrex (λ x3, ph x3) (λ x3, B2)) :=
@sylibr (wa (wcel (A2 x3) B2) (wsbc (λ x3, ph x3) (A2 x3))) (wrex (λ y, wsb (λ x3, ph x3) y) (λ y, B2)) (wrex (λ x3, ph x3) (λ x3, B2))
  (@rspcev (λ y, wsb (λ x3, ph x3) y) (wsbc (λ x3, ph x3) (A2 x3)) (A2 x3) B2
    (λ y, @dfsbcq2 (λ x3, ph x3) y (λ x3, A2 x3) x3))
  (@cbvrexsvw (λ x3, ph x3) B2)


/-- Existence form of ~ spsbc . (Contributed by Mario Carneiro, 18-Nov-2016.) -/
theorem spesbc {ph : setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wsbc (λ x3, ph x3) (A2 x3)) (wex (λ x3, ph x3)) :=
@sylib (wsbc (λ x3, ph x3) (A2 x3)) (wrex (λ x3, ph x3) (λ x3, cvv)) (wex (λ x3, ph x3))
  (@mpancom (wcel (A2 x3) cvv) (wsbc (λ x3, ph x3) (A2 x3)) (wrex (λ x3, ph x3) (λ x3, cvv))
    (@sbcex (λ x3, ph x3) (λ x3, A2 x3) x3)
    (@rspesbca (λ x3, ph x3) (λ x3, A2 x3) cvv x3))
  (@rexv (λ x3, ph x3))


/-- Alternate definition of restricted "at most one." Note that ` E* x e. A ph ` is not equivalent
to ` E. y e. A A. x e. A ( ph -> x = y ) ` (in analogy to ~ reu6 ); to see this, let ` A ` be the
empty set. However, one direction of this pattern holds; see ~ rmo2i . (Contributed by NM,
17-Jun-2017.) -/
theorem rmo2 {ph : setvar → setvar → wff} {A2 : «class»}
  (rmo2_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (y : setvar) : ⊦ wb (wrmo (λ x3, ph x3 y) (λ x3, A2)) (wex (λ y, wral (λ x3, wi (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, A2))) :=
@«3bitri» (wrmo (λ x3, ph x3 y) (λ x3, A2)) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3 y))) (wex (λ y, wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3 y)) (wceq (cv x3) (cv y))))) (wex (λ y, wral (λ x3, wi (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, A2)))
  (@df_rmo (λ x3, ph x3 y) (λ x3, A2))
  (@mof (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))
    (λ x3, @nfan (λ y, wcel (cv x3) A2) (λ y, ph x3 y)
      (@nfv (wcel (cv x3) A2))
      (rmo2_1 x3)) y)
  (@exbii (λ y, wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3 y)) (wceq (cv x3) (cv y)))) (λ y, wral (λ x3, wi (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, A2))
    (λ y, @bitr4i (wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3 y)) (wceq (cv x3) (cv y)))) (wal (λ x3, wi (wcel (cv x3) A2) (wi (ph x3 y) (wceq (cv x3) (cv y))))) (wral (λ x3, wi (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, A2))
      (@albii (λ x3, wi (wa (wcel (cv x3) A2) (ph x3 y)) (wceq (cv x3) (cv y))) (λ x3, wi (wcel (cv x3) A2) (wi (ph x3 y) (wceq (cv x3) (cv y))))
        (λ x3, @impexp (wcel (cv x3) A2) (ph x3 y) (wceq (cv x3) (cv y))))
      (@df_ral (λ x3, wi (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, A2))))


-- /-- Extend class notation to include the proper substitution of a class for a set into another
-- class. -/
-- constant csb : «class» → (setvar → «class») → «class»


-- /-- Define the proper substitution of a class for a set into another class. The underlined
-- brackets distinguish it from the substitution into a wff, ~ wsbc , to prevent ambiguity. Theorem
-- ~ sbcel1g shows an example of how ambiguity could arise if we did not use distinguished brackets.
-- When ` A ` is a proper class, this evaluates to the empty set (see ~ csbprc ). Theorem ~ sbccsb
-- recovers substitution into a wff from this definition. (Contributed by NM, 10-Nov-2005.) -/
-- axiom df_csb {A2 B2 : setvar → «class»} : ∀ x3, ⊦ wceq (csb (A2 x3) (λ x3, B2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)))


/-- Analogue of ~ dfsbcq for proper substitution into a class. (Contributed by NM, 10-Nov-2005.) -/
theorem csbeq1 {A2 B2 C : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (A2 x3) (B2 x3)) (wceq (csb (A2 x3) (λ x3, C x3)) (csb (B2 x3) (λ x3, C x3))) :=
@«3eqtr4g» (wceq (A2 x3) (B2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3))) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (B2 x3))) (csb (A2 x3) (λ x3, C x3)) (csb (B2 x3) (λ x3, C x3))
  (@abbidv (wceq (A2 x3) (B2 x3)) (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3)) (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (B2 x3))
    (λ y, @dfsbcq (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3) (λ x3, B2 x3) x3))
  (@df_csb (λ x3, A2 x3) (λ x3, C x3) x3)
  (@df_csb (λ x3, B2 x3) (λ x3, C x3) x3)


/-- Equality deduction for proper substitution into a class. (Contributed by NM, 3-Dec-2005.) -/
theorem csbeq1d {ph : setvar → wff} {A2 B2 C : setvar → «class»}
  (csbeq1d_1 : ∀ x3, ⊦ wi (ph x3) (wceq (A2 x3) (B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (csb (A2 x3) (λ x3, C x3)) (csb (B2 x3) (λ x3, C x3))) :=
@syl (ph x3) (wceq (A2 x3) (B2 x3)) (wceq (csb (A2 x3) (λ x3, C x3)) (csb (B2 x3) (λ x3, C x3)))
  (csbeq1d_1 x3)
  (@csbeq1 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3) x3)


/-- Formula-building deduction for class substitution. (Contributed by NM, 22-Nov-2005.) (Revised by
Mario Carneiro, 1-Sep-2015.) -/
theorem csbeq2d {ph : setvar → wff} {A2 B2 C : setvar → «class»}
  (csbeq2d_1 : ⊦ wnf (λ x3, ph x3))
  (csbeq2d_2 : ∀ x3, ⊦ wi (ph x3) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3))) :=
@«3eqtr4g» (ph x3) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3))) (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3))
  (@abbidv (ph x3) (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)) (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3))
    (λ y, @sbcbid (λ x3, ph x3) (λ x3, wcel (cv y) (B2 x3)) (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)
      csbeq2d_1
      (λ x3, @eleq2d (ph x3) (B2 x3) (C x3) (cv y)
        (csbeq2d_2 x3)) x3))
  (@df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
  (@df_csb (λ x3, A2 x3) (λ x3, C x3) x3)


/-- Formula-building deduction for class substitution. (Contributed by NM, 10-Nov-2005.) (Revised by
Mario Carneiro, 1-Sep-2015.) -/
theorem csbeq2dv {ph : wff} {A2 B2 C : setvar → «class»}
  (csbeq2dv_1 : ∀ x3, ⊦ wi ph (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi ph (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3))) :=
@csbeq2d (λ x3, ph) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
  (@nfv ph)
  (λ x3, csbeq2dv_1 x3) x3


/-- Formula-building inference for class substitution. (Contributed by NM, 10-Nov-2005.) (Revised by
Mario Carneiro, 1-Sep-2015.) -/
theorem csbeq2i {A2 B2 C : setvar → «class»}
  (csbeq2i_1 : ∀ x3, ⊦ wceq (B2 x3) (C x3))
  (x3 : setvar) : ⊦ wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) :=
@mptru (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)))
  (@csbeq2dv wtru (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
    (λ x3, @a1i (wceq (B2 x3) (C x3)) wtru
      (csbeq2i_1 x3)) x3)


/-- Change bound variables in a class substitution. Interestingly, this does not require any bound
variable conditions on ` A ` . Version of ~ cbvcsb with a disjoint variable condition, which does
not require ~ ax-13 . (Contributed by Jeff Hankins, 13-Sep-2009.) (Revised by Gino Giotto,
10-Jan-2024.) -/
theorem cbvcsbw {A2 C D : setvar → setvar → «class»}
  (cbvcsbw_1 : ∀ x3, ⊦ wnfc (λ y, C x3 y))
  (cbvcsbw_2 : ∀ y, ⊦ wnfc (λ x3, D x3 y))
  (cbvcsbw_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (C x3 y) (D x3 y)))
  (x3 y : setvar) : ⊦ wceq (csb (A2 x3 y) (λ x3, C x3 y)) (csb (A2 x3 y) (λ y, D x3 y)) :=
@«3eqtr4i» (cab (λ z, wsbc (λ x3, wcel (cv z) (C x3 y)) (A2 x3 y))) (cab (λ z, wsbc (λ y, wcel (cv z) (D x3 y)) (A2 x3 y))) (csb (A2 x3 y) (λ x3, C x3 y)) (csb (A2 x3 y) (λ y, D x3 y))
  (@abbii (λ z, wsbc (λ x3, wcel (cv z) (C x3 y)) (A2 x3 y)) (λ z, wsbc (λ y, wcel (cv z) (D x3 y)) (A2 x3 y))
    (λ z, @cbvsbcw (λ x3 y, wcel (cv z) (C x3 y)) (λ x3 y, wcel (cv z) (D x3 y)) (λ x3 y, A2 x3 y)
      (λ x3, @nfcri (λ y z, C x3 y)
        (λ z, cbvcsbw_1 x3) z)
      (λ y, @nfcri (λ x3 z, D x3 y)
        (λ z, cbvcsbw_2 y) z)
      (λ x3 y, @eleq2d (wceq (cv x3) (cv y)) (C x3 y) (D x3 y) (cv z)
        (cbvcsbw_3 x3 y)) x3 y))
  (@df_csb (λ x3, A2 x3 y) (λ x3, C x3 y) x3)
  (@df_csb (λ y, A2 x3 y) (λ y, D x3 y) y)


/-- Analogue of ~ sbid for proper substitution into a class. (Contributed by NM, 10-Nov-2005.) -/
theorem csbid {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wceq (csb (cv x3) (λ x3, A2 x3)) (A2 x3) :=
@«3eqtri» (csb (cv x3) (λ x3, A2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (A2 x3)) (cv x3))) (cab (λ y, wcel (cv y) (A2 x3))) (A2 x3)
  (@df_csb (λ x3, cv x3) (λ x3, A2 x3) x3)
  (@abbii (λ y, wsbc (λ x3, wcel (cv y) (A2 x3)) (cv x3)) (λ y, wcel (cv y) (A2 x3))
    (λ y, @sbcid (λ x3, wcel (cv y) (A2 x3)) x3))
  (@abid2 (A2 x3))


/-- Equality theorem for proper substitution into a class. (Contributed by NM, 10-Nov-2005.) -/
theorem csbeq1a {A2 B2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wceq (cv x3) (A2 x3)) (wceq (B2 x3) (csb (A2 x3) (λ x3, B2 x3))) :=
@eqtr3id (wceq (cv x3) (A2 x3)) (B2 x3) (csb (cv x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, B2 x3))
  (@csbid (λ x3, B2 x3) x3)
  (@csbeq1 (λ x3, cv x3) (λ x3, A2 x3) (λ x3, B2 x3) x3)


/-- Composition law for chained substitutions into a class. Version of ~ csbco with a disjoint
variable condition, which does not require ~ ax-13 . (Contributed by NM, 10-Nov-2005.) (Revised by
Gino Giotto, 10-Jan-2024.) -/
theorem csbcow {A2 : setvar → setvar → «class»} {B2 : setvar → «class»}
  (x3 y : setvar) : ⊦ wceq (csb (A2 x3 y) (λ y, csb (cv y) (λ x3, B2 x3))) (csb (A2 x3 y) (λ x3, B2 x3)) :=
@«3eqtr4i» (cab (λ z, wsbc (λ y, wcel (cv z) (csb (cv y) (λ x3, B2 x3))) (A2 x3 y))) (cab (λ z, wsbc (λ x3, wcel (cv z) (B2 x3)) (A2 x3 y))) (csb (A2 x3 y) (λ y, csb (cv y) (λ x3, B2 x3))) (csb (A2 x3 y) (λ x3, B2 x3))
  (@abbii (λ z, wsbc (λ y, wcel (cv z) (csb (cv y) (λ x3, B2 x3))) (A2 x3 y)) (λ z, wsbc (λ x3, wcel (cv z) (B2 x3)) (A2 x3 y))
    (λ z, @bitri (wsbc (λ y, wcel (cv z) (csb (cv y) (λ x3, B2 x3))) (A2 x3 y)) (wsbc (λ y, wsbc (λ x3, wcel (cv z) (B2 x3)) (cv y)) (A2 x3 y)) (wsbc (λ x3, wcel (cv z) (B2 x3)) (A2 x3 y))
      (@sbcbii (λ y, wcel (cv z) (csb (cv y) (λ x3, B2 x3))) (λ y, wsbc (λ x3, wcel (cv z) (B2 x3)) (cv y)) (λ y, A2 x3 y)
        (λ y, @abeq2i (λ z, wsbc (λ x3, wcel (cv z) (B2 x3)) (cv y)) (λ z, csb (cv y) (λ x3, B2 x3))
          (λ z, setvar.forget $ λ x3 : setvar,
            show ⊦ wceq (csb (cv y) (λ x3, B2 x3)) (cab (λ z, wsbc (λ x3, wcel (cv z) (B2 x3)) (cv y))), from
            @df_csb (λ x3, cv y) (λ x3, B2 x3) x3) z) y)
      (@sbccow (λ x3, wcel (cv z) (B2 x3)) (λ x3 y, A2 x3 y) x3 y)))
  (@df_csb (λ y, A2 x3 y) (λ y, csb (cv y) (λ x3, B2 x3)) y)
  (@df_csb (λ x3, A2 x3 y) (λ x3, B2 x3) x3)


/-- Substitution doesn't affect a constant ` B ` (in which ` x ` is not free). (Contributed by Mario
Carneiro, 14-Oct-2016.) -/
theorem csbtt {A2 B2 V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wa (wcel (A2 x3) (V x3)) (wnfc (λ x3, B2 x3))) (wceq (csb (A2 x3) (λ x3, B2 x3)) (B2 x3)) :=
@syl5eq (wa (wcel (A2 x3) (V x3)) (wnfc (λ x3, B2 x3))) (csb (A2 x3) (λ x3, B2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (B2 x3)
  (@df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
  (@abbi1dv (wa (wcel (A2 x3) (V x3)) (wnfc (λ x3, B2 x3))) (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)) (B2 x3)
    (λ y, @sylan2 (wnfc (λ x3, B2 x3)) (wcel (A2 x3) (V x3)) (wnf (λ x3, wcel (cv y) (B2 x3))) (wb (wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)) (wcel (cv y) (B2 x3)))
      (@nfcr (λ x3 y, B2 x3) y)
      (@sbctt (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3) (λ x3, V x3) x3)))


/-- Substitution doesn't affect a constant ` B ` (in which ` x ` is not free). (Contributed by NM,
10-Nov-2005.) -/
theorem csbconstgf {A2 B2 V : setvar → «class»}
  (csbconstgf_1 : ⊦ wnfc (λ x3, B2 x3))
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (B2 x3)) :=
@mpan2 (wcel (A2 x3) (V x3)) (wnfc (λ x3, B2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (B2 x3))
  csbconstgf_1
  (@csbtt (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, V x3) x3)


/-- Substitution doesn't affect a constant ` B ` (in which ` x ` does not occur). ~ csbconstgf with
distinct variable requirement. (Contributed by Alan Sare, 22-Jul-2012.) -/
theorem csbconstg {A2 : setvar → «class»} {B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wceq (csb (A2 x3) (λ x3, B2)) B2) :=
@csbconstgf (λ x3, A2 x3) (λ x3, B2) (λ x3, V x3)
  (@nfcv B2) x3


/-- Bound-variable hypothesis builder for substitution into a class. (Contributed by Mario Carneiro,
12-Oct-2016.) -/
theorem nfcsb1d {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (nfcsb1d_1 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnfc (λ x3, csb (A2 x3) (λ x3, B2 x3))) :=
@nfcxfrd (λ x3, ph x3) (λ x3, csb (A2 x3) (λ x3, B2 x3)) (λ x3, cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)))
  (λ x3, @df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
  (λ x3, setvar.forget $ λ y : setvar,
    show ⊦ wi (ph x3) (wnfc (λ x3, cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)))), from
    @nfabdw (λ x3 y, ph x3) (λ x3 y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))
      (λ x3, @nfv (ph x3))
      (λ x3 y, @nfsbc1d (λ x3, ph x3) (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)
        (λ x3, nfcsb1d_1 x3) x3) x3 y) x3


/-- Bound-variable hypothesis builder for substitution into a class. (Contributed by Mario Carneiro,
12-Oct-2016.) -/
theorem nfcsb1 {A2 B2 : setvar → «class»}
  (nfcsb1_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, csb (A2 x3) (λ x3, B2 x3)) :=
@mptru (wnfc (λ x3, csb (A2 x3) (λ x3, B2 x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnfc (λ x3, csb (A2 x3) (λ x3, B2 x3))), from
    @nfcsb1d (λ x3, wtru) (λ x3, A2 x3) (λ x3, B2 x3)
      (λ x3, @a1i (wnfc (λ x3, A2 x3)) wtru
        nfcsb1_1) x3)


/-- Bound-variable hypothesis builder for substitution into a class. (Contributed by NM,
17-Aug-2006.) (Revised by Mario Carneiro, 12-Oct-2016.) -/
theorem nfcsb1v {A2 : «class»} {B2 : setvar → «class»} :
  ⊦ wnfc (λ x3, csb A2 (λ x3, B2 x3)) :=
@nfcsb1 (λ x3, A2) (λ x3, B2 x3)
  (@nfcv A2)


/-- Bound-variable hypothesis builder for substitution into a class. Version of ~ nfcsb with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by Mario Carneiro,
12-Oct-2016.) (Revised by Gino Giotto, 10-Jan-2024.) -/
theorem nfcsbw {A2 B2 : setvar → setvar → «class»}
  (nfcsbw_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (nfcsbw_2 : ∀ y, ⊦ wnfc (λ x3, B2 x3 y))
  (y : setvar) : ⊦ wnfc (λ x3, csb (A2 x3 y) (λ y, B2 x3 y)) :=
@mptru (wnfc (λ x3, csb (A2 x3 y) (λ y, B2 x3 y)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnfc (λ x3, csb (A2 x3 y) (λ y, B2 x3 y))), from
    @nfcxfrd (λ x3, wtru) (λ x3, csb (A2 x3 y) (λ y, B2 x3 y)) (λ x3, cab (λ z, wsbc (λ y, wcel (cv z) (B2 x3 y)) (A2 x3 y)))
      (λ x3, @df_csb (λ y, A2 x3 y) (λ y, B2 x3 y) y)
      (λ x3, setvar.forget $ λ x3 : setvar,
        setvar.forget $ λ z : setvar,
        show ⊦ wi wtru (wnfc (λ x3, cab (λ z, wsbc (λ y, wcel (cv z) (B2 x3 y)) (A2 x3 y)))), from
        @nfabdw (λ x3 z, wtru) (λ x3 z, wsbc (λ y, wcel (cv z) (B2 x3 y)) (A2 x3 y))
          (λ x3, nftru)
          (λ x3 z, setvar.forget $ λ x3 : setvar,
            show ⊦ wi wtru (wnf (λ x3, wsbc (λ y, wcel (cv z) (B2 x3 y)) (A2 x3 y))), from
            @nfsbcdw (λ x3 y, wtru) (λ x3 y, wcel (cv z) (B2 x3 y)) (λ x3 y, A2 x3 y)
              (λ x3, nftru)
              (λ x3 y, @a1i (wnfc (λ x3, A2 x3 y)) wtru
                (nfcsbw_1 y))
              (λ x3 y, setvar.forget $ λ x3 : setvar,
                show ⊦ wi wtru (wnf (λ x3, wcel (cv z) (B2 x3 y))), from
                @nfcrd (λ x3 z, wtru) (λ x3 z, B2 x3 y)
                  (λ x3 z, @a1i (wnfc (λ x3, B2 x3 y)) wtru
                    (nfcsbw_2 y)) x3 z) x3 y) x3 z) x3)


/-- Conversion of implicit substitution to explicit substitution into a class. (Closed theorem
version of ~ csbiegf .) (Contributed by NM, 11-Nov-2005.) -/
theorem csbiebt {A2 : «class»} {B2 C V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wa (wcel A2 (V x3)) (wnfc (λ x3, C x3))) (wb (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))) :=
@sylan (wcel A2 (V x3)) (wcel A2 cvv) (wnfc (λ x3, C x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3)))
  (@elex A2 (V x3))
  (@impbid (wa (wcel A2 cvv) (wnfc (λ x3, C x3))) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
    (@sylibd (wa (wcel A2 cvv) (wnfc (λ x3, C x3))) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wsbc (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) A2) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
      (@adantr (wcel A2 cvv) (wi (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wsbc (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) A2)) (wnfc (λ x3, C x3))
        (setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wcel A2 cvv) (wi (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wsbc (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) A2)), from
          @spsbc (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) (λ x3, A2) (λ x3, cvv) x3))
      (@sbciedf (λ x3, wa (wcel A2 cvv) (wnfc (λ x3, C x3))) (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) (λ x3, wceq (csb A2 (λ x3, B2 x3)) (C x3)) A2 (λ x3, cvv)
        (λ x3, @simpl (wcel A2 cvv) (wnfc (λ x3, C x3)))
        (λ x3, @adantl (wceq (cv x3) A2) (wb (wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))) (wa (wcel A2 cvv) (wnfc (λ x3, C x3)))
          (@bitr3d (wceq (cv x3) A2) (wceq (B2 x3) (C x3)) (wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
            (@biimt (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
            (@eqeq1d (wceq (cv x3) A2) (B2 x3) (csb A2 (λ x3, B2 x3)) (C x3)
              (@csbeq1a (λ x3, A2) (λ x3, B2 x3) x3))))
        (@nfan (λ x3, wcel A2 cvv) (λ x3, wnfc (λ x3, C x3))
          (@nfv (wcel A2 cvv))
          (@nfnfc1 (λ x3, C x3)))
        (λ x3, setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wa (wcel A2 cvv) (wnfc (λ x3, C x3))) (wnf (λ x3, wceq (csb A2 (λ x3, B2 x3)) (C x3))), from
          @nfeqd (λ x3, wa (wcel A2 cvv) (wnfc (λ x3, C x3))) (λ x3, csb A2 (λ x3, B2 x3)) (λ x3, C x3)
            (λ x3, @a1i (wnfc (λ x3, csb A2 (λ x3, B2 x3))) (wa (wcel A2 cvv) (wnfc (λ x3, C x3)))
              (@nfcsb1v A2 (λ x3, B2 x3)))
            (λ x3, @simpr (wcel A2 cvv) (wnfc (λ x3, C x3))) x3) x3))
    (@adantl (wnfc (λ x3, C x3)) (wi (wceq (csb A2 (λ x3, B2 x3)) (C x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))))) (wcel A2 cvv)
      (@ex (wnfc (λ x3, C x3)) (wceq (csb A2 (λ x3, B2 x3)) (C x3)) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))))
        (@alrimi (λ x3, wa (wnfc (λ x3, C x3)) (wceq (csb A2 (λ x3, B2 x3)) (C x3))) (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
          (@nfan1 (λ x3, wnfc (λ x3, C x3)) (λ x3, wceq (csb A2 (λ x3, B2 x3)) (C x3))
            (@nfnfc1 (λ x3, C x3))
            (λ x3, setvar.forget $ λ x3 : setvar,
              show ⊦ wi (wnfc (λ x3, C x3)) (wnf (λ x3, wceq (csb A2 (λ x3, B2 x3)) (C x3))), from
              @nfeqd (λ x3, wnfc (λ x3, C x3)) (λ x3, csb A2 (λ x3, B2 x3)) (λ x3, C x3)
                (λ x3, @a1i (wnfc (λ x3, csb A2 (λ x3, B2 x3))) (wnfc (λ x3, C x3))
                  (@nfcsb1v A2 (λ x3, B2 x3)))
                (λ x3, @id (wnfc (λ x3, C x3))) x3))
          (λ x3, @adantl (wceq (csb A2 (λ x3, B2 x3)) (C x3)) (wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3))) (wnfc (λ x3, C x3))
            (@biimprcd (wceq (cv x3) A2) (wceq (B2 x3) (C x3)) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
              (@eqeq1d (wceq (cv x3) A2) (B2 x3) (csb A2 (λ x3, B2 x3)) (C x3)
                (@csbeq1a (λ x3, A2) (λ x3, B2 x3) x3)))) x3))))


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by Mario
Carneiro, 13-Oct-2016.) -/
theorem csbiedf {ph : setvar → wff} {A2 : «class»} {B2 C V : setvar → «class»}
  (csbiedf_1 : ⊦ wnf (λ x3, ph x3))
  (csbiedf_2 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, C x3)))
  (csbiedf_3 : ∀ x3, ⊦ wi (ph x3) (wcel A2 (V x3)))
  (csbiedf_4 : ∀ x3, ⊦ wi (wa (ph x3) (wceq (cv x3) A2)) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (csb A2 (λ x3, B2 x3)) (C x3)) :=
@mpbid (ph x3) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
  (@alrimi (λ x3, ph x3) (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
    csbiedf_1
    (λ x3, @ex (ph x3) (wceq (cv x3) A2) (wceq (B2 x3) (C x3))
      (csbiedf_4 x3)) x3)
  (@syl2anc (ph x3) (wcel A2 (V x3)) (wnfc (λ x3, C x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3)))
    (csbiedf_3 x3)
    (csbiedf_2 x3)
    (@csbiebt A2 (λ x3, B2 x3) (λ x3, C x3) (λ x3, V x3) x3))


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by NM,
11-Nov-2005.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem csbiegf {A2 : «class»} {B2 C : setvar → «class»} {V : «class»}
  (csbiegf_1 : ⊦ wi (wcel A2 V) (wnfc (λ x3, C x3)))
  (csbiegf_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi (wcel A2 V) (wceq (csb A2 (λ x3, B2 x3)) (C x3)) :=
@mpbii (wcel A2 V) (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
  (@ax_gen (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
    (λ x3, csbiegf_2 x3))
  (@mpdan (wcel A2 V) (wnfc (λ x3, C x3)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))) (wceq (csb A2 (λ x3, B2 x3)) (C x3)))
    csbiegf_1
    (@csbiebt A2 (λ x3, B2 x3) (λ x3, C x3) (λ x3, V) x3))


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by NM,
26-Nov-2005.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem csbief {A2 : «class»} {B2 C : setvar → «class»}
  (csbief_1 : ⊦ wcel A2 cvv)
  (csbief_2 : ⊦ wnfc (λ x3, C x3))
  (csbief_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wceq (csb A2 (λ x3, B2 x3)) (C x3) :=
@ax_mp (wcel A2 cvv) (wceq (csb A2 (λ x3, B2 x3)) (C x3))
  csbief_1
  (@csbiegf A2 (λ x3, B2 x3) (λ x3, C x3) cvv
    (@a1i (wnfc (λ x3, C x3)) (wcel A2 cvv)
      csbief_2)
    (λ x3, csbief_3 x3) x3)


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by AV,
2-Dec-2019.) -/
theorem csbie {A2 : «class»} {B2 : setvar → «class»} {C : «class»}
  (csbie_1 : ⊦ wcel A2 cvv)
  (csbie_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (B2 x3) C)) :
  ⊦ wceq (csb A2 (λ x3, B2 x3)) C :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (csb A2 (λ x3, B2 x3)) C, from
  @csbief A2 (λ x3, B2 x3) (λ x3, C)
    csbie_1
    (@nfcv C)
    (λ x3, csbie_2 x3) x3


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by Mario
Carneiro, 2-Dec-2014.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem csbied {ph : wff} {A2 : «class»} {B2 : setvar → «class»} {C : «class»} {V : setvar → «class»}
  (csbied_1 : ∀ x3, ⊦ wi ph (wcel A2 (V x3)))
  (csbied_2 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) A2)) (wceq (B2 x3) C)) :
  ⊦ wi ph (wceq (csb A2 (λ x3, B2 x3)) C) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi ph (wceq (csb A2 (λ x3, B2 x3)) C), from
  @csbiedf (λ x3, ph) A2 (λ x3, B2 x3) (λ x3, C) (λ x3, V x3)
    (@nfv ph)
    (λ x3, setvar.forget $ λ x3 : setvar,
      show ⊦ wi ph (wnfc (λ x3, C)), from
      @nfcvd (λ x3, ph) C x3)
    (λ x3, csbied_1 x3)
    (λ x3, csbied_2 x3) x3


/-- Conversion of implicit substitution to explicit class substitution, deduction form. (Contributed
by Mario Carneiro, 2-Jan-2017.) -/
theorem csbied2 {ph : wff} {A2 : «class»} {B2 C : setvar → «class»} {D : «class»} {V : setvar → «class»}
  (csbied2_1 : ∀ x3, ⊦ wi ph (wcel A2 (V x3)))
  (csbied2_2 : ∀ x3, ⊦ wi ph (wceq A2 (B2 x3)))
  (csbied2_3 : ∀ x3, ⊦ wi (wa ph (wceq (cv x3) (B2 x3))) (wceq (C x3) D)) :
  ⊦ wi ph (wceq (csb A2 (λ x3, C x3)) D) :=
@csbied ph A2 (λ x3, C x3) D (λ x3, V x3)
  (λ x3, csbied2_1 x3)
  (λ x3, @syldan ph (wceq (cv x3) A2) (wceq (cv x3) (B2 x3)) (wceq (C x3) D)
    (@sylan9eqr (wceq (cv x3) A2) ph (cv x3) A2 (B2 x3)
      (@id (wceq (cv x3) A2))
      (csbied2_2 x3))
    (csbied2_3 x3))


/-- Conversion of implicit substitution to explicit substitution into a class (closed form of ~
csbie2 ). (Contributed by NM, 3-Sep-2007.) (Revised by Mario Carneiro, 13-Oct-2016.) -/
theorem csbie2t {A2 B2 : «class»} {C : setvar → setvar → «class»} {D : «class»}
  (csbie2t_1 : ⊦ wcel A2 cvv)
  (csbie2t_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (csb A2 (λ x3, csb B2 (λ y, C x3 y))) D) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (csb A2 (λ x3, csb B2 (λ y, C x3 y))) D), from
  @csbiedf (λ x3, wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) A2 (λ x3, csb B2 (λ y, C x3 y)) (λ x3, D) (λ x3, cvv)
    (@nfa1 (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D))))
    (λ x3, setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wnfc (λ x3, D)), from
      @nfcvd (λ x3, wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) D x3)
    (λ x3, @a1i (wcel A2 cvv) (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D))))
      csbie2t_1)
    (λ x3, setvar.forget $ λ y : setvar,
      show ⊦ wi (wa (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2)) (wceq (csb B2 (λ y, C x3 y)) D), from
      @csbiedf (λ y, wa (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2)) B2 (λ y, C x3 y) (λ y, D) (λ y, cvv)
        (@nfan (λ y, wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (λ y, wceq (cv x3) A2)
          (@nfa2 (λ y x3, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))
          (@nfv (wceq (cv x3) A2)))
        (λ y, setvar.forget $ λ y : setvar,
          show ⊦ wi (wa (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2)) (wnfc (λ y, D)), from
          @nfcvd (λ y, wa (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2)) D y)
        (λ y, @a1i (wcel B2 cvv) (wa (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2))
          csbie2t_2)
        (λ y, @impl (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (cv x3) A2) (wceq (cv y) B2) (wceq (C x3 y) D)
          (@«2sp» (λ x3 y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)) x3 y)) y) x3


/-- Conversion of implicit substitution to explicit substitution into a class. (Contributed by NM,
27-Aug-2007.) -/
theorem csbie2 {A2 B2 : «class»} {C : setvar → setvar → «class»} {D : «class»}
  (csbie2t_1 : ⊦ wcel A2 cvv)
  (csbie2t_2 : ⊦ wcel B2 cvv)
  (csbie2_3 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)) :
  ⊦ wceq (csb A2 (λ x3, csb B2 (λ y, C x3 y))) D :=
@ax_mp (wal (λ x3, wal (λ y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D)))) (wceq (csb A2 (λ x3, csb B2 (λ y, C x3 y))) D)
  (@gen2 (λ x3 y, wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (C x3 y) D))
    (λ x3 y, csbie2_3 x3 y))
  (@csbie2t A2 B2 (λ x3 y, C x3 y) D
    csbie2t_1
    csbie2t_2)


-- /-- Extend class notation to include class difference (read: " ` A ` minus ` B ` "). -/
-- constant cdif : «class» → «class» → «class»


-- /-- Extend class notation to include union of two classes (read: " ` A ` union ` B ` "). -/
-- constant cun : «class» → «class» → «class»


-- /-- Extend class notation to include the intersection of two classes (read: " ` A ` intersect ` B
-- ` "). -/
-- constant cin : «class» → «class» → «class»


-- /-- Extend wff notation to include the subclass relation. This is read " ` A ` is a subclass of `
-- B ` " or " ` B ` includes ` A ` ". When ` A ` exists as a set, it is also read " ` A ` is a
-- subset of ` B ` ". -/
-- constant wss : «class» → «class» → wff


-- /-- Extend wff notation with proper subclass relation. -/
-- constant wpss : «class» → «class» → wff


-- /-- Define class difference, also called relative complement. Definition 5.12 of [TakeutiZaring]
-- p. 20. For example, ` ( { 1 , 3 } \ { 1 , 8 } ) = { 3 } ` ( ~ ex-dif ). Contrast this operation
-- with union ` ( A u. B ) ` ( ~ df-un ) and intersection ` ( A i^i B ) ` ( ~ df-in ). Several
-- notations are used in the literature; we chose the ` \ ` convention used in Definition 5.3 of
-- [Eisenberg] p. 67 instead of the more common minus sign to reserve the latter for later use in,
-- e.g., arithmetic. We will use the terminology " ` A ` excludes ` B ` " to mean ` A \ B ` . We
-- will use " ` B ` is removed from ` A ` " to mean ` A \ { B } ` i.e. the removal of an element or
-- equivalently the exclusion of a singleton. (Contributed by NM, 29-Apr-1994.) -/
-- axiom df_dif {A2 B2 : «class»} : ⊦ wceq (cdif A2 B2) (cab (λ x3, wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))))


-- /-- Define the union of two classes. Definition 5.6 of [TakeutiZaring] p. 16. For example, ` ( {
-- 1 , 3 } u. { 1 , 8 } ) = { 1 , 3 , 8 } ` ( ~ ex-un ). Contrast this operation with difference ` (
-- A \ B ) ` ( ~ df-dif ) and intersection ` ( A i^i B ) ` ( ~ df-in ). For an alternate definition
-- in terms of class difference, requiring no dummy variables, see ~ dfun2 . For union defined in
-- terms of intersection, see ~ dfun3 . (Contributed by NM, 23-Aug-1993.) -/
-- axiom df_un {A2 B2 : «class»} : ⊦ wceq (cun A2 B2) (cab (λ x3, wo (wcel (cv x3) A2) (wcel (cv x3) B2)))


-- /-- Define the intersection of two classes. Definition 5.6 of [TakeutiZaring] p. 16. For example,
-- ` ( { 1 , 3 } i^i { 1 , 8 } ) = { 1 } ` ( ~ ex-in ). Contrast this operation with union ` ( A u.
-- B ) ` ( ~ df-un ) and difference ` ( A \ B ) ` ( ~ df-dif ). For alternate definitions in terms
-- of class difference, requiring no dummy variables, see ~ dfin2 and ~ dfin4 . For intersection
-- defined in terms of union, see ~ dfin3 . (Contributed by NM, 29-Apr-1994.) -/
-- axiom df_in {A2 B2 : «class»} : ⊦ wceq (cin A2 B2) (cab (λ x3, wa (wcel (cv x3) A2) (wcel (cv x3) B2)))


/-- Alternate definition for the intersection of two classes. (Contributed by NM, 6-Jul-2005.) -/
theorem dfin5 {A2 B2 : «class»} :
  ⊦ wceq (cin A2 B2) (crab (λ x3, wcel (cv x3) B2) (λ x3, A2)) :=
@eqtr4i (cin A2 B2) (cab (λ x3, wa (wcel (cv x3) A2) (wcel (cv x3) B2))) (crab (λ x3, wcel (cv x3) B2) (λ x3, A2))
  (@df_in A2 B2)
  (@df_rab (λ x3, wcel (cv x3) B2) (λ x3, A2))


/-- Alternate definition of class difference. (Contributed by NM, 25-Mar-2004.) -/
theorem dfdif2 {A2 B2 : «class»} :
  ⊦ wceq (cdif A2 B2) (crab (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2)) :=
@eqtr4i (cdif A2 B2) (cab (λ x3, wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (crab (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))
  (@df_dif A2 B2)
  (@df_rab (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))


/-- Expansion of membership in a class difference. (Contributed by NM, 29-Apr-1994.) -/
theorem eldif {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cdif B2 C)) (wa (wcel A2 B2) (wn (wcel A2 C))) :=
@pm5_21nii (wcel A2 (cdif B2 C)) (wcel A2 cvv) (wa (wcel A2 B2) (wn (wcel A2 C)))
  (@elex A2 (cdif B2 C))
  (@adantr (wcel A2 B2) (wcel A2 cvv) (wn (wcel A2 C))
    (@elex A2 B2))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cdif B2 C)) (wa (wcel A2 B2) (wn (wcel A2 C)))), from
    @elab2gw (λ x3, wa (wcel (cv x3) B2) (wn (wcel (cv x3) C))) (λ y, wa (wcel (cv y) B2) (wn (wcel (cv y) C))) (λ x3, wa (wcel A2 B2) (wn (wcel A2 C))) (λ x3, A2) (λ x3 y, cdif B2 C) (λ x3 y, cvv)
      (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) B2) (wcel (cv y) B2) (wn (wcel (cv x3) C)) (wn (wcel (cv y) C))
        (@eleq1 (cv x3) (cv y) B2)
        (@notbid (wceq (cv x3) (cv y)) (wcel (cv x3) C) (wcel (cv y) C)
          (@eleq1 (cv x3) (cv y) C)))
      (λ x3 y, @anbi12d (wceq (cv y) A2) (wcel (cv y) B2) (wcel A2 B2) (wn (wcel (cv y) C)) (wn (wcel A2 C))
        (@eleq1 (cv y) A2 B2)
        (@notbid (wceq (cv y) A2) (wcel (cv y) C) (wcel A2 C)
          (@eleq1 (cv y) A2 C)))
      (λ x3 y, @df_dif B2 C) x3 y)


/-- If a class is in one class and not another, it is also in their difference. One-way deduction
form of ~ eldif . (Contributed by David Moews, 1-May-2017.) -/
theorem eldifd {ph : wff} {A2 B2 C : «class»}
  (eldifd_1 : ⊦ wi ph (wcel A2 B2))
  (eldifd_2 : ⊦ wi ph (wn (wcel A2 C))) :
  ⊦ wi ph (wcel A2 (cdif B2 C)) :=
@sylanbrc ph (wcel A2 B2) (wn (wcel A2 C)) (wcel A2 (cdif B2 C))
  eldifd_1
  eldifd_2
  (@eldif A2 B2 C)


/-- If a class is in the difference of two classes, it is also in the minuend. One-way deduction
form of ~ eldif . (Contributed by David Moews, 1-May-2017.) -/
theorem eldifad {ph : wff} {A2 B2 C : «class»}
  (eldifad_1 : ⊦ wi ph (wcel A2 (cdif B2 C))) :
  ⊦ wi ph (wcel A2 B2) :=
@simpld ph (wcel A2 B2) (wn (wcel A2 C))
  (@sylib ph (wcel A2 (cdif B2 C)) (wa (wcel A2 B2) (wn (wcel A2 C)))
    eldifad_1
    (@eldif A2 B2 C))


/-- If a class is in the difference of two classes, it is not in the subtrahend. One-way deduction
form of ~ eldif . (Contributed by David Moews, 1-May-2017.) -/
theorem eldifbd {ph : wff} {A2 B2 C : «class»}
  (eldifbd_1 : ⊦ wi ph (wcel A2 (cdif B2 C))) :
  ⊦ wi ph (wn (wcel A2 C)) :=
@simprd ph (wcel A2 B2) (wn (wcel A2 C))
  (@sylib ph (wcel A2 (cdif B2 C)) (wa (wcel A2 B2) (wn (wcel A2 C)))
    eldifbd_1
    (@eldif A2 B2 C))


/-- Expansion of membership in an intersection of two classes. Theorem 12 of [Suppes] p. 25.
(Contributed by NM, 29-Apr-1994.) -/
theorem elin {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cin B2 C)) (wa (wcel A2 B2) (wcel A2 C)) :=
@pm5_21nii (wcel A2 (cin B2 C)) (wcel A2 cvv) (wa (wcel A2 B2) (wcel A2 C))
  (@elex A2 (cin B2 C))
  (@adantl (wcel A2 C) (wcel A2 cvv) (wcel A2 B2)
    (@elex A2 C))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cin B2 C)) (wa (wcel A2 B2) (wcel A2 C))), from
    @elab2gw (λ x3, wa (wcel (cv x3) B2) (wcel (cv x3) C)) (λ y, wa (wcel (cv y) B2) (wcel (cv y) C)) (λ x3, wa (wcel A2 B2) (wcel A2 C)) (λ x3, A2) (λ x3 y, cin B2 C) (λ x3 y, cvv)
      (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) B2) (wcel (cv y) B2) (wcel (cv x3) C) (wcel (cv y) C)
        (@eleq1 (cv x3) (cv y) B2)
        (@eleq1 (cv x3) (cv y) C))
      (λ x3 y, @anbi12d (wceq (cv y) A2) (wcel (cv y) B2) (wcel A2 B2) (wcel (cv y) C) (wcel A2 C)
        (@eleq1 (cv y) A2 B2)
        (@eleq1 (cv y) A2 C))
      (λ x3 y, @df_in B2 C) x3 y)


-- /-- Define the subclass relationship. Exercise 9 of [TakeutiZaring] p. 18. For example, ` { 1 , 2
-- } C_ { 1 , 2 , 3 } ` ( ~ ex-ss ). Note that ` A C_ A ` (proved in ~ ssid ). Contrast this
-- relationship with the relationship ` A C. B ` (as will be defined in ~ df-pss ). For a more
-- traditional definition, but requiring a dummy variable, see ~ dfss2 . Other possible definitions
-- are given by ~ dfss3 , ~ dfss4 , ~ sspss , ~ ssequn1 , ~ ssequn2 , ~ sseqin2 , and ~ ssdif0 . We
-- prefer the label "ss" ("subset") for ` C_ ` , despite the fact that it applies to classes. It is
-- much more common to refer to this as the subset relation than subclass, especially since most of
-- the time the arguments are in fact sets (and for pragmatic reasons we don't want to need to use
-- different operations for sets). The way set.mm is set up, many things are technically classes
-- despite morally (and provably) being sets, like ` 1 ` (cf. ~ df-1 and ~ 1ex ) or ` RR ` ( cf. ~
-- df-r and ~ reex ). This has to do with the fact that there are no "set expressions": classes are
-- expressions but there are only set variables in set.mm (cf. ~
-- https://us.metamath.org/downloads/grammar-ambiguity.txt ). This is why we use ` C_ ` both for
-- subclass relations and for subset relations and call it "subset". (Contributed by NM,
-- 27-Apr-1994.) -/
-- axiom df_ss {A2 B2 : «class»} : ⊦ wb (wss A2 B2) (wceq (cin A2 B2) A2)


/-- Variant of subclass definition ~ df-ss . (Contributed by NM, 21-Jun-1993.) -/
theorem dfss {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq A2 (cin A2 B2)) :=
@bitri (wss A2 B2) (wceq (cin A2 B2) A2) (wceq A2 (cin A2 B2))
  (@df_ss A2 B2)
  (@eqcom (cin A2 B2) A2)


-- /-- Define proper subclass (or strict subclass) relationship between two classes. Definition 5.9
-- of [TakeutiZaring] p. 17. For example, ` { 1 , 2 } C. { 1 , 2 , 3 } ` ( ~ ex-pss ). Note that `
-- -. A C. A ` (proved in ~ pssirr ). Contrast this relationship with the relationship ` A C_ B `
-- (as defined in ~ df-ss ). Other possible definitions are given by ~ dfpss2 and ~ dfpss3 .
-- (Contributed by NM, 7-Feb-1996.) -/
-- axiom df_pss {A2 B2 : «class»} : ⊦ wb (wpss A2 B2) (wa (wss A2 B2) (wne A2 B2))


/-- Alternate definition of the subclass relationship between two classes. Definition 5.9 of
[TakeutiZaring] p. 17. (Contributed by NM, 8-Jan-2002.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised
by SN, 16-May-2024.) -/
theorem dfss2 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) :=
@«3bitr4i» (wceq A2 (cin A2 B2)) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cin A2 B2)))) (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)))
  (@dfcleq A2 (cin A2 B2))
  (@dfss A2 B2)
  (@albii (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cin A2 B2)))
    (λ x3, @bitr4i (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wb (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))) (wb (wcel (cv x3) A2) (wcel (cv x3) (cin A2 B2)))
      (@pm4_71 (wcel (cv x3) A2) (wcel (cv x3) B2))
      (@bibi2i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) A2)
        (@elin (cv x3) A2 B2))))


/-- Alternate definition of subclass relationship. (Contributed by NM, 14-Oct-1999.) -/
theorem dfss3 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wral (λ x3, wcel (cv x3) B2) (λ x3, A2)) :=
@bitr4i (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wral (λ x3, wcel (cv x3) B2) (λ x3, A2))
  (@dfss2 A2 B2)
  (@df_ral (λ x3, wcel (cv x3) B2) (λ x3, A2))


/-- Equivalence for subclass relation, using bound-variable hypotheses instead of distinct variable
conditions. (Contributed by NM, 3-Jul-1994.) (Revised by Andrew Salmon, 27-Aug-2011.) Avoid ~ ax-13
. (Revised by Gino Giotto, 19-May-2023.) -/
theorem dfss2f {A2 B2 : setvar → «class»}
  (dfss2f_1 : ⊦ wnfc (λ x3, A2 x3))
  (dfss2f_2 : ⊦ wnfc (λ x3, B2 x3))
  (x3 : setvar) : ⊦ wb (wss (A2 x3) (B2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)))) :=
@bitri (wss (A2 x3) (B2 x3)) (wal (λ z, wi (wcel (cv z) (A2 x3)) (wcel (cv z) (B2 x3)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))))
  (@dfss2 (A2 x3) (B2 x3))
  (setvar.forget $ λ z : setvar,
    show ⊦ wb (wal (λ z, wi (wcel (cv z) (A2 x3)) (wcel (cv z) (B2 x3)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)))), from
    @cbvalv1 (λ z x3, wi (wcel (cv z) (A2 x3)) (wcel (cv z) (B2 x3))) (λ z x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)))
      (λ z, @nfim (λ x3, wcel (cv z) (A2 x3)) (λ x3, wcel (cv z) (B2 x3))
        (@nfcri (λ x3 z, A2 x3)
          (λ z, dfss2f_1) z)
        (@nfcri (λ x3 z, B2 x3)
          (λ z, dfss2f_2) z))
      (λ x3, @nfv (wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))))
      (λ z x3, @imbi12d (wceq (cv z) (cv x3)) (wcel (cv z) (A2 x3)) (wcel (cv x3) (A2 x3)) (wcel (cv z) (B2 x3)) (wcel (cv x3) (B2 x3))
        (@eleq1w (λ z x3, A2 x3) z x3)
        (@eleq1w (λ z x3, B2 x3) z x3)) z x3)


/-- Equivalence for subclass relation, using bound-variable hypotheses instead of distinct variable
conditions. (Contributed by NM, 20-Mar-2004.) -/
theorem dfss3f {A2 B2 : setvar → «class»}
  (dfss2f_1 : ⊦ wnfc (λ x3, A2 x3))
  (dfss2f_2 : ⊦ wnfc (λ x3, B2 x3))
  (x3 : setvar) : ⊦ wb (wss (A2 x3) (B2 x3)) (wral (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3)) :=
@bitr4i (wss (A2 x3) (B2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)))) (wral (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3))
  (@dfss2f (λ x3, A2 x3) (λ x3, B2 x3)
    dfss2f_1
    dfss2f_2 x3)
  (@df_ral (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3))


/-- If ` x ` is not free in ` A ` and ` B ` , it is not free in ` A C_ B ` . (Contributed by NM,
27-Dec-1996.) -/
theorem nfss {A2 B2 : setvar → «class»}
  (dfss2f_1 : ⊦ wnfc (λ x3, A2 x3))
  (dfss2f_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wss (A2 x3) (B2 x3)) :=
@nfxfr (λ x3, wss (A2 x3) (B2 x3)) (λ x3, wral (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3))
  (λ x3, @dfss3f (λ x3, A2 x3) (λ x3, B2 x3)
    dfss2f_1
    dfss2f_2 x3)
  (@nfra1 (λ x3, wcel (cv x3) (B2 x3)) (λ x3, A2 x3))


/-- Membership relationships follow from a subclass relationship. (Contributed by NM, 5-Aug-1993.)
Avoid ~ ax-12 . (Revised by SN, 27-May-2024.) -/
theorem ssel {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wi (wcel C A2) (wcel C B2)) :=
@sylbi (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wi (wcel C A2) (wcel C B2))
  (@dfss2 A2 B2)
  (@«3imtr4g» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wex (λ x3, wa (wceq (cv x3) C) (wcel (cv x3) A2))) (wex (λ x3, wa (wceq (cv x3) C) (wcel (cv x3) B2))) (wcel C A2) (wcel C B2)
    (@aleximi (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wa (wceq (cv x3) C) (wcel (cv x3) A2)) (λ x3, wa (wceq (cv x3) C) (wcel (cv x3) B2))
      (λ x3, @anim2d (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) A2) (wcel (cv x3) B2) (wceq (cv x3) C)
        (@id (wi (wcel (cv x3) A2) (wcel (cv x3) B2)))))
    (@dfclel C A2)
    (@dfclel C B2))


/-- Membership relationships follow from a subclass relationship. (Contributed by NM, 7-Jun-2004.)
-/
theorem ssel2 {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wcel C A2)) (wcel C B2) :=
@imp (wss A2 B2) (wcel C A2) (wcel C B2)
  (@ssel A2 B2 C)


/-- Membership implication from subclass relationship. (Contributed by NM, 5-Aug-1993.) -/
theorem sseli {A2 B2 C : «class»}
  (sseli_1 : ⊦ wss A2 B2) :
  ⊦ wi (wcel C A2) (wcel C B2) :=
@ax_mp (wss A2 B2) (wi (wcel C A2) (wcel C B2))
  sseli_1
  (@ssel A2 B2 C)


/-- Membership inference from subclass relationship. (Contributed by NM, 31-May-1999.) -/
theorem sselii {A2 B2 C : «class»}
  (sseli_1 : ⊦ wss A2 B2)
  (sselii_2 : ⊦ wcel C A2) :
  ⊦ wcel C B2 :=
@ax_mp (wcel C A2) (wcel C B2)
  sselii_2
  (@sseli A2 B2 C
    sseli_1)


/-- Membership inference from subclass relationship. (Contributed by NM, 25-Jun-2014.) -/
theorem sseldi {ph : wff} {A2 B2 C : «class»}
  (sseli_1 : ⊦ wss A2 B2)
  (sseldi_2 : ⊦ wi ph (wcel C A2)) :
  ⊦ wi ph (wcel C B2) :=
@syl ph (wcel C A2) (wcel C B2)
  sseldi_2
  (@sseli A2 B2 C
    sseli_1)


/-- Membership deduction from subclass relationship. (Contributed by NM, 15-Nov-1995.) -/
theorem sseld {ph : wff} {A2 B2 C : «class»}
  (sseld_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wi (wcel C A2) (wcel C B2)) :=
@syl ph (wss A2 B2) (wi (wcel C A2) (wcel C B2))
  sseld_1
  (@ssel A2 B2 C)


/-- Membership deduction from subclass relationship. (Contributed by NM, 26-Jun-2014.) -/
theorem sselda {ph : wff} {A2 B2 C : «class»}
  (sseld_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi (wa ph (wcel C A2)) (wcel C B2) :=
@imp ph (wcel C A2) (wcel C B2)
  (@sseld ph A2 B2 C
    sseld_1)


/-- Membership inference from subclass relationship. (Contributed by NM, 14-Dec-2004.) -/
theorem sseldd {ph : wff} {A2 B2 C : «class»}
  (sseld_1 : ⊦ wi ph (wss A2 B2))
  (sseldd_2 : ⊦ wi ph (wcel C A2)) :
  ⊦ wi ph (wcel C B2) :=
@mpd ph (wcel C A2) (wcel C B2)
  sseldd_2
  (@sseld ph A2 B2 C
    sseld_1)


/-- If a class is not in another class, it is also not in a subclass of that class. Deduction form.
(Contributed by David Moews, 1-May-2017.) -/
theorem ssneld {ph : wff} {A2 B2 C : «class»}
  (ssneld_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wi (wn (wcel C B2)) (wn (wcel C A2))) :=
@con3d ph (wcel C A2) (wcel C B2)
  (@sseld ph A2 B2 C
    ssneld_1)


/-- If an element is not in a class, it is also not in a subclass of that class. Deduction form.
(Contributed by David Moews, 1-May-2017.) -/
theorem ssneldd {ph : wff} {A2 B2 C : «class»}
  (ssneld_1 : ⊦ wi ph (wss A2 B2))
  (ssneldd_2 : ⊦ wi ph (wn (wcel C B2))) :
  ⊦ wi ph (wn (wcel C A2)) :=
@mpd ph (wn (wcel C B2)) (wn (wcel C A2))
  ssneldd_2
  (@ssneld ph A2 B2 C
    ssneld_1)


/-- Inference based on subclass definition. (Contributed by NM, 21-Jun-1993.) -/
theorem ssriv {A2 B2 : «class»}
  (ssriv_1 : ∀ x3, ⊦ wi (wcel (cv x3) A2) (wcel (cv x3) B2)) :
  ⊦ wss A2 B2 :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wss A2 B2, from
  @mpgbir (λ x3, wss A2 B2) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))
    (λ x3, @dfss2 A2 B2)
    (λ x3, ssriv_1 x3) x3


/-- Deduction based on subclass definition. (Contributed by NM, 15-Nov-1995.) -/
theorem ssrdv {ph : wff} {A2 B2 : «class»}
  (ssrdv_1 : ∀ x3, ⊦ wi ph (wi (wcel (cv x3) A2) (wcel (cv x3) B2))) :
  ⊦ wi ph (wss A2 B2) :=
@sylibr ph (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wss A2 B2)
  (@alrimiv ph (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))
    (λ x3, ssrdv_1 x3))
  (@dfss2 A2 B2)


/-- Transitivity of subclass relationship. Exercise 5 of [TakeutiZaring] p. 17. (Contributed by NM,
24-Jun-1993.) (Proof shortened by Andrew Salmon, 14-Jun-2011.) -/
theorem sstr2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wi (wss B2 C) (wss A2 C)) :=
@«3imtr4g» (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) C))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))) (wss B2 C) (wss A2 C)
  (@alimdv (wss A2 B2) (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) C)) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))
    (λ x3, @imim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C)
      (@ssel A2 B2 (cv x3))))
  (@dfss2 B2 C)
  (@dfss2 A2 C)


/-- Transitivity of subclass relationship. Theorem 6 of [Suppes] p. 23. (Contributed by NM,
5-Sep-2003.) -/
theorem sstr {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wss B2 C)) (wss A2 C) :=
@imp (wss A2 B2) (wss B2 C) (wss A2 C)
  (@sstr2 A2 B2 C)


/-- Subclass transitivity inference. (Contributed by NM, 5-May-2000.) -/
theorem sstri {A2 B2 C : «class»}
  (sstri_1 : ⊦ wss A2 B2)
  (sstri_2 : ⊦ wss B2 C) :
  ⊦ wss A2 C :=
@mp2 (wss A2 B2) (wss B2 C) (wss A2 C)
  sstri_1
  sstri_2
  (@sstr2 A2 B2 C)


/-- Subclass transitivity deduction. (Contributed by NM, 2-Jun-2004.) -/
theorem sstrd {ph : wff} {A2 B2 C : «class»}
  (sstrd_1 : ⊦ wi ph (wss A2 B2))
  (sstrd_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@syl2anc ph (wss A2 B2) (wss B2 C) (wss A2 C)
  sstrd_1
  sstrd_2
  (@sstr A2 B2 C)


/-- Subclass transitivity deduction. (Contributed by NM, 6-Feb-2014.) -/
theorem sstrid {ph : wff} {A2 B2 C : «class»}
  (sstrid_1 : ⊦ wss A2 B2)
  (sstrid_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@sstrd ph A2 B2 C
  (@a1i (wss A2 B2) ph
    sstrid_1)
  sstrid_2


/-- Subclass transitivity deduction. (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) -/
theorem sstrdi {ph : wff} {A2 B2 C : «class»}
  (sstrdi_1 : ⊦ wi ph (wss A2 B2))
  (sstrdi_2 : ⊦ wss B2 C) :
  ⊦ wi ph (wss A2 C) :=
@sstrd ph A2 B2 C
  sstrdi_1
  (@a1i (wss B2 C) ph
    sstrdi_2)


/-- A subclass transitivity deduction. (Contributed by NM, 27-Sep-2004.) (Proof shortened by Andrew
Salmon, 14-Jun-2011.) -/
theorem sylan9ss {ph ps : wff} {A2 B2 C : «class»}
  (sylan9ss_1 : ⊦ wi ph (wss A2 B2))
  (sylan9ss_2 : ⊦ wi ps (wss B2 C)) :
  ⊦ wi (wa ph ps) (wss A2 C) :=
@syl2an ph (wss A2 B2) (wss B2 C) (wss A2 C) ps
  sylan9ss_1
  sylan9ss_2
  (@sstr A2 B2 C)


/-- A subclass transitivity deduction. (Contributed by NM, 27-Sep-2004.) -/
theorem sylan9ssr {ph ps : wff} {A2 B2 C : «class»}
  (sylan9ssr_1 : ⊦ wi ph (wss A2 B2))
  (sylan9ssr_2 : ⊦ wi ps (wss B2 C)) :
  ⊦ wi (wa ps ph) (wss A2 C) :=
@ancoms ph ps (wss A2 C)
  (@sylan9ss ph ps A2 B2 C
    sylan9ssr_1
    sylan9ssr_2)


/-- The subclass relationship is antisymmetric. Compare Theorem 4 of [Suppes] p. 22. (Contributed by
NM, 21-May-1993.) -/
theorem eqss {A2 B2 : «class»} :
  ⊦ wb (wceq A2 B2) (wa (wss A2 B2) (wss B2 A2)) :=
@«3bitr4i» (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) B2))) (wa (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) A2)))) (wceq A2 B2) (wa (wss A2 B2) (wss B2 A2))
  (@albiim (λ x3, wcel (cv x3) A2) (λ x3, wcel (cv x3) B2))
  (@dfcleq A2 B2)
  (@anbi12i (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wss B2 A2) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) A2)))
    (@dfss2 A2 B2)
    (@dfss2 B2 A2))


/-- Infer equality from two subclass relationships. Compare Theorem 4 of [Suppes] p. 22.
(Contributed by NM, 9-Sep-1993.) -/
theorem eqssi {A2 B2 : «class»}
  (eqssi_1 : ⊦ wss A2 B2)
  (eqssi_2 : ⊦ wss B2 A2) :
  ⊦ wceq A2 B2 :=
@mpbir2an (wceq A2 B2) (wss A2 B2) (wss B2 A2)
  eqssi_1
  eqssi_2
  (@eqss A2 B2)


/-- Equality deduction from two subclass relationships. Compare Theorem 4 of [Suppes] p. 22.
(Contributed by NM, 27-Jun-2004.) -/
theorem eqssd {ph : wff} {A2 B2 : «class»}
  (eqssd_1 : ⊦ wi ph (wss A2 B2))
  (eqssd_2 : ⊦ wi ph (wss B2 A2)) :
  ⊦ wi ph (wceq A2 B2) :=
@sylanbrc ph (wss A2 B2) (wss B2 A2) (wceq A2 B2)
  eqssd_1
  eqssd_2
  (@eqss A2 B2)


/-- Equality deduction from subclass relationship and membership. (Contributed by AV, 21-Aug-2022.)
-/
theorem eqelssd {ph : wff} {A2 B2 : «class»}
  (eqelssd_1 : ⊦ wi ph (wss A2 B2))
  (eqelssd_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wcel (cv x3) A2)) :
  ⊦ wi ph (wceq A2 B2) :=
@eqssd ph A2 B2
  eqelssd_1
  (@ssrdv ph B2 A2
    (λ x3, @ex ph (wcel (cv x3) B2) (wcel (cv x3) A2)
      (eqelssd_2 x3)))


/-- Any class is a subclass of itself. Exercise 10 of [TakeutiZaring] p. 18. (Contributed by NM,
21-Jun-1993.) (Proof shortened by Andrew Salmon, 14-Jun-2011.) -/
theorem ssid {A2 : «class»} :
  ⊦ wss A2 A2 :=
@ssriv A2 A2
  (λ x3, @id (wcel (cv x3) A2))


/-- Weakening of ~ ssid . (Contributed by BJ, 1-Sep-2022.) -/
theorem ssidd {ph : wff} {A2 : «class»} :
  ⊦ wi ph (wss A2 A2) :=
@a1i (wss A2 A2) ph
  (@ssid A2)


/-- Any class is a subclass of the universal class. (Contributed by NM, 31-Oct-1995.) -/
theorem ssv {A2 : «class»} :
  ⊦ wss A2 cvv :=
@ssriv A2 cvv
  (λ x3, @elex (cv x3) A2)


/-- Equality theorem for subclasses. (Contributed by NM, 24-Jun-1993.) (Proof shortened by Andrew
Salmon, 21-Jun-2011.) -/
theorem sseq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wss A2 C) (wss B2 C)) :=
@sylbi (wceq A2 B2) (wa (wss A2 B2) (wss B2 A2)) (wb (wss A2 C) (wss B2 C))
  (@eqss A2 B2)
  (@impbid (wa (wss A2 B2) (wss B2 A2)) (wss A2 C) (wss B2 C)
    (@adantl (wss B2 A2) (wi (wss A2 C) (wss B2 C)) (wss A2 B2)
      (@sstr2 B2 A2 C))
    (@adantr (wss A2 B2) (wi (wss B2 C) (wss A2 C)) (wss B2 A2)
      (@sstr2 A2 B2 C)))


/-- Equality theorem for the subclass relationship. (Contributed by NM, 25-Jun-1998.) -/
theorem sseq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wss C A2) (wss C B2)) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wi (wss C A2) (wss C B2)) (wi (wss C B2) (wss C A2))) (wceq A2 B2) (wb (wss C A2) (wss C B2))
  (@anim12i (wss A2 B2) (wi (wss C A2) (wss C B2)) (wss B2 A2) (wi (wss C B2) (wss C A2))
    (@com12 (wss C A2) (wss A2 B2) (wss C B2)
      (@sstr2 C A2 B2))
    (@com12 (wss C B2) (wss B2 A2) (wss C A2)
      (@sstr2 C B2 A2)))
  (@eqss A2 B2)
  (@dfbi2 (wss C A2) (wss C B2))


/-- Equality theorem for the subclass relationship. (Contributed by NM, 31-May-1999.) -/
theorem sseq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wb (wss A2 C) (wss B2 D)) :=
@sylan9bb (wceq A2 B2) (wss A2 C) (wss B2 C) (wceq C D) (wss B2 D)
  (@sseq1 A2 B2 C)
  (@sseq2 C D B2)


/-- An equality inference for the subclass relationship. (Contributed by NM, 18-Aug-1993.) -/
theorem sseq1i {A2 B2 C : «class»}
  (sseq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wss A2 C) (wss B2 C) :=
@ax_mp (wceq A2 B2) (wb (wss A2 C) (wss B2 C))
  sseq1i_1
  (@sseq1 A2 B2 C)


/-- An equality inference for the subclass relationship. (Contributed by NM, 30-Aug-1993.) -/
theorem sseq2i {A2 B2 C : «class»}
  (sseq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wss C A2) (wss C B2) :=
@ax_mp (wceq A2 B2) (wb (wss C A2) (wss C B2))
  sseq1i_1
  (@sseq2 A2 B2 C)


/-- An equality inference for the subclass relationship. (Contributed by NM, 31-May-1999.) (Proof
shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem sseq12i {A2 B2 C D : «class»}
  (sseq1i_1 : ⊦ wceq A2 B2)
  (sseq12i_2 : ⊦ wceq C D) :
  ⊦ wb (wss A2 C) (wss B2 D) :=
@mp2an (wceq A2 B2) (wceq C D) (wb (wss A2 C) (wss B2 D))
  sseq1i_1
  sseq12i_2
  (@sseq12 A2 B2 C D)


/-- An equality deduction for the subclass relationship. (Contributed by NM, 14-Aug-1994.) -/
theorem sseq1d {ph : wff} {A2 B2 C : «class»}
  (sseq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wss A2 C) (wss B2 C)) :=
@syl ph (wceq A2 B2) (wb (wss A2 C) (wss B2 C))
  sseq1d_1
  (@sseq1 A2 B2 C)


/-- An equality deduction for the subclass relationship. (Contributed by NM, 14-Aug-1994.) -/
theorem sseq2d {ph : wff} {A2 B2 C : «class»}
  (sseq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wss C A2) (wss C B2)) :=
@syl ph (wceq A2 B2) (wb (wss C A2) (wss C B2))
  sseq1d_1
  (@sseq2 A2 B2 C)


/-- An equality deduction for the subclass relationship. (Contributed by NM, 31-May-1999.) -/
theorem sseq12d {ph : wff} {A2 B2 C D : «class»}
  (sseq1d_1 : ⊦ wi ph (wceq A2 B2))
  (sseq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wb (wss A2 C) (wss B2 D)) :=
@bitrd ph (wss A2 C) (wss B2 C) (wss B2 D)
  (@sseq1d ph A2 B2 C
    sseq1d_1)
  (@sseq2d ph C D B2
    sseq12d_2)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 16-Jul-1995.) -/
theorem eqsstri {A2 B2 C : «class»}
  (eqsstr_1 : ⊦ wceq A2 B2)
  (eqsstr_2 : ⊦ wss B2 C) :
  ⊦ wss A2 C :=
@mpbir (wss A2 C) (wss B2 C)
  eqsstr_2
  (@sseq1i A2 B2 C
    eqsstr_1)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 19-Oct-1999.) -/
theorem eqsstrri {A2 B2 C : «class»}
  (eqsstr3_1 : ⊦ wceq B2 A2)
  (eqsstr3_2 : ⊦ wss B2 C) :
  ⊦ wss A2 C :=
@eqsstri A2 B2 C
  (@eqcomi B2 A2
    eqsstr3_1)
  eqsstr3_2


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 28-Jul-1995.) -/
theorem sseqtri {A2 B2 C : «class»}
  (sseqtr_1 : ⊦ wss A2 B2)
  (sseqtr_2 : ⊦ wceq B2 C) :
  ⊦ wss A2 C :=
@mpbi (wss A2 B2) (wss A2 C)
  sseqtr_1
  (@sseq2i B2 C A2
    sseqtr_2)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 4-Apr-1995.) -/
theorem sseqtrri {A2 B2 C : «class»}
  (sseqtrri_1 : ⊦ wss A2 B2)
  (sseqtrri_2 : ⊦ wceq C B2) :
  ⊦ wss A2 C :=
@sseqtri A2 B2 C
  sseqtrri_1
  (@eqcomi C B2
    sseqtrri_2)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 25-Apr-2004.) -/
theorem eqsstrd {ph : wff} {A2 B2 C : «class»}
  (eqsstrd_1 : ⊦ wi ph (wceq A2 B2))
  (eqsstrd_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@mpbird ph (wss A2 C) (wss B2 C)
  eqsstrd_2
  (@sseq1d ph A2 B2 C
    eqsstrd_1)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 25-Apr-2004.) -/
theorem eqsstrrd {ph : wff} {A2 B2 C : «class»}
  (eqsstrrd_1 : ⊦ wi ph (wceq B2 A2))
  (eqsstrrd_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@eqsstrd ph A2 B2 C
  (@eqcomd ph B2 A2
    eqsstrrd_1)
  eqsstrrd_2


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 25-Apr-2004.) -/
theorem sseqtrd {ph : wff} {A2 B2 C : «class»}
  (sseqtrd_1 : ⊦ wi ph (wss A2 B2))
  (sseqtrd_2 : ⊦ wi ph (wceq B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@mpbid ph (wss A2 B2) (wss A2 C)
  sseqtrd_1
  (@sseq2d ph B2 C A2
    sseqtrd_2)


/-- Substitution of equality into a subclass relationship. (Contributed by NM, 25-Apr-2004.) -/
theorem sseqtrrd {ph : wff} {A2 B2 C : «class»}
  (sseqtrrd_1 : ⊦ wi ph (wss A2 B2))
  (sseqtrrd_2 : ⊦ wi ph (wceq C B2)) :
  ⊦ wi ph (wss A2 C) :=
@sseqtrd ph A2 B2 C
  sseqtrrd_1
  (@eqcomd ph C B2
    sseqtrrd_2)


/-- Substitution of equality in both sides of a subclass relationship. (Contributed by NM,
13-Jan-1996.) (Proof shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem «3sstr4i» {A2 B2 C D : «class»}
  («3sstr4_1» : ⊦ wss A2 B2)
  («3sstr4_2» : ⊦ wceq C A2)
  («3sstr4_3» : ⊦ wceq D B2) :
  ⊦ wss C D :=
@mpbir (wss C D) (wss A2 B2)
  «3sstr4_1»
  (@sseq12i C A2 D B2
    «3sstr4_2»
    «3sstr4_3»)


/-- Substitution of equality into both sides of a subclass relationship. (Contributed by NM,
16-Aug-1994.) (Proof shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem «3sstr4g» {ph : wff} {A2 B2 C D : «class»}
  («3sstr4g_1» : ⊦ wi ph (wss A2 B2))
  («3sstr4g_2» : ⊦ wceq C A2)
  («3sstr4g_3» : ⊦ wceq D B2) :
  ⊦ wi ph (wss C D) :=
@sylibr ph (wss A2 B2) (wss C D)
  «3sstr4g_1»
  (@sseq12i C A2 D B2
    «3sstr4g_2»
    «3sstr4g_3»)


/-- Substitution of equality into both sides of a subclass relationship. (Contributed by NM,
1-Oct-2000.) -/
theorem «3sstr3d» {ph : wff} {A2 B2 C D : «class»}
  («3sstr3d_1» : ⊦ wi ph (wss A2 B2))
  («3sstr3d_2» : ⊦ wi ph (wceq A2 C))
  («3sstr3d_3» : ⊦ wi ph (wceq B2 D)) :
  ⊦ wi ph (wss C D) :=
@mpbid ph (wss A2 B2) (wss C D)
  «3sstr3d_1»
  (@sseq12d ph A2 C B2 D
    «3sstr3d_2»
    «3sstr3d_3»)


/-- Substitution of equality into both sides of a subclass relationship. (Contributed by NM,
30-Nov-1995.) (Proof shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem «3sstr4d» {ph : wff} {A2 B2 C D : «class»}
  («3sstr4d_1» : ⊦ wi ph (wss A2 B2))
  («3sstr4d_2» : ⊦ wi ph (wceq C A2))
  («3sstr4d_3» : ⊦ wi ph (wceq D B2)) :
  ⊦ wi ph (wss C D) :=
@mpbird ph (wss C D) (wss A2 B2)
  «3sstr4d_1»
  (@sseq12d ph C A2 D B2
    «3sstr4d_2»
    «3sstr4d_3»)


/-- A chained subclass and equality deduction. (Contributed by NM, 25-Apr-2004.) -/
theorem eqsstrid {ph : wff} {A2 B2 C : «class»}
  (eqsstrid_1 : ⊦ wceq A2 B2)
  (eqsstrid_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@sylibr ph (wss B2 C) (wss A2 C)
  eqsstrid_2
  (@sseq1i A2 B2 C
    eqsstrid_1)


/-- A chained subclass and equality deduction. (Contributed by NM, 25-Apr-2004.) -/
theorem eqsstrrid {ph : wff} {A2 B2 C : «class»}
  (eqsstrrid_1 : ⊦ wceq B2 A2)
  (eqsstrrid_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss A2 C) :=
@eqsstrid ph A2 B2 C
  (@eqcomi B2 A2
    eqsstrrid_1)
  eqsstrrid_2


/-- A chained subclass and equality deduction. (Contributed by NM, 25-Apr-2004.) -/
theorem sseqtrdi {ph : wff} {A2 B2 C : «class»}
  (sseqtrdi_1 : ⊦ wi ph (wss A2 B2))
  (sseqtrdi_2 : ⊦ wceq B2 C) :
  ⊦ wi ph (wss A2 C) :=
@sylib ph (wss A2 B2) (wss A2 C)
  sseqtrdi_1
  (@sseq2i B2 C A2
    sseqtrdi_2)


/-- A chained subclass and equality deduction. (Contributed by NM, 25-Apr-2004.) -/
theorem sseqtrrdi {ph : wff} {A2 B2 C : «class»}
  (sseqtrrdi_1 : ⊦ wi ph (wss A2 B2))
  (sseqtrrdi_2 : ⊦ wceq C B2) :
  ⊦ wi ph (wss A2 C) :=
@sseqtrdi ph A2 B2 C
  sseqtrrdi_1
  (@eqcomi C B2
    sseqtrrdi_2)


/-- Subclass transitivity deduction. (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) -/
theorem sseqtrid {ph : wff} {A2 B2 C : «class»}
  (sseqtrid_1 : ⊦ wss B2 A2)
  (sseqtrid_2 : ⊦ wi ph (wceq A2 C)) :
  ⊦ wi ph (wss B2 C) :=
@sylancl ph (wceq A2 C) (wss B2 A2) (wss B2 C)
  sseqtrid_2
  sseqtrid_1
  (@biimpa (wceq A2 C) (wss B2 A2) (wss B2 C)
    (@sseq2 A2 C B2))


/-- Subclass transitivity deduction. (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) -/
theorem sseqtrrid {ph : wff} {A2 B2 C : «class»}
  (sseqtrrid_1 : ⊦ wss B2 A2)
  (sseqtrrid_2 : ⊦ wi ph (wceq C A2)) :
  ⊦ wi ph (wss B2 C) :=
@sseqtrrd ph B2 A2 C
  (@a1i (wss B2 A2) ph
    sseqtrrid_1)
  sseqtrrid_2


/-- A chained subclass and equality deduction. (Contributed by Mario Carneiro, 2-Jan-2017.) -/
theorem eqsstrdi {ph : wff} {A2 B2 C : «class»}
  (eqsstrdi_1 : ⊦ wi ph (wceq A2 B2))
  (eqsstrdi_2 : ⊦ wss B2 C) :
  ⊦ wi ph (wss A2 C) :=
@eqsstrd ph A2 B2 C
  eqsstrdi_1
  (@a1i (wss B2 C) ph
    eqsstrdi_2)


/-- A chained subclass and equality deduction. (Contributed by Mario Carneiro, 2-Jan-2017.) -/
theorem eqsstrrdi {ph : wff} {A2 B2 C : «class»}
  (eqsstrrdi_1 : ⊦ wi ph (wceq B2 A2))
  (eqsstrrdi_2 : ⊦ wss B2 C) :
  ⊦ wi ph (wss A2 C) :=
@eqsstrdi ph A2 B2 C
  (@eqcomd ph B2 A2
    eqsstrrdi_1)
  eqsstrrdi_2


/-- Equality implies the subclass relation. (Contributed by NM, 21-Jun-1993.) (Proof shortened by
Andrew Salmon, 21-Jun-2011.) -/
theorem eqimss {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wss A2 B2) :=
@simplbi (wceq A2 B2) (wss A2 B2) (wss B2 A2)
  (@eqss A2 B2)


/-- Equality implies the subclass relation. (Contributed by NM, 23-Nov-2003.) -/
theorem eqimss2 {A2 B2 : «class»} :
  ⊦ wi (wceq B2 A2) (wss A2 B2) :=
@eqcoms (wss A2 B2) A2 B2
  (@eqimss A2 B2)


/-- Infer subclass relationship from equality. (Contributed by NM, 6-Jan-2007.) -/
theorem eqimssi {A2 B2 : «class»}
  (eqimssi_1 : ⊦ wceq A2 B2) :
  ⊦ wss A2 B2 :=
@sseqtri A2 A2 B2
  (@ssid A2)
  eqimssi_1


/-- Infer subclass relationship from equality. (Contributed by NM, 7-Jan-2007.) -/
theorem eqimss2i {A2 B2 : «class»}
  (eqimssi_1 : ⊦ wceq A2 B2) :
  ⊦ wss B2 A2 :=
@sseqtrri B2 B2 A2
  (@ssid B2)
  eqimssi_1


/-- Negation of subclass relationship. Exercise 13 of [TakeutiZaring] p. 18. (Contributed by NM,
25-Feb-1996.) (Proof shortened by Andrew Salmon, 21-Jun-2011.) -/
theorem nss {A2 B2 : «class»} :
  ⊦ wb (wn (wss A2 B2)) (wex (λ x3, wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) :=
@bicomi (wex (λ x3, wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wn (wss A2 B2))
  (@xchbinxr (wex (λ x3, wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wss A2 B2)
    (@exanali (λ x3, wcel (cv x3) A2) (λ x3, wcel (cv x3) B2))
    (@dfss2 A2 B2))


/-- Quantification restricted to a subclass. (Contributed by NM, 11-Mar-2006.) -/
theorem ssralv {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wi (wral (λ x3, ph x3) (λ x3, B2)) (wral (λ x3, ph x3) (λ x3, A2))) :=
@ralimdv2 (wss A2 B2) (λ x3, ph x3) (λ x3, ph x3) (λ x3, B2) (λ x3, A2)
  (λ x3, @imim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (ph x3)
    (@ssel A2 B2 (cv x3)))


/-- Existential quantification restricted to a subclass. (Contributed by NM, 11-Jan-2007.) -/
theorem ssrexv {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wi (wrex (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, B2))) :=
@reximdv2 (wss A2 B2) (λ x3, ph x3) (λ x3, ph x3) (λ x3, A2) (λ x3, B2)
  (λ x3, @anim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (ph x3)
    (@ssel A2 B2 (cv x3)))


/-- Two quantifications restricted to a subclass. (Contributed by AV, 11-Mar-2023.) -/
theorem ss2ralv {ph : setvar → setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wi (wral (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ x3, B2)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, A2)) (λ x3, A2))) :=
@syld (wss A2 B2) (wral (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ x3, B2)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, A2)) (λ x3, B2)) (wral (λ x3, wral (λ y, ph x3 y) (λ y, A2)) (λ x3, A2))
  (@ralimdv (wss A2 B2) (λ x3, wral (λ y, ph x3 y) (λ y, B2)) (λ x3, wral (λ y, ph x3 y) (λ y, A2)) (λ x3, B2)
    (λ x3, @ssralv (λ y, ph x3 y) A2 B2))
  (@ssralv (λ x3, wral (λ y, ph x3 y) (λ y, A2)) A2 B2)


/-- Restricted universal quantification on a subset in terms of superset. (Contributed by Stefan
O'Rear, 3-Apr-2015.) -/
theorem ralss {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wb (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ x3, B2))) :=
@ralbidv2 (wss A2 B2) (λ x3, ph x3) (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ x3, A2) (λ x3, B2)
  (λ x3, @bitrdi (wss A2 B2) (wi (wcel (cv x3) A2) (ph x3)) (wi (wa (wcel (cv x3) B2) (wcel (cv x3) A2)) (ph x3)) (wi (wcel (cv x3) B2) (wi (wcel (cv x3) A2) (ph x3)))
    (@imbi1d (wss A2 B2) (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) A2)) (ph x3)
      (@pm4_71rd (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2)
        (@ssel A2 B2 (cv x3))))
    (@impexp (wcel (cv x3) B2) (wcel (cv x3) A2) (ph x3)))


/-- Class abstractions in a subclass relationship. (Contributed by NM, 3-Jul-1994.) -/
theorem ss2ab {ph ps : setvar → wff} :
  ⊦ wb (wss (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (wal (λ x3, wi (ph x3) (ps x3))) :=
@bitri (wss (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (wal (λ x3, wi (wcel (cv x3) (cab (λ x3, ph x3))) (wcel (cv x3) (cab (λ x3, ps x3))))) (wal (λ x3, wi (ph x3) (ps x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wss (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (wal (λ x3, wi (wcel (cv x3) (cab (λ x3, ph x3))) (wcel (cv x3) (cab (λ x3, ps x3))))), from
    @dfss2f (λ x3, cab (λ x3, ph x3)) (λ x3, cab (λ x3, ps x3))
      (@nfab1 (λ x3, ph x3))
      (@nfab1 (λ x3, ps x3)) x3)
  (@albii (λ x3, wi (wcel (cv x3) (cab (λ x3, ph x3))) (wcel (cv x3) (cab (λ x3, ps x3)))) (λ x3, wi (ph x3) (ps x3))
    (λ x3, @imbi12i (wcel (cv x3) (cab (λ x3, ph x3))) (ph x3) (wcel (cv x3) (cab (λ x3, ps x3))) (ps x3)
      (@abid (λ x3, ph x3) x3)
      (@abid (λ x3, ps x3) x3)))


/-- Class abstraction in a subclass relationship. (Contributed by NM, 16-Aug-2006.) -/
theorem abss {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wss (cab (λ x3, ph x3)) A2) (wal (λ x3, wi (ph x3) (wcel (cv x3) A2))) :=
@bitr3i (wss (cab (λ x3, ph x3)) A2) (wss (cab (λ x3, ph x3)) (cab (λ x3, wcel (cv x3) A2))) (wal (λ x3, wi (ph x3) (wcel (cv x3) A2)))
  (@sseq2i (cab (λ x3, wcel (cv x3) A2)) A2 (cab (λ x3, ph x3))
    (@abid2 A2))
  (@ss2ab (λ x3, ph x3) (λ x3, wcel (cv x3) A2))


/-- Subclass of a class abstraction. (Contributed by NM, 16-Aug-2006.) -/
theorem ssab {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wss A2 (cab (λ x3, ph x3))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) :=
@bitr3i (wss A2 (cab (λ x3, ph x3))) (wss (cab (λ x3, wcel (cv x3) A2)) (cab (λ x3, ph x3))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))
  (@sseq1i (cab (λ x3, wcel (cv x3) A2)) A2 (cab (λ x3, ph x3))
    (@abid2 A2))
  (@ss2ab (λ x3, wcel (cv x3) A2) (λ x3, ph x3))


/-- Deduction of abstraction subclass from implication. (Contributed by NM, 29-Jul-2011.) Avoid ~
ax-8 , ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 28-Jun-2024.) -/
theorem ss2abdv {ph : wff} {ps ch : setvar → wff}
  (ss2abdv_1 : ∀ x3, ⊦ wi ph (wi (ps x3) (ch x3))) :
  ⊦ wi ph (wss (cab (λ x3, ps x3)) (cab (λ x3, ch x3))) :=
@sylibr ph (wceq (cin (cab (λ x3, ps x3)) (cab (λ x3, ch x3))) (cab (λ x3, ps x3))) (wss (cab (λ x3, ps x3)) (cab (λ x3, ch x3)))
  (@syl5eq ph (cin (cab (λ x3, ps x3)) (cab (λ x3, ch x3))) (cab (λ y, wa (wcel (cv y) (cab (λ x3, ps x3))) (wcel (cv y) (cab (λ x3, ch x3))))) (cab (λ x3, ps x3))
    (@df_in (cab (λ x3, ps x3)) (cab (λ x3, ch x3)))
    (@eqtr3id ph (cab (λ y, wa (wcel (cv y) (cab (λ x3, ps x3))) (wcel (cv y) (cab (λ x3, ch x3))))) (cab (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y))) (cab (λ x3, ps x3))
      (@abbii (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)) (λ y, wa (wcel (cv y) (cab (λ x3, ps x3))) (wcel (cv y) (cab (λ x3, ch x3))))
        (λ y, @anbi12i (wsb (λ x3, ps x3) y) (wcel (cv y) (cab (λ x3, ps x3))) (wsb (λ x3, ch x3) y) (wcel (cv y) (cab (λ x3, ch x3)))
          (@bicomi (wcel (cv y) (cab (λ x3, ps x3))) (wsb (λ x3, ps x3) y)
            (@df_clab (λ x3, ps x3) y))
          (@bicomi (wcel (cv y) (cab (λ x3, ch x3))) (wsb (λ x3, ch x3) y)
            (@df_clab (λ x3, ch x3) y))))
      (@eqrdv ph (cab (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y))) (cab (λ x3, ps x3))
        (λ z, @«3bitr4g» ph (wsb (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)) z) (wsb (λ x3, ps x3) z) (wcel (cv z) (cab (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)))) (wcel (cv z) (cab (λ x3, ps x3)))
          (@syl5bb (wsb (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)) z) (wa (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z)) ph (wsb (λ x3, ps x3) z)
            (@sbievw (λ y z, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)) (λ z, wa (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z))
              (λ y z, @anbi12d (wceq (cv y) (cv z)) (wsb (λ x3, ps x3) y) (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) y) (wsb (λ x3, ch x3) z)
                (@sbequ (λ y z x3, ps x3) y z)
                (@sbequ (λ y z x3, ch x3) y z)) z)
            (@impbid ph (wa (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z)) (wsb (λ x3, ps x3) z)
              (@impd ph (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z) (wsb (λ x3, ps x3) z)
                (@a1i (wi (wsb (λ x3, ps x3) z) (wi (wsb (λ x3, ch x3) z) (wsb (λ x3, ps x3) z))) ph
                  (@ax_1 (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z))))
              (@ancld ph (wsb (λ x3, ps x3) z) (wsb (λ x3, ch x3) z)
                (@sbimdv ph (λ x3, ps x3) (λ x3, ch x3) z
                  (λ x3, ss2abdv_1 x3)))))
          (@df_clab (λ y, wa (wsb (λ x3, ps x3) y) (wsb (λ x3, ch x3) y)) z)
          (@df_clab (λ x3, ps x3) z)))))
  (@df_ss (cab (λ x3, ps x3)) (cab (λ x3, ch x3)))


/-- Inference of abstraction subclass from implication. (Contributed by NM, 31-Mar-1995.) Avoid ~
ax-8 , ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 28-Jun-2024.) -/
theorem ss2abi {ph ps : setvar → wff}
  (ss2abi_1 : ∀ x3, ⊦ wi (ph x3) (ps x3)) :
  ⊦ wss (cab (λ x3, ph x3)) (cab (λ x3, ps x3)) :=
@ax_mp wtru (wss (cab (λ x3, ph x3)) (cab (λ x3, ps x3)))
  tru
  (@ss2abdv wtru (λ x3, ph x3) (λ x3, ps x3)
    (λ x3, @a1i (wi (ph x3) (ps x3)) wtru
      (ss2abi_1 x3)))


/-- Deduction of abstraction subclass from implication. (Contributed by NM, 20-Jan-2006.) -/
theorem abssdv {ph : wff} {ps : setvar → wff} {A2 : «class»}
  (abssdv_1 : ∀ x3, ⊦ wi ph (wi (ps x3) (wcel (cv x3) A2))) :
  ⊦ wi ph (wss (cab (λ x3, ps x3)) A2) :=
@sylibr ph (wal (λ x3, wi (ps x3) (wcel (cv x3) A2))) (wss (cab (λ x3, ps x3)) A2)
  (@alrimiv ph (λ x3, wi (ps x3) (wcel (cv x3) A2))
    (λ x3, abssdv_1 x3))
  (@abss (λ x3, ps x3) A2)


/-- Inference of abstraction subclass from implication. (Contributed by NM, 20-Jan-2006.) -/
theorem abssi {ph : setvar → wff} {A2 : «class»}
  (abssi_1 : ∀ x3, ⊦ wi (ph x3) (wcel (cv x3) A2)) :
  ⊦ wss (cab (λ x3, ph x3)) A2 :=
@sseqtri (cab (λ x3, ph x3)) (cab (λ x3, wcel (cv x3) A2)) A2
  (@ss2abi (λ x3, ph x3) (λ x3, wcel (cv x3) A2)
    (λ x3, abssi_1 x3))
  (@abid2 A2)


/-- Restricted abstraction classes in a subclass relationship. (Contributed by NM, 30-May-1999.) -/
theorem ss2rab {ph ps : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2 x3)) :=
@«3bitri» (wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (wss (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2 x3))
  (@sseq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (crab (λ x3, ps x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
    (@df_rab (λ x3, ps x3) (λ x3, A2 x3)))
  (@ss2ab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
  (@bitr2i (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (ph x3) (ps x3)))) (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3))))
    (@df_ral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2 x3))
    (@albii (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (ph x3) (ps x3))) (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))
      (λ x3, @imdistan (wcel (cv x3) (A2 x3)) (ph x3) (ps x3))))


/-- Restricted class abstraction in a subclass relationship. (Contributed by NM, 16-Aug-2006.) -/
theorem rabss {ph : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} :
  ⊦ wb (wss (crab (λ x3, ph x3) (λ x3, A2 x3)) B2) (wral (λ x3, wi (ph x3) (wcel (cv x3) B2)) (λ x3, A2 x3)) :=
@«3bitri» (wss (crab (λ x3, ph x3) (λ x3, A2 x3)) B2) (wss (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) B2) (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2))) (wral (λ x3, wi (ph x3) (wcel (cv x3) B2)) (λ x3, A2 x3))
  (@sseq1i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) B2
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3)))
  (@abss (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) B2)
  (@bitr4i (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (ph x3) (wcel (cv x3) B2)))) (wral (λ x3, wi (ph x3) (wcel (cv x3) B2)) (λ x3, A2 x3))
    (@albii (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2)) (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (ph x3) (wcel (cv x3) B2)))
      (λ x3, @impexp (wcel (cv x3) (A2 x3)) (ph x3) (wcel (cv x3) B2)))
    (@df_ral (λ x3, wi (ph x3) (wcel (cv x3) B2)) (λ x3, A2 x3)))


/-- Subclass of a restricted class abstraction. (Contributed by NM, 16-Aug-2006.) -/
theorem ssrab {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wb (wss B2 (crab (λ x3, ph x3) (λ x3, A2))) (wa (wss B2 A2) (wral (λ x3, ph x3) (λ x3, B2))) :=
@«3bitri» (wss B2 (crab (λ x3, ph x3) (λ x3, A2))) (wss B2 (cab (λ x3, wa (wcel (cv x3) A2) (ph x3)))) (wal (λ x3, wi (wcel (cv x3) B2) (wa (wcel (cv x3) A2) (ph x3)))) (wa (wss B2 A2) (wral (λ x3, ph x3) (λ x3, B2)))
  (@sseq2i (crab (λ x3, ph x3) (λ x3, A2)) (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) B2
    (@df_rab (λ x3, ph x3) (λ x3, A2)))
  (@ssab (λ x3, wa (wcel (cv x3) A2) (ph x3)) B2)
  (@«3bitr2ri» (wa (wss B2 A2) (wral (λ x3, ph x3) (λ x3, B2))) (wa (wral (λ x3, wcel (cv x3) A2) (λ x3, B2)) (wral (λ x3, ph x3) (λ x3, B2))) (wral (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ x3, B2)) (wal (λ x3, wi (wcel (cv x3) B2) (wa (wcel (cv x3) A2) (ph x3))))
    (@anbi1i (wss B2 A2) (wral (λ x3, wcel (cv x3) A2) (λ x3, B2)) (wral (λ x3, ph x3) (λ x3, B2))
      (@dfss3 B2 A2))
    (@r19_26 (λ x3, wcel (cv x3) A2) (λ x3, ph x3) (λ x3, B2))
    (@df_ral (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ x3, B2)))


/-- Subclass of a restricted class abstraction (deduction form). (Contributed by NM, 31-Aug-2006.)
-/
theorem ssrabdv {ph : wff} {ps : setvar → wff} {A2 B2 : «class»}
  (ssrabdv_1 : ⊦ wi ph (wss B2 A2))
  (ssrabdv_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (ps x3)) :
  ⊦ wi ph (wss B2 (crab (λ x3, ps x3) (λ x3, A2))) :=
@sylanbrc ph (wss B2 A2) (wral (λ x3, ps x3) (λ x3, B2)) (wss B2 (crab (λ x3, ps x3) (λ x3, A2)))
  ssrabdv_1
  (@ralrimiva ph (λ x3, ps x3) (λ x3, B2)
    (λ x3, ssrabdv_2 x3))
  (@ssrab (λ x3, ps x3) A2 B2)


/-- Subclass of a restricted class abstraction (deduction form). (Contributed by NM, 2-Feb-2015.) -/
theorem rabssdv {ph : wff} {ps : setvar → wff} {A2 : setvar → «class»} {B2 : «class»}
  (rabssdv_1 : ∀ x3, ⊦ wi (w3a ph (wcel (cv x3) (A2 x3)) (ps x3)) (wcel (cv x3) B2)) :
  ⊦ wi ph (wss (crab (λ x3, ps x3) (λ x3, A2 x3)) B2) :=
@sylibr ph (wral (λ x3, wi (ps x3) (wcel (cv x3) B2)) (λ x3, A2 x3)) (wss (crab (λ x3, ps x3) (λ x3, A2 x3)) B2)
  (@ralrimiv ph (λ x3, wi (ps x3) (wcel (cv x3) B2)) (λ x3, A2 x3)
    (λ x3, @«3exp» ph (wcel (cv x3) (A2 x3)) (ps x3) (wcel (cv x3) B2)
      (rabssdv_1 x3)))
  (@rabss (λ x3, ps x3) (λ x3, A2 x3) B2)


/-- Deduction of restricted abstraction subclass from implication. (Contributed by NM, 30-May-2006.)
-/
theorem ss2rabdv {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»}
  (ss2rabdv_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wi (ps x3) (ch x3))) :
  ⊦ wi ph (wss (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, A2 x3))) :=
@sylibr ph (wral (λ x3, wi (ps x3) (ch x3)) (λ x3, A2 x3)) (wss (crab (λ x3, ps x3) (λ x3, A2 x3)) (crab (λ x3, ch x3) (λ x3, A2 x3)))
  (@ralrimiva ph (λ x3, wi (ps x3) (ch x3)) (λ x3, A2 x3)
    (λ x3, ss2rabdv_1 x3))
  (@ss2rab (λ x3, ps x3) (λ x3, ch x3) (λ x3, A2 x3))


/-- Inference of restricted abstraction subclass from implication. (Contributed by NM, 14-Oct-1999.)
-/
theorem ss2rabi {ph ps : setvar → wff} {A2 : setvar → «class»}
  (ss2rabi_1 : ∀ x3, ⊦ wi (wcel (cv x3) (A2 x3)) (wi (ph x3) (ps x3))) :
  ⊦ wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3)), from
  @mprgbir (λ x3, wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (λ x3, wi (ph x3) (ps x3)) (λ x3, A2 x3)
    (λ x3, @ss2rab (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2 x3))
    (λ x3, ss2rabi_1 x3) x3


/-- Subclass law for restricted abstraction. (Contributed by NM, 18-Dec-2004.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem rabss2 {ph : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (crab (λ x3, ph x3) (λ x3, A2)) (crab (λ x3, ph x3) (λ x3, B2))) :=
@«3sstr4g» (wss A2 B2) (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) (cab (λ x3, wa (wcel (cv x3) B2) (ph x3))) (crab (λ x3, ph x3) (λ x3, A2)) (crab (λ x3, ph x3) (λ x3, B2))
  (@«3imtr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ph x3)))) (wss A2 B2) (wss (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) (cab (λ x3, wa (wcel (cv x3) B2) (ph x3))))
    (@alimi (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ph x3)))
      (λ x3, @pm3_45 (wcel (cv x3) A2) (wcel (cv x3) B2) (ph x3)))
    (@dfss2 A2 B2)
    (@ss2ab (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ x3, wa (wcel (cv x3) B2) (ph x3))))
  (@df_rab (λ x3, ph x3) (λ x3, A2))
  (@df_rab (λ x3, ph x3) (λ x3, B2))


/-- Subclass relation for the restriction of a class abstraction. (Contributed by NM, 31-Mar-1995.)
-/
theorem ssab2 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wss (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) A2 :=
@abssi (λ x3, wa (wcel (cv x3) A2) (ph x3)) A2
  (λ x3, @simpl (wcel (cv x3) A2) (ph x3))


/-- Subclass relation for a restricted class. (Contributed by NM, 19-Mar-1997.) (Proof shortened by
BJ and SN, 8-Aug-2024.) -/
theorem ssrab2 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wss (crab (λ x3, ph x3) (λ x3, A2)) A2 :=
@ssriv (crab (λ x3, ph x3) (λ x3, A2)) A2
  (λ y, setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel (cv y) (crab (λ x3, ph x3) (λ x3, A2))) (wcel (cv y) A2), from
    @elrabi (λ x3, ph x3) (λ x3, cv y) A2 x3)


/-- Subclass relation for a restricted class abstraction. (Contributed by Jonathan Ben-Naim,
3-Jun-2011.) -/
theorem ssrab3 {ph : setvar → wff} {A2 : «class»} {B2 : setvar → «class»}
  (ssrab3_1 : ∀ x3, ⊦ wceq (B2 x3) (crab (λ x3, ph x3) (λ x3, A2)))
  (x3 : setvar) : ⊦ wss (B2 x3) A2 :=
@eqsstri (B2 x3) (crab (λ x3, ph x3) (λ x3, A2)) A2
  (ssrab3_1 x3)
  (@ssrab2 (λ x3, ph x3) A2)


/-- A restricted class is a subclass of the corresponding unrestricted class. (Contributed by Mario
Carneiro, 23-Dec-2016.) -/
theorem rabssab {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wss (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, ph x3)) :=
@eqsstri (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, ph x3))
  (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
  (@ss2abi (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, ph x3)
    (λ x3, @simpr (wcel (cv x3) (A2 x3)) (ph x3)))


/-- A subset relationship useful for converting union to indexed union using ~ dfiun2 or ~ dfiun2g
and intersection to indexed intersection using ~ dfiin2 . (Contributed by NM, 5-Oct-2006.) (Proof
shortened by Mario Carneiro, 26-Sep-2015.) -/
theorem uniiunlem {A2 B2 C : setvar → «class»} {D : setvar → setvar → «class»}
  (y : setvar) : ⊦ wi (wral (λ x3, wcel (B2 x3) (D x3 y)) (λ x3, A2 x3)) (wb (wral (λ x3, wcel (B2 x3) (C y)) (λ x3, A2 x3)) (wss (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) (C y))) :=
@syl5rbb (wss (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) (C y)) (wral (λ x3, wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (λ x3, A2 x3)) (wral (λ x3, wcel (B2 x3) (D x3 y)) (λ x3, A2 x3)) (wral (λ x3, wcel (B2 x3) (C y)) (λ x3, A2 x3))
  (@bitr4i (wss (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) (C y)) (wss (cab (λ z, wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3))) (C y)) (wral (λ x3, wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (λ x3, A2 x3))
    (@sseq1i (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) (cab (λ z, wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3))) (C y)
      (@cbvabv (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (λ z, wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3))
        (λ y z, @rexbidv (wceq (cv y) (cv z)) (λ x3, wceq (cv y) (B2 x3)) (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)
          (λ x3, @eqeq1 (cv y) (cv z) (B2 x3)))))
    (@«3bitr4i» (wal (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y))) (λ x3, A2 x3))) (wal (λ z, wi (wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv z) (C y)))) (wral (λ x3, wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (λ x3, A2 x3)) (wss (cab (λ z, wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3))) (C y))
      (@albii (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y))) (λ x3, A2 x3)) (λ z, wi (wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv z) (C y)))
        (λ z, @r19_23v (λ x3, wceq (cv z) (B2 x3)) (wcel (cv z) (C y)) (λ x3, A2 x3)))
      (@ralcom4 (λ x3 z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y))) (λ x3, A2 x3))
      (@abss (λ z, wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (C y))))
  (@syl (wral (λ x3, wcel (B2 x3) (D x3 y)) (λ x3, A2 x3)) (wral (λ x3, wb (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (wcel (B2 x3) (C y))) (λ x3, A2 x3)) (wb (wral (λ x3, wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (λ x3, A2 x3)) (wral (λ x3, wcel (B2 x3) (C y)) (λ x3, A2 x3)))
    (@ralimi (λ x3, wcel (B2 x3) (D x3 y)) (λ x3, wb (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (wcel (B2 x3) (C y))) (λ x3, A2 x3)
      (λ x3, setvar.forget $ λ z : setvar,
        show ⊦ wi (wcel (B2 x3) (D x3 y)) (wb (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (wcel (B2 x3) (C y))), from
        @ceqsalg (λ z, wcel (cv z) (C y)) (λ z, wcel (B2 x3) (C y)) (B2 x3) (λ z, D x3 y)
          (@nfv (wcel (B2 x3) (C y)))
          (λ z, @eleq1 (cv z) (B2 x3) (C y)) z))
    (@ralbi (λ x3, wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv z) (C y)))) (λ x3, wcel (B2 x3) (C y)) (λ x3, A2 x3)))


/-- Alternate definition of proper subclass. (Contributed by NM, 7-Feb-1996.) -/
theorem dfpss2 {A2 B2 : «class»} :
  ⊦ wb (wpss A2 B2) (wa (wss A2 B2) (wn (wceq A2 B2))) :=
@bitri (wpss A2 B2) (wa (wss A2 B2) (wne A2 B2)) (wa (wss A2 B2) (wn (wceq A2 B2)))
  (@df_pss A2 B2)
  (@anbi2i (wne A2 B2) (wn (wceq A2 B2)) (wss A2 B2)
    (@df_ne A2 B2))


/-- Alternate definition of proper subclass. (Contributed by NM, 7-Feb-1996.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem dfpss3 {A2 B2 : «class»} :
  ⊦ wb (wpss A2 B2) (wa (wss A2 B2) (wn (wss B2 A2))) :=
@bitri (wpss A2 B2) (wa (wss A2 B2) (wn (wceq A2 B2))) (wa (wss A2 B2) (wn (wss B2 A2)))
  (@dfpss2 A2 B2)
  (@pm5_32i (wss A2 B2) (wn (wceq A2 B2)) (wn (wss B2 A2))
    (@notbid (wss A2 B2) (wceq A2 B2) (wss B2 A2)
      (@baib (wceq A2 B2) (wss A2 B2) (wss B2 A2)
        (@eqss A2 B2))))


/-- Equality theorem for proper subclass. (Contributed by NM, 7-Feb-1996.) -/
theorem psseq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wpss A2 C) (wpss B2 C)) :=
@«3bitr4g» (wceq A2 B2) (wa (wss A2 C) (wne A2 C)) (wa (wss B2 C) (wne B2 C)) (wpss A2 C) (wpss B2 C)
  (@anbi12d (wceq A2 B2) (wss A2 C) (wss B2 C) (wne A2 C) (wne B2 C)
    (@sseq1 A2 B2 C)
    (@neeq1 A2 B2 C))
  (@df_pss A2 C)
  (@df_pss B2 C)


/-- Equality theorem for proper subclass. (Contributed by NM, 7-Feb-1996.) -/
theorem psseq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wpss C A2) (wpss C B2)) :=
@«3bitr4g» (wceq A2 B2) (wa (wss C A2) (wne C A2)) (wa (wss C B2) (wne C B2)) (wpss C A2) (wpss C B2)
  (@anbi12d (wceq A2 B2) (wss C A2) (wss C B2) (wne C A2) (wne C B2)
    (@sseq2 A2 B2 C)
    (@neeq2 A2 B2 C))
  (@df_pss C A2)
  (@df_pss C B2)


/-- An equality deduction for the proper subclass relationship. (Contributed by NM, 9-Jun-2004.) -/
theorem psseq1d {ph : wff} {A2 B2 C : «class»}
  (psseq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wpss A2 C) (wpss B2 C)) :=
@syl ph (wceq A2 B2) (wb (wpss A2 C) (wpss B2 C))
  psseq1d_1
  (@psseq1 A2 B2 C)


/-- An equality deduction for the proper subclass relationship. (Contributed by NM, 9-Jun-2004.) -/
theorem psseq2d {ph : wff} {A2 B2 C : «class»}
  (psseq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wpss C A2) (wpss C B2)) :=
@syl ph (wceq A2 B2) (wb (wpss C A2) (wpss C B2))
  psseq1d_1
  (@psseq2 A2 B2 C)


/-- A proper subclass is a subclass. Theorem 10 of [Suppes] p. 23. (Contributed by NM, 7-Feb-1996.)
-/
theorem pssss {A2 B2 : «class»} :
  ⊦ wi (wpss A2 B2) (wss A2 B2) :=
@simplbi (wpss A2 B2) (wss A2 B2) (wne A2 B2)
  (@df_pss A2 B2)


/-- Deduce subclass from proper subclass. (Contributed by NM, 29-Feb-1996.) -/
theorem pssssd {ph : wff} {A2 B2 : «class»}
  (pssssd_1 : ⊦ wi ph (wpss A2 B2)) :
  ⊦ wi ph (wss A2 B2) :=
@syl ph (wpss A2 B2) (wss A2 B2)
  pssssd_1
  (@pssss A2 B2)


/-- Subclass in terms of proper subclass. (Contributed by NM, 25-Feb-1996.) -/
theorem sspss {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wo (wpss A2 B2) (wceq A2 B2)) :=
@impbii (wss A2 B2) (wo (wpss A2 B2) (wceq A2 B2))
  (@orrd (wss A2 B2) (wpss A2 B2) (wceq A2 B2)
    (@con1d (wss A2 B2) (wceq A2 B2) (wpss A2 B2)
      (@simplbi2 (wpss A2 B2) (wss A2 B2) (wn (wceq A2 B2))
        (@dfpss2 A2 B2))))
  (@jaoi (wpss A2 B2) (wss A2 B2) (wceq A2 B2)
    (@pssss A2 B2)
    (@eqimss A2 B2))


/-- Proper subclass is irreflexive. Theorem 7 of [Suppes] p. 23. (Contributed by NM, 7-Feb-1996.) -/
theorem pssirr {A2 : «class»} :
  ⊦ wn (wpss A2 A2) :=
@mtbir (wpss A2 A2) (wa (wss A2 A2) (wn (wss A2 A2)))
  (@pm3_24 (wss A2 A2))
  (@dfpss3 A2 A2)


/-- Proper subclass has no 2-cycle loops. Compare Theorem 8 of [Suppes] p. 23. (Contributed by NM,
7-Feb-1996.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem pssn2lp {A2 B2 : «class»} :
  ⊦ wn (wa (wpss A2 B2) (wpss B2 A2)) :=
@mpbi (wi (wpss A2 B2) (wn (wpss B2 A2))) (wn (wa (wpss A2 B2) (wpss B2 A2)))
  (@nsyl (wpss A2 B2) (wss B2 A2) (wpss B2 A2)
    (@simprbi (wpss A2 B2) (wss A2 B2) (wn (wss B2 A2))
      (@dfpss3 A2 B2))
    (@pssss B2 A2))
  (@imnan (wpss A2 B2) (wpss B2 A2))


/-- Two ways of stating trichotomy with respect to inclusion. (Contributed by NM, 12-Aug-2004.) -/
theorem sspsstri {A2 B2 : «class»} :
  ⊦ wb (wo (wss A2 B2) (wss B2 A2)) (w3o (wpss A2 B2) (wceq A2 B2) (wpss B2 A2)) :=
@«3bitr4i» (wo (wo (wpss A2 B2) (wpss B2 A2)) (wceq A2 B2)) (wo (wo (wpss A2 B2) (wceq A2 B2)) (wpss B2 A2)) (wo (wss A2 B2) (wss B2 A2)) (w3o (wpss A2 B2) (wceq A2 B2) (wpss B2 A2))
  (@or32 (wpss A2 B2) (wpss B2 A2) (wceq A2 B2))
  (@bitr4i (wo (wss A2 B2) (wss B2 A2)) (wo (wo (wpss A2 B2) (wceq A2 B2)) (wo (wpss B2 A2) (wceq A2 B2))) (wo (wo (wpss A2 B2) (wpss B2 A2)) (wceq A2 B2))
    (@orbi12i (wss A2 B2) (wo (wpss A2 B2) (wceq A2 B2)) (wss B2 A2) (wo (wpss B2 A2) (wceq A2 B2))
      (@sspss A2 B2)
      (@bitri (wss B2 A2) (wo (wpss B2 A2) (wceq B2 A2)) (wo (wpss B2 A2) (wceq A2 B2))
        (@sspss B2 A2)
        (@orbi2i (wceq B2 A2) (wceq A2 B2) (wpss B2 A2)
          (@eqcom B2 A2))))
    (@orordir (wpss A2 B2) (wpss B2 A2) (wceq A2 B2)))
  (@df_3or (wpss A2 B2) (wceq A2 B2) (wpss B2 A2))


/-- Partial trichotomy law for subclasses. (Contributed by NM, 16-May-1996.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem ssnpss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wn (wpss B2 A2)) :=
@con2i (wpss B2 A2) (wss A2 B2)
  (@simprbi (wpss B2 A2) (wss B2 A2) (wn (wss A2 B2))
    (@dfpss3 B2 A2))


/-- Transitive law for proper subclass. Theorem 9 of [Suppes] p. 23. (Contributed by NM,
7-Feb-1996.) -/
theorem psstr {A2 B2 C : «class»} :
  ⊦ wi (wa (wpss A2 B2) (wpss B2 C)) (wpss A2 C) :=
@sylanbrc (wa (wpss A2 B2) (wpss B2 C)) (wss A2 C) (wn (wceq A2 C)) (wpss A2 C)
  (@sylan9ss (wpss A2 B2) (wpss B2 C) A2 B2 C
    (@pssss A2 B2)
    (@pssss B2 C))
  (@con2i (wceq A2 C) (wa (wpss A2 B2) (wpss B2 C))
    (@mtbiri (wceq A2 C) (wa (wpss A2 B2) (wpss B2 C)) (wa (wpss C B2) (wpss B2 C))
      (@pssn2lp C B2)
      (@anbi1d (wceq A2 C) (wpss A2 B2) (wpss C B2) (wpss B2 C)
        (@psseq1 A2 C B2))))
  (@dfpss2 A2 C)


/-- Transitive law for subclass and proper subclass. (Contributed by NM, 3-Apr-1996.) -/
theorem sspsstr {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wpss B2 C)) (wpss A2 C) :=
@sylanb (wss A2 B2) (wo (wpss A2 B2) (wceq A2 B2)) (wpss B2 C) (wpss A2 C)
  (@sspss A2 B2)
  (@imp (wo (wpss A2 B2) (wceq A2 B2)) (wpss B2 C) (wpss A2 C)
    (@jaoi (wpss A2 B2) (wi (wpss B2 C) (wpss A2 C)) (wceq A2 B2)
      (@ex (wpss A2 B2) (wpss B2 C) (wpss A2 C)
        (@psstr A2 B2 C))
      (@biimprd (wceq A2 B2) (wpss A2 C) (wpss B2 C)
        (@psseq1 A2 B2 C))))


/-- Transitive law for subclass and proper subclass. (Contributed by NM, 3-Apr-1996.) -/
theorem psssstr {A2 B2 C : «class»} :
  ⊦ wi (wa (wpss A2 B2) (wss B2 C)) (wpss A2 C) :=
@sylan2b (wss B2 C) (wpss A2 B2) (wo (wpss B2 C) (wceq B2 C)) (wpss A2 C)
  (@sspss B2 C)
  (@imp (wpss A2 B2) (wo (wpss B2 C) (wceq B2 C)) (wpss A2 C)
    (@jaod (wpss A2 B2) (wpss B2 C) (wpss A2 C) (wceq B2 C)
      (@ex (wpss A2 B2) (wpss B2 C) (wpss A2 C)
        (@psstr A2 B2 C))
      (@biimpcd (wceq B2 C) (wpss A2 B2) (wpss A2 C)
        (@psseq2 B2 C A2))))


/-- Transitivity involving subclass and proper subclass inclusion. Deduction form of ~ sspsstr .
(Contributed by David Moews, 1-May-2017.) -/
theorem sspsstrd {ph : wff} {A2 B2 C : «class»}
  (sspsstrd_1 : ⊦ wi ph (wss A2 B2))
  (sspsstrd_2 : ⊦ wi ph (wpss B2 C)) :
  ⊦ wi ph (wpss A2 C) :=
@syl2anc ph (wss A2 B2) (wpss B2 C) (wpss A2 C)
  sspsstrd_1
  sspsstrd_2
  (@sspsstr A2 B2 C)


/-- A class is not a proper subclass of another iff it satisfies a one-directional form of ~ eqss .
(Contributed by Mario Carneiro, 15-May-2015.) -/
theorem npss {A2 B2 : «class»} :
  ⊦ wb (wn (wpss A2 B2)) (wi (wss A2 B2) (wceq A2 B2)) :=
@con1bii (wi (wss A2 B2) (wceq A2 B2)) (wpss A2 B2)
  (@bitr4i (wn (wi (wss A2 B2) (wceq A2 B2))) (wa (wss A2 B2) (wn (wceq A2 B2))) (wpss A2 B2)
    (@pm4_61 (wss A2 B2) (wceq A2 B2))
    (@dfpss2 A2 B2))


/-- A subclass missing a member is a proper subclass. (Contributed by NM, 12-Jan-2002.) -/
theorem ssnelpss {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wi (wa (wcel C B2) (wn (wcel C A2))) (wpss A2 B2)) :=
@syl5ib (wa (wcel C B2) (wn (wcel C A2))) (wn (wceq A2 B2)) (wss A2 B2) (wpss A2 B2)
  (@sylnib (wa (wcel C B2) (wn (wcel C A2))) (wceq B2 A2) (wceq A2 B2)
    (@nelneq2 C B2 A2)
    (@eqcom B2 A2))
  (@baibr (wpss A2 B2) (wss A2 B2) (wn (wceq A2 B2))
    (@dfpss2 A2 B2))


/-- Subclass inclusion with one element of the superclass missing is proper subclass inclusion.
Deduction form of ~ ssnelpss . (Contributed by David Moews, 1-May-2017.) -/
theorem ssnelpssd {ph : wff} {A2 B2 C : «class»}
  (ssnelpssd_1 : ⊦ wi ph (wss A2 B2))
  (ssnelpssd_2 : ⊦ wi ph (wcel C B2))
  (ssnelpssd_3 : ⊦ wi ph (wn (wcel C A2))) :
  ⊦ wi ph (wpss A2 B2) :=
@mp2and ph (wcel C B2) (wn (wcel C A2)) (wpss A2 B2)
  ssnelpssd_2
  ssnelpssd_3
  (@syl ph (wss A2 B2) (wi (wa (wcel C B2) (wn (wcel C A2))) (wpss A2 B2))
    ssnelpssd_1
    (@ssnelpss A2 B2 C))


/-- Equality theorem for class difference. (Contributed by NM, 10-Feb-1997.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem difeq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cdif A2 C) (cdif B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (crab (λ x3, wn (wcel (cv x3) C)) (λ x3, A2)) (crab (λ x3, wn (wcel (cv x3) C)) (λ x3, B2)) (cdif A2 C) (cdif B2 C)
  (@rabeq (λ x3, wn (wcel (cv x3) C)) A2 B2)
  (@dfdif2 A2 C)
  (@dfdif2 B2 C)


/-- Equality theorem for class difference. (Contributed by NM, 10-Feb-1997.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem difeq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cdif C A2) (cdif C B2)) :=
@«3eqtr4g» (wceq A2 B2) (crab (λ x3, wn (wcel (cv x3) A2)) (λ x3, C)) (crab (λ x3, wn (wcel (cv x3) B2)) (λ x3, C)) (cdif C A2) (cdif C B2)
  (@rabbidv (wceq A2 B2) (λ x3, wn (wcel (cv x3) A2)) (λ x3, wn (wcel (cv x3) B2)) (λ x3, C)
    (λ x3, @notbid (wceq A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2)
      (@eleq2 A2 B2 (cv x3))))
  (@dfdif2 C A2)
  (@dfdif2 C B2)


/-- Equality theorem for class difference. (Contributed by FL, 31-Aug-2009.) -/
theorem difeq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wceq (cdif A2 C) (cdif B2 D)) :=
@sylan9eq (wceq A2 B2) (wceq C D) (cdif A2 C) (cdif B2 C) (cdif B2 D)
  (@difeq1 A2 B2 C)
  (@difeq2 C D B2)


/-- Inference adding difference to the right in a class equality. (Contributed by NM, 15-Nov-2002.)
-/
theorem difeq1i {A2 B2 C : «class»}
  (difeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cdif A2 C) (cdif B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cdif A2 C) (cdif B2 C))
  difeq1i_1
  (@difeq1 A2 B2 C)


/-- Inference adding difference to the left in a class equality. (Contributed by NM, 15-Nov-2002.)
-/
theorem difeq2i {A2 B2 C : «class»}
  (difeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cdif C A2) (cdif C B2) :=
@ax_mp (wceq A2 B2) (wceq (cdif C A2) (cdif C B2))
  difeq1i_1
  (@difeq2 A2 B2 C)


/-- Equality inference for class difference. (Contributed by NM, 29-Aug-2004.) -/
theorem difeq12i {A2 B2 C D : «class»}
  (difeq1i_1 : ⊦ wceq A2 B2)
  (difeq12i_2 : ⊦ wceq C D) :
  ⊦ wceq (cdif A2 C) (cdif B2 D) :=
@eqtri (cdif A2 C) (cdif B2 C) (cdif B2 D)
  (@difeq1i A2 B2 C
    difeq1i_1)
  (@difeq2i C D B2
    difeq12i_2)


/-- Deduction adding difference to the right in a class equality. (Contributed by NM, 15-Nov-2002.)
-/
theorem difeq1d {ph : wff} {A2 B2 C : «class»}
  (difeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cdif A2 C) (cdif B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cdif A2 C) (cdif B2 C))
  difeq1d_1
  (@difeq1 A2 B2 C)


/-- Deduction adding difference to the left in a class equality. (Contributed by NM, 15-Nov-2002.)
-/
theorem difeq2d {ph : wff} {A2 B2 C : «class»}
  (difeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cdif C A2) (cdif C B2)) :=
@syl ph (wceq A2 B2) (wceq (cdif C A2) (cdif C B2))
  difeq1d_1
  (@difeq2 A2 B2 C)


/-- Equality deduction for class difference. (Contributed by FL, 29-May-2014.) -/
theorem difeq12d {ph : wff} {A2 B2 C D : «class»}
  (difeq12d_1 : ⊦ wi ph (wceq A2 B2))
  (difeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cdif A2 C) (cdif B2 D)) :=
@eqtrd ph (cdif A2 C) (cdif B2 C) (cdif B2 D)
  (@difeq1d ph A2 B2 C
    difeq12d_1)
  (@difeq2d ph C D B2
    difeq12d_2)


/-- Inference from membership to difference. (Contributed by NM, 17-May-1998.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem difeqri {A2 B2 C : «class»}
  (difeqri_1 : ∀ x3, ⊦ wb (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) C)) :
  ⊦ wceq (cdif A2 B2) C :=
@eqriv (cdif A2 B2) C
  (λ x3, @bitri (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) C)
    (@eldif (cv x3) A2 B2)
    (difeqri_1 x3))


/-- Implication of membership in a class difference. (Contributed by NM, 29-Apr-1994.) -/
theorem eldifi {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cdif B2 C)) (wcel A2 B2) :=
@simplbi (wcel A2 (cdif B2 C)) (wcel A2 B2) (wn (wcel A2 C))
  (@eldif A2 B2 C)


/-- Implication of membership in a class difference. (Contributed by NM, 3-May-1994.) -/
theorem eldifn {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cdif B2 C)) (wn (wcel A2 C)) :=
@simprbi (wcel A2 (cdif B2 C)) (wcel A2 B2) (wn (wcel A2 C))
  (@eldif A2 B2 C)


/-- A set does not belong to a class excluding it. (Contributed by NM, 27-Jun-1994.) -/
theorem elndif {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 B2) (wn (wcel A2 (cdif C B2))) :=
@con2i (wcel A2 (cdif C B2)) (wcel A2 B2)
  (@eldifn A2 C B2)


/-- Implication of membership in a class difference. (Contributed by NM, 28-Jun-1994.) -/
theorem neldif {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wn (wcel A2 (cdif B2 C)))) (wcel A2 C) :=
@imp (wcel A2 B2) (wn (wcel A2 (cdif B2 C))) (wcel A2 C)
  (@con1d (wcel A2 B2) (wcel A2 C) (wcel A2 (cdif B2 C))
    (@simplbi2 (wcel A2 (cdif B2 C)) (wcel A2 B2) (wn (wcel A2 C))
      (@eldif A2 B2 C)))


/-- Double class difference. Exercise 11 of [TakeutiZaring] p. 22. (Contributed by NM, 17-May-1998.)
-/
theorem difdif {A2 B2 : «class»} :
  ⊦ wceq (cdif A2 (cdif B2 A2)) A2 :=
@difeqri A2 (cdif B2 A2) A2
  (λ x3, @bitr2i (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wi (wcel (cv x3) B2) (wcel (cv x3) A2))) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (cdif B2 A2))))
    (@pm4_45im (wcel (cv x3) A2) (wcel (cv x3) B2))
    (@anbi2i (wi (wcel (cv x3) B2) (wcel (cv x3) A2)) (wn (wcel (cv x3) (cdif B2 A2))) (wcel (cv x3) A2)
      (@xchbinxr (wi (wcel (cv x3) B2) (wcel (cv x3) A2)) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2))) (wcel (cv x3) (cdif B2 A2))
        (@iman (wcel (cv x3) B2) (wcel (cv x3) A2))
        (@eldif (cv x3) B2 A2))))


/-- Subclass relationship for class difference. Exercise 14 of [TakeutiZaring] p. 22. (Contributed
by NM, 29-Apr-1994.) -/
theorem difss {A2 B2 : «class»} :
  ⊦ wss (cdif A2 B2) A2 :=
@ssriv (cdif A2 B2) A2
  (λ x3, @eldifi (cv x3) A2 B2)


/-- A difference of two classes is contained in the minuend. Deduction form of ~ difss .
(Contributed by David Moews, 1-May-2017.) -/
theorem difssd {ph : wff} {A2 B2 : «class»} :
  ⊦ wi ph (wss (cdif A2 B2) A2) :=
@a1i (wss (cdif A2 B2) A2) ph
  (@difss A2 B2)


/-- If a class is contained in a difference, it is contained in the minuend. (Contributed by David
Moews, 1-May-2017.) -/
theorem difss2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 (cdif B2 C)) (wss A2 B2) :=
@sstrdi (wss A2 (cdif B2 C)) A2 (cdif B2 C) B2
  (@id (wss A2 (cdif B2 C)))
  (@difss B2 C)


/-- If a class is contained in a difference, it is contained in the minuend. Deduction form of ~
difss2 . (Contributed by David Moews, 1-May-2017.) -/
theorem difss2d {ph : wff} {A2 B2 C : «class»}
  (difss2d_1 : ⊦ wi ph (wss A2 (cdif B2 C))) :
  ⊦ wi ph (wss A2 B2) :=
@syl ph (wss A2 (cdif B2 C)) (wss A2 B2)
  difss2d_1
  (@difss2 A2 B2 C)


/-- Preservation of a subclass relationship by class difference. (Contributed by NM, 15-Feb-2007.)
-/
theorem ssdifss {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cdif A2 C) B2) :=
@mpan (wss (cdif A2 C) A2) (wss A2 B2) (wss (cdif A2 C) B2)
  (@difss A2 C)
  (@sstr (cdif A2 C) A2 B2)


/-- Double complement under universal class. Exercise 4.10(s) of [Mendelson] p. 231. (Contributed by
NM, 8-Jan-2002.) -/
theorem ddif {A2 : «class»} :
  ⊦ wceq (cdif cvv (cdif cvv A2)) A2 :=
@difeqri cvv (cdif cvv A2) A2
  (λ x3, @bitr2i (wcel (cv x3) A2) (wn (wcel (cv x3) (cdif cvv A2))) (wa (wcel (cv x3) cvv) (wn (wcel (cv x3) (cdif cvv A2))))
    (@con2bii (wcel (cv x3) (cdif cvv A2)) (wcel (cv x3) A2)
      (@mpbiran (wcel (cv x3) (cdif cvv A2)) (wcel (cv x3) cvv) (wn (wcel (cv x3) A2))
        (@vex x3)
        (@eldif (cv x3) cvv A2)))
    (@biantrur (wcel (cv x3) cvv) (wn (wcel (cv x3) (cdif cvv A2)))
      (@vex x3)))


/-- Contraposition law for subsets. (Contributed by NM, 22-Mar-1998.) -/
theorem ssconb {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 C) (wss B2 C)) (wb (wss A2 (cdif C B2)) (wss B2 (cdif C A2))) :=
@«3bitr4g» (wa (wss A2 C) (wss B2 C)) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2)))) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) (cdif C A2)))) (wss A2 (cdif C B2)) (wss B2 (cdif C A2))
  (@albidv (wa (wss A2 C) (wss B2 C)) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2))) (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) (cdif C A2)))
    (λ x3, @«3bitr4g» (wa (wss A2 C) (wss B2 C)) (wi (wcel (cv x3) A2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2)))) (wi (wcel (cv x3) B2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) A2)))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2))) (wi (wcel (cv x3) B2) (wcel (cv x3) (cdif C A2)))
      (@«3bitr4g» (wa (wss A2 C) (wss B2 C)) (wa (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wa (wi (wcel (cv x3) B2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))) (wi (wcel (cv x3) A2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2)))) (wi (wcel (cv x3) B2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) A2))))
        (@anbi12d (wa (wss A2 C) (wss B2 C)) (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C)) (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wi (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))
          (@syl2an (wss A2 C) (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C)) (wb (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C))) (wss B2 C)
            (@ssel A2 C (cv x3))
            (@ssel B2 C (cv x3))
            (@pm5_1 (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C))))
          (@a1i (wb (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wi (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))) (wa (wss A2 C) (wss B2 C))
            (@con2b (wcel (cv x3) A2) (wcel (cv x3) B2))))
        (@jcab (wcel (cv x3) A2) (wcel (cv x3) C) (wn (wcel (cv x3) B2)))
        (@jcab (wcel (cv x3) B2) (wcel (cv x3) C) (wn (wcel (cv x3) A2))))
      (@imbi2i (wcel (cv x3) (cdif C B2)) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)
        (@eldif (cv x3) C B2))
      (@imbi2i (wcel (cv x3) (cdif C A2)) (wa (wcel (cv x3) C) (wn (wcel (cv x3) A2))) (wcel (cv x3) B2)
        (@eldif (cv x3) C A2))))
  (@dfss2 A2 (cdif C B2))
  (@dfss2 B2 (cdif C A2))


/-- Contraposition law for subsets. Exercise 15 of [TakeutiZaring] p. 22. (Contributed by NM,
22-Mar-1998.) -/
theorem sscon {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cdif C B2) (cdif C A2)) :=
@ssrdv (wss A2 B2) (cdif C B2) (cdif C A2)
  (λ x3, @«3imtr4g» (wss A2 B2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wa (wcel (cv x3) C) (wn (wcel (cv x3) A2))) (wcel (cv x3) (cdif C B2)) (wcel (cv x3) (cdif C A2))
    (@anim2d (wss A2 B2) (wn (wcel (cv x3) B2)) (wn (wcel (cv x3) A2)) (wcel (cv x3) C)
      (@con3d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2)
        (@ssel A2 B2 (cv x3))))
    (@eldif (cv x3) C B2)
    (@eldif (cv x3) C A2))


/-- Difference law for subsets. (Contributed by NM, 28-May-1998.) -/
theorem ssdif {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cdif A2 C) (cdif B2 C)) :=
@ssrdv (wss A2 B2) (cdif A2 C) (cdif B2 C)
  (λ x3, @«3imtr4g» (wss A2 B2) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) C))) (wcel (cv x3) (cdif A2 C)) (wcel (cv x3) (cdif B2 C))
    (@anim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wn (wcel (cv x3) C))
      (@ssel A2 B2 (cv x3)))
    (@eldif (cv x3) A2 C)
    (@eldif (cv x3) B2 C))


/-- If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is contained in ` ( B \ C ) ` . Deduction
form of ~ ssdif . (Contributed by David Moews, 1-May-2017.) -/
theorem ssdifd {ph : wff} {A2 B2 C : «class»}
  (ssdifd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cdif A2 C) (cdif B2 C)) :=
@syl ph (wss A2 B2) (wss (cdif A2 C) (cdif B2 C))
  ssdifd_1
  (@ssdif A2 B2 C)


/-- If ` A ` is contained in ` B ` , then ` ( C \ B ) ` is contained in ` ( C \ A ) ` . Deduction
form of ~ sscon . (Contributed by David Moews, 1-May-2017.) -/
theorem sscond {ph : wff} {A2 B2 C : «class»}
  (ssdifd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cdif C B2) (cdif C A2)) :=
@syl ph (wss A2 B2) (wss (cdif C B2) (cdif C A2))
  ssdifd_1
  (@sscon A2 B2 C)


/-- If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is also contained in ` B ` . Deduction form
of ~ ssdifss . (Contributed by David Moews, 1-May-2017.) -/
theorem ssdifssd {ph : wff} {A2 B2 C : «class»}
  (ssdifd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cdif A2 C) B2) :=
@syl ph (wss A2 B2) (wss (cdif A2 C) B2)
  ssdifd_1
  (@ssdifss A2 B2 C)


/-- Expansion of membership in class union. Theorem 12 of [Suppes] p. 25. (Contributed by NM,
7-Aug-1994.) -/
theorem elun {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cun B2 C)) (wo (wcel A2 B2) (wcel A2 C)) :=
@pm5_21nii (wcel A2 (cun B2 C)) (wcel A2 cvv) (wo (wcel A2 B2) (wcel A2 C))
  (@elex A2 (cun B2 C))
  (@jaoi (wcel A2 B2) (wcel A2 cvv) (wcel A2 C)
    (@elex A2 B2)
    (@elex A2 C))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cun B2 C)) (wo (wcel A2 B2) (wcel A2 C))), from
    @elab2gw (λ x3, wo (wcel (cv x3) B2) (wcel (cv x3) C)) (λ y, wo (wcel (cv y) B2) (wcel (cv y) C)) (λ x3, wo (wcel A2 B2) (wcel A2 C)) (λ x3, A2) (λ x3 y, cun B2 C) (λ x3 y, cvv)
      (λ x3 y, @orbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) B2) (wcel (cv y) B2) (wcel (cv x3) C) (wcel (cv y) C)
        (@eleq1 (cv x3) (cv y) B2)
        (@eleq1 (cv x3) (cv y) C))
      (λ x3 y, @orbi12d (wceq (cv y) A2) (wcel (cv y) B2) (wcel A2 B2) (wcel (cv y) C) (wcel A2 C)
        (@eleq1 (cv y) A2 B2)
        (@eleq1 (cv y) A2 C))
      (λ x3 y, @df_un B2 C) x3 y)


/-- Inference from membership to union. (Contributed by NM, 21-Jun-1993.) -/
theorem uneqri {A2 B2 C : «class»}
  (uneqri_1 : ∀ x3, ⊦ wb (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) :
  ⊦ wceq (cun A2 B2) C :=
@eqriv (cun A2 B2) C
  (λ x3, @bitri (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)
    (@elun (cv x3) A2 B2)
    (uneqri_1 x3))


/-- Idempotent law for union of classes. Theorem 23 of [Suppes] p. 27. (Contributed by NM,
21-Jun-1993.) -/
theorem unidm {A2 : «class»} :
  ⊦ wceq (cun A2 A2) A2 :=
@uneqri A2 A2 A2
  (λ x3, @oridm (wcel (cv x3) A2))


/-- Commutative law for union of classes. Exercise 6 of [TakeutiZaring] p. 17. (Contributed by NM,
25-Jun-1998.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem uncom {A2 B2 : «class»} :
  ⊦ wceq (cun A2 B2) (cun B2 A2) :=
@uneqri A2 B2 (cun B2 A2)
  (λ x3, @bitr4i (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wo (wcel (cv x3) B2) (wcel (cv x3) A2)) (wcel (cv x3) (cun B2 A2))
    (@orcom (wcel (cv x3) A2) (wcel (cv x3) B2))
    (@elun (cv x3) B2 A2))


/-- If a class equals the union of two other classes, then it equals the union of those two classes
commuted. ~ equncom was automatically derived from ~ equncomVD using the tools program
translate__without__overwriting.cmd and minimizing. (Contributed by Alan Sare, 18-Feb-2012.) -/
theorem equncom {A2 B2 C : «class»} :
  ⊦ wb (wceq A2 (cun B2 C)) (wceq A2 (cun C B2)) :=
@eqeq2i (cun B2 C) (cun C B2) A2
  (@uncom B2 C)


/-- Inference form of ~ equncom . ~ equncomi was automatically derived from ~ equncomiVD using the
tools program translate__without__overwriting.cmd and minimizing. (Contributed by Alan Sare,
18-Feb-2012.) -/
theorem equncomi {A2 B2 C : «class»}
  (equncomi_1 : ⊦ wceq A2 (cun B2 C)) :
  ⊦ wceq A2 (cun C B2) :=
@mpbi (wceq A2 (cun B2 C)) (wceq A2 (cun C B2))
  equncomi_1
  (@equncom A2 B2 C)


/-- Equality theorem for the union of two classes. (Contributed by NM, 15-Jul-1993.) -/
theorem uneq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cun A2 C) (cun B2 C)) :=
@eqrdv (wceq A2 B2) (cun A2 C) (cun B2 C)
  (λ x3, @«3bitr4g» (wceq A2 B2) (wo (wcel (cv x3) A2) (wcel (cv x3) C)) (wo (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) (cun A2 C)) (wcel (cv x3) (cun B2 C))
    (@orbi1d (wceq A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C)
      (@eleq2 A2 B2 (cv x3)))
    (@elun (cv x3) A2 C)
    (@elun (cv x3) B2 C))


/-- Equality theorem for the union of two classes. (Contributed by NM, 5-Aug-1993.) -/
theorem uneq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cun C A2) (cun C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cun A2 C) (cun B2 C) (cun C A2) (cun C B2)
  (@uneq1 A2 B2 C)
  (@uncom C A2)
  (@uncom C B2)


/-- Equality theorem for the union of two classes. (Contributed by NM, 29-Mar-1998.) -/
theorem uneq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wceq (cun A2 C) (cun B2 D)) :=
@sylan9eq (wceq A2 B2) (wceq C D) (cun A2 C) (cun B2 C) (cun B2 D)
  (@uneq1 A2 B2 C)
  (@uneq2 C D B2)


/-- Inference adding union to the right in a class equality. (Contributed by NM, 30-Aug-1993.) -/
theorem uneq1i {A2 B2 C : «class»}
  (uneq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cun A2 C) (cun B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cun A2 C) (cun B2 C))
  uneq1i_1
  (@uneq1 A2 B2 C)


/-- Inference adding union to the left in a class equality. (Contributed by NM, 30-Aug-1993.) -/
theorem uneq2i {A2 B2 C : «class»}
  (uneq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cun C A2) (cun C B2) :=
@ax_mp (wceq A2 B2) (wceq (cun C A2) (cun C B2))
  uneq1i_1
  (@uneq2 A2 B2 C)


/-- Equality inference for the union of two classes. (Contributed by NM, 12-Aug-2004.) (Proof
shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem uneq12i {A2 B2 C D : «class»}
  (uneq1i_1 : ⊦ wceq A2 B2)
  (uneq12i_2 : ⊦ wceq C D) :
  ⊦ wceq (cun A2 C) (cun B2 D) :=
@mp2an (wceq A2 B2) (wceq C D) (wceq (cun A2 C) (cun B2 D))
  uneq1i_1
  uneq12i_2
  (@uneq12 A2 B2 C D)


/-- Deduction adding union to the right in a class equality. (Contributed by NM, 29-Mar-1998.) -/
theorem uneq1d {ph : wff} {A2 B2 C : «class»}
  (uneq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cun A2 C) (cun B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cun A2 C) (cun B2 C))
  uneq1d_1
  (@uneq1 A2 B2 C)


/-- Deduction adding union to the left in a class equality. (Contributed by NM, 29-Mar-1998.) -/
theorem uneq2d {ph : wff} {A2 B2 C : «class»}
  (uneq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cun C A2) (cun C B2)) :=
@syl ph (wceq A2 B2) (wceq (cun C A2) (cun C B2))
  uneq1d_1
  (@uneq2 A2 B2 C)


/-- Equality deduction for the union of two classes. (Contributed by NM, 29-Sep-2004.) (Proof
shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem uneq12d {ph : wff} {A2 B2 C D : «class»}
  (uneq1d_1 : ⊦ wi ph (wceq A2 B2))
  (uneq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cun A2 C) (cun B2 D)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wceq (cun A2 C) (cun B2 D))
  uneq1d_1
  uneq12d_2
  (@uneq12 A2 B2 C D)


/-- Associative law for union of classes. Exercise 8 of [TakeutiZaring] p. 17. (Contributed by NM,
3-May-1994.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem unass {A2 B2 C : «class»} :
  ⊦ wceq (cun (cun A2 B2) C) (cun A2 (cun B2 C)) :=
@uneqri (cun A2 B2) C (cun A2 (cun B2 C))
  (λ x3, @«3bitrri» (wcel (cv x3) (cun A2 (cun B2 C))) (wo (wcel (cv x3) A2) (wcel (cv x3) (cun B2 C))) (wo (wcel (cv x3) A2) (wo (wcel (cv x3) B2) (wcel (cv x3) C))) (wo (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) C))
    (@elun (cv x3) A2 (cun B2 C))
    (@orbi2i (wcel (cv x3) (cun B2 C)) (wo (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
      (@elun (cv x3) B2 C))
    (@bitr2i (wo (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) C)) (wo (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) (wo (wcel (cv x3) A2) (wo (wcel (cv x3) B2) (wcel (cv x3) C)))
      (@orbi1i (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)
        (@elun (cv x3) A2 B2))
      (@orass (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C))))


/-- A rearrangement of union. (Contributed by NM, 12-Aug-2004.) -/
theorem un12 {A2 B2 C : «class»} :
  ⊦ wceq (cun A2 (cun B2 C)) (cun B2 (cun A2 C)) :=
@«3eqtr3i» (cun (cun A2 B2) C) (cun (cun B2 A2) C) (cun A2 (cun B2 C)) (cun B2 (cun A2 C))
  (@uneq1i (cun A2 B2) (cun B2 A2) C
    (@uncom A2 B2))
  (@unass A2 B2 C)
  (@unass B2 A2 C)


/-- A rearrangement of union. (Contributed by NM, 12-Aug-2004.) (Proof shortened by Andrew Salmon,
26-Jun-2011.) -/
theorem un23 {A2 B2 C : «class»} :
  ⊦ wceq (cun (cun A2 B2) C) (cun (cun A2 C) B2) :=
@«3eqtri» (cun (cun A2 B2) C) (cun A2 (cun B2 C)) (cun B2 (cun A2 C)) (cun (cun A2 C) B2)
  (@unass A2 B2 C)
  (@un12 A2 B2 C)
  (@uncom B2 (cun A2 C))


/-- A rearrangement of the union of 4 classes. (Contributed by NM, 12-Aug-2004.) -/
theorem un4 {A2 B2 C D : «class»} :
  ⊦ wceq (cun (cun A2 B2) (cun C D)) (cun (cun A2 C) (cun B2 D)) :=
@«3eqtr4i» (cun A2 (cun B2 (cun C D))) (cun A2 (cun C (cun B2 D))) (cun (cun A2 B2) (cun C D)) (cun (cun A2 C) (cun B2 D))
  (@uneq2i (cun B2 (cun C D)) (cun C (cun B2 D)) A2
    (@un12 B2 C D))
  (@unass A2 B2 (cun C D))
  (@unass A2 C (cun B2 D))


/-- Subclass relationship for union of classes. Theorem 25 of [Suppes] p. 27. (Contributed by NM,
5-Aug-1993.) -/
theorem ssun1 {A2 B2 : «class»} :
  ⊦ wss A2 (cun A2 B2) :=
@ssriv A2 (cun A2 B2)
  (λ x3, @sylibr (wcel (cv x3) A2) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) (cun A2 B2))
    (@orc (wcel (cv x3) A2) (wcel (cv x3) B2))
    (@elun (cv x3) A2 B2))


/-- Subclass relationship for union of classes. (Contributed by NM, 30-Aug-1993.) -/
theorem ssun2 {A2 B2 : «class»} :
  ⊦ wss A2 (cun B2 A2) :=
@sseqtri A2 (cun A2 B2) (cun B2 A2)
  (@ssun1 A2 B2)
  (@uncom A2 B2)


/-- Subclass law for union of classes. (Contributed by NM, 5-Aug-1993.) -/
theorem ssun3 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss A2 (cun B2 C)) :=
@mpi (wss A2 B2) (wss B2 (cun B2 C)) (wss A2 (cun B2 C))
  (@ssun1 B2 C)
  (@sstr2 A2 B2 (cun B2 C))


/-- Subclass law for union of classes. (Contributed by NM, 14-Aug-1994.) -/
theorem ssun4 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss A2 (cun C B2)) :=
@mpi (wss A2 B2) (wss B2 (cun C B2)) (wss A2 (cun C B2))
  (@ssun2 B2 C)
  (@sstr2 A2 B2 (cun C B2))


/-- Membership law for union of classes. (Contributed by NM, 5-Aug-1993.) -/
theorem elun1 {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 B2) (wcel A2 (cun B2 C)) :=
@sseli B2 (cun B2 C) A2
  (@ssun1 B2 C)


/-- Membership law for union of classes. (Contributed by NM, 30-Aug-1993.) -/
theorem elun2 {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 B2) (wcel A2 (cun C B2)) :=
@sseli B2 (cun C B2) A2
  (@ssun2 B2 C)


/-- A statement is true for every element of the union of a pair of classes if and only if it is
true for every element of the first class and for every element of the second class. (Contributed by
BTernaryTau, 27-Sep-2023.) -/
theorem elunant {ph : wff} {A2 B2 C : «class»} :
  ⊦ wb (wi (wcel C (cun A2 B2)) ph) (wa (wi (wcel C A2) ph) (wi (wcel C B2) ph)) :=
@bitri (wi (wcel C (cun A2 B2)) ph) (wi (wo (wcel C A2) (wcel C B2)) ph) (wa (wi (wcel C A2) ph) (wi (wcel C B2) ph))
  (@imbi1i (wcel C (cun A2 B2)) (wo (wcel C A2) (wcel C B2)) ph
    (@elun C A2 B2))
  (@jaob (wcel C A2) ph (wcel C B2))


/-- Subclass law for union of classes. (Contributed by NM, 14-Oct-1999.) (Proof shortened by Andrew
Salmon, 26-Jun-2011.) -/
theorem unss1 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cun A2 C) (cun B2 C)) :=
@ssrdv (wss A2 B2) (cun A2 C) (cun B2 C)
  (λ x3, @«3imtr4g» (wss A2 B2) (wo (wcel (cv x3) A2) (wcel (cv x3) C)) (wo (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) (cun A2 C)) (wcel (cv x3) (cun B2 C))
    (@orim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C)
      (@ssel A2 B2 (cv x3)))
    (@elun (cv x3) A2 C)
    (@elun (cv x3) B2 C))


/-- A relationship between subclass and union. Theorem 26 of [Suppes] p. 27. (Contributed by NM,
30-Aug-1993.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem ssequn1 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cun A2 B2) B2) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wb (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) B2))) (wss A2 B2) (wceq (cun A2 B2) B2)
  (@albii (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wb (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) B2))
    (λ x3, @«3bitr4i» (wb (wcel (cv x3) B2) (wo (wcel (cv x3) A2) (wcel (cv x3) B2))) (wb (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) B2)) (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wb (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) B2))
      (@bicom (wcel (cv x3) B2) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)))
      (@pm4_72 (wcel (cv x3) A2) (wcel (cv x3) B2))
      (@bibi1i (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) B2)
        (@elun (cv x3) A2 B2))))
  (@dfss2 A2 B2)
  (@dfcleq (cun A2 B2) B2)


/-- Subclass law for union of classes. Exercise 7 of [TakeutiZaring] p. 18. (Contributed by NM,
14-Oct-1999.) -/
theorem unss2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cun C A2) (cun C B2)) :=
@«3sstr4g» (wss A2 B2) (cun A2 C) (cun B2 C) (cun C A2) (cun C B2)
  (@unss1 A2 B2 C)
  (@uncom C A2)
  (@uncom C B2)


/-- Subclass law for union of classes. (Contributed by NM, 2-Jun-2004.) -/
theorem unss12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wss A2 B2) (wss C D)) (wss (cun A2 C) (cun B2 D)) :=
@sylan9ss (wss A2 B2) (wss C D) (cun A2 C) (cun B2 C) (cun B2 D)
  (@unss1 A2 B2 C)
  (@unss2 C D B2)


/-- A relationship between subclass and union. (Contributed by NM, 13-Jun-1994.) -/
theorem ssequn2 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cun B2 A2) B2) :=
@bitri (wss A2 B2) (wceq (cun A2 B2) B2) (wceq (cun B2 A2) B2)
  (@ssequn1 A2 B2)
  (@eqeq1i (cun A2 B2) (cun B2 A2) B2
    (@uncom A2 B2))


/-- The union of two subclasses is a subclass. Theorem 27 of [Suppes] p. 27 and its converse.
(Contributed by NM, 11-Jun-2004.) -/
theorem unss {A2 B2 C : «class»} :
  ⊦ wb (wa (wss A2 C) (wss B2 C)) (wss (cun A2 B2) C) :=
@bitr2i (wss (cun A2 B2) C) (wal (λ x3, wi (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) C))) (wa (wss A2 C) (wss B2 C))
  (@dfss2 (cun A2 B2) C)
  (@«3bitr4i» (wal (λ x3, wa (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C)))) (wa (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) C)))) (wal (λ x3, wi (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) C))) (wa (wss A2 C) (wss B2 C))
    (@«19_26» (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C)) (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) C)))
    (@albii (λ x3, wi (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) C)) (λ x3, wa (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) B2) (wcel (cv x3) C)))
      (λ x3, @elunant (wcel (cv x3) C) A2 B2 (cv x3)))
    (@anbi12i (wss A2 C) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))) (wss B2 C) (wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv x3) C)))
      (@dfss2 A2 C)
      (@dfss2 B2 C)))


/-- An inference showing the union of two subclasses is a subclass. (Contributed by Raph Levien,
10-Dec-2002.) -/
theorem unssi {A2 B2 C : «class»}
  (unssi_1 : ⊦ wss A2 C)
  (unssi_2 : ⊦ wss B2 C) :
  ⊦ wss (cun A2 B2) C :=
@mpbi (wa (wss A2 C) (wss B2 C)) (wss (cun A2 B2) C)
  (@pm3_2i (wss A2 C) (wss B2 C)
    unssi_1
    unssi_2)
  (@unss A2 B2 C)


/-- A deduction showing the union of two subclasses is a subclass. (Contributed by Jonathan
Ben-Naim, 3-Jun-2011.) -/
theorem unssd {ph : wff} {A2 B2 C : «class»}
  (unssd_1 : ⊦ wi ph (wss A2 C))
  (unssd_2 : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wss (cun A2 B2) C) :=
@syl2anc ph (wss A2 C) (wss B2 C) (wss (cun A2 B2) C)
  unssd_1
  unssd_2
  (@biimpi (wa (wss A2 C) (wss B2 C)) (wss (cun A2 B2) C)
    (@unss A2 B2 C))


/-- If ` ( A u. B ) ` is contained in ` C ` , so is ` A ` . One-way deduction form of ~ unss .
Partial converse of ~ unssd . (Contributed by David Moews, 1-May-2017.) -/
theorem unssad {ph : wff} {A2 B2 C : «class»}
  (unssad_1 : ⊦ wi ph (wss (cun A2 B2) C)) :
  ⊦ wi ph (wss A2 C) :=
@simpld ph (wss A2 C) (wss B2 C)
  (@sylibr ph (wss (cun A2 B2) C) (wa (wss A2 C) (wss B2 C))
    unssad_1
    (@unss A2 B2 C))


/-- If ` ( A u. B ) ` is contained in ` C ` , so is ` B ` . One-way deduction form of ~ unss .
Partial converse of ~ unssd . (Contributed by David Moews, 1-May-2017.) -/
theorem unssbd {ph : wff} {A2 B2 C : «class»}
  (unssad_1 : ⊦ wi ph (wss (cun A2 B2) C)) :
  ⊦ wi ph (wss B2 C) :=
@simprd ph (wss A2 C) (wss B2 C)
  (@sylibr ph (wss (cun A2 B2) C) (wa (wss A2 C) (wss B2 C))
    unssad_1
    (@unss A2 B2 C))


/-- Restricted existential quantification over union. (Contributed by Jeff Madsen, 5-Jan-2011.) -/
theorem rexun {ph : setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (wo (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, B2 x3))) :=
@bitri (wrex (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (wex (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (wo (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, B2 x3)))
  (@df_rex (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3)))
  (@«3bitr4i» (wex (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))) (wo (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wex (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))) (wex (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (wo (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wrex (λ x3, ph x3) (λ x3, B2 x3)))
    (@«19_43» (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))
    (@exbii (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)) (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (λ x3, @bitri (wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)) (wa (wo (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)) (wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
        (@anbi1i (wcel (cv x3) (cun (A2 x3) (B2 x3))) (wo (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)
          (@elun (cv x3) (A2 x3) (B2 x3)))
        (@andir (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)) (ph x3))))
    (@orbi12i (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wrex (λ x3, ph x3) (λ x3, B2 x3)) (wex (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (@df_rex (λ x3, ph x3) (λ x3, A2 x3))
      (@df_rex (λ x3, ph x3) (λ x3, B2 x3))))


/-- Restricted quantification over a union. (Contributed by Scott Fenton, 12-Apr-2011.) (Proof
shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem ralunb {ph : setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (wa (wral (λ x3, ph x3) (λ x3, A2 x3)) (wral (λ x3, ph x3) (λ x3, B2 x3))) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (wa (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ph x3))) (wal (λ x3, wi (wcel (cv x3) (B2 x3)) (ph x3)))) (wral (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (wa (wral (λ x3, ph x3) (λ x3, A2 x3)) (wral (λ x3, ph x3) (λ x3, B2 x3)))
  (@bitri (wal (λ x3, wi (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (wal (λ x3, wa (wi (wcel (cv x3) (A2 x3)) (ph x3)) (wi (wcel (cv x3) (B2 x3)) (ph x3)))) (wa (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ph x3))) (wal (λ x3, wi (wcel (cv x3) (B2 x3)) (ph x3))))
    (@albii (λ x3, wi (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)) (λ x3, wa (wi (wcel (cv x3) (A2 x3)) (ph x3)) (wi (wcel (cv x3) (B2 x3)) (ph x3)))
      (λ x3, @elunant (ph x3) (A2 x3) (B2 x3) (cv x3)))
    (@«19_26» (λ x3, wi (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wi (wcel (cv x3) (B2 x3)) (ph x3))))
  (@df_ral (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3)))
  (@anbi12i (wral (λ x3, ph x3) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (ph x3))) (wral (λ x3, ph x3) (λ x3, B2 x3)) (wal (λ x3, wi (wcel (cv x3) (B2 x3)) (ph x3)))
    (@df_ral (λ x3, ph x3) (λ x3, A2 x3))
    (@df_ral (λ x3, ph x3) (λ x3, B2 x3)))


/-- Restricted quantification over union. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem ralun {ph : setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wi (wa (wral (λ x3, ph x3) (λ x3, A2 x3)) (wral (λ x3, ph x3) (λ x3, B2 x3))) (wral (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) :=
@biimpri (wral (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (wa (wral (λ x3, ph x3) (λ x3, A2 x3)) (wral (λ x3, ph x3) (λ x3, B2 x3)))
  (@ralunb (λ x3, ph x3) (λ x3, A2 x3) (λ x3, B2 x3))


/-- Membership in an intersection of two classes. (Contributed by Glauco Siliprandi, 17-Aug-2020.)
-/
theorem elini {A2 B2 C : «class»}
  (elini_1 : ⊦ wcel A2 B2)
  (elini_2 : ⊦ wcel A2 C) :
  ⊦ wcel A2 (cin B2 C) :=
@mpbir2an (wcel A2 (cin B2 C)) (wcel A2 B2) (wcel A2 C)
  elini_1
  elini_2
  (@elin A2 B2 C)


/-- Deduce membership in an intersection of two classes. (Contributed by Jonathan Ben-Naim,
3-Jun-2011.) -/
theorem elind {ph : wff} {A2 B2 X : «class»}
  (elind_1 : ⊦ wi ph (wcel X A2))
  (elind_2 : ⊦ wi ph (wcel X B2)) :
  ⊦ wi ph (wcel X (cin A2 B2)) :=
@sylanbrc ph (wcel X A2) (wcel X B2) (wcel X (cin A2 B2))
  elind_1
  elind_2
  (@elin X A2 B2)


/-- Membership in an intersection implies membership in the first set. (Contributed by Glauco
Siliprandi, 11-Dec-2019.) -/
theorem elinel1 {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cin B2 C)) (wcel A2 B2) :=
@simplbi (wcel A2 (cin B2 C)) (wcel A2 B2) (wcel A2 C)
  (@elin A2 B2 C)


/-- Membership in an intersection implies membership in the second set. (Contributed by Glauco
Siliprandi, 11-Dec-2019.) -/
theorem elinel2 {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cin B2 C)) (wcel A2 C) :=
@simprbi (wcel A2 (cin B2 C)) (wcel A2 B2) (wcel A2 C)
  (@elin A2 B2 C)


/-- Membership in a class defined as an intersection. (Contributed by Stefan O'Rear, 29-Mar-2015.)
-/
theorem elin2 {A2 B2 C X : «class»}
  (elin2_x : ⊦ wceq X (cin B2 C)) :
  ⊦ wb (wcel A2 X) (wa (wcel A2 B2) (wcel A2 C)) :=
@bitri (wcel A2 X) (wcel A2 (cin B2 C)) (wa (wcel A2 B2) (wcel A2 C))
  (@eleq2i X (cin B2 C) A2
    elin2_x)
  (@elin A2 B2 C)


/-- Elementhood in the first set of an intersection - deduction version. (Contributed by Thierry
Arnoux, 3-May-2020.) -/
theorem elin1d {ph : wff} {A2 B2 X : «class»}
  (elin1d_1 : ⊦ wi ph (wcel X (cin A2 B2))) :
  ⊦ wi ph (wcel X A2) :=
@syl ph (wcel X (cin A2 B2)) (wcel X A2)
  elin1d_1
  (@elinel1 X A2 B2)


/-- Elementhood in the first set of an intersection - deduction version. (Contributed by Thierry
Arnoux, 3-May-2020.) -/
theorem elin2d {ph : wff} {A2 B2 X : «class»}
  (elin1d_1 : ⊦ wi ph (wcel X (cin A2 B2))) :
  ⊦ wi ph (wcel X B2) :=
@syl ph (wcel X (cin A2 B2)) (wcel X B2)
  elin1d_1
  (@elinel2 X A2 B2)


/-- Commutative law for intersection of classes. Exercise 7 of [TakeutiZaring] p. 17. (Contributed
by NM, 21-Jun-1993.) (Proof shortened by SN, 12-Dec-2023.) -/
theorem incom {A2 B2 : «class»} :
  ⊦ wceq (cin A2 B2) (cin B2 A2) :=
@«3eqtr4i» (crab (λ x3, wcel (cv x3) B2) (λ x3, A2)) (crab (λ x3, wcel (cv x3) A2) (λ x3, B2)) (cin A2 B2) (cin B2 A2)
  (@rabswap (λ x3, A2) (λ x3, B2))
  (@dfin5 A2 B2)
  (@dfin5 B2 A2)


/-- Inference from membership to intersection. (Contributed by NM, 21-Jun-1993.) -/
theorem ineqri {A2 B2 C : «class»}
  (ineqri_1 : ∀ x3, ⊦ wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) :
  ⊦ wceq (cin A2 B2) C :=
@eqriv (cin A2 B2) C
  (λ x3, @bitri (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)
    (@elin (cv x3) A2 B2)
    (ineqri_1 x3))


/-- Equality theorem for intersection of two classes. (Contributed by NM, 14-Dec-1993.) (Proof
shortened by SN, 20-Sep-2023.) -/
theorem ineq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cin A2 C) (cin B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (crab (λ x3, wcel (cv x3) C) (λ x3, A2)) (crab (λ x3, wcel (cv x3) C) (λ x3, B2)) (cin A2 C) (cin B2 C)
  (@rabeq (λ x3, wcel (cv x3) C) A2 B2)
  (@dfin5 A2 C)
  (@dfin5 B2 C)


/-- Equality theorem for intersection of two classes. (Contributed by NM, 26-Dec-1993.) -/
theorem ineq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cin C A2) (cin C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cin A2 C) (cin B2 C) (cin C A2) (cin C B2)
  (@ineq1 A2 B2 C)
  (@incom C A2)
  (@incom C B2)


/-- Equality theorem for intersection of two classes. (Contributed by NM, 8-May-1994.) -/
theorem ineq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wceq (cin A2 C) (cin B2 D)) :=
@sylan9eq (wceq A2 B2) (wceq C D) (cin A2 C) (cin B2 C) (cin B2 D)
  (@ineq1 A2 B2 C)
  (@ineq2 C D B2)


/-- Equality inference for intersection of two classes. (Contributed by NM, 26-Dec-1993.) -/
theorem ineq1i {A2 B2 C : «class»}
  (ineq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cin A2 C) (cin B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cin A2 C) (cin B2 C))
  ineq1i_1
  (@ineq1 A2 B2 C)


/-- Equality inference for intersection of two classes. (Contributed by NM, 26-Dec-1993.) -/
theorem ineq2i {A2 B2 C : «class»}
  (ineq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cin C A2) (cin C B2) :=
@ax_mp (wceq A2 B2) (wceq (cin C A2) (cin C B2))
  ineq1i_1
  (@ineq2 A2 B2 C)


/-- Equality inference for intersection of two classes. (Contributed by NM, 24-Jun-2004.) (Proof
shortened by Eric Schmidt, 26-Jan-2007.) -/
theorem ineq12i {A2 B2 C D : «class»}
  (ineq1i_1 : ⊦ wceq A2 B2)
  (ineq12i_2 : ⊦ wceq C D) :
  ⊦ wceq (cin A2 C) (cin B2 D) :=
@mp2an (wceq A2 B2) (wceq C D) (wceq (cin A2 C) (cin B2 D))
  ineq1i_1
  ineq12i_2
  (@ineq12 A2 B2 C D)


/-- Equality deduction for intersection of two classes. (Contributed by NM, 10-Apr-1994.) -/
theorem ineq1d {ph : wff} {A2 B2 C : «class»}
  (ineq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cin A2 C) (cin B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cin A2 C) (cin B2 C))
  ineq1d_1
  (@ineq1 A2 B2 C)


/-- Equality deduction for intersection of two classes. (Contributed by NM, 10-Apr-1994.) -/
theorem ineq2d {ph : wff} {A2 B2 C : «class»}
  (ineq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cin C A2) (cin C B2)) :=
@syl ph (wceq A2 B2) (wceq (cin C A2) (cin C B2))
  ineq1d_1
  (@ineq2 A2 B2 C)


/-- Equality deduction for intersection of two classes. (Contributed by NM, 24-Jun-2004.) (Proof
shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem ineq12d {ph : wff} {A2 B2 C D : «class»}
  (ineq1d_1 : ⊦ wi ph (wceq A2 B2))
  (ineq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cin A2 C) (cin B2 D)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wceq (cin A2 C) (cin B2 D))
  ineq1d_1
  ineq12d_2
  (@ineq12 A2 B2 C D)


/-- Equality deduction for intersection of two classes. (Contributed by NM, 7-Feb-2007.) -/
theorem ineqan12d {ph ps : wff} {A2 B2 C D : «class»}
  (ineq1d_1 : ⊦ wi ph (wceq A2 B2))
  (ineqan12d_2 : ⊦ wi ps (wceq C D)) :
  ⊦ wi (wa ph ps) (wceq (cin A2 C) (cin B2 D)) :=
@syl2an ph (wceq A2 B2) (wceq C D) (wceq (cin A2 C) (cin B2 D)) ps
  ineq1d_1
  ineqan12d_2
  (@ineq12 A2 B2 C D)


/-- A relationship between subclass and intersection. Similar to Exercise 9 of [TakeutiZaring] p.
18. (Contributed by NM, 17-May-1994.) -/
theorem sseqin2 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cin B2 A2) A2) :=
@bitri (wss A2 B2) (wceq (cin A2 B2) A2) (wceq (cin B2 A2) A2)
  (@df_ss A2 B2)
  (@eqeq1i (cin A2 B2) (cin B2 A2) A2
    (@incom A2 B2))


/-- Bound-variable hypothesis builder for the intersection of classes. (Contributed by NM,
15-Sep-2003.) (Revised by Mario Carneiro, 14-Oct-2016.) -/
theorem nfin {A2 B2 : setvar → «class»}
  (nfin_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfin_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cin (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cin (A2 x3) (B2 x3)) (λ x3, crab (λ y, wcel (cv y) (B2 x3)) (λ y, A2 x3))
  (λ x3, @dfin5 (A2 x3) (B2 x3))
  (@nfrabw (λ x3 y, wcel (cv y) (B2 x3)) (λ x3 y, A2 x3)
    (λ y, @nfcri (λ x3 y, B2 x3)
      (λ y, nfin_2) y)
    (λ y, nfin_1))


/-- Deduction from a wff to a restricted class abstraction. (Contributed by NM, 14-Jan-2014.) -/
theorem rabbi2dva {ph : wff} {ps : setvar → wff} {A2 B2 : «class»}
  (rabbi2dva_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) A2)) (wb (wcel (cv x3) B2) (ps x3))) :
  ⊦ wi ph (wceq (cin A2 B2) (crab (λ x3, ps x3) (λ x3, A2))) :=
@syl5eq ph (cin A2 B2) (crab (λ x3, wcel (cv x3) B2) (λ x3, A2)) (crab (λ x3, ps x3) (λ x3, A2))
  (@dfin5 A2 B2)
  (@rabbidva ph (λ x3, wcel (cv x3) B2) (λ x3, ps x3) (λ x3, A2)
    (λ x3, rabbi2dva_1 x3))


/-- Idempotent law for intersection of classes. Theorem 15 of [Suppes] p. 26. (Contributed by NM,
5-Aug-1993.) -/
theorem inidm {A2 : «class»} :
  ⊦ wceq (cin A2 A2) A2 :=
@ineqri A2 A2 A2
  (λ x3, @anidm (wcel (cv x3) A2))


/-- Associative law for intersection of classes. Exercise 9 of [TakeutiZaring] p. 17. (Contributed
by NM, 3-May-1994.) -/
theorem inass {A2 B2 C : «class»} :
  ⊦ wceq (cin (cin A2 B2) C) (cin A2 (cin B2 C)) :=
@ineqri (cin A2 B2) C (cin A2 (cin B2 C))
  (λ x3, @«3bitr4i» (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) (wa (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C))) (wa (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) C)) (wcel (cv x3) (cin A2 (cin B2 C)))
    (@bitr4i (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) (wa (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) C))) (wa (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C)))
      (@anass (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C))
      (@anbi2i (wcel (cv x3) (cin B2 C)) (wa (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
        (@elin (cv x3) B2 C)))
    (@anbi1i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)
      (@elin (cv x3) A2 B2))
    (@elin (cv x3) A2 (cin B2 C)))


/-- A rearrangement of intersection. (Contributed by NM, 21-Apr-2001.) -/
theorem in12 {A2 B2 C : «class»} :
  ⊦ wceq (cin A2 (cin B2 C)) (cin B2 (cin A2 C)) :=
@«3eqtr3i» (cin (cin A2 B2) C) (cin (cin B2 A2) C) (cin A2 (cin B2 C)) (cin B2 (cin A2 C))
  (@ineq1i (cin A2 B2) (cin B2 A2) C
    (@incom A2 B2))
  (@inass A2 B2 C)
  (@inass B2 A2 C)


/-- A rearrangement of intersection. (Contributed by NM, 21-Apr-2001.) (Proof shortened by Andrew
Salmon, 26-Jun-2011.) -/
theorem in32 {A2 B2 C : «class»} :
  ⊦ wceq (cin (cin A2 B2) C) (cin (cin A2 C) B2) :=
@«3eqtri» (cin (cin A2 B2) C) (cin A2 (cin B2 C)) (cin B2 (cin A2 C)) (cin (cin A2 C) B2)
  (@inass A2 B2 C)
  (@in12 A2 B2 C)
  (@incom B2 (cin A2 C))


/-- Rearrangement of intersection of 4 classes. (Contributed by NM, 21-Apr-2001.) -/
theorem in4 {A2 B2 C D : «class»} :
  ⊦ wceq (cin (cin A2 B2) (cin C D)) (cin (cin A2 C) (cin B2 D)) :=
@«3eqtr4i» (cin A2 (cin B2 (cin C D))) (cin A2 (cin C (cin B2 D))) (cin (cin A2 B2) (cin C D)) (cin (cin A2 C) (cin B2 D))
  (@ineq2i (cin B2 (cin C D)) (cin C (cin B2 D)) A2
    (@in12 B2 C D))
  (@inass A2 B2 (cin C D))
  (@inass A2 C (cin B2 D))


/-- Intersection distributes over itself. (Contributed by NM, 6-May-1994.) -/
theorem inindi {A2 B2 C : «class»} :
  ⊦ wceq (cin A2 (cin B2 C)) (cin (cin A2 B2) (cin A2 C)) :=
@eqtr3i (cin (cin A2 A2) (cin B2 C)) (cin A2 (cin B2 C)) (cin (cin A2 B2) (cin A2 C))
  (@ineq1i (cin A2 A2) A2 (cin B2 C)
    (@inidm A2))
  (@in4 A2 A2 B2 C)


/-- Intersection distributes over itself. (Contributed by NM, 17-Aug-2004.) -/
theorem inindir {A2 B2 C : «class»} :
  ⊦ wceq (cin (cin A2 B2) C) (cin (cin A2 C) (cin B2 C)) :=
@eqtr3i (cin (cin A2 B2) (cin C C)) (cin (cin A2 B2) C) (cin (cin A2 C) (cin B2 C))
  (@ineq2i (cin C C) C (cin A2 B2)
    (@inidm C))
  (@in4 A2 B2 C C)


/-- The intersection of two classes is a subset of one of them. Part of Exercise 12 of
[TakeutiZaring] p. 18. (Contributed by NM, 27-Apr-1994.) -/
theorem inss1 {A2 B2 : «class»} :
  ⊦ wss (cin A2 B2) A2 :=
@ssriv (cin A2 B2) A2
  (λ x3, @elinel1 (cv x3) A2 B2)


/-- The intersection of two classes is a subset of one of them. Part of Exercise 12 of
[TakeutiZaring] p. 18. (Contributed by NM, 27-Apr-1994.) -/
theorem inss2 {A2 B2 : «class»} :
  ⊦ wss (cin A2 B2) B2 :=
@eqsstrri (cin A2 B2) (cin B2 A2) B2
  (@incom B2 A2)
  (@inss1 B2 A2)


/-- Subclass of intersection. Theorem 2.8(vii) of [Monk1] p. 26. (Contributed by NM, 15-Jun-2004.)
(Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem ssin {A2 B2 C : «class»} :
  ⊦ wb (wa (wss A2 B2) (wss A2 C)) (wss A2 (cin B2 C)) :=
@«3bitr4i» (wa (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C)))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C)))) (wa (wss A2 B2) (wss A2 C)) (wss A2 (cin B2 C))
  (@«3bitrri» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C)))) (wal (λ x3, wi (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) C)))) (wal (λ x3, wa (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wi (wcel (cv x3) A2) (wcel (cv x3) C)))) (wa (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))))
    (@albii (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C))) (λ x3, wi (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) C)))
      (λ x3, @imbi2i (wcel (cv x3) (cin B2 C)) (wa (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
        (@elin (cv x3) B2 C)))
    (@albii (λ x3, wi (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) C))) (λ x3, wa (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wi (wcel (cv x3) A2) (wcel (cv x3) C)))
      (λ x3, @jcab (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C)))
    (@«19_26» (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))))
  (@anbi12i (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wss A2 C) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C)))
    (@dfss2 A2 B2)
    (@dfss2 A2 C))
  (@dfss2 A2 (cin B2 C))


/-- An inference showing that a subclass of two classes is a subclass of their intersection.
(Contributed by NM, 24-Nov-2003.) -/
theorem ssini {A2 B2 C : «class»}
  (ssini_1 : ⊦ wss A2 B2)
  (ssini_2 : ⊦ wss A2 C) :
  ⊦ wss A2 (cin B2 C) :=
@mpbi (wa (wss A2 B2) (wss A2 C)) (wss A2 (cin B2 C))
  (@pm3_2i (wss A2 B2) (wss A2 C)
    ssini_1
    ssini_2)
  (@ssin A2 B2 C)


/-- A deduction showing that a subclass of two classes is a subclass of their intersection.
(Contributed by Jonathan Ben-Naim, 3-Jun-2011.) -/
theorem ssind {ph : wff} {A2 B2 C : «class»}
  (ssind_1 : ⊦ wi ph (wss A2 B2))
  (ssind_2 : ⊦ wi ph (wss A2 C)) :
  ⊦ wi ph (wss A2 (cin B2 C)) :=
@sylib ph (wa (wss A2 B2) (wss A2 C)) (wss A2 (cin B2 C))
  (@jca ph (wss A2 B2) (wss A2 C)
    ssind_1
    ssind_2)
  (@ssin A2 B2 C)


/-- Add right intersection to subclass relation. (Contributed by NM, 16-Aug-1994.) (Proof shortened
by Andrew Salmon, 26-Jun-2011.) -/
theorem ssrin {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cin A2 C) (cin B2 C)) :=
@ssrdv (wss A2 B2) (cin A2 C) (cin B2 C)
  (λ x3, @«3imtr4g» (wss A2 B2) (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wa (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) (cin A2 C)) (wcel (cv x3) (cin B2 C))
    (@anim1d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C)
      (@ssel A2 B2 (cv x3)))
    (@elin (cv x3) A2 C)
    (@elin (cv x3) B2 C))


/-- Add left intersection to subclass relation. (Contributed by NM, 19-Oct-1999.) -/
theorem sslin {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cin C A2) (cin C B2)) :=
@«3sstr4g» (wss A2 B2) (cin A2 C) (cin B2 C) (cin C A2) (cin C B2)
  (@ssrin A2 B2 C)
  (@incom C A2)
  (@incom C B2)


/-- Add right intersection to subclass relation. (Contributed by Glauco Siliprandi, 2-Jan-2022.) -/
theorem ssrind {ph : wff} {A2 B2 C : «class»}
  (ssrind_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cin A2 C) (cin B2 C)) :=
@syl ph (wss A2 B2) (wss (cin A2 C) (cin B2 C))
  ssrind_1
  (@ssrin A2 B2 C)


/-- Intersection of subclasses. (Contributed by NM, 5-May-2000.) -/
theorem ss2in {A2 B2 C D : «class»} :
  ⊦ wi (wa (wss A2 B2) (wss C D)) (wss (cin A2 C) (cin B2 D)) :=
@sylan9ss (wss A2 B2) (wss C D) (cin A2 C) (cin B2 C) (cin B2 D)
  (@ssrin A2 B2 C)
  (@sslin C D B2)


/-- Intersection preserves subclass relationship. (Contributed by NM, 14-Sep-1999.) -/
theorem ssinss1 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 C) (wss (cin A2 B2) C) :=
@ax_mp (wss (cin A2 B2) A2) (wi (wss A2 C) (wss (cin A2 B2) C))
  (@inss1 A2 B2)
  (@sstr2 (cin A2 B2) A2 C)


/-- Restricted existential quantification over intersection. (Contributed by Peter Mazsa,
17-Dec-2018.) -/
theorem rexin {ph : setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, cin (A2 x3) (B2 x3))) (wrex (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)) (λ x3, A2 x3)) :=
@rexbii2 (λ x3, ph x3) (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)) (λ x3, cin (A2 x3) (B2 x3)) (λ x3, A2 x3)
  (λ x3, @bitri (wa (wcel (cv x3) (cin (A2 x3) (B2 x3))) (ph x3)) (wa (wa (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
    (@anbi1i (wcel (cv x3) (cin (A2 x3) (B2 x3))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)
      (@elin (cv x3) (A2 x3) (B2 x3)))
    (@anass (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)) (ph x3)))


/-- Subclass defined in terms of class difference. See comments under ~ dfun2 . (Contributed by NM,
22-Mar-1998.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem dfss4 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cdif B2 (cdif B2 A2)) A2) :=
@bitr4i (wss A2 B2) (wceq (cin B2 A2) A2) (wceq (cdif B2 (cdif B2 A2)) A2)
  (@sseqin2 A2 B2)
  (@eqeq1i (cdif B2 (cdif B2 A2)) (cin B2 A2) A2
    (@difeqri B2 (cdif B2 A2) (cin B2 A2)
      (λ x3, @bitr4i (wa (wcel (cv x3) B2) (wn (wcel (cv x3) (cdif B2 A2)))) (wa (wcel (cv x3) B2) (wn (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2))))) (wcel (cv x3) (cin B2 A2))
        (@anbi2i (wn (wcel (cv x3) (cdif B2 A2))) (wn (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))) (wcel (cv x3) B2)
          (@notbii (wcel (cv x3) (cdif B2 A2)) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))
            (@eldif (cv x3) B2 A2)))
        (@«3bitri» (wcel (cv x3) (cin B2 A2)) (wa (wcel (cv x3) B2) (wcel (cv x3) A2)) (wa (wcel (cv x3) B2) (wi (wcel (cv x3) B2) (wcel (cv x3) A2))) (wa (wcel (cv x3) B2) (wn (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))))
          (@elin (cv x3) B2 A2)
          (@abai (wcel (cv x3) B2) (wcel (cv x3) A2))
          (@anbi2i (wi (wcel (cv x3) B2) (wcel (cv x3) A2)) (wn (wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))) (wcel (cv x3) B2)
            (@iman (wcel (cv x3) B2) (wcel (cv x3) A2)))))))


/-- An alternate definition of the union of two classes in terms of class difference, requiring no
dummy variables. Along with ~ dfin2 and ~ dfss4 it shows we can express union, intersection, and
subset directly in terms of the single "primitive" operation ` \ ` (class difference). (Contributed
by NM, 10-Jun-2004.) -/
theorem dfun2 {A2 B2 : «class»} :
  ⊦ wceq (cun A2 B2) (cdif cvv (cdif (cdif cvv A2) B2)) :=
@uneqri A2 B2 (cdif cvv (cdif (cdif cvv A2) B2))
  (λ x3, @bitr4i (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) (cdif (cdif cvv A2) B2))) (wcel (cv x3) (cdif cvv (cdif (cdif cvv A2) B2)))
    (@con2bii (wcel (cv x3) (cdif (cdif cvv A2) B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2))
      (@«3bitr4i» (wa (wcel (cv x3) (cdif cvv A2)) (wn (wcel (cv x3) B2))) (wa (wn (wcel (cv x3) A2)) (wn (wcel (cv x3) B2))) (wcel (cv x3) (cdif (cdif cvv A2) B2)) (wn (wo (wcel (cv x3) A2) (wcel (cv x3) B2)))
        (@anbi1i (wcel (cv x3) (cdif cvv A2)) (wn (wcel (cv x3) A2)) (wn (wcel (cv x3) B2))
          (@mpbiran (wcel (cv x3) (cdif cvv A2)) (wcel (cv x3) cvv) (wn (wcel (cv x3) A2))
            (@vex x3)
            (@eldif (cv x3) cvv A2)))
        (@eldif (cv x3) (cdif cvv A2) B2)
        (@ioran (wcel (cv x3) A2) (wcel (cv x3) B2))))
    (@mpbiran (wcel (cv x3) (cdif cvv (cdif (cdif cvv A2) B2))) (wcel (cv x3) cvv) (wn (wcel (cv x3) (cdif (cdif cvv A2) B2)))
      (@vex x3)
      (@eldif (cv x3) cvv (cdif (cdif cvv A2) B2))))


/-- An alternate definition of the intersection of two classes in terms of class difference,
requiring no dummy variables. See comments under ~ dfun2 . Another version is given by ~ dfin4 .
(Contributed by NM, 10-Jun-2004.) -/
theorem dfin2 {A2 B2 : «class»} :
  ⊦ wceq (cin A2 B2) (cdif A2 (cdif cvv B2)) :=
@ineqri A2 B2 (cdif A2 (cdif cvv B2))
  (λ x3, @bitr4i (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (cdif cvv B2)))) (wcel (cv x3) (cdif A2 (cdif cvv B2)))
    (@anbi2i (wcel (cv x3) B2) (wn (wcel (cv x3) (cdif cvv B2))) (wcel (cv x3) A2)
      (@con2bii (wcel (cv x3) (cdif cvv B2)) (wcel (cv x3) B2)
        (@mpbiran (wcel (cv x3) (cdif cvv B2)) (wcel (cv x3) cvv) (wn (wcel (cv x3) B2))
          (@vex x3)
          (@eldif (cv x3) cvv B2))))
    (@eldif (cv x3) A2 (cdif cvv B2)))


/-- Difference with intersection. Theorem 33 of [Suppes] p. 29. (Contributed by NM, 31-Mar-1998.)
(Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem difin {A2 B2 : «class»} :
  ⊦ wceq (cdif A2 (cin A2 B2)) (cdif A2 B2) :=
@difeqri A2 (cin A2 B2) (cdif A2 B2)
  (λ x3, @«3bitr4i» (wn (wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (cin A2 B2)))) (wcel (cv x3) (cdif A2 B2))
    (@pm4_61 (wcel (cv x3) A2) (wcel (cv x3) B2))
    (@con2bii (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (cin A2 B2))))
      (@«3bitr2i» (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wi (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cin A2 B2))) (wn (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (cin A2 B2)))))
        (@anclb (wcel (cv x3) A2) (wcel (cv x3) B2))
        (@imbi2i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) A2)
          (@elin (cv x3) A2 B2))
        (@iman (wcel (cv x3) A2) (wcel (cv x3) (cin A2 B2)))))
    (@eldif (cv x3) A2 B2))


/-- Union defined in terms of intersection (De Morgan's law). Definition of union in [Mendelson] p.
231. (Contributed by NM, 8-Jan-2002.) -/
theorem dfun3 {A2 B2 : «class»} :
  ⊦ wceq (cun A2 B2) (cdif cvv (cin (cdif cvv A2) (cdif cvv B2))) :=
@eqtri (cun A2 B2) (cdif cvv (cdif (cdif cvv A2) B2)) (cdif cvv (cin (cdif cvv A2) (cdif cvv B2)))
  (@dfun2 A2 B2)
  (@difeq2i (cdif (cdif cvv A2) B2) (cin (cdif cvv A2) (cdif cvv B2)) cvv
    (@eqtr2i (cin (cdif cvv A2) (cdif cvv B2)) (cdif (cdif cvv A2) (cdif cvv (cdif cvv B2))) (cdif (cdif cvv A2) B2)
      (@dfin2 (cdif cvv A2) (cdif cvv B2))
      (@difeq2i (cdif cvv (cdif cvv B2)) B2 (cdif cvv A2)
        (@ddif B2))))


/-- Intersection defined in terms of union (De Morgan's law). Similar to Exercise 4.10(n) of
[Mendelson] p. 231. (Contributed by NM, 8-Jan-2002.) -/
theorem dfin3 {A2 B2 : «class»} :
  ⊦ wceq (cin A2 B2) (cdif cvv (cun (cdif cvv A2) (cdif cvv B2))) :=
@«3eqtr4ri» (cdif cvv (cdif cvv (cdif A2 (cdif cvv B2)))) (cdif A2 (cdif cvv B2)) (cdif cvv (cun (cdif cvv A2) (cdif cvv B2))) (cin A2 B2)
  (@ddif (cdif A2 (cdif cvv B2)))
  (@difeq2i (cun (cdif cvv A2) (cdif cvv B2)) (cdif cvv (cdif A2 (cdif cvv B2))) cvv
    (@eqtri (cun (cdif cvv A2) (cdif cvv B2)) (cdif cvv (cdif (cdif cvv (cdif cvv A2)) (cdif cvv B2))) (cdif cvv (cdif A2 (cdif cvv B2)))
      (@dfun2 (cdif cvv A2) (cdif cvv B2))
      (@difeq2i (cdif (cdif cvv (cdif cvv A2)) (cdif cvv B2)) (cdif A2 (cdif cvv B2)) cvv
        (@difeq1i (cdif cvv (cdif cvv A2)) A2 (cdif cvv B2)
          (@ddif A2)))))
  (@dfin2 A2 B2)


/-- Alternate definition of the intersection of two classes. Exercise 4.10(q) of [Mendelson] p. 231.
(Contributed by NM, 25-Nov-2003.) -/
theorem dfin4 {A2 B2 : «class»} :
  ⊦ wceq (cin A2 B2) (cdif A2 (cdif A2 B2)) :=
@eqtr3i (cdif A2 (cdif A2 (cin A2 B2))) (cin A2 B2) (cdif A2 (cdif A2 B2))
  (@mpbi (wss (cin A2 B2) A2) (wceq (cdif A2 (cdif A2 (cin A2 B2))) (cin A2 B2))
    (@inss1 A2 B2)
    (@dfss4 (cin A2 B2) A2))
  (@difeq2i (cdif A2 (cin A2 B2)) (cdif A2 B2) A2
    (@difin A2 B2))


/-- Intersection with universal complement. Remark in [Stoll] p. 20. (Contributed by NM,
17-Aug-2004.) -/
theorem invdif {A2 B2 : «class»} :
  ⊦ wceq (cin A2 (cdif cvv B2)) (cdif A2 B2) :=
@eqtri (cin A2 (cdif cvv B2)) (cdif A2 (cdif cvv (cdif cvv B2))) (cdif A2 B2)
  (@dfin2 A2 (cdif cvv B2))
  (@difeq2i (cdif cvv (cdif cvv B2)) B2 A2
    (@ddif B2))


/-- Intersection with class difference. Theorem 34 of [Suppes] p. 29. (Contributed by NM,
17-Aug-2004.) -/
theorem indif {A2 B2 : «class»} :
  ⊦ wceq (cin A2 (cdif A2 B2)) (cdif A2 B2) :=
@«3eqtr2i» (cin A2 (cdif A2 B2)) (cdif A2 (cdif A2 (cdif A2 B2))) (cdif A2 (cin A2 B2)) (cdif A2 B2)
  (@dfin4 A2 (cdif A2 B2))
  (@difeq2i (cin A2 B2) (cdif A2 (cdif A2 B2)) A2
    (@dfin4 A2 B2))
  (@difin A2 B2)


/-- Bring an intersection in and out of a class difference. (Contributed by Jeff Hankins,
15-Jul-2009.) -/
theorem indif2 {A2 B2 C : «class»} :
  ⊦ wceq (cin A2 (cdif B2 C)) (cdif (cin A2 B2) C) :=
@«3eqtr3ri» (cin (cin A2 B2) (cdif cvv C)) (cin A2 (cin B2 (cdif cvv C))) (cdif (cin A2 B2) C) (cin A2 (cdif B2 C))
  (@inass A2 B2 (cdif cvv C))
  (@invdif (cin A2 B2) C)
  (@ineq2i (cin B2 (cdif cvv C)) (cdif B2 C) A2
    (@invdif B2 C))


/-- Bring an intersection in and out of a class difference. (Contributed by Mario Carneiro,
15-May-2015.) -/
theorem indif1 {A2 B2 C : «class»} :
  ⊦ wceq (cin (cdif A2 C) B2) (cdif (cin A2 B2) C) :=
@«3eqtr3i» (cin B2 (cdif A2 C)) (cdif (cin B2 A2) C) (cin (cdif A2 C) B2) (cdif (cin A2 B2) C)
  (@indif2 B2 A2 C)
  (@incom B2 (cdif A2 C))
  (@difeq1i (cin B2 A2) (cin A2 B2) C
    (@incom B2 A2))


/-- Distributive law for intersection over union. Exercise 10 of [TakeutiZaring] p. 17. (Contributed
by NM, 30-Sep-2002.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem indi {A2 B2 C : «class»} :
  ⊦ wceq (cin A2 (cun B2 C)) (cun (cin A2 B2) (cin A2 C)) :=
@ineqri A2 (cun B2 C) (cun (cin A2 B2) (cin A2 C))
  (λ x3, @«3bitr4i» (wa (wcel (cv x3) A2) (wo (wcel (cv x3) B2) (wcel (cv x3) C))) (wo (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) (cin A2 C))) (wa (wcel (cv x3) A2) (wcel (cv x3) (cun B2 C))) (wcel (cv x3) (cun (cin A2 B2) (cin A2 C)))
    (@bitr4i (wa (wcel (cv x3) A2) (wo (wcel (cv x3) B2) (wcel (cv x3) C))) (wo (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) C))) (wo (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) (cin A2 C)))
      (@andi (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C))
      (@orbi12i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) (cin A2 C)) (wa (wcel (cv x3) A2) (wcel (cv x3) C))
        (@elin (cv x3) A2 B2)
        (@elin (cv x3) A2 C)))
    (@anbi2i (wcel (cv x3) (cun B2 C)) (wo (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
      (@elun (cv x3) B2 C))
    (@elun (cv x3) (cin A2 B2) (cin A2 C)))


/-- Distributive law for union over intersection. Exercise 11 of [TakeutiZaring] p. 17. (Contributed
by NM, 30-Sep-2002.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem undi {A2 B2 C : «class»} :
  ⊦ wceq (cun A2 (cin B2 C)) (cin (cun A2 B2) (cun A2 C)) :=
@uneqri A2 (cin B2 C) (cin (cun A2 B2) (cun A2 C))
  (λ x3, @«3bitri» (wo (wcel (cv x3) A2) (wcel (cv x3) (cin B2 C))) (wo (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wcel (cv x3) C))) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) C))) (wcel (cv x3) (cin (cun A2 B2) (cun A2 C)))
    (@orbi2i (wcel (cv x3) (cin B2 C)) (wa (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
      (@elin (cv x3) B2 C))
    (@ordi (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C))
    (@bitr2i (wcel (cv x3) (cin (cun A2 B2) (cun A2 C))) (wa (wcel (cv x3) (cun A2 B2)) (wcel (cv x3) (cun A2 C))) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) C)))
      (@elin (cv x3) (cun A2 B2) (cun A2 C))
      (@anbi12i (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) (cun A2 C)) (wo (wcel (cv x3) A2) (wcel (cv x3) C))
        (@elun (cv x3) A2 B2)
        (@elun (cv x3) A2 C))))


/-- Distributive law for intersection over union. Theorem 28 of [Suppes] p. 27. (Contributed by NM,
30-Sep-2002.) -/
theorem indir {A2 B2 C : «class»} :
  ⊦ wceq (cin (cun A2 B2) C) (cun (cin A2 C) (cin B2 C)) :=
@«3eqtr4i» (cin C (cun A2 B2)) (cun (cin C A2) (cin C B2)) (cin (cun A2 B2) C) (cun (cin A2 C) (cin B2 C))
  (@indi C A2 B2)
  (@incom (cun A2 B2) C)
  (@uneq12i (cin A2 C) (cin C A2) (cin B2 C) (cin C B2)
    (@incom A2 C)
    (@incom B2 C))


/-- Distributive law for union over intersection. Theorem 29 of [Suppes] p. 27. (Contributed by NM,
30-Sep-2002.) -/
theorem undir {A2 B2 C : «class»} :
  ⊦ wceq (cun (cin A2 B2) C) (cin (cun A2 C) (cun B2 C)) :=
@«3eqtr4i» (cun C (cin A2 B2)) (cin (cun C A2) (cun C B2)) (cun (cin A2 B2) C) (cin (cun A2 C) (cun B2 C))
  (@undi C A2 B2)
  (@uncom (cin A2 B2) C)
  (@ineq12i (cun A2 C) (cun C A2) (cun B2 C) (cun C B2)
    (@uncom A2 C)
    (@uncom B2 C))


/-- Distributive law for class difference. Theorem 39 of [Suppes] p. 29. (Contributed by NM,
17-Aug-2004.) -/
theorem difundi {A2 B2 C : «class»} :
  ⊦ wceq (cdif A2 (cun B2 C)) (cin (cdif A2 B2) (cdif A2 C)) :=
@eqtri (cdif A2 (cun B2 C)) (cdif A2 (cdif cvv (cin (cdif cvv B2) (cdif cvv C)))) (cin (cdif A2 B2) (cdif A2 C))
  (@difeq2i (cun B2 C) (cdif cvv (cin (cdif cvv B2) (cdif cvv C))) A2
    (@dfun3 B2 C))
  (@«3eqtr3i» (cin A2 (cin (cdif cvv B2) (cdif cvv C))) (cin (cin A2 (cdif cvv B2)) (cin A2 (cdif cvv C))) (cdif A2 (cdif cvv (cin (cdif cvv B2) (cdif cvv C)))) (cin (cdif A2 B2) (cdif A2 C))
    (@inindi A2 (cdif cvv B2) (cdif cvv C))
    (@dfin2 A2 (cin (cdif cvv B2) (cdif cvv C)))
    (@ineq12i (cin A2 (cdif cvv B2)) (cdif A2 B2) (cin A2 (cdif cvv C)) (cdif A2 C)
      (@invdif A2 B2)
      (@invdif A2 C)))


/-- Distributive law for class difference. (Contributed by NM, 17-Aug-2004.) -/
theorem difundir {A2 B2 C : «class»} :
  ⊦ wceq (cdif (cun A2 B2) C) (cun (cdif A2 C) (cdif B2 C)) :=
@«3eqtr3i» (cin (cun A2 B2) (cdif cvv C)) (cun (cin A2 (cdif cvv C)) (cin B2 (cdif cvv C))) (cdif (cun A2 B2) C) (cun (cdif A2 C) (cdif B2 C))
  (@indir A2 B2 (cdif cvv C))
  (@invdif (cun A2 B2) C)
  (@uneq12i (cin A2 (cdif cvv C)) (cdif A2 C) (cin B2 (cdif cvv C)) (cdif B2 C)
    (@invdif A2 C)
    (@invdif B2 C))


/-- Distributive law for class difference. Theorem 40 of [Suppes] p. 29. (Contributed by NM,
17-Aug-2004.) -/
theorem difindi {A2 B2 C : «class»} :
  ⊦ wceq (cdif A2 (cin B2 C)) (cun (cdif A2 B2) (cdif A2 C)) :=
@eqtri (cdif A2 (cin B2 C)) (cdif A2 (cdif cvv (cun (cdif cvv B2) (cdif cvv C)))) (cun (cdif A2 B2) (cdif A2 C))
  (@difeq2i (cin B2 C) (cdif cvv (cun (cdif cvv B2) (cdif cvv C))) A2
    (@dfin3 B2 C))
  (@«3eqtr3i» (cin A2 (cun (cdif cvv B2) (cdif cvv C))) (cun (cin A2 (cdif cvv B2)) (cin A2 (cdif cvv C))) (cdif A2 (cdif cvv (cun (cdif cvv B2) (cdif cvv C)))) (cun (cdif A2 B2) (cdif A2 C))
    (@indi A2 (cdif cvv B2) (cdif cvv C))
    (@dfin2 A2 (cun (cdif cvv B2) (cdif cvv C)))
    (@uneq12i (cin A2 (cdif cvv B2)) (cdif A2 B2) (cin A2 (cdif cvv C)) (cdif A2 C)
      (@invdif A2 B2)
      (@invdif A2 C)))


/-- De Morgan's law for union. Theorem 5.2(13) of [Stoll] p. 19. (Contributed by NM, 18-Aug-2004.)
-/
theorem undm {A2 B2 : «class»} :
  ⊦ wceq (cdif cvv (cun A2 B2)) (cin (cdif cvv A2) (cdif cvv B2)) :=
@difundi cvv A2 B2


/-- A relationship involving double difference and union. (Contributed by NM, 29-Aug-2004.) -/
theorem difun1 {A2 B2 C : «class»} :
  ⊦ wceq (cdif A2 (cun B2 C)) (cdif (cdif A2 B2) C) :=
@eqtr3i (cdif (cin A2 (cdif cvv B2)) C) (cdif A2 (cun B2 C)) (cdif (cdif A2 B2) C)
  (@eqtr3i (cin A2 (cin (cdif cvv B2) (cdif cvv C))) (cdif (cin A2 (cdif cvv B2)) C) (cdif A2 (cun B2 C))
    (@eqtr3i (cin (cin A2 (cdif cvv B2)) (cdif cvv C)) (cin A2 (cin (cdif cvv B2) (cdif cvv C))) (cdif (cin A2 (cdif cvv B2)) C)
      (@inass A2 (cdif cvv B2) (cdif cvv C))
      (@invdif (cin A2 (cdif cvv B2)) C))
    (@eqtr3i (cin A2 (cdif cvv (cun B2 C))) (cin A2 (cin (cdif cvv B2) (cdif cvv C))) (cdif A2 (cun B2 C))
      (@ineq2i (cdif cvv (cun B2 C)) (cin (cdif cvv B2) (cdif cvv C)) A2
        (@undm B2 C))
      (@invdif A2 (cun B2 C))))
  (@difeq1i (cin A2 (cdif cvv B2)) (cdif A2 B2) C
    (@invdif A2 B2))


/-- Represent a class difference as an intersection with a larger difference. (Contributed by Jeff
Madsen, 2-Sep-2009.) -/
theorem difin2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 C) (wceq (cdif A2 B2) (cin (cdif C B2) A2)) :=
@eqrdv (wss A2 C) (cdif A2 B2) (cin (cdif C B2) A2)
  (λ x3, @«3bitr4g» (wss A2 C) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wn (wcel (cv x3) B2))) (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) (cin (cdif C B2) A2))
    (@anbi1d (wss A2 C) (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wn (wcel (cv x3) B2))
      (@pm4_71d (wss A2 C) (wcel (cv x3) A2) (wcel (cv x3) C)
        (@ssel A2 C (cv x3))))
    (@eldif (cv x3) A2 B2)
    (@«3bitri» (wcel (cv x3) (cin (cdif C B2) A2)) (wa (wcel (cv x3) (cdif C B2)) (wcel (cv x3) A2)) (wa (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wn (wcel (cv x3) B2)))
      (@elin (cv x3) (cdif C B2) A2)
      (@anbi1i (wcel (cv x3) (cdif C B2)) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)
        (@eldif (cv x3) C B2))
      (@bitr4i (wa (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)) (wa (wcel (cv x3) A2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2)))) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wn (wcel (cv x3) B2)))
        (@ancom (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2))
        (@anass (wcel (cv x3) A2) (wcel (cv x3) C) (wn (wcel (cv x3) B2))))))


/-- Absorption-like law for class difference: you can remove a class only once. (Contributed by FL,
2-Aug-2009.) -/
theorem difabs {A2 B2 : «class»} :
  ⊦ wceq (cdif (cdif A2 B2) B2) (cdif A2 B2) :=
@eqtr3i (cdif A2 (cun B2 B2)) (cdif (cdif A2 B2) B2) (cdif A2 B2)
  (@difun1 A2 B2 B2)
  (@difeq2i (cun B2 B2) B2 A2
    (@unidm B2))


/-- Union of two class abstractions. (Contributed by NM, 29-Sep-2002.) (Proof shortened by Andrew
Salmon, 26-Jun-2011.) -/
theorem unab {ph ps : setvar → wff} :
  ⊦ wceq (cun (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (cab (λ x3, wo (ph x3) (ps x3))) :=
@uneqri (cab (λ x3, ph x3)) (cab (λ x3, ps x3)) (cab (λ x3, wo (ph x3) (ps x3)))
  (λ y, @«3bitr4ri» (wsb (λ x3, wo (ph x3) (ps x3)) y) (wo (wsb (λ x3, ph x3) y) (wsb (λ x3, ps x3) y)) (wcel (cv y) (cab (λ x3, wo (ph x3) (ps x3)))) (wo (wcel (cv y) (cab (λ x3, ph x3))) (wcel (cv y) (cab (λ x3, ps x3))))
    (@sbor (λ x3 y, ph x3) (λ x3 y, ps x3) y)
    (@df_clab (λ x3, wo (ph x3) (ps x3)) y)
    (@orbi12i (wcel (cv y) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) y) (wcel (cv y) (cab (λ x3, ps x3))) (wsb (λ x3, ps x3) y)
      (@df_clab (λ x3, ph x3) y)
      (@df_clab (λ x3, ps x3) y)))


/-- Intersection of two class abstractions. (Contributed by NM, 29-Sep-2002.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem inab {ph ps : setvar → wff} :
  ⊦ wceq (cin (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (cab (λ x3, wa (ph x3) (ps x3))) :=
@ineqri (cab (λ x3, ph x3)) (cab (λ x3, ps x3)) (cab (λ x3, wa (ph x3) (ps x3)))
  (λ y, @«3bitr4ri» (wsb (λ x3, wa (ph x3) (ps x3)) y) (wa (wsb (λ x3, ph x3) y) (wsb (λ x3, ps x3) y)) (wcel (cv y) (cab (λ x3, wa (ph x3) (ps x3)))) (wa (wcel (cv y) (cab (λ x3, ph x3))) (wcel (cv y) (cab (λ x3, ps x3))))
    (@sban (λ x3, ph x3) (λ x3, ps x3) y)
    (@df_clab (λ x3, wa (ph x3) (ps x3)) y)
    (@anbi12i (wcel (cv y) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) y) (wcel (cv y) (cab (λ x3, ps x3))) (wsb (λ x3, ps x3) y)
      (@df_clab (λ x3, ph x3) y)
      (@df_clab (λ x3, ps x3) y)))


/-- Difference of two class abstractions. (Contributed by NM, 23-Oct-2004.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem difab {ph ps : setvar → wff} :
  ⊦ wceq (cdif (cab (λ x3, ph x3)) (cab (λ x3, ps x3))) (cab (λ x3, wa (ph x3) (wn (ps x3)))) :=
@difeqri (cab (λ x3, ph x3)) (cab (λ x3, ps x3)) (cab (λ x3, wa (ph x3) (wn (ps x3))))
  (λ y, @«3bitrri» (wcel (cv y) (cab (λ x3, wa (ph x3) (wn (ps x3))))) (wsb (λ x3, wa (ph x3) (wn (ps x3))) y) (wa (wsb (λ x3, ph x3) y) (wsb (λ x3, wn (ps x3)) y)) (wa (wcel (cv y) (cab (λ x3, ph x3))) (wn (wcel (cv y) (cab (λ x3, ps x3)))))
    (@df_clab (λ x3, wa (ph x3) (wn (ps x3))) y)
    (@sban (λ x3, ph x3) (λ x3, wn (ps x3)) y)
    (@anbi12i (wsb (λ x3, ph x3) y) (wcel (cv y) (cab (λ x3, ph x3))) (wsb (λ x3, wn (ps x3)) y) (wn (wcel (cv y) (cab (λ x3, ps x3))))
      (@bicomi (wcel (cv y) (cab (λ x3, ph x3))) (wsb (λ x3, ph x3) y)
        (@df_clab (λ x3, ph x3) y))
      (@xchbinxr (wsb (λ x3, wn (ps x3)) y) (wsb (λ x3, ps x3) y) (wcel (cv y) (cab (λ x3, ps x3)))
        (@sbn (λ x3 y, ps x3) y)
        (@df_clab (λ x3, ps x3) y))))


/-- Union of two restricted class abstractions. (Contributed by NM, 25-Mar-2004.) -/
theorem unrab {ph ps : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wceq (cun (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (crab (λ x3, wo (ph x3) (ps x3)) (λ x3, A2 x3)) :=
@eqtr4i (cun (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (cun (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (crab (λ x3, wo (ph x3) (ps x3)) (λ x3, A2 x3))
  (@uneq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (crab (λ x3, ps x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
    (@df_rab (λ x3, ps x3) (λ x3, A2 x3)))
  (@eqtr4i (crab (λ x3, wo (ph x3) (ps x3)) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wo (ph x3) (ps x3)))) (cun (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))))
    (@df_rab (λ x3, wo (ph x3) (ps x3)) (λ x3, A2 x3))
    (@eqtr4i (cun (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (cab (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wo (ph x3) (ps x3))))
      (@unab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
      (@abbii (λ x3, wa (wcel (cv x3) (A2 x3)) (wo (ph x3) (ps x3))) (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))
        (λ x3, @andi (wcel (cv x3) (A2 x3)) (ph x3) (ps x3)))))


/-- Intersection of two restricted class abstractions. (Contributed by NM, 1-Sep-2006.) -/
theorem inrab {ph ps : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wceq (cin (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (crab (λ x3, wa (ph x3) (ps x3)) (λ x3, A2 x3)) :=
@eqtr4i (cin (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (crab (λ x3, wa (ph x3) (ps x3)) (λ x3, A2 x3))
  (@ineq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (crab (λ x3, ps x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
    (@df_rab (λ x3, ps x3) (λ x3, A2 x3)))
  (@eqtr4i (crab (λ x3, wa (ph x3) (ps x3)) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (ps x3)))) (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))))
    (@df_rab (λ x3, wa (ph x3) (ps x3)) (λ x3, A2 x3))
    (@eqtr4i (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (cab (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (ps x3))))
      (@inab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
      (@abbii (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (ps x3))) (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (A2 x3)) (ps x3)))
        (λ x3, @anandi (wcel (cv x3) (A2 x3)) (ph x3) (ps x3)))))


/-- Intersection with a restricted class abstraction. (Contributed by NM, 19-Nov-2007.) -/
theorem inrab2 {ph : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} :
  ⊦ wceq (cin (crab (λ x3, ph x3) (λ x3, A2 x3)) B2) (crab (λ x3, ph x3) (λ x3, cin (A2 x3) B2)) :=
@eqtr4i (cin (crab (λ x3, ph x3) (λ x3, A2 x3)) B2) (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wcel (cv x3) B2))) (crab (λ x3, ph x3) (λ x3, cin (A2 x3) B2))
  (@ineq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) B2 (cab (λ x3, wcel (cv x3) B2))
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
    (@abid1 B2))
  (@eqtr4i (crab (λ x3, ph x3) (λ x3, cin (A2 x3) B2)) (cab (λ x3, wa (wcel (cv x3) (cin (A2 x3) B2)) (ph x3))) (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wcel (cv x3) B2)))
    (@df_rab (λ x3, ph x3) (λ x3, cin (A2 x3) B2))
    (@eqtr4i (cin (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wcel (cv x3) B2))) (cab (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2))) (cab (λ x3, wa (wcel (cv x3) (cin (A2 x3) B2)) (ph x3)))
      (@inab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wcel (cv x3) B2))
      (@abbii (λ x3, wa (wcel (cv x3) (cin (A2 x3) B2)) (ph x3)) (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2))
        (λ x3, @bitri (wa (wcel (cv x3) (cin (A2 x3) B2)) (ph x3)) (wa (wa (wcel (cv x3) (A2 x3)) (wcel (cv x3) B2)) (ph x3)) (wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wcel (cv x3) B2))
          (@anbi1i (wcel (cv x3) (cin (A2 x3) B2)) (wa (wcel (cv x3) (A2 x3)) (wcel (cv x3) B2)) (ph x3)
            (@elin (cv x3) (A2 x3) B2))
          (@an32 (wcel (cv x3) (A2 x3)) (wcel (cv x3) B2) (ph x3))))))


/-- Difference of two restricted class abstractions. (Contributed by NM, 23-Oct-2004.) -/
theorem difrab {ph ps : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wceq (cdif (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (crab (λ x3, wa (ph x3) (wn (ps x3))) (λ x3, A2 x3)) :=
@eqtr4i (cdif (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ps x3) (λ x3, A2 x3))) (cdif (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (crab (λ x3, wa (ph x3) (wn (ps x3))) (λ x3, A2 x3))
  (@difeq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (crab (λ x3, ps x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
    (@df_rab (λ x3, ps x3) (λ x3, A2 x3)))
  (@eqtr4i (crab (λ x3, wa (ph x3) (wn (ps x3))) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (wn (ps x3))))) (cdif (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3))))
    (@df_rab (λ x3, wa (ph x3) (wn (ps x3))) (λ x3, A2 x3))
    (@eqtr4i (cdif (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))) (cab (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (wn (ps x3)))))
      (@difab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (A2 x3)) (ps x3)))
      (@abbii (λ x3, wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (wn (ps x3)))) (λ x3, wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))))
        (λ x3, @bitr3i (wa (wcel (cv x3) (A2 x3)) (wa (ph x3) (wn (ps x3)))) (wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (ps x3))) (wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))))
          (@anass (wcel (cv x3) (A2 x3)) (ph x3) (wn (ps x3)))
          (@impbii (wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (ps x3))) (wa (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))))
            (@anim2i (wn (ps x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))) (wa (wcel (cv x3) (A2 x3)) (ph x3))
              (@con3i (wa (wcel (cv x3) (A2 x3)) (ps x3)) (ps x3)
                (@simpr (wcel (cv x3) (A2 x3)) (ps x3))))
            (@imdistani (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wn (wa (wcel (cv x3) (A2 x3)) (ps x3))) (wn (ps x3))
              (@con3d (wa (wcel (cv x3) (A2 x3)) (ph x3)) (ps x3) (wa (wcel (cv x3) (A2 x3)) (ps x3))
                (@adantr (wcel (cv x3) (A2 x3)) (wi (ps x3) (wa (wcel (cv x3) (A2 x3)) (ps x3))) (ph x3)
                  (@pm3_2 (wcel (cv x3) (A2 x3)) (ps x3))))))))))


/-- Alternate definition of restricted class abstraction. (Contributed by Mario Carneiro,
8-Sep-2013.) -/
theorem dfrab3 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, A2)) (cin A2 (cab (λ x3, ph x3))) :=
@«3eqtr2i» (crab (λ x3, ph x3) (λ x3, A2)) (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) (cin (cab (λ x3, wcel (cv x3) A2)) (cab (λ x3, ph x3))) (cin A2 (cab (λ x3, ph x3)))
  (@df_rab (λ x3, ph x3) (λ x3, A2))
  (@inab (λ x3, wcel (cv x3) A2) (λ x3, ph x3))
  (@ineq1i (cab (λ x3, wcel (cv x3) A2)) A2 (cab (λ x3, ph x3))
    (@abid2 A2))


/-- Complementation of restricted class abstractions. (Contributed by Mario Carneiro, 3-Sep-2015.)
-/
theorem notrab {ph : setvar → wff} {A2 : «class»} :
  ⊦ wceq (cdif A2 (crab (λ x3, ph x3) (λ x3, A2))) (crab (λ x3, wn (ph x3)) (λ x3, A2)) :=
@«3eqtr4i» (cdif (cab (λ x3, wcel (cv x3) A2)) (cab (λ x3, ph x3))) (cab (λ x3, wa (wcel (cv x3) A2) (wn (ph x3)))) (cdif A2 (crab (λ x3, ph x3) (λ x3, A2))) (crab (λ x3, wn (ph x3)) (λ x3, A2))
  (@difab (λ x3, wcel (cv x3) A2) (λ x3, ph x3))
  (@«3eqtr4i» (cdif A2 (cin A2 (cab (λ x3, ph x3)))) (cdif A2 (cab (λ x3, ph x3))) (cdif A2 (crab (λ x3, ph x3) (λ x3, A2))) (cdif (cab (λ x3, wcel (cv x3) A2)) (cab (λ x3, ph x3)))
    (@difin A2 (cab (λ x3, ph x3)))
    (@difeq2i (crab (λ x3, ph x3) (λ x3, A2)) (cin A2 (cab (λ x3, ph x3))) A2
      (@dfrab3 (λ x3, ph x3) A2))
    (@difeq1i (cab (λ x3, wcel (cv x3) A2)) A2 (cab (λ x3, ph x3))
      (@abid2 A2)))
  (@df_rab (λ x3, wn (ph x3)) (λ x3, A2))


/-- Abstraction restricted to a union. (Contributed by Stefan O'Rear, 5-Feb-2015.) -/
theorem rabun2 {ph : setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (cun (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ph x3) (λ x3, B2 x3))) :=
@eqtr4i (crab (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3))) (cab (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (cun (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ph x3) (λ x3, B2 x3)))
  (@df_rab (λ x3, ph x3) (λ x3, cun (A2 x3) (B2 x3)))
  (@eqtr4i (cun (crab (λ x3, ph x3) (λ x3, A2 x3)) (crab (λ x3, ph x3) (λ x3, B2 x3))) (cun (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))) (cab (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)))
    (@uneq12i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (crab (λ x3, ph x3) (λ x3, B2 x3)) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (@df_rab (λ x3, ph x3) (λ x3, A2 x3))
      (@df_rab (λ x3, ph x3) (λ x3, B2 x3)))
    (@eqtr4i (cab (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3))) (cab (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))) (cun (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3))))
      (@abbii (λ x3, wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)) (λ x3, wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
        (λ x3, @bitri (wa (wcel (cv x3) (cun (A2 x3) (B2 x3))) (ph x3)) (wa (wo (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)) (wo (wa (wcel (cv x3) (A2 x3)) (ph x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
          (@anbi1i (wcel (cv x3) (cun (A2 x3) (B2 x3))) (wo (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3))) (ph x3)
            (@elun (cv x3) (A2 x3) (B2 x3)))
          (@andir (wcel (cv x3) (A2 x3)) (wcel (cv x3) (B2 x3)) (ph x3))))
      (@unab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)) (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))))


/-- Transfer uniqueness to a smaller subclass. (Contributed by NM, 20-Oct-2005.) -/
theorem reuss2 {ph ps : setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wa (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (wa (wrex (λ x3, ph x3) (λ x3, A2)) (wreu (λ x3, ps x3) (λ x3, B2)))) (wreu (λ x3, ph x3) (λ x3, A2)) :=
@sylan2b (wa (wrex (λ x3, ph x3) (λ x3, A2)) (wreu (λ x3, ps x3) (λ x3, B2))) (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (weu (λ x3, wa (wcel (cv x3) B2) (ps x3)))) (wreu (λ x3, ph x3) (λ x3, A2))
  (@anbi12i (wrex (λ x3, ph x3) (λ x3, A2)) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wreu (λ x3, ps x3) (λ x3, B2)) (weu (λ x3, wa (wcel (cv x3) B2) (ps x3)))
    (@df_rex (λ x3, ph x3) (λ x3, A2))
    (@df_reu (λ x3, ps x3) (λ x3, B2)))
  (@sylibr (wa (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (weu (λ x3, wa (wcel (cv x3) B2) (ps x3))))) (weu (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wreu (λ x3, ph x3) (λ x3, A2))
    (@imp32 (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (weu (λ x3, wa (wcel (cv x3) B2) (ps x3))) (weu (λ x3, wa (wcel (cv x3) A2) (ph x3)))
      (@syl9 (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (weu (λ x3, wa (wcel (cv x3) B2) (ps x3))) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (weu (λ x3, wa (wcel (cv x3) A2) (ph x3)))
        (@syl (wa (wss A2 B2) (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))) (wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ps x3)))) (wi (weu (λ x3, wa (wcel (cv x3) B2) (ps x3))) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3))))
          (@sylan2b (wral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2)) (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wi (ph x3) (ps x3)))) (wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ps x3))))
            (@df_ral (λ x3, wi (ph x3) (ps x3)) (λ x3, A2))
            (@imp (wss A2 B2) (wal (λ x3, wi (wcel (cv x3) A2) (wi (ph x3) (ps x3)))) (wal (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ps x3))))
              (@alimdv (wss A2 B2) (λ x3, wi (wcel (cv x3) A2) (wi (ph x3) (ps x3))) (λ x3, wi (wa (wcel (cv x3) A2) (ph x3)) (wa (wcel (cv x3) B2) (ps x3)))
                (λ x3, @imp4a (wss A2 B2) (wi (wcel (cv x3) A2) (wi (ph x3) (ps x3))) (wcel (cv x3) A2) (ph x3) (wa (wcel (cv x3) B2) (ps x3))
                  (@a2d (wss A2 B2) (wcel (cv x3) A2) (wi (ph x3) (ps x3)) (wi (ph x3) (wa (wcel (cv x3) B2) (ps x3)))
                    (@syl6 (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wi (wi (ph x3) (ps x3)) (wi (ph x3) (wa (wcel (cv x3) B2) (ps x3))))
                      (@ssel A2 B2 (cv x3))
                      (@imim2d (wcel (cv x3) B2) (ps x3) (wa (wcel (cv x3) B2) (ps x3)) (ph x3)
                        (@pm3_2 (wcel (cv x3) B2) (ps x3)))))))))
          (@euimmo (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ x3, wa (wcel (cv x3) B2) (ps x3))))
        (@simplbi2 (weu (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wmo (λ x3, wa (wcel (cv x3) A2) (ph x3)))
          (@df_eu (λ x3, wa (wcel (cv x3) A2) (ph x3))))))
    (@df_reu (λ x3, ph x3) (λ x3, A2)))


-- /-- Extend class notation to include the empty set. -/
-- constant c0 : «class»


-- /-- Define the empty set. More precisely, we should write "empty class". It will be posited in ~
-- ax-nul that an empty set exists. Then, by uniqueness among classes ( ~ eq0 , as opposed to the
-- weaker uniqueness among sets, ~ nulmo ), it will follow that ` (/) ` is indeed a set ( ~ 0ex ).
-- Special case of Exercise 4.10(o) of [Mendelson] p. 231. For a more traditional definition, but
-- requiring a dummy variable, see ~ dfnul2 . (Contributed by NM, 17-Jun-1993.) Clarify that at this
-- point, it is not established that it is a set. (Revised by BJ, 22-Sep-2022.) -/
-- axiom df_nul : ⊦ wceq c0 (cdif cvv cvv)


/-- Alternate definition of the empty class/set. (Contributed by BJ, 30-Nov-2019.) Avoid ~ ax-8 , ~
df-clel . (Revised by Gino Giotto, 3-Sep-2024.) Prove directly from definition to allow shortening ~
dfnul2 . (Revised by BJ, 23-Sep-2024.) -/
theorem dfnul4 :
  ⊦ wceq c0 (cab (λ x3, wfal)) :=
@«3eqtri» c0 (cdif cvv cvv) (cab (λ x3, wa (wcel (cv x3) cvv) (wn (wcel (cv x3) cvv)))) (cab (λ x3, wfal))
  df_nul
  (@df_dif cvv cvv)
  (@abbii (λ x3, wa (wcel (cv x3) cvv) (wn (wcel (cv x3) cvv))) (λ x3, wfal)
    (λ x3, @bifal (wa (wcel (cv x3) cvv) (wn (wcel (cv x3) cvv)))
      (@pm3_24 (wcel (cv x3) cvv))))


/-- Alternate definition of the empty set. Definition 5.14 of [TakeutiZaring] p. 20. (Contributed by
NM, 26-Dec-1996.) Remove dependency on ~ ax-10 , ~ ax-11 , and ~ ax-12 . (Revised by Steven Nguyen,
3-May-2023.) (Proof shortened by BJ, 23-Sep-2024.) -/
theorem dfnul2 :
  ⊦ wceq c0 (cab (λ x3, wn (wceq (cv x3) (cv x3)))) :=
@eqtri c0 (cab (λ x3, wfal)) (cab (λ x3, wn (wceq (cv x3) (cv x3))))
  dfnul4
  (@abbii (λ x3, wfal) (λ x3, wn (wceq (cv x3) (cv x3)))
    (λ x3, @«2false» wfal (wn (wceq (cv x3) (cv x3)))
      fal
      (@notnoti (wceq (cv x3) (cv x3))
        (@equid x3))))


/-- Alternate definition of the empty set. (Contributed by NM, 25-Mar-2004.) (Proof shortened by BJ,
23-Sep-2024.) -/
theorem dfnul3 {A2 : setvar → «class»} :
  ⊦ wceq c0 (crab (λ x3, wn (wcel (cv x3) (A2 x3))) (λ x3, A2 x3)) :=
@«3eqtr4i» (cab (λ x3, wfal)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wn (wcel (cv x3) (A2 x3))))) c0 (crab (λ x3, wn (wcel (cv x3) (A2 x3))) (λ x3, A2 x3))
  (@abbii (λ x3, wfal) (λ x3, wa (wcel (cv x3) (A2 x3)) (wn (wcel (cv x3) (A2 x3))))
    (λ x3, @«2false» wfal (wa (wcel (cv x3) (A2 x3)) (wn (wcel (cv x3) (A2 x3))))
      fal
      (@pm3_24 (wcel (cv x3) (A2 x3)))))
  dfnul4
  (@df_rab (λ x3, wn (wcel (cv x3) (A2 x3))) (λ x3, A2 x3))


/-- The empty set has no elements. Theorem 6.14 of [Quine] p. 44. (Contributed by NM, 21-Jun-1993.)
(Proof shortened by Mario Carneiro, 1-Sep-2015.) Remove dependency on ~ ax-10 , ~ ax-11 , and ~
ax-12 . (Revised by Steven Nguyen, 3-May-2023.) (Proof shortened by BJ, 23-Sep-2024.) -/
theorem noel {A2 : «class»} :
  ⊦ wn (wcel A2 c0) :=
@mtbir (wcel A2 c0) (wex (λ x3, wa (wceq (cv x3) A2) (wcel (cv x3) c0)))
  (@nex (λ x3, wa (wceq (cv x3) A2) (wcel (cv x3) c0))
    (λ x3, @intnan (wcel (cv x3) c0) (wceq (cv x3) A2)
      (@mtbir (wcel (cv x3) c0) (wsb (λ y, wfal) x3)
        (setvar.forget $ λ y : setvar,
          show ⊦ wn (wsb (λ y, wfal) x3), from
          @mpg (λ y, wn wfal) (λ y, wn (wsb (λ y, wfal) x3))
            (λ y, @nsb (λ y, wfal) x3)
            (λ y, fal) y)
        (@bitri (wcel (cv x3) c0) (wcel (cv x3) (cab (λ y, wfal))) (wsb (λ y, wfal) x3)
          (@eleq2i c0 (cab (λ y, wfal)) (cv x3)
            dfnul4)
          (@df_clab (λ y, wfal) x3)))))
  (@dfclel A2 c0)


/-- The empty set has no elements. (Contributed by Peter Mazsa, 4-Jan-2018.) -/
theorem nel02 {A2 B2 : «class»} :
  ⊦ wi (wceq A2 c0) (wn (wcel B2 A2)) :=
@mtbiri (wceq A2 c0) (wcel B2 A2) (wcel B2 c0)
  (@noel B2)
  (@eleq2 A2 c0 B2)


/-- If a class has elements, then it is not empty. (Contributed by NM, 31-Dec-1993.) -/
theorem n0i {A2 B2 : «class»} :
  ⊦ wi (wcel B2 A2) (wn (wceq A2 c0)) :=
@con2i (wceq A2 c0) (wcel B2 A2)
  (@mtbiri (wceq A2 c0) (wcel B2 A2) (wcel B2 c0)
    (@noel B2)
    (@eleq2 A2 c0 B2))


/-- If a class has elements, then it is nonempty. (Contributed by NM, 31-Dec-1993.) -/
theorem ne0i {A2 B2 : «class»} :
  ⊦ wi (wcel B2 A2) (wne A2 c0) :=
@neqned (wcel B2 A2) A2 c0
  (@n0i A2 B2)


/-- Deduction form of ~ ne0i . If a class has elements, then it is nonempty. (Contributed by Glauco
Siliprandi, 23-Oct-2021.) -/
theorem ne0d {ph : wff} {A2 B2 : «class»}
  (ne0d_1 : ⊦ wi ph (wcel B2 A2)) :
  ⊦ wi ph (wne A2 c0) :=
@syl ph (wcel B2 A2) (wne A2 c0)
  ne0d_1
  (@ne0i A2 B2)


/-- If a class has elements, then it is not empty. Inference associated with ~ n0i . (Contributed by
BJ, 15-Jul-2021.) -/
theorem n0ii {A2 B2 : «class»}
  (n0ii_1 : ⊦ wcel A2 B2) :
  ⊦ wn (wceq B2 c0) :=
@ax_mp (wcel A2 B2) (wn (wceq B2 c0))
  n0ii_1
  (@n0i B2 A2)


/-- If a class has elements, then it is nonempty. Inference associated with ~ ne0i . (Contributed by
Glauco Siliprandi, 11-Dec-2019.) -/
theorem ne0ii {A2 B2 : «class»}
  (n0ii_1 : ⊦ wcel A2 B2) :
  ⊦ wne B2 c0 :=
@ax_mp (wcel A2 B2) (wne B2 c0)
  n0ii_1
  (@ne0i B2 A2)


/-- The universal class is not equal to the empty set. (Contributed by NM, 11-Sep-2008.) Avoid ~
ax-8 , ~ df-clel . (Revised by Gino Giotto, 6-Sep-2024.) -/
theorem vn0 :
  ⊦ wne cvv c0 :=
@neir cvv c0
  (@mtbi (wal (λ y, wb (wcel (cv y) (cab (λ x3, wtru))) (wcel (cv y) (cab (λ x3, wfal))))) (wceq cvv c0)
    (@mtbi (wal (λ y, wb wtru wfal)) (wal (λ y, wb (wcel (cv y) (cab (λ x3, wtru))) (wcel (cv y) (cab (λ x3, wfal)))))
      (@mpbi (wex (λ y, wn (wb wtru wfal))) (wn (wal (λ y, wb wtru wfal)))
        (@exgen (λ y, wn (wb wtru wfal))
          (λ y, @mtbi wfal (wb wtru wfal)
            fal
            (@mptru (wb wfal (wb wtru wfal))
              (@pm5_501 wtru wfal))))
        (@exnal (λ y, wb wtru wfal)))
      (@albii (λ y, wb wtru wfal) (λ y, wb (wcel (cv y) (cab (λ x3, wtru))) (wcel (cv y) (cab (λ x3, wfal))))
        (λ y, @bibi12i wtru (wcel (cv y) (cab (λ x3, wtru))) wfal (wcel (cv y) (cab (λ x3, wfal)))
          (@bitr2i (wcel (cv y) (cab (λ x3, wtru))) (wsb (λ x3, wtru) y) wtru
            (@df_clab (λ x3, wtru) y)
            (@sbv wtru y))
          (@bitr2i (wcel (cv y) (cab (λ x3, wfal))) (wsb (λ x3, wfal) y) wfal
            (@df_clab (λ x3, wfal) y)
            (@sbv wfal y)))))
    (@bitr3i (wal (λ y, wb (wcel (cv y) (cab (λ x3, wtru))) (wcel (cv y) (cab (λ x3, wfal))))) (wceq (cab (λ x3, wtru)) (cab (λ x3, wfal))) (wceq cvv c0)
      (@dfcleq (cab (λ x3, wtru)) (cab (λ x3, wfal)))
      (@eqeq12i (cab (λ x3, wtru)) cvv (cab (λ x3, wfal)) c0
        (@eqcomi cvv (cab (λ x3, wtru))
          dfv2)
        (@eqcomi c0 (cab (λ x3, wfal))
          dfnul4))))


/-- A class is equal to the empty set if and only if it has no elements. Theorem 2 of [Suppes] p.
22. (Contributed by NM, 29-Aug-1993.) Avoid ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto and Steven
Nguyen, 28-Jun-2024.) Avoid ~ ax-8 , ~ df-clel . (Revised by Gino Giotto, 6-Sep-2024.) -/
theorem eq0 {A2 : «class»} :
  ⊦ wb (wceq A2 c0) (wal (λ x3, wn (wcel (cv x3) A2))) :=
@bitri (wceq A2 c0) (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wn (wcel (cv x3) A2)))
  (@eqeq2i c0 (cab (λ y, wfal)) A2
    dfnul4)
  (@bitri (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal))))) (wal (λ x3, wn (wcel (cv x3) A2)))
    (@dfcleq A2 (cab (λ y, wfal)))
    (@albii (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))) (λ x3, wn (wcel (cv x3) A2))
      (λ x3, @bitr4i (wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))) (wb (wcel (cv x3) A2) wfal) (wn (wcel (cv x3) A2))
        (@bibi2i (wcel (cv x3) (cab (λ y, wfal))) wfal (wcel (cv x3) A2)
          (@bitri (wcel (cv x3) (cab (λ y, wfal))) (wsb (λ y, wfal) x3) wfal
            (@df_clab (λ y, wfal) x3)
            (@sbv wfal x3)))
        (@nbfal (wcel (cv x3) A2)))))


/-- A class is not empty if and only if it has at least one element. Proposition 5.17(1) of
[TakeutiZaring] p. 20. (Contributed by NM, 21-Jun-1993.) Avoid ~ ax-11 , ~ ax-12 . (Revised by Gino
Giotto, 28-Jun-2024.) -/
theorem neq0 {A2 : «class»} :
  ⊦ wb (wn (wceq A2 c0)) (wex (λ x3, wcel (cv x3) A2)) :=
@bicomi (wex (λ x3, wcel (cv x3) A2)) (wn (wceq A2 c0))
  (@xchbinxr (wex (λ x3, wcel (cv x3) A2)) (wal (λ x3, wn (wcel (cv x3) A2))) (wceq A2 c0)
    (@df_ex (λ x3, wcel (cv x3) A2))
    (@eq0 A2))


/-- A class is nonempty if and only if it has at least one element. Proposition 5.17(1) of
[TakeutiZaring] p. 20. (Contributed by NM, 29-Sep-2006.) Avoid ~ ax-11 , ~ ax-12 . (Revised by Gino
Giotto, 28-Jun-2024.) -/
theorem n0 {A2 : «class»} :
  ⊦ wb (wne A2 c0) (wex (λ x3, wcel (cv x3) A2)) :=
@bitri (wne A2 c0) (wn (wceq A2 c0)) (wex (λ x3, wcel (cv x3) A2))
  (@df_ne A2 c0)
  (@neq0 A2)


/-- From the general negation of membership in ` A ` , infer that ` A ` is the empty set.
(Contributed by BJ, 6-Oct-2018.) -/
theorem nel0 {A2 : «class»}
  (nel0_1 : ∀ x3, ⊦ wn (wcel (cv x3) A2)) :
  ⊦ wceq A2 c0 :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq A2 c0, from
  @mpgbir (λ x3, wceq A2 c0) (λ x3, wn (wcel (cv x3) A2))
    (λ x3, @eq0 A2)
    (λ x3, nel0_1 x3) x3


/-- Vacuous restricted existential quantification is false. (Contributed by NM, 15-Oct-2003.) -/
theorem rex0 {ph : setvar → wff} :
  ⊦ wn (wrex (λ x3, ph x3) (λ x3, c0)) :=
@nrex (λ x3, ph x3) (λ x3, c0)
  (λ x3, @pm2_21i (wcel (cv x3) c0) (wn (ph x3))
    (@noel (cv x3)))


/-- Membership of the empty set in another class. (Contributed by NM, 29-Jun-2004.) -/
theorem «0el» {A2 : setvar → «class»}
  (y : setvar) : ⊦ wb (wcel c0 (A2 y)) (wrex (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))) (λ x3, A2 y)) :=
@bitri (wcel c0 (A2 y)) (wrex (λ x3, wceq (cv x3) c0) (λ x3, A2 y)) (wrex (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))) (λ x3, A2 y))
  (@risset c0 (A2 y))
  (@rexbii (λ x3, wceq (cv x3) c0) (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))) (λ x3, A2 y)
    (λ x3, @eq0 (cv x3)))


/-- Subclass expressed in terms of difference. Exercise 7 of [TakeutiZaring] p. 22. (Contributed by
NM, 29-Apr-1994.) -/
theorem ssdif0 {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cdif A2 B2) c0) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wn (wcel (cv x3) (cdif A2 B2)))) (wss A2 B2) (wceq (cdif A2 B2) c0)
  (@albii (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wn (wcel (cv x3) (cdif A2 B2)))
    (λ x3, @xchbinxr (wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) (cdif A2 B2))
      (@iman (wcel (cv x3) A2) (wcel (cv x3) B2))
      (@eldif (cv x3) A2 B2)))
  (@dfss2 A2 B2)
  (@eq0 (cdif A2 B2))


/-- A proper subclass has a nonempty difference. (Contributed by NM, 3-May-1994.) -/
theorem pssdifn0 {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 B2) (wne A2 B2)) (wne (cdif B2 A2) c0) :=
@imp (wss A2 B2) (wne A2 B2) (wne (cdif B2 A2) c0)
  (@necon3d (wss A2 B2) (cdif B2 A2) c0 A2 B2
    (@syl5bir (wceq (cdif B2 A2) c0) (wss B2 A2) (wss A2 B2) (wceq A2 B2)
      (@ssdif0 B2 A2)
      (@simplbi2 (wceq A2 B2) (wss A2 B2) (wss B2 A2)
        (@eqss A2 B2))))


/-- A proper subclass has a nonempty difference. (Contributed by Mario Carneiro, 27-Apr-2016.) -/
theorem pssdif {A2 B2 : «class»} :
  ⊦ wi (wpss A2 B2) (wne (cdif B2 A2) c0) :=
@sylbi (wpss A2 B2) (wa (wss A2 B2) (wne A2 B2)) (wne (cdif B2 A2) c0)
  (@df_pss A2 B2)
  (@pssdifn0 A2 B2)


/-- Difference, intersection, and subclass relationship. (Contributed by NM, 30-Apr-1994.) (Proof
shortened by Wolf Lammen, 30-Sep-2014.) -/
theorem difin0ss {A2 B2 C : «class»} :
  ⊦ wi (wceq (cin (cdif A2 B2) C) c0) (wi (wss C A2) (wss C B2)) :=
@sylbi (wceq (cin (cdif A2 B2) C) c0) (wal (λ x3, wn (wcel (cv x3) (cin (cdif A2 B2) C)))) (wi (wss C A2) (wss C B2))
  (@eq0 (cin (cdif A2 B2) C))
  (@«3imtr4g» (wal (λ x3, wn (wcel (cv x3) (cin (cdif A2 B2) C)))) (wal (λ x3, wi (wcel (cv x3) C) (wcel (cv x3) A2))) (wal (λ x3, wi (wcel (cv x3) C) (wcel (cv x3) B2))) (wss C A2) (wss C B2)
    (@al2imi (λ x3, wn (wcel (cv x3) (cin (cdif A2 B2) C))) (λ x3, wi (wcel (cv x3) C) (wcel (cv x3) A2)) (λ x3, wi (wcel (cv x3) C) (wcel (cv x3) B2))
      (λ x3, @sylbir (wn (wcel (cv x3) (cin (cdif A2 B2) C))) (wi (wcel (cv x3) C) (wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wi (wi (wcel (cv x3) C) (wcel (cv x3) A2)) (wi (wcel (cv x3) C) (wcel (cv x3) B2)))
        (@xchbinxr (wi (wcel (cv x3) C) (wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wa (wcel (cv x3) C) (wn (wi (wcel (cv x3) A2) (wcel (cv x3) B2)))) (wcel (cv x3) (cin (cdif A2 B2) C))
          (@iman (wcel (cv x3) C) (wi (wcel (cv x3) A2) (wcel (cv x3) B2)))
          (@«3bitri» (wcel (cv x3) (cin (cdif A2 B2) C)) (wa (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) C)) (wa (wcel (cv x3) C) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wa (wcel (cv x3) C) (wn (wi (wcel (cv x3) A2) (wcel (cv x3) B2))))
            (@elin (cv x3) (cdif A2 B2) C)
            (@anbi2ci (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) C)
              (@eldif (cv x3) A2 B2))
            (@anbi2i (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wn (wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wcel (cv x3) C)
              (@annim (wcel (cv x3) A2) (wcel (cv x3) B2)))))
        (@ax_2 (wcel (cv x3) C) (wcel (cv x3) A2) (wcel (cv x3) B2))))
    (@dfss2 C A2)
    (@dfss2 C B2))


/-- Intersection, subclass, and difference relationship. (Contributed by NM, 27-Oct-1996.) (Proof
shortened by Andrew Salmon, 26-Jun-2011.) (Proof shortened by Wolf Lammen, 30-Sep-2014.) -/
theorem inssdif0 {A2 B2 C : «class»} :
  ⊦ wb (wss (cin A2 B2) C) (wceq (cin A2 (cdif B2 C)) c0) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) C))) (wal (λ x3, wn (wcel (cv x3) (cin A2 (cdif B2 C))))) (wss (cin A2 B2) C) (wceq (cin A2 (cdif B2 C)) c0)
  (@albii (λ x3, wi (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) C)) (λ x3, wn (wcel (cv x3) (cin A2 (cdif B2 C))))
    (λ x3, @xchbinx (wi (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) C)) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) C))) (wcel (cv x3) (cin A2 (cdif B2 C)))
      (@bitri (wi (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) C)) (wi (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)) (wn (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) C))))
        (@imbi1i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)
          (@elin (cv x3) A2 B2))
        (@iman (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) C)))
      (@«3bitr4ri» (wa (wcel (cv x3) A2) (wcel (cv x3) (cdif B2 C))) (wa (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) C)))) (wcel (cv x3) (cin A2 (cdif B2 C))) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) C)))
        (@anbi2i (wcel (cv x3) (cdif B2 C)) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) C))) (wcel (cv x3) A2)
          (@eldif (cv x3) B2 C))
        (@elin (cv x3) A2 (cdif B2 C))
        (@anass (wcel (cv x3) A2) (wcel (cv x3) B2) (wn (wcel (cv x3) C))))))
  (@dfss2 (cin A2 B2) C)
  (@eq0 (cin A2 (cdif B2 C)))


/-- The difference between a class and itself is the empty set. Proposition 5.15 of [TakeutiZaring]
p. 20. Also Theorem 32 of [Suppes] p. 28. (Contributed by NM, 22-Apr-2004.) (Revised by David
Abernethy, 17-Jun-2012.) -/
theorem difid {A2 : «class»} :
  ⊦ wceq (cdif A2 A2) c0 :=
@eqtr4i (cdif A2 A2) (crab (λ x3, wn (wcel (cv x3) A2)) (λ x3, A2)) c0
  (@dfdif2 A2 A2)
  (@dfnul3 (λ x3, A2))


/-- The difference between a class and the empty set. Part of Exercise 4.4 of [Stoll] p. 16.
(Contributed by NM, 17-Aug-2004.) -/
theorem dif0 {A2 : «class»} :
  ⊦ wceq (cdif A2 c0) A2 :=
@eqtr3i (cdif A2 (cdif A2 A2)) (cdif A2 c0) A2
  (@difeq2i (cdif A2 A2) c0 A2
    (@difid A2))
  (@difdif A2 A2)


/-- The class of sets verifying a property is the empty class if and only if that property is a
contradiction. See also ~ abn0 (from which it could be proved using as many essential proof steps
but one fewer syntactic step, at the cost of depending on ~ df-ne ). (Contributed by BJ,
19-Mar-2021.) Avoid ~ df-clel , ~ ax-8 . (Revised by Gino Giotto, 30-Aug-2024.) (Proof shortened by
SN, 8-Sep-2024.) -/
theorem ab0 {ph : setvar → wff} :
  ⊦ wb (wceq (cab (λ x3, ph x3)) c0) (wal (λ x3, wn (ph x3))) :=
@«3bitr4ri» (wal (λ x3, wb (ph x3) wfal)) (wceq (cab (λ x3, ph x3)) (cab (λ x3, wfal))) (wal (λ x3, wn (ph x3))) (wceq (cab (λ x3, ph x3)) c0)
  (@abbi (λ x3, ph x3) (λ x3, wfal))
  (@albii (λ x3, wn (ph x3)) (λ x3, wb (ph x3) wfal)
    (λ x3, @nbfal (ph x3)))
  (@eqeq2i c0 (cab (λ x3, wfal)) (cab (λ x3, ph x3))
    dfnul4)


/-- Nonempty class abstraction. See also ~ ab0 . (Contributed by NM, 26-Dec-1996.) (Proof shortened
by Mario Carneiro, 11-Nov-2016.) Avoid ~ df-clel , ~ ax-8 . (Revised by Gino Giotto, 30-Aug-2024.)
-/
theorem abn0 {ph : setvar → wff} :
  ⊦ wb (wne (cab (λ x3, ph x3)) c0) (wex (λ x3, ph x3)) :=
@«3bitr4i» (wn (wceq (cab (λ x3, ph x3)) c0)) (wn (wal (λ x3, wn (ph x3)))) (wne (cab (λ x3, ph x3)) c0) (wex (λ x3, ph x3))
  (@notbii (wceq (cab (λ x3, ph x3)) c0) (wal (λ x3, wn (ph x3)))
    (@ab0 (λ x3, ph x3)))
  (@df_ne (cab (λ x3, ph x3)) c0)
  (@df_ex (λ x3, ph x3))


/-- Any restricted class abstraction restricted to the empty set is empty. (Contributed by NM,
15-Oct-2003.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) (Proof shortened by JJ, 14-Jul-2021.)
-/
theorem rab0 {ph : setvar → wff} :
  ⊦ wceq (crab (λ x3, ph x3) (λ x3, c0)) c0 :=
@eqtri (crab (λ x3, ph x3) (λ x3, c0)) (cab (λ x3, wa (wcel (cv x3) c0) (ph x3))) c0
  (@df_rab (λ x3, ph x3) (λ x3, c0))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wceq (cab (λ x3, wa (wcel (cv x3) c0) (ph x3))) c0, from
    @mpgbir (λ x3, wceq (cab (λ x3, wa (wcel (cv x3) c0) (ph x3))) c0) (λ x3, wn (wa (wcel (cv x3) c0) (ph x3)))
      (λ x3, @ab0 (λ x3, wa (wcel (cv x3) c0) (ph x3)))
      (λ x3, @intnanr (wcel (cv x3) c0) (ph x3)
        (@noel (cv x3))) x3)


/-- Condition for a restricted class abstraction to be empty. Version of ~ rabeq0 using implicit
substitution, which does not require ~ ax-10 , ~ ax-11 , ~ ax-12 , but requires ~ ax-8 .
(Contributed by Gino Giotto, 30-Sep-2024.) -/
theorem rabeq0w {ph ps : setvar → wff} {A2 : «class»}
  (rabeq0w_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wceq (crab (λ x3, ph x3) (λ x3, A2)) c0) (wral (λ y, wn (ps y)) (λ y, A2)) :=
@«3bitr4i» (wceq (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) c0) (wal (λ y, wn (wa (wcel (cv y) A2) (ps y)))) (wceq (crab (λ x3, ph x3) (λ x3, A2)) c0) (wral (λ y, wn (ps y)) (λ y, A2))
  (@bitri (wceq (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) c0) (wceq c0 (cab (λ x3, wa (wcel (cv x3) A2) (ph x3)))) (wal (λ y, wn (wa (wcel (cv y) A2) (ps y))))
    (@eqcom (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) c0)
    (@bitri (wceq c0 (cab (λ x3, wa (wcel (cv x3) A2) (ph x3)))) (wal (λ y, wb (wcel (cv y) c0) (wa (wcel (cv y) A2) (ps y)))) (wal (λ y, wn (wa (wcel (cv y) A2) (ps y))))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wb (wceq c0 (cab (λ x3, wa (wcel (cv x3) A2) (ph x3)))) (wal (λ y, wb (wcel (cv y) c0) (wa (wcel (cv y) A2) (ps y)))), from
        @abeq2w (λ x3, wa (wcel (cv x3) A2) (ph x3)) (λ y, wa (wcel (cv y) A2) (ps y)) (λ x3, c0)
          (λ x3 y, @anbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
            (@eleq1w (λ x3 y, A2) x3 y)
            (rabeq0w_1 x3 y)) x3)
      (@albii (λ y, wb (wcel (cv y) c0) (wa (wcel (cv y) A2) (ps y))) (λ y, wn (wa (wcel (cv y) A2) (ps y)))
        (λ y, @bitri (wb (wcel (cv y) c0) (wa (wcel (cv y) A2) (ps y))) (wb wfal (wa (wcel (cv y) A2) (ps y))) (wn (wa (wcel (cv y) A2) (ps y)))
          (@bibi1i (wcel (cv y) c0) wfal (wa (wcel (cv y) A2) (ps y))
            (@bifal (wcel (cv y) c0)
              (@noel (cv y))))
          (@impbii (wb wfal (wa (wcel (cv y) A2) (ps y))) (wn (wa (wcel (cv y) A2) (ps y)))
            (@bija wfal (wa (wcel (cv y) A2) (ps y)) (wn (wa (wcel (cv y) A2) (ps y)))
              (@falim (wi (wa (wcel (cv y) A2) (ps y)) (wn (wa (wcel (cv y) A2) (ps y)))))
              (@idd (wn wfal) (wn (wa (wcel (cv y) A2) (ps y)))))
            (@pm5_21ni wfal (wa (wcel (cv y) A2) (ps y)) (wa (wcel (cv y) A2) (ps y))
              (@falim (wa (wcel (cv y) A2) (ps y)))
              (@id (wa (wcel (cv y) A2) (ps y)))))))))
  (@eqeq1i (crab (λ x3, ph x3) (λ x3, A2)) (cab (λ x3, wa (wcel (cv x3) A2) (ph x3))) c0
    (@df_rab (λ x3, ph x3) (λ x3, A2)))
  (@raln (λ y, ps y) (λ y, A2))


/-- Condition for a restricted class abstraction to be empty. (Contributed by Jeff Madsen,
7-Jun-2010.) (Revised by BJ, 16-Jul-2021.) -/
theorem rabeq0 {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) c0) (wral (λ x3, wn (ph x3)) (λ x3, A2 x3)) :=
@«3bitr4i» (wceq (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) c0) (wal (λ x3, wn (wa (wcel (cv x3) (A2 x3)) (ph x3)))) (wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) c0) (wral (λ x3, wn (ph x3)) (λ x3, A2 x3))
  (@ab0 (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
  (@eqeq1i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) c0
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3)))
  (@raln (λ x3, ph x3) (λ x3, A2 x3))


/-- Nonempty restricted class abstraction. (Contributed by NM, 29-Aug-1999.) (Revised by BJ,
16-Jul-2021.) -/
theorem rabn0 {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wne (crab (λ x3, ph x3) (λ x3, A2 x3)) c0) (wrex (λ x3, ph x3) (λ x3, A2 x3)) :=
@bitr4i (wne (crab (λ x3, ph x3) (λ x3, A2 x3)) c0) (wn (wral (λ x3, wn (ph x3)) (λ x3, A2 x3))) (wrex (λ x3, ph x3) (λ x3, A2 x3))
  (@necon3abii (wral (λ x3, wn (ph x3)) (λ x3, A2 x3)) (crab (λ x3, ph x3) (λ x3, A2 x3)) c0
    (@rabeq0 (λ x3, ph x3) (λ x3, A2 x3)))
  (@dfrex2 (λ x3, ph x3) (λ x3, A2 x3))


/-- The union of a class with the empty set is itself. Theorem 24 of [Suppes] p. 27. (Contributed by
NM, 15-Jul-1993.) -/
theorem un0 {A2 : «class»} :
  ⊦ wceq (cun A2 c0) A2 :=
@uneqri A2 c0 A2
  (λ x3, @bicomi (wcel (cv x3) A2) (wo (wcel (cv x3) A2) (wcel (cv x3) c0))
    (@biorfi (wcel (cv x3) c0) (wcel (cv x3) A2)
      (@noel (cv x3))))


/-- The intersection of a class with the empty set is the empty set. Theorem 16 of [Suppes] p. 26.
(Contributed by NM, 21-Jun-1993.) -/
theorem in0 {A2 : «class»} :
  ⊦ wceq (cin A2 c0) c0 :=
@ineqri A2 c0 c0
  (λ x3, @bicomi (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) c0))
    (@bianfi (wcel (cv x3) c0) (wcel (cv x3) A2)
      (@noel (cv x3))))


/-- The intersection of the empty set with a class is the empty set. (Contributed by Glauco
Siliprandi, 17-Aug-2020.) -/
theorem «0in» {A2 : «class»} :
  ⊦ wceq (cin c0 A2) c0 :=
@eqtri (cin c0 A2) (cin A2 c0) c0
  (@incom c0 A2)
  (@in0 A2)


/-- The intersection of a class with the universal class is itself. Exercise 4.10(k) of [Mendelson]
p. 231. (Contributed by NM, 17-May-1998.) -/
theorem inv1 {A2 : «class»} :
  ⊦ wceq (cin A2 cvv) A2 :=
@eqssi (cin A2 cvv) A2
  (@inss1 A2 cvv)
  (@ssini A2 A2 cvv
    (@ssid A2)
    (@ssv A2))


/-- The null set is a subset of any class. Part of Exercise 1 of [TakeutiZaring] p. 22. (Contributed
by NM, 21-Jun-1993.) -/
theorem «0ss» {A2 : «class»} :
  ⊦ wss c0 A2 :=
@ssriv c0 A2
  (λ x3, @pm2_21i (wcel (cv x3) c0) (wcel (cv x3) A2)
    (@noel (cv x3)))


/-- Any subset of the empty set is empty. Theorem 5 of [Suppes] p. 23 and its converse. (Contributed
by NM, 17-Sep-2003.) -/
theorem ss0b {A2 : «class»} :
  ⊦ wb (wss A2 c0) (wceq A2 c0) :=
@bicomi (wceq A2 c0) (wss A2 c0)
  (@mpbiran2 (wceq A2 c0) (wss A2 c0) (wss c0 A2)
    (@«0ss» A2)
    (@eqss A2 c0))


/-- Any subset of the empty set is empty. Theorem 5 of [Suppes] p. 23. (Contributed by NM,
13-Aug-1994.) -/
theorem ss0 {A2 : «class»} :
  ⊦ wi (wss A2 c0) (wceq A2 c0) :=
@biimpi (wss A2 c0) (wceq A2 c0)
  (@ss0b A2)


/-- A subclass of an empty class is empty. (Contributed by NM, 7-Mar-2007.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem sseq0 {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 B2) (wceq B2 c0)) (wceq A2 c0) :=
@impcom (wceq B2 c0) (wss A2 B2) (wceq A2 c0)
  (@syl6bi (wceq B2 c0) (wss A2 B2) (wss A2 c0) (wceq A2 c0)
    (@sseq2 B2 c0 A2)
    (@ss0 A2))


/-- A class with a nonempty subclass is nonempty. (Contributed by NM, 17-Feb-2007.) -/
theorem ssn0 {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 B2) (wne A2 c0)) (wne B2 c0) :=
@imp (wss A2 B2) (wne A2 c0) (wne B2 c0)
  (@necon3d (wss A2 B2) B2 c0 A2 c0
    (@ex (wss A2 B2) (wceq B2 c0) (wceq A2 c0)
      (@sseq0 A2 B2)))


/-- A class abstraction determined by a false formula is empty. (Contributed by NM, 20-Jan-2012.)
Avoid ~ ax-8 , ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 30-Jun-2024.) -/
theorem abf {ph : setvar → wff}
  (abf_1 : ∀ x3, ⊦ wn (ph x3)) :
  ⊦ wceq (cab (λ x3, ph x3)) c0 :=
@eqtr4i (cab (λ x3, ph x3)) (cab (λ x3, wfal)) c0
  (@abbii (λ x3, ph x3) (λ x3, wfal)
    (λ x3, @bifal (ph x3)
      (abf_1 x3)))
  dfnul4


/-- Deduction for equality to the empty set. (Contributed by NM, 11-Jul-2014.) Avoid ~ ax-8 , ~
df-clel . (Revised by Gino Giotto, 6-Sep-2024.) -/
theorem eq0rdv {ph : wff} {A2 : «class»}
  (eq0rdv_1 : ∀ x3, ⊦ wi ph (wn (wcel (cv x3) A2))) :
  ⊦ wi ph (wceq A2 c0) :=
@sylib ph (wal (λ x3, wn (wcel (cv x3) A2))) (wceq A2 c0)
  (@alrimiv ph (λ x3, wn (wcel (cv x3) A2))
    (λ x3, eq0rdv_1 x3))
  (@«3bitrri» (wceq A2 c0) (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal))))) (wal (λ x3, wn (wcel (cv x3) A2)))
    (@eqeq2i c0 (cab (λ y, wfal)) A2
      dfnul4)
    (@dfcleq A2 (cab (λ y, wfal)))
    (@bitri (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal))))) (wal (λ x3, wb (wcel (cv x3) A2) wfal)) (wal (λ x3, wn (wcel (cv x3) A2)))
      (@albii (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))) (λ x3, wb (wcel (cv x3) A2) wfal)
        (λ x3, @bibi2i (wcel (cv x3) (cab (λ y, wfal))) wfal (wcel (cv x3) A2)
          (@bitri (wcel (cv x3) (cab (λ y, wfal))) (wsb (λ y, wfal) x3) wfal
            (@df_clab (λ y, wfal) x3)
            (@sbv wfal x3))))
      (@albii (λ x3, wb (wcel (cv x3) A2) wfal) (λ x3, wn (wcel (cv x3) A2))
        (λ x3, @bicomi (wn (wcel (cv x3) A2)) (wb (wcel (cv x3) A2) wfal)
          (@nbfal (wcel (cv x3) A2))))))


/-- The proper substitution of a proper class for a set into a class results in the empty set.
(Contributed by NM, 17-Aug-2018.) (Proof shortened by JJ, 27-Aug-2021.) -/
theorem csbprc {A2 B2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wn (wcel (A2 x3) cvv)) (wceq (csb (A2 x3) (λ x3, B2 x3)) c0) :=
@«3eqtr4g» (wn (wcel (A2 x3) cvv)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wfal)) (csb (A2 x3) (λ x3, B2 x3)) c0
  (@abbidv (wn (wcel (A2 x3) cvv)) (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)) (λ y, wfal)
    (λ y, @pm5_21ni (wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3)) (wcel (A2 x3) cvv) wfal
      (@sbcex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3) x3)
      (@falim (wcel (A2 x3) cvv))))
  (@df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
  (@eqcomi (cab (λ y, wfal)) c0
    (@abf (λ y, wfal)
      (λ y, fal)))


/-- Distribute proper substitution through an equality relation. (Contributed by NM, 10-Nov-2005.)
(Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem sbceqg {A2 B2 C V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wceq (B2 x3) (C x3)) (A2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)))) :=
@bitr4di (wcel (A2 x3) (V x3)) (wsbc (λ x3, wceq (B2 x3) (C x3)) (A2 x3)) (wceq (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3)))) (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)))
  (setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (A2 x3) (V x3)) (wb (wsbc (λ x3, wceq (B2 x3) (C x3)) (A2 x3)) (wceq (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3))))), from
    @vtoclbg (λ z, wsb (λ x3, wceq (B2 x3) (C x3)) z) (λ z, wceq (cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z))) (wsbc (λ x3, wceq (B2 x3) (C x3)) (A2 x3)) (wceq (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3)))) (A2 x3) (λ z, V x3)
      (λ z, @dfsbcq2 (λ x3, wceq (B2 x3) (C x3)) z (λ x3, A2 x3) x3)
      (λ z, @eqeq12d (wceq (cv z) (A2 x3)) (cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z)) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3)))
        (@abbidv (wceq (cv z) (A2 x3)) (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z) (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))
          (λ y, @dfsbcq2 (λ x3, wcel (cv y) (B2 x3)) z (λ x3, A2 x3) x3))
        (@abbidv (wceq (cv z) (A2 x3)) (λ y, wsb (λ x3, wcel (cv y) (C x3)) z) (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3))
          (λ y, @dfsbcq2 (λ x3, wcel (cv y) (C x3)) z (λ x3, A2 x3) x3)))
      (λ z, setvar.forget $ λ x3 : setvar,
        show ⊦ wb (wsb (λ x3, wceq (B2 x3) (C x3)) z) (wceq (cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z))), from
        @sbiev (λ x3 z, wceq (B2 x3) (C x3)) (λ x3 z, wceq (cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z)))
          (λ z, @nfeq (λ x3, cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (λ x3, cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z))
            (@nfab (λ x3 y, wsb (λ x3, wcel (cv y) (B2 x3)) z)
              (λ y, @nfs1v (λ x3 z, wcel (cv y) (B2 x3)) z))
            (@nfab (λ x3 y, wsb (λ x3, wcel (cv y) (C x3)) z)
              (λ y, @nfs1v (λ x3 z, wcel (cv y) (C x3)) z)))
          (λ x3 z, @eqeq12d (wceq (cv x3) (cv z)) (B2 x3) (cab (λ y, wsb (λ x3, wcel (cv y) (B2 x3)) z)) (C x3) (cab (λ y, wsb (λ x3, wcel (cv y) (C x3)) z))
            (@sbab (λ x3 z, B2 x3) x3 z)
            (@sbab (λ x3 z, C x3) x3 z)) x3 z) z)
  (@eqeq12i (csb (A2 x3) (λ x3, B2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) (csb (A2 x3) (λ x3, C x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (C x3)) (A2 x3)))
    (@df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
    (@df_csb (λ x3, A2 x3) (λ x3, C x3) x3))


/-- Conversion of implicit substitution to explicit class substitution. This version of ~ csbiedf
avoids a disjointness condition on ` x , A ` and ` x , D ` by substituting twice. Deduction form of
~ csbie2 . (Contributed by AV, 29-Mar-2024.) -/
theorem csbie2df {ph : setvar → wff} {A2 B2 : setvar → «class»} {C : setvar → setvar → «class»} {D : setvar → «class»} {V : setvar → setvar → «class»}
  (csbie2df_p : ⊦ wnf (λ x3, ph x3))
  (csbie2df_c : ∀ x3 y, ⊦ wi (ph x3) (wnfc (λ x3, C x3 y)))
  (csbie2df_d : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, D x3)))
  (csbie2df_a : ∀ x3 y, ⊦ wi (ph x3) (wcel (A2 x3) (V x3 y)))
  (csbie2df_1 : ∀ x3 y, ⊦ wi (wa (ph x3) (wceq (cv x3) (cv y))) (wceq (B2 x3) (C x3 y)))
  (csbie2df_2 : ∀ x3 y, ⊦ wi (wa (ph x3) (wceq (cv y) (A2 x3))) (wceq (C x3 y) (D x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3)) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3)), from
  @mpcom (wcel (A2 x3) (V x3 y)) (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))
    (csbie2df_a x3 y)
    (@mpbiri (wcel (A2 x3) (V x3 y)) (wi (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))) (wi (ph x3) (wceq (D x3) (D x3)))
      (@eqidd (ph x3) (D x3))
      (@vtoclbg (λ y, wi (ph x3) (wsbc (λ x3, wceq (B2 x3) (D x3)) (cv y))) (λ y, wi (ph x3) (wceq (C x3 y) (D x3))) (wi (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))) (wi (ph x3) (wceq (D x3) (D x3))) (A2 x3) (λ y, V x3 y)
        (λ y, @pm5_74da (wceq (cv y) (A2 x3)) (ph x3) (wsbc (λ x3, wceq (B2 x3) (D x3)) (cv y)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))
          (@sylan9bb (wceq (cv y) (A2 x3)) (wsbc (λ x3, wceq (B2 x3) (D x3)) (cv y)) (wsbc (λ x3, wceq (B2 x3) (D x3)) (A2 x3)) (ph x3) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))
            (@dfsbcq (λ x3, wceq (B2 x3) (D x3)) (λ x3, cv y) (λ x3, A2 x3) x3)
            (setvar.forget $ λ y : setvar,
              show ⊦ wi (ph x3) (wb (wsbc (λ x3, wceq (B2 x3) (D x3)) (A2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))), from
              @mpancom (wcel (A2 x3) (V x3 y)) (ph x3) (wb (wsbc (λ x3, wceq (B2 x3) (D x3)) (A2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3)))
                (csbie2df_a x3 y)
                (@bitrd (wa (wcel (A2 x3) (V x3 y)) (ph x3)) (wsbc (λ x3, wceq (B2 x3) (D x3)) (A2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, D x3))) (wceq (csb (A2 x3) (λ x3, B2 x3)) (D x3))
                  (@adantr (wcel (A2 x3) (V x3 y)) (wb (wsbc (λ x3, wceq (B2 x3) (D x3)) (A2 x3)) (wceq (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, D x3)))) (ph x3)
                    (@sbceqg (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, D x3) (λ x3, V x3 y) x3))
                  (@eqeq2d (wa (wcel (A2 x3) (V x3 y)) (ph x3)) (csb (A2 x3) (λ x3, D x3)) (D x3) (csb (A2 x3) (λ x3, B2 x3))
                    (@sylan2 (ph x3) (wcel (A2 x3) (V x3 y)) (wnfc (λ x3, D x3)) (wceq (csb (A2 x3) (λ x3, D x3)) (D x3))
                      (csbie2df_d x3)
                      (@csbtt (λ x3, A2 x3) (λ x3, D x3) (λ x3, V x3 y) x3)))))))
        (λ y, @pm5_74d (wceq (cv y) (A2 x3)) (ph x3) (wceq (C x3 y) (D x3)) (wceq (D x3) (D x3))
          (@expcom (ph x3) (wceq (cv y) (A2 x3)) (wb (wceq (C x3 y) (D x3)) (wceq (D x3) (D x3)))
            (@eqeq1d (wa (ph x3) (wceq (cv y) (A2 x3))) (C x3 y) (D x3) (D x3)
              (csbie2df_2 x3 y))))
        (λ y, @pm5_74i (ph x3) (wsbc (λ x3, wceq (B2 x3) (D x3)) (cv y)) (wceq (C x3 y) (D x3))
          (@bitr3id (wsbc (λ x3, wceq (B2 x3) (D x3)) (cv y)) (wsb (λ x3, wceq (B2 x3) (D x3)) y) (ph x3) (wceq (C x3 y) (D x3))
            (@sbsbc (λ x3, wceq (B2 x3) (D x3)) y)
            (@sbiedw (λ x3 y, ph x3) (λ x3 y, wceq (B2 x3) (D x3)) (λ x3 y, wceq (C x3 y) (D x3))
              (λ y, csbie2df_p)
              (λ x3 y, @nfeqd (λ x3, ph x3) (λ x3, C x3 y) (λ x3, D x3)
                (λ x3, csbie2df_c x3 y)
                (λ x3, csbie2df_d x3) x3)
              (λ x3 y, @ex (ph x3) (wceq (cv x3) (cv y)) (wb (wceq (B2 x3) (D x3)) (wceq (C x3 y) (D x3)))
                (@eqeq1d (wa (ph x3) (wceq (cv x3) (cv y))) (B2 x3) (C x3 y) (D x3)
                  (csbie2df_1 x3 y))) x3 y))) y))


/-- Two classes are empty iff their union is empty. (Contributed by NM, 11-Aug-2004.) -/
theorem un00 {A2 B2 : «class»} :
  ⊦ wb (wa (wceq A2 c0) (wceq B2 c0)) (wceq (cun A2 B2) c0) :=
@impbii (wa (wceq A2 c0) (wceq B2 c0)) (wceq (cun A2 B2) c0)
  (@eqtrdi (wa (wceq A2 c0) (wceq B2 c0)) (cun A2 B2) (cun c0 c0) c0
    (@uneq12 A2 c0 B2 c0)
    (@un0 c0))
  (@jca (wceq (cun A2 B2) c0) (wceq A2 c0) (wceq B2 c0)
    (@sylib (wceq (cun A2 B2) c0) (wss A2 c0) (wceq A2 c0)
      (@mpbii (wceq (cun A2 B2) c0) (wss A2 (cun A2 B2)) (wss A2 c0)
        (@ssun1 A2 B2)
        (@sseq2 (cun A2 B2) c0 A2))
      (@ss0b A2))
    (@sylib (wceq (cun A2 B2) c0) (wss B2 c0) (wceq B2 c0)
      (@mpbii (wceq (cun A2 B2) c0) (wss B2 (cun A2 B2)) (wss B2 c0)
        (@ssun2 B2 A2)
        (@sseq2 (cun A2 B2) c0 B2))
      (@ss0b B2)))


/-- The null set is a proper subset of any nonempty set. (Contributed by NM, 27-Feb-1996.) -/
theorem «0pss» {A2 : «class»} :
  ⊦ wb (wpss c0 A2) (wne A2 c0) :=
@bitri (wpss c0 A2) (wne c0 A2) (wne A2 c0)
  (@mpbiran (wpss c0 A2) (wss c0 A2) (wne c0 A2)
    (@«0ss» A2)
    (@df_pss c0 A2))
  (@necom c0 A2)


/-- No set is a proper subset of the empty set. (Contributed by NM, 17-Jun-1998.) (Proof shortened
by Andrew Salmon, 26-Jun-2011.) (Proof shortened by JJ, 14-Jul-2021.) -/
theorem npss0 {A2 : «class»} :
  ⊦ wn (wpss A2 c0) :=
@ax_mp (wss c0 A2) (wn (wpss A2 c0))
  (@«0ss» A2)
  (@ssnpss c0 A2)


/-- Two ways of saying that two classes are disjoint (have no members in common). (Contributed by
NM, 17-Feb-2004.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 28-Jun-2024.) -/
theorem disj {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 B2) c0) (wral (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2)) :=
@bitr4i (wceq (cin A2 B2) c0) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wral (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))
  (@«3bitri» (wceq (cin A2 B2) c0) (wceq (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))) c0) (wal (λ x3, wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0))) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))))
    (@eqeq1i (cin A2 B2) (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))) c0
      (@df_in A2 B2))
    (@«3bitr4i» (wceq c0 (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wal (λ x3, wb (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)))) (wceq (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))) c0) (wal (λ x3, wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0)))
      (@bitri (wceq c0 (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wal (λ x3, wb (wcel (cv x3) c0) (wcel (cv x3) (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)))))) (wal (λ x3, wb (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))))
        (@dfcleq c0 (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))))
        (@albii (λ x3, wb (wcel (cv x3) c0) (wcel (cv x3) (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))))) (λ x3, wb (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)))
          (λ x3, @bibi2i (wcel (cv x3) (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0)
            (@«3bitri» (wcel (cv x3) (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wsb (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)) x3) (wal (λ z, wi (wceq (cv z) (cv x3)) (wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))
              (@df_clab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2)) x3)
              (@sb6 (λ z x3, wa (wcel (cv z) A2) (wcel (cv z) B2)) x3)
              (@impbii (wal (λ z, wi (wceq (cv z) (cv x3)) (wa (wcel (cv z) A2) (wcel (cv z) B2)))) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))
                (@spimvw (λ z x3, wi (wceq (cv z) (cv x3)) (wa (wcel (cv z) A2) (wcel (cv z) B2))) (λ x3, wa (wcel (cv x3) A2) (wcel (cv x3) B2))
                  (λ z x3, @embantd (wceq (cv z) (cv x3)) (wceq (cv z) (cv x3)) (wa (wcel (cv z) A2) (wcel (cv z) B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))
                    (@id (wceq (cv z) (cv x3)))
                    (@anim12d (wceq (cv z) (cv x3)) (wcel (cv z) A2) (wcel (cv x3) A2) (wcel (cv z) B2) (wcel (cv x3) B2)
                      (@biimpd (wceq (cv z) (cv x3)) (wcel (cv z) A2) (wcel (cv x3) A2)
                        (@eleq1w (λ z x3, A2) z x3))
                      (@biimpd (wceq (cv z) (cv x3)) (wcel (cv z) B2) (wcel (cv x3) B2)
                        (@eleq1w (λ z x3, B2) z x3)))) x3)
                (@alrimiv (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ z, wi (wceq (cv z) (cv x3)) (wa (wcel (cv z) A2) (wcel (cv z) B2)))
                  (λ z, @anim12ii (wcel (cv x3) A2) (wceq (cv z) (cv x3)) (wcel (cv z) A2) (wcel (cv x3) B2) (wcel (cv z) B2)
                    (@eleq1a (cv x3) A2 (cv z))
                    (@eleq1a (cv x3) B2 (cv z)))))))))
      (@eqcom (cab (λ z, wa (wcel (cv z) A2) (wcel (cv z) B2))) c0)
      (@albii (λ x3, wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0)) (λ x3, wb (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)))
        (λ x3, @bicom (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0))))
    (@albii (λ x3, wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0)) (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))
      (λ x3, @bitr2i (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wn (wa (wcel (cv x3) A2) (wcel (cv x3) B2))) (wb (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) c0))
        (@imnan (wcel (cv x3) A2) (wcel (cv x3) B2))
        (@nbn (wcel (cv x3) c0) (wa (wcel (cv x3) A2) (wcel (cv x3) B2))
          (@noel (cv x3))))))
  (@df_ral (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))


/-- Two ways of saying that two classes are disjoint. (Contributed by Jeff Madsen, 19-Jun-2011.) -/
theorem disjr {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 B2) c0) (wral (λ x3, wn (wcel (cv x3) A2)) (λ x3, B2)) :=
@bitri (wceq (cin A2 B2) c0) (wceq (cin B2 A2) c0) (wral (λ x3, wn (wcel (cv x3) A2)) (λ x3, B2))
  (@eqeq1i (cin A2 B2) (cin B2 A2) c0
    (@incom A2 B2))
  (@disj B2 A2)


/-- Two ways of saying that two classes are disjoint (have no members in common). (Contributed by
NM, 19-Aug-1993.) -/
theorem disj1 {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 B2) c0) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) :=
@bitri (wceq (cin A2 B2) c0) (wral (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))))
  (@disj A2 B2)
  (@df_ral (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))


/-- Two ways of saying that two classes are disjoint, using the complement of ` B ` relative to a
universe ` C ` . (Contributed by NM, 15-Feb-2007.) (Proof shortened by Andrew Salmon, 26-Jun-2011.)
Avoid ~ ax-12 . (Revised by Gino Giotto, 28-Jun-2024.) -/
theorem reldisj {A2 B2 C : «class»} :
  ⊦ wi (wss A2 C) (wb (wceq (cin A2 B2) c0) (wss A2 (cdif C B2))) :=
@«3bitr4g» (wss A2 C) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2)))) (wceq (cin A2 B2) c0) (wss A2 (cdif C B2))
  (@albidv (wss A2 C) (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2)))
    (λ x3, @sylbi (wss A2 C) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))) (wb (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2))))
      (@dfss2 A2 C)
      (@syl (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C))) (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wb (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2))))
        (@spw (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) C)) (λ y, wi (wcel (cv y) A2) (wcel (cv y) C))
          (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv x3) C) (wcel (cv y) C)
            (@eleq1w (λ x3 y, A2) x3 y)
            (@eleq1w (λ x3 y, C) x3 y)) x3)
        (@bitr4di (wi (wcel (cv x3) A2) (wcel (cv x3) C)) (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wi (wcel (cv x3) A2) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2)))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cdif C B2)))
          (@pm5_44 (wcel (cv x3) A2) (wcel (cv x3) C) (wn (wcel (cv x3) B2)))
          (@imbi2i (wcel (cv x3) (cdif C B2)) (wa (wcel (cv x3) C) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)
            (@eldif (cv x3) C B2))))))
  (@disj1 A2 B2)
  (@dfss2 A2 (cdif C B2))


/-- Two ways of saying that two classes are disjoint. (Contributed by NM, 19-May-1998.) -/
theorem disj3 {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 B2) c0) (wceq A2 (cdif A2 B2)) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cdif A2 B2)))) (wceq (cin A2 B2) c0) (wceq A2 (cdif A2 B2))
  (@albii (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cdif A2 B2)))
    (λ x3, @bitr4i (wi (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wb (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wb (wcel (cv x3) A2) (wcel (cv x3) (cdif A2 B2)))
      (@pm4_71 (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))
      (@bibi2i (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) A2)
        (@eldif (cv x3) A2 B2))))
  (@disj1 A2 B2)
  (@dfcleq A2 (cdif A2 B2))


/-- A set can't belong to both members of disjoint classes. (Contributed by NM, 28-Feb-2015.) -/
theorem disjel {A2 B2 C : «class»} :
  ⊦ wi (wa (wceq (cin A2 B2) c0) (wcel C A2)) (wn (wcel C B2)) :=
@imp (wceq (cin A2 B2) c0) (wcel C A2) (wn (wcel C B2))
  (@sylbi (wceq (cin A2 B2) c0) (wceq A2 (cdif A2 B2)) (wi (wcel C A2) (wn (wcel C B2)))
    (@disj3 A2 B2)
    (@syl6bi (wceq A2 (cdif A2 B2)) (wcel C A2) (wcel C (cdif A2 B2)) (wn (wcel C B2))
      (@eleq2 A2 (cdif A2 B2) C)
      (@eldifn C A2 B2)))


/-- Two ways of saying that two classes are disjoint. (Contributed by NM, 17-May-1998.) -/
theorem disj2 {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 B2) c0) (wss A2 (cdif cvv B2)) :=
@ax_mp (wss A2 cvv) (wb (wceq (cin A2 B2) c0) (wss A2 (cdif cvv B2)))
  (@ssv A2)
  (@reldisj A2 B2 cvv)


/-- Intersection with a subclass of a disjoint class. (Contributed by FL, 24-Jan-2007.) (Proof
shortened by JJ, 14-Jul-2021.) -/
theorem ssdisj {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wceq (cin B2 C) c0)) (wceq (cin A2 C) c0) :=
@syl (wa (wss A2 B2) (wceq (cin B2 C) c0)) (wss (cin A2 C) c0) (wceq (cin A2 C) c0)
  (@sylan9ss (wss A2 B2) (wceq (cin B2 C) c0) (cin A2 C) (cin B2 C) c0
    (@ssrin A2 B2 C)
    (@eqimss (cin B2 C) c0))
  (@ss0 (cin A2 C))


/-- The intersection of classes with a common member is nonempty. (Contributed by NM, 7-Apr-1994.)
-/
theorem inelcm {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wcel A2 C)) (wne (cin B2 C) c0) :=
@sylbir (wa (wcel A2 B2) (wcel A2 C)) (wcel A2 (cin B2 C)) (wne (cin B2 C) c0)
  (@elin A2 B2 C)
  (@ne0i (cin B2 C) A2)


/-- A minimum element of a class has no elements in common with the class. (Contributed by NM,
22-Jun-1994.) (Proof shortened by JJ, 14-Jul-2021.) -/
theorem minel {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wceq (cin C B2) c0)) (wn (wcel A2 C)) :=
@imp (wcel A2 B2) (wceq (cin C B2) c0) (wn (wcel A2 C))
  (@necon2bd (wcel A2 B2) (wcel A2 C) (cin C B2) c0
    (@expcom (wcel A2 C) (wcel A2 B2) (wne (cin C B2) c0)
      (@inelcm A2 C B2)))


/-- Distribute union over difference. (Contributed by NM, 17-May-1998.) (Proof shortened by Andrew
Salmon, 26-Jun-2011.) -/
theorem undif4 {A2 B2 C : «class»} :
  ⊦ wi (wceq (cin A2 C) c0) (wceq (cun A2 (cdif B2 C)) (cdif (cun A2 B2) C)) :=
@«3imtr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) C)))) (wal (λ x3, wb (wcel (cv x3) (cun A2 (cdif B2 C))) (wcel (cv x3) (cdif (cun A2 B2) C)))) (wceq (cin A2 C) c0) (wceq (cun A2 (cdif B2 C)) (cdif (cun A2 B2) C))
  (@alimi (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (λ x3, wb (wcel (cv x3) (cun A2 (cdif B2 C))) (wcel (cv x3) (cdif (cun A2 B2) C)))
    (λ x3, @«3bitr4g» (wi (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wo (wcel (cv x3) A2) (wcel (cv x3) (cdif B2 C))) (wa (wcel (cv x3) (cun A2 B2)) (wn (wcel (cv x3) C))) (wcel (cv x3) (cun A2 (cdif B2 C))) (wcel (cv x3) (cdif (cun A2 B2) C))
      (@«3bitr4g» (wi (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wo (wcel (cv x3) A2) (wn (wcel (cv x3) C)))) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) C))) (wo (wcel (cv x3) A2) (wcel (cv x3) (cdif B2 C))) (wa (wcel (cv x3) (cun A2 B2)) (wn (wcel (cv x3) C)))
        (@anbi2d (wi (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wo (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wn (wcel (cv x3) C)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2))
          (@impbid1 (wi (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wo (wcel (cv x3) A2) (wn (wcel (cv x3) C))) (wn (wcel (cv x3) C))
            (@pm2_621 (wcel (cv x3) A2) (wn (wcel (cv x3) C)))
            (@olc (wn (wcel (cv x3) C)) (wcel (cv x3) A2))))
        (@bitri (wo (wcel (cv x3) A2) (wcel (cv x3) (cdif B2 C))) (wo (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) C)))) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wo (wcel (cv x3) A2) (wn (wcel (cv x3) C))))
          (@orbi2i (wcel (cv x3) (cdif B2 C)) (wa (wcel (cv x3) B2) (wn (wcel (cv x3) C))) (wcel (cv x3) A2)
            (@eldif (cv x3) B2 C))
          (@ordi (wcel (cv x3) A2) (wcel (cv x3) B2) (wn (wcel (cv x3) C))))
        (@anbi1i (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wn (wcel (cv x3) C))
          (@elun (cv x3) A2 B2)))
      (@elun (cv x3) A2 (cdif B2 C))
      (@eldif (cv x3) (cun A2 B2) C)))
  (@disj1 A2 C)
  (@dfcleq (cun A2 (cdif B2 C)) (cdif (cun A2 B2) C))


/-- Subset relation for disjoint classes. (Contributed by NM, 25-Oct-2005.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) -/
theorem disjssun {A2 B2 C : «class»} :
  ⊦ wi (wceq (cin A2 B2) c0) (wb (wss A2 (cun B2 C)) (wss A2 C)) :=
@«3bitr4g» (wceq (cin A2 B2) c0) (wceq (cin A2 (cun B2 C)) A2) (wceq (cin A2 C) A2) (wss A2 (cun B2 C)) (wss A2 C)
  (@eqeq1d (wceq (cin A2 B2) c0) (cin A2 (cun B2 C)) (cin A2 C) A2
    (@«3eqtr4g» (wceq (cin A2 B2) c0) (cun (cin A2 C) (cin A2 B2)) (cun (cin A2 C) c0) (cin A2 (cun B2 C)) (cin A2 C)
      (@uneq2 (cin A2 B2) c0 (cin A2 C))
      (@equncomi (cin A2 (cun B2 C)) (cin A2 B2) (cin A2 C)
        (@indi A2 B2 C))
      (@eqcomi (cun (cin A2 C) c0) (cin A2 C)
        (@un0 (cin A2 C)))))
  (@df_ss A2 (cun B2 C))
  (@df_ss A2 C)


/-- A proper subclass has a member in one argument that's not in both. (Contributed by NM,
29-Feb-1996.) -/
theorem pssnel {A2 B2 : «class»} :
  ⊦ wi (wpss A2 B2) (wex (λ x3, wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))) :=
@sylib (wpss A2 B2) (wex (λ x3, wcel (cv x3) (cdif B2 A2))) (wex (λ x3, wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2))))
  (@sylib (wpss A2 B2) (wne (cdif B2 A2) c0) (wex (λ x3, wcel (cv x3) (cdif B2 A2)))
    (@pssdif A2 B2)
    (@n0 (cdif B2 A2)))
  (@exbii (λ x3, wcel (cv x3) (cdif B2 A2)) (λ x3, wa (wcel (cv x3) B2) (wn (wcel (cv x3) A2)))
    (λ x3, @eldif (cv x3) B2 A2))


/-- A class and its relative complement are disjoint. Theorem 38 of [Suppes] p. 29. (Contributed by
NM, 24-Mar-1998.) -/
theorem disjdif {A2 B2 : «class»} :
  ⊦ wceq (cin A2 (cdif B2 A2)) c0 :=
@mpbi (wss (cin A2 B2) A2) (wceq (cin A2 (cdif B2 A2)) c0)
  (@inss1 A2 B2)
  (@inssdif0 A2 B2 A2)


/-- A class and its relative complement are disjoint. (Contributed by Thierry Arnoux, 29-Nov-2023.)
-/
theorem disjdifr {A2 B2 : «class»} :
  ⊦ wceq (cin (cdif B2 A2) A2) c0 :=
@eqtr3i (cin A2 (cdif B2 A2)) (cin (cdif B2 A2) A2) c0
  (@incom A2 (cdif B2 A2))
  (@disjdif A2 B2)


/-- The union of a class and its complement is the universe. Theorem 5.1(5) of [Stoll] p. 17.
(Contributed by NM, 17-Aug-2004.) -/
theorem unvdif {A2 : «class»} :
  ⊦ wceq (cun A2 (cdif cvv A2)) cvv :=
@«3eqtri» (cun A2 (cdif cvv A2)) (cdif cvv (cin (cdif cvv A2) (cdif cvv (cdif cvv A2)))) (cdif cvv c0) cvv
  (@dfun3 A2 (cdif cvv A2))
  (@difeq2i (cin (cdif cvv A2) (cdif cvv (cdif cvv A2))) c0 cvv
    (@disjdif (cdif cvv A2) cvv))
  (@dif0 cvv)


/-- Absorption of difference by union. This decomposes a union into two disjoint classes (see ~
disjdif ). Theorem 35 of [Suppes] p. 29. (Contributed by NM, 19-May-1998.) -/
theorem undif1 {A2 B2 : «class»} :
  ⊦ wceq (cun (cdif A2 B2) B2) (cun A2 B2) :=
@«3eqtr3i» (cun (cin A2 (cdif cvv B2)) B2) (cin (cun A2 B2) (cun (cdif cvv B2) B2)) (cun (cdif A2 B2) B2) (cun A2 B2)
  (@undir A2 (cdif cvv B2) B2)
  (@uneq1i (cin A2 (cdif cvv B2)) (cdif A2 B2) B2
    (@invdif A2 B2))
  (@eqtri (cin (cun A2 B2) (cun (cdif cvv B2) B2)) (cin (cun A2 B2) cvv) (cun A2 B2)
    (@ineq2i (cun (cdif cvv B2) B2) cvv (cun A2 B2)
      (@eqtri (cun (cdif cvv B2) B2) (cun B2 (cdif cvv B2)) cvv
        (@uncom (cdif cvv B2) B2)
        (@unvdif B2)))
    (@inv1 (cun A2 B2)))


/-- Absorption of difference by union. This decomposes a union into two disjoint classes (see ~
disjdif ). Part of proof of Corollary 6K of [Enderton] p. 144. (Contributed by NM, 19-May-1998.) -/
theorem undif2 {A2 B2 : «class»} :
  ⊦ wceq (cun A2 (cdif B2 A2)) (cun A2 B2) :=
@«3eqtri» (cun A2 (cdif B2 A2)) (cun (cdif B2 A2) A2) (cun B2 A2) (cun A2 B2)
  (@uncom A2 (cdif B2 A2))
  (@undif1 B2 A2)
  (@uncom B2 A2)


/-- The intersection and class difference of a class with another class unite to give the original
class. (Contributed by Paul Chapman, 5-Jun-2009.) (Proof shortened by Andrew Salmon, 26-Jun-2011.)
-/
theorem inundif {A2 B2 : «class»} :
  ⊦ wceq (cun (cin A2 B2) (cdif A2 B2)) A2 :=
@uneqri (cin A2 B2) (cdif A2 B2) A2
  (λ x3, @bitr4i (wo (wcel (cv x3) (cin A2 B2)) (wcel (cv x3) (cdif A2 B2))) (wo (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))) (wcel (cv x3) A2)
    (@orbi12i (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2)))
      (@elin (cv x3) A2 B2)
      (@eldif (cv x3) A2 B2))
    (@pm4_42 (wcel (cv x3) A2) (wcel (cv x3) B2)))


/-- The difference of a class and a class disjoint from it is the original class. (Contributed by
BJ, 21-Apr-2019.) -/
theorem disjdif2 {A2 B2 : «class»} :
  ⊦ wi (wceq (cin A2 B2) c0) (wceq (cdif A2 B2) A2) :=
@«3eqtr3g» (wceq (cin A2 B2) c0) (cdif A2 (cin A2 B2)) (cdif A2 c0) (cdif A2 B2) A2
  (@difeq2 (cin A2 B2) c0 A2)
  (@difin A2 B2)
  (@dif0 A2)


/-- Absorption of union by difference. Theorem 36 of [Suppes] p. 29. (Contributed by NM,
19-May-1998.) -/
theorem difun2 {A2 B2 : «class»} :
  ⊦ wceq (cdif (cun A2 B2) B2) (cdif A2 B2) :=
@«3eqtri» (cdif (cun A2 B2) B2) (cun (cdif A2 B2) (cdif B2 B2)) (cun (cdif A2 B2) c0) (cdif A2 B2)
  (@difundir A2 B2 B2)
  (@uneq2i (cdif B2 B2) c0 (cdif A2 B2)
    (@difid B2))
  (@un0 (cdif A2 B2))


/-- Union of complementary parts into whole. (Contributed by NM, 22-Mar-1998.) -/
theorem undif {A2 B2 : «class»} :
  ⊦ wb (wss A2 B2) (wceq (cun A2 (cdif B2 A2)) B2) :=
@bitr4i (wss A2 B2) (wceq (cun A2 B2) B2) (wceq (cun A2 (cdif B2 A2)) B2)
  (@ssequn1 A2 B2)
  (@eqeq1i (cun A2 (cdif B2 A2)) (cun A2 B2) B2
    (@undif2 A2 B2))


/-- A subset of a difference does not intersect the subtrahend. (Contributed by Jeff Hankins,
1-Sep-2013.) (Proof shortened by Mario Carneiro, 24-Aug-2015.) -/
theorem ssdifin0 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 (cdif B2 C)) (wceq (cin A2 C) c0) :=
@sylancl (wss A2 (cdif B2 C)) (wss (cin A2 C) (cin (cdif B2 C) C)) (wceq (cin (cdif B2 C) C) c0) (wceq (cin A2 C) c0)
  (@ssrin A2 (cdif B2 C) C)
  (@disjdifr C B2)
  (@sseq0 (cin A2 C) (cin (cdif B2 C) C))


/-- A condition equivalent to inclusion in the union of two classes. (Contributed by NM,
26-Mar-2007.) -/
theorem ssundif {A2 B2 C : «class»} :
  ⊦ wb (wss A2 (cun B2 C)) (wss (cdif A2 B2) C) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cun B2 C)))) (wal (λ x3, wi (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) C))) (wss A2 (cun B2 C)) (wss (cdif A2 B2) C)
  (@albii (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cun B2 C))) (λ x3, wi (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) C))
    (λ x3, @«3bitr4ri» (wi (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) C)) (wi (wcel (cv x3) A2) (wo (wcel (cv x3) B2) (wcel (cv x3) C))) (wi (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) C)) (wi (wcel (cv x3) A2) (wcel (cv x3) (cun B2 C)))
      (@pm5_6 (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv x3) C))
      (@imbi1i (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wcel (cv x3) C)
        (@eldif (cv x3) A2 B2))
      (@imbi2i (wcel (cv x3) (cun B2 C)) (wo (wcel (cv x3) B2) (wcel (cv x3) C)) (wcel (cv x3) A2)
        (@elun (cv x3) B2 C))))
  (@dfss2 A2 (cun B2 C))
  (@dfss2 (cdif A2 B2) C)


/-- Two ways to say that ` A ` and ` B ` partition ` C ` (when ` A ` and ` B ` don't overlap and ` A
` is a part of ` C ` ). (Contributed by FL, 17-Nov-2008.) (Proof shortened by JJ, 14-Jul-2021.) -/
theorem uneqdifeq {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 C) (wceq (cin A2 B2) c0)) (wb (wceq (cun A2 B2) C) (wceq (cdif C A2) B2)) :=
@impbid (wa (wss A2 C) (wceq (cin A2 B2) c0)) (wceq (cun A2 B2) C) (wceq (cdif C A2) B2)
  (@adantl (wceq (cin A2 B2) c0) (wi (wceq (cun A2 B2) C) (wceq (cdif C A2) B2)) (wss A2 C)
    (@com12 (wceq (cun A2 B2) C) (wceq (cin A2 B2) c0) (wceq (cdif C A2) B2)
      (@mpan (wceq (cun B2 A2) (cun A2 B2)) (wceq (cun A2 B2) C) (wi (wceq (cin A2 B2) c0) (wceq (cdif C A2) B2))
        (@uncom B2 A2)
        (@syl (wa (wceq (cun B2 A2) (cun A2 B2)) (wceq (cun A2 B2) C)) (wceq C (cun B2 A2)) (wi (wceq (cin A2 B2) c0) (wceq (cdif C A2) B2))
          (@eqcomd (wa (wceq (cun B2 A2) (cun A2 B2)) (wceq (cun A2 B2) C)) (cun B2 A2) C
            (@eqtr (cun B2 A2) (cun A2 B2) C))
          (@sylancl (wceq C (cun B2 A2)) (wceq (cdif C A2) (cdif (cun B2 A2) A2)) (wceq (cdif (cun B2 A2) A2) (cdif B2 A2)) (wi (wceq (cin A2 B2) c0) (wceq (cdif C A2) B2))
            (@difeq1 C (cun B2 A2) A2)
            (@difun2 B2 A2)
            (@syl5com (wa (wceq (cdif C A2) (cdif (cun B2 A2) A2)) (wceq (cdif (cun B2 A2) A2) (cdif B2 A2))) (wceq (cdif C A2) (cdif B2 A2)) (wceq (cin A2 B2) c0) (wceq (cdif C A2) B2)
              (@eqtr (cdif C A2) (cdif (cun B2 A2) A2) (cdif B2 A2))
              (@sylbi (wceq (cin A2 B2) c0) (wceq B2 (cdif B2 A2)) (wi (wceq (cdif C A2) (cdif B2 A2)) (wceq (cdif C A2) B2))
                (@bitri (wceq (cin A2 B2) c0) (wceq (cin B2 A2) c0) (wceq B2 (cdif B2 A2))
                  (@eqeq1i (cin A2 B2) (cin B2 A2) c0
                    (@incom A2 B2))
                  (@disj3 B2 A2))
                (@eqcoms (wi (wceq (cdif C A2) (cdif B2 A2)) (wceq (cdif C A2) B2)) (cdif B2 A2) B2
                  (@expcom (wceq (cdif C A2) (cdif B2 A2)) (wceq (cdif B2 A2) B2) (wceq (cdif C A2) B2)
                    (@eqtr (cdif C A2) (cdif B2 A2) B2))))))))))
  (@adantr (wss A2 C) (wi (wceq (cdif C A2) B2) (wceq (cun A2 B2) C)) (wceq (cin A2 B2) c0)
    (@ex (wss A2 C) (wceq (cdif C A2) B2) (wceq (cun A2 B2) C)
      (@eqssd (wa (wss A2 C) (wceq (cdif C A2) B2)) (cun A2 B2) C
        (@unssd (wa (wss A2 C) (wceq (cdif C A2) B2)) A2 B2 C
          (@simpl (wss A2 C) (wceq (cdif C A2) B2))
          (@adantl (wceq (cdif C A2) B2) (wss B2 C) (wss A2 C)
            (@mpbid (wceq (cdif C A2) B2) (wss (cdif C A2) C) (wss B2 C)
              (@difssd (wceq (cdif C A2) B2) C A2)
              (@sseq1 (cdif C A2) B2 C))))
        (@adantl (wceq (cdif C A2) B2) (wss C (cun A2 B2)) (wss A2 C)
          (@sylibr (wceq (cdif C A2) B2) (wss (cdif C A2) B2) (wss C (cun A2 B2))
            (@eqimss (cdif C A2) B2)
            (@ssundif C A2 B2))))))


/-- Theorem 19.2 of [Margaris] p. 89 with restricted quantifiers (compare ~ 19.2 ). The restricted
version is valid only when the domain of quantification is not empty. (Contributed by NM,
15-Nov-2003.) -/
theorem r19_2z {ph : setvar → wff} {A2 : «class»} :
  ⊦ wi (wa (wne A2 c0) (wral (λ x3, ph x3) (λ x3, A2))) (wrex (λ x3, ph x3) (λ x3, A2)) :=
@impcom (wral (λ x3, ph x3) (λ x3, A2)) (wne A2 c0) (wrex (λ x3, ph x3) (λ x3, A2))
  (@«3imtr4g» (wral (λ x3, ph x3) (λ x3, A2)) (wex (λ x3, wcel (cv x3) A2)) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wne A2 c0) (wrex (λ x3, ph x3) (λ x3, A2))
    (@sylbi (wral (λ x3, ph x3) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wi (wex (λ x3, wcel (cv x3) A2)) (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))))
      (@df_ral (λ x3, ph x3) (λ x3, A2))
      (@exintr (λ x3, wcel (cv x3) A2) (λ x3, ph x3)))
    (@n0 A2)
    (@df_rex (λ x3, ph x3) (λ x3, A2)))


/-- A response to the notion that the condition ` A =/= (/) ` can be removed in ~ r19.2z .
Interestingly enough, ` ph ` does not figure in the left-hand side. (Contributed by Jeff Hankins,
24-Aug-2009.) -/
theorem r19_2zb {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wne A2 c0) (wi (wral (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, A2))) :=
@impbii (wne A2 c0) (wi (wral (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, A2)))
  (@ex (wne A2 c0) (wral (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, A2))
    (@r19_2z (λ x3, ph x3) A2))
  (@ja (wral (λ x3, ph x3) (λ x3, A2)) (wrex (λ x3, ph x3) (λ x3, A2)) (wne A2 c0)
    (@necon3bi (wral (λ x3, ph x3) (λ x3, A2)) A2 c0
      (@mpbiri (wceq A2 c0) (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, ph x3) (λ x3, c0))
        (@rgen (λ x3, ph x3) (λ x3, c0)
          (λ x3, @pm2_21i (wcel (cv x3) c0) (ph x3)
            (@noel (cv x3))))
        (@raleq (λ x3, ph x3) A2 c0)))
    (@«3imtr4i» (wex (λ x3, wa (wcel (cv x3) A2) (ph x3))) (wex (λ x3, wcel (cv x3) A2)) (wrex (λ x3, ph x3) (λ x3, A2)) (wne A2 c0)
      (@exsimpl (λ x3, wcel (cv x3) A2) (λ x3, ph x3))
      (@df_rex (λ x3, ph x3) (λ x3, A2))
      (@n0 A2)))


/-- Restricted quantification of wff not containing quantified variable. (Contributed by FL,
3-Jan-2008.) -/
theorem r19_3rz {ph : setvar → wff} {A2 : «class»}
  (r19_3rz_1 : ⊦ wnf (λ x3, ph x3))
  (x3 : setvar) : ⊦ wi (wne A2 c0) (wb (ph x3) (wral (λ x3, ph x3) (λ x3, A2))) :=
@bitr4di (wne A2 c0) (ph x3) (wi (wex (λ x3, wcel (cv x3) A2)) (ph x3)) (wral (λ x3, ph x3) (λ x3, A2))
  (@sylbi (wne A2 c0) (wex (λ x3, wcel (cv x3) A2)) (wb (ph x3) (wi (wex (λ x3, wcel (cv x3) A2)) (ph x3)))
    (@n0 A2)
    (@biimt (wex (λ x3, wcel (cv x3) A2)) (ph x3)))
  (@bitri (wral (λ x3, ph x3) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wi (wex (λ x3, wcel (cv x3) A2)) (ph x3))
    (@df_ral (λ x3, ph x3) (λ x3, A2))
    (@«19_23» (λ x3, wcel (cv x3) A2) (λ x3, ph x3)
      r19_3rz_1 x3))


/-- Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90. It is valid only when the
domain of quantification is not empty. (Contributed by NM, 26-Oct-2010.) -/
theorem r19_28z {ph ps : setvar → wff} {A2 : «class»}
  (r19_3rz_1 : ⊦ wnf (λ x3, ph x3))
  (x3 : setvar) : ⊦ wi (wne A2 c0) (wb (wral (λ x3, wa (ph x3) (ps x3)) (λ x3, A2)) (wa (ph x3) (wral (λ x3, ps x3) (λ x3, A2)))) :=
@bitr4id (wne A2 c0) (wral (λ x3, wa (ph x3) (ps x3)) (λ x3, A2)) (wa (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, ps x3) (λ x3, A2))) (wa (ph x3) (wral (λ x3, ps x3) (λ x3, A2)))
  (@r19_26 (λ x3, ph x3) (λ x3, ps x3) (λ x3, A2))
  (@anbi1d (wne A2 c0) (ph x3) (wral (λ x3, ph x3) (λ x3, A2)) (wral (λ x3, ps x3) (λ x3, A2))
    (@r19_3rz (λ x3, ph x3) A2
      r19_3rz_1 x3))


/-- Restricted quantification of wff not containing quantified variable. (Contributed by NM,
10-Mar-1997.) -/
theorem r19_3rzv {ph : wff} {A2 : «class»} :
  ⊦ wi (wne A2 c0) (wb ph (wral (λ x3, ph) (λ x3, A2))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wne A2 c0) (wb ph (wral (λ x3, ph) (λ x3, A2))), from
  @r19_3rz (λ x3, ph) A2
    (@nfv ph) x3


/-- Restricted quantification of wff not containing quantified variable. (Contributed by NM,
27-May-1998.) -/
theorem r19_9rzv {ph : wff} {A2 : «class»} :
  ⊦ wi (wne A2 c0) (wb ph (wrex (λ x3, ph) (λ x3, A2))) :=
@syl5rbb (wrex (λ x3, ph) (λ x3, A2)) (wn (wral (λ x3, wn ph) (λ x3, A2))) (wne A2 c0) ph
  (@dfrex2 (λ x3, ph) (λ x3, A2))
  (@con1bid (wne A2 c0) ph (wral (λ x3, wn ph) (λ x3, A2))
    (@r19_3rzv (wn ph) A2))


/-- Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90. It is valid only when the
domain of quantification is not empty. (Contributed by NM, 19-Aug-2004.) -/
theorem r19_28zv {ph : wff} {ps : setvar → wff} {A2 : «class»} :
  ⊦ wi (wne A2 c0) (wb (wral (λ x3, wa ph (ps x3)) (λ x3, A2)) (wa ph (wral (λ x3, ps x3) (λ x3, A2)))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wne A2 c0) (wb (wral (λ x3, wa ph (ps x3)) (λ x3, A2)) (wa ph (wral (λ x3, ps x3) (λ x3, A2)))), from
  @r19_28z (λ x3, ph) (λ x3, ps x3) A2
    (@nfv ph) x3


/-- Idempotent law for restricted quantifier. Weak version of ~ ralidm , which does not require ~
ax-10 , ~ ax-12 , but requires ~ ax-8 . (Contributed by Gino Giotto, 30-Sep-2024.) -/
theorem ralidmw {ph ps : setvar → wff} {A2 : «class»}
  (ralidmw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, ph x3) (λ x3, A2)) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2)))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, ph x3) (λ x3, A2))
  (@bitri (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))
    (@albii (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2))) (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))
      (λ x3, @imbi2i (wral (λ x3, ph x3) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wcel (cv x3) A2)
        (@df_ral (λ x3, ph x3) (λ x3, A2))))
    (@impbii (wal (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))
      (@alimi (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))) (λ x3, wi (wcel (cv x3) A2) (ph x3))
        (λ x3, @ja (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wi (wcel (cv x3) A2) (ph x3))
          (@pm2_21 (wcel (cv x3) A2) (ph x3))
          (@spw (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ y, wi (wcel (cv y) A2) (ps y))
            (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
              (@eleq1w (λ x3 y, A2) x3 y)
              (ralidmw_1 x3 y)) x3)))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wal (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))), from
        @alrimih (λ x3, wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))
          (λ x3, @hba1w (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ y, wi (wcel (cv y) A2) (ps y))
            (λ x3 y, @imbi12d (wceq (cv x3) (cv y)) (wcel (cv x3) A2) (wcel (cv y) A2) (ph x3) (ps y)
              (@eleq1w (λ x3 y, A2) x3 y)
              (ralidmw_1 x3 y)))
          (λ x3, @ax_1 (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wcel (cv x3) A2)) x3)))
  (@df_ral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2))
  (@df_ral (λ x3, ph x3) (λ x3, A2))


/-- Vacuous quantification is always true. (Contributed by NM, 11-Mar-1997.) (Proof shortened by
Andrew Salmon, 26-Jun-2011.) Avoid ~ df-clel , ~ ax-8 . (Revised by Gino Giotto, 2-Sep-2024.) -/
theorem rzal {ph : setvar → wff} {A2 : «class»} :
  ⊦ wi (wceq A2 c0) (wral (λ x3, ph x3) (λ x3, A2)) :=
@«3imtr4i» (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wceq A2 c0) (wral (λ x3, ph x3) (λ x3, A2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))), from
    @sylg (λ x3, wceq A2 (cab (λ y, wfal))) (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))) (λ x3, wi (wcel (cv x3) A2) (ph x3))
      (λ x3, @biimpi (wceq A2 (cab (λ y, wfal))) (wal (λ x3, wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))))
        (@dfcleq A2 (cab (λ y, wfal))))
      (λ x3, @sylbi (wb (wcel (cv x3) A2) (wcel (cv x3) (cab (λ y, wfal)))) (wb (wcel (cv x3) A2) wfal) (wi (wcel (cv x3) A2) (ph x3))
        (@bibi2i (wcel (cv x3) (cab (λ y, wfal))) wfal (wcel (cv x3) A2)
          (@bitri (wcel (cv x3) (cab (λ y, wfal))) (wsb (λ y, wfal) x3) wfal
            (@df_clab (λ y, wfal) x3)
            (@sbv wfal x3)))
        (@sylbir (wb (wcel (cv x3) A2) wfal) (wn (wcel (cv x3) A2)) (wi (wcel (cv x3) A2) (ph x3))
          (@nbfal (wcel (cv x3) A2))
          (@pm2_21 (wcel (cv x3) A2) (ph x3)))) x3)
  (@eqeq2i c0 (cab (λ y, wfal)) A2
    dfnul4)
  (@df_ral (λ x3, ph x3) (λ x3, A2))


/-- Restricted existential quantification implies its restriction is nonempty. (Contributed by
Szymon Jaroszewicz, 3-Apr-2007.) Avoid ~ df-clel , ~ ax-8 . (Revised by Gino Giotto, 2-Sep-2024.) -/
theorem rexn0 {ph : setvar → wff} {A2 : «class»} :
  ⊦ wi (wrex (λ x3, ph x3) (λ x3, A2)) (wne A2 c0) :=
@neqned (wrex (λ x3, ph x3) (λ x3, A2)) A2 c0
  (@sylbi (wrex (λ x3, ph x3) (λ x3, A2)) (wn (wral (λ x3, wn (ph x3)) (λ x3, A2))) (wn (wceq A2 c0))
    (@dfrex2 (λ x3, ph x3) (λ x3, A2))
    (@con3i (wceq A2 c0) (wral (λ x3, wn (ph x3)) (λ x3, A2))
      (@rzal (λ x3, wn (ph x3)) A2)))


/-- Idempotent law for restricted quantifier. (Contributed by NM, 28-Mar-1997.) Reduce axiom usage.
(Revised by Gino Giotto, 2-Sep-2024.) -/
theorem ralidm {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, ph x3) (λ x3, A2)) :=
@bitri (wral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2)))) (wral (λ x3, ph x3) (λ x3, A2))
  (@df_ral (λ x3, wral (λ x3, ph x3) (λ x3, A2)) (λ x3, A2))
  (@«3bitrri» (wral (λ x3, ph x3) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wal (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))) (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2))))
    (@df_ral (λ x3, ph x3) (λ x3, A2))
    (@impbii (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wal (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))))
      (@axc4i (λ x3, wi (wcel (cv x3) A2) (ph x3)) (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))))
        (λ x3, @ax_1 (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wcel (cv x3) A2)))
      (@alimi (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))) (λ x3, wi (wcel (cv x3) A2) (ph x3))
        (λ x3, @ja (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wi (wcel (cv x3) A2) (ph x3))
          (@pm2_21 (wcel (cv x3) A2) (ph x3))
          (@sp (λ x3, wi (wcel (cv x3) A2) (ph x3)) x3))))
    (@albii (λ x3, wi (wcel (cv x3) A2) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))) (λ x3, wi (wcel (cv x3) A2) (wral (λ x3, ph x3) (λ x3, A2)))
      (λ x3, @imbi2i (wal (λ x3, wi (wcel (cv x3) A2) (ph x3))) (wral (λ x3, ph x3) (λ x3, A2)) (wcel (cv x3) A2)
        (@bicomi (wral (λ x3, ph x3) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (ph x3)))
          (@df_ral (λ x3, ph x3) (λ x3, A2))))))


/-- Vacuous universal quantification is always true. (Contributed by NM, 20-Oct-2005.) Avoid ~
df-clel , ~ ax-8 . (Revised by Gino Giotto, 2-Sep-2024.) -/
theorem ral0 {ph : setvar → wff} :
  ⊦ wral (λ x3, ph x3) (λ x3, c0) :=
@ax_mp (wceq c0 c0) (wral (λ x3, ph x3) (λ x3, c0))
  (@eqid c0)
  (@rzal (λ x3, ph x3) c0)


-- /-- Extend class notation to include the conditional operator for classes. -/
-- constant cif : wff → «class» → «class» → «class»


-- /-- Definition of the conditional operator for classes. The expression ` if ( ph , A , B ) ` is
-- read "if ` ph ` then ` A ` else ` B ` ". See ~ iftrue and ~ iffalse for its values. In the
-- mathematical literature, this operator is rarely defined formally but is implicit in informal
-- definitions such as "let f(x)=0 if x=0 and 1/x otherwise". An important use for us is in
-- conjunction with the weak deduction theorem, which is described in the next section, beginning at
-- ~ dedth . (Contributed by NM, 15-May-1999.) -/
-- axiom df_if {ph : wff} {A2 B2 : «class»} : ⊦ wceq (cif ph A2 B2) (cab (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph))))


/-- An alternate definition of the conditional operator ~ df-if with one fewer connectives (but
probably less intuitive to understand). (Contributed by NM, 30-Jan-2006.) -/
theorem dfif2 {ph : wff} {A2 B2 : «class»} :
  ⊦ wceq (cif ph A2 B2) (cab (λ x3, wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph))) :=
@eqtri (cif ph A2 B2) (cab (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph)))) (cab (λ x3, wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph)))
  (@df_if ph A2 B2)
  (@abbii (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph))) (λ x3, wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph))
    (λ x3, @«3bitr4i» (wo (wa (wcel (cv x3) B2) (wn ph)) (wa (wcel (cv x3) A2) ph)) (wi (wn (wa (wcel (cv x3) B2) (wn ph))) (wa (wcel (cv x3) A2) ph)) (wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph))) (wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph))
      (@df_or (wa (wcel (cv x3) B2) (wn ph)) (wa (wcel (cv x3) A2) ph))
      (@orcom (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph)))
      (@imbi1i (wi (wcel (cv x3) B2) ph) (wn (wa (wcel (cv x3) B2) (wn ph))) (wa (wcel (cv x3) A2) ph)
        (@iman (wcel (cv x3) B2) ph))))


/-- An alternate definition of the conditional operator ~ df-if as a simple class abstraction.
(Contributed by Mario Carneiro, 8-Sep-2013.) -/
theorem dfif6 {ph : wff} {A2 B2 : «class»} :
  ⊦ wceq (cif ph A2 B2) (cun (crab (λ x3, ph) (λ x3, A2)) (crab (λ x3, wn ph) (λ x3, B2))) :=
@«3eqtr4ri» (cun (cab (λ x3, wa (wcel (cv x3) A2) ph)) (cab (λ x3, wa (wcel (cv x3) B2) (wn ph)))) (cab (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph)))) (cun (crab (λ x3, ph) (λ x3, A2)) (crab (λ x3, wn ph) (λ x3, B2))) (cif ph A2 B2)
  (@unab (λ x3, wa (wcel (cv x3) A2) ph) (λ x3, wa (wcel (cv x3) B2) (wn ph)))
  (@uneq12i (crab (λ x3, ph) (λ x3, A2)) (cab (λ x3, wa (wcel (cv x3) A2) ph)) (crab (λ x3, wn ph) (λ x3, B2)) (cab (λ x3, wa (wcel (cv x3) B2) (wn ph)))
    (@df_rab (λ x3, ph) (λ x3, A2))
    (@df_rab (λ x3, wn ph) (λ x3, B2)))
  (@df_if ph A2 B2)


/-- Equality theorem for conditional operator. (Contributed by NM, 1-Sep-2004.) (Revised by Mario
Carneiro, 8-Sep-2013.) -/
theorem ifeq1 {ph : wff} {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cif ph A2 C) (cif ph B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (cun (crab (λ x3, ph) (λ x3, A2)) (crab (λ x3, wn ph) (λ x3, C))) (cun (crab (λ x3, ph) (λ x3, B2)) (crab (λ x3, wn ph) (λ x3, C))) (cif ph A2 C) (cif ph B2 C)
  (@uneq1d (wceq A2 B2) (crab (λ x3, ph) (λ x3, A2)) (crab (λ x3, ph) (λ x3, B2)) (crab (λ x3, wn ph) (λ x3, C))
    (@rabeq (λ x3, ph) A2 B2))
  (@dfif6 ph A2 C)
  (@dfif6 ph B2 C)


/-- Equality theorem for conditional operator. (Contributed by NM, 1-Sep-2004.) (Revised by Mario
Carneiro, 8-Sep-2013.) -/
theorem ifeq2 {ph : wff} {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cif ph C A2) (cif ph C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cun (crab (λ x3, ph) (λ x3, C)) (crab (λ x3, wn ph) (λ x3, A2))) (cun (crab (λ x3, ph) (λ x3, C)) (crab (λ x3, wn ph) (λ x3, B2))) (cif ph C A2) (cif ph C B2)
  (@uneq2d (wceq A2 B2) (crab (λ x3, wn ph) (λ x3, A2)) (crab (λ x3, wn ph) (λ x3, B2)) (crab (λ x3, ph) (λ x3, C))
    (@rabeq (λ x3, wn ph) A2 B2))
  (@dfif6 ph C A2)
  (@dfif6 ph C B2)


/-- Value of the conditional operator when its first argument is true. (Contributed by NM,
15-May-1999.) (Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem iftrue {ph : wff} {A2 B2 : «class»} :
  ⊦ wi ph (wceq (cif ph A2 B2) A2) :=
@eqtr4id ph (cif ph A2 B2) (cab (λ x3, wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph))) A2
  (@dfif2 ph A2 B2)
  (@abbi2dv ph (λ x3, wi (wi (wcel (cv x3) B2) ph) (wa (wcel (cv x3) A2) ph)) A2
    (λ x3, @dedlem0a ph (wcel (cv x3) A2) (wcel (cv x3) B2)))


/-- Inference associated with ~ iftrue . (Contributed by BJ, 7-Oct-2018.) -/
theorem iftruei {ph : wff} {A2 B2 : «class»}
  (iftruei_1 : ⊦ ph) :
  ⊦ wceq (cif ph A2 B2) A2 :=
@ax_mp ph (wceq (cif ph A2 B2) A2)
  iftruei_1
  (@iftrue ph A2 B2)


/-- Value of the conditional operator when its first argument is true. (Contributed by Glauco
Siliprandi, 11-Dec-2019.) -/
theorem iftrued {ph ch : wff} {A2 B2 : «class»}
  (iftrued_1 : ⊦ wi ph ch) :
  ⊦ wi ph (wceq (cif ch A2 B2) A2) :=
@syl ph ch (wceq (cif ch A2 B2) A2)
  iftrued_1
  (@iftrue ch A2 B2)


/-- Value of the conditional operator when its first argument is false. (Contributed by NM,
14-Aug-1999.) -/
theorem iffalse {ph : wff} {A2 B2 : «class»} :
  ⊦ wi (wn ph) (wceq (cif ph A2 B2) B2) :=
@eqtr4id (wn ph) (cif ph A2 B2) (cab (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph)))) B2
  (@df_if ph A2 B2)
  (@abbi2dv (wn ph) (λ x3, wo (wa (wcel (cv x3) A2) ph) (wa (wcel (cv x3) B2) (wn ph))) B2
    (λ x3, @dedlemb ph (wcel (cv x3) A2) (wcel (cv x3) B2)))


/-- Inference associated with ~ iffalse . (Contributed by BJ, 7-Oct-2018.) -/
theorem iffalsei {ph : wff} {A2 B2 : «class»}
  (iffalsei_1 : ⊦ wn ph) :
  ⊦ wceq (cif ph A2 B2) B2 :=
@ax_mp (wn ph) (wceq (cif ph A2 B2) B2)
  iffalsei_1
  (@iffalse ph A2 B2)


/-- Value of the conditional operator when its first argument is false. (Contributed by Glauco
Siliprandi, 11-Dec-2019.) -/
theorem iffalsed {ph ch : wff} {A2 B2 : «class»}
  (iffalsed_1 : ⊦ wi ph (wn ch)) :
  ⊦ wi ph (wceq (cif ch A2 B2) B2) :=
@syl ph (wn ch) (wceq (cif ch A2 B2) B2)
  iffalsed_1
  (@iffalse ch A2 B2)


/-- When values are unequal, but an "if" condition checks if they are equal, then the "false" branch
results. This is a simple utility to provide a slight shortening and simplification of proofs versus
applying ~ iffalse directly in this case. It happens, e.g., in ~ oevn0 . (Contributed by David A.
Wheeler, 15-May-2015.) -/
theorem ifnefalse {A2 B2 C D : «class»} :
  ⊦ wi (wne A2 B2) (wceq (cif (wceq A2 B2) C D) D) :=
@sylbi (wne A2 B2) (wn (wceq A2 B2)) (wceq (cif (wceq A2 B2) C D) D)
  (@df_ne A2 B2)
  (@iffalse (wceq A2 B2) C D)


/-- Distribute a function over an if-clause. (Contributed by Mario Carneiro, 14-Aug-2013.) -/
theorem ifsb {ph : wff} {A2 B2 C D E : «class»}
  (ifsb_1 : ⊦ wi (wceq (cif ph A2 B2) A2) (wceq C D))
  (ifsb_2 : ⊦ wi (wceq (cif ph A2 B2) B2) (wceq C E)) :
  ⊦ wceq C (cif ph D E) :=
@pm2_61i ph (wceq C (cif ph D E))
  (@eqtr4d ph C D (cif ph D E)
    (@syl ph (wceq (cif ph A2 B2) A2) (wceq C D)
      (@iftrue ph A2 B2)
      ifsb_1)
    (@iftrue ph D E))
  (@eqtr4d (wn ph) C E (cif ph D E)
    (@syl (wn ph) (wceq (cif ph A2 B2) B2) (wceq C E)
      (@iffalse ph A2 B2)
      ifsb_2)
    (@iffalse ph D E))


/-- Equality theorem for conditional operators. (Contributed by NM, 1-Sep-2004.) -/
theorem ifeq12 {ph : wff} {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wceq (cif ph A2 C) (cif ph B2 D)) :=
@sylan9eq (wceq A2 B2) (wceq C D) (cif ph A2 C) (cif ph B2 C) (cif ph B2 D)
  (@ifeq1 ph A2 B2 C)
  (@ifeq2 ph C D B2)


/-- Equality deduction for conditional operator. (Contributed by NM, 16-Feb-2005.) -/
theorem ifeq1d {ph ps : wff} {A2 B2 C : «class»}
  (ifeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps A2 C) (cif ps B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cif ps A2 C) (cif ps B2 C))
  ifeq1d_1
  (@ifeq1 ps A2 B2 C)


/-- Equality deduction for conditional operator. (Contributed by NM, 16-Feb-2005.) -/
theorem ifeq2d {ph ps : wff} {A2 B2 C : «class»}
  (ifeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps C A2) (cif ps C B2)) :=
@syl ph (wceq A2 B2) (wceq (cif ps C A2) (cif ps C B2))
  ifeq1d_1
  (@ifeq2 ps A2 B2 C)


/-- Equality deduction for conditional operator. (Contributed by NM, 24-Mar-2015.) -/
theorem ifeq12d {ph ps : wff} {A2 B2 C D : «class»}
  (ifeq1d_1 : ⊦ wi ph (wceq A2 B2))
  (ifeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cif ps A2 C) (cif ps B2 D)) :=
@eqtrd ph (cif ps A2 C) (cif ps B2 C) (cif ps B2 D)
  (@ifeq1d ph ps A2 B2 C
    ifeq1d_1)
  (@ifeq2d ph ps C D B2
    ifeq12d_2)


/-- Equivalence theorem for conditional operators. (Contributed by Raph Levien, 15-Jan-2004.) -/
theorem ifbi {ph ps : wff} {A2 B2 : «class»} :
  ⊦ wi (wb ph ps) (wceq (cif ph A2 B2) (cif ps A2 B2)) :=
@sylbi (wb ph ps) (wo (wa ph ps) (wa (wn ph) (wn ps))) (wceq (cif ph A2 B2) (cif ps A2 B2))
  (@dfbi3 ph ps)
  (@jaoi (wa ph ps) (wceq (cif ph A2 B2) (cif ps A2 B2)) (wa (wn ph) (wn ps))
    (@sylan9eq ph ps (cif ph A2 B2) A2 (cif ps A2 B2)
      (@iftrue ph A2 B2)
      (@eqcomd ps (cif ps A2 B2) A2
        (@iftrue ps A2 B2)))
    (@sylan9eq (wn ph) (wn ps) (cif ph A2 B2) B2 (cif ps A2 B2)
      (@iffalse ph A2 B2)
      (@eqcomd (wn ps) (cif ps A2 B2) B2
        (@iffalse ps A2 B2))))


/-- Equivalence deduction for conditional operators. (Contributed by NM, 18-Apr-2005.) -/
theorem ifbid {ph ps ch : wff} {A2 B2 : «class»}
  (ifbid_1 : ⊦ wi ph (wb ps ch)) :
  ⊦ wi ph (wceq (cif ps A2 B2) (cif ch A2 B2)) :=
@syl ph (wb ps ch) (wceq (cif ps A2 B2) (cif ch A2 B2))
  ifbid_1
  (@ifbi ps ch A2 B2)


/-- Equivalence/equality deduction for conditional operators. (Contributed by JJ, 25-Sep-2018.) -/
theorem ifbieq1d {ph ps ch : wff} {A2 B2 C : «class»}
  (ifbieq1d_1 : ⊦ wi ph (wb ps ch))
  (ifbieq1d_2 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps A2 C) (cif ch B2 C)) :=
@eqtrd ph (cif ps A2 C) (cif ch A2 C) (cif ch B2 C)
  (@ifbid ph ps ch A2 C
    ifbieq1d_1)
  (@ifeq1d ph ch A2 B2 C
    ifbieq1d_2)


/-- Equivalence/equality inference for conditional operators. (Contributed by Paul Chapman,
22-Jun-2011.) -/
theorem ifbieq2i {ph ps : wff} {A2 B2 C : «class»}
  (ifbieq2i_1 : ⊦ wb ph ps)
  (ifbieq2i_2 : ⊦ wceq A2 B2) :
  ⊦ wceq (cif ph C A2) (cif ps C B2) :=
@eqtri (cif ph C A2) (cif ps C A2) (cif ps C B2)
  (@ax_mp (wb ph ps) (wceq (cif ph C A2) (cif ps C A2))
    ifbieq2i_1
    (@ifbi ph ps C A2))
  (@ax_mp (wceq A2 B2) (wceq (cif ps C A2) (cif ps C B2))
    ifbieq2i_2
    (@ifeq2 ps A2 B2 C))


/-- Equivalence/equality deduction for conditional operators. (Contributed by Paul Chapman,
22-Jun-2011.) -/
theorem ifbieq2d {ph ps ch : wff} {A2 B2 C : «class»}
  (ifbieq2d_1 : ⊦ wi ph (wb ps ch))
  (ifbieq2d_2 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps C A2) (cif ch C B2)) :=
@eqtrd ph (cif ps C A2) (cif ch C A2) (cif ch C B2)
  (@ifbid ph ps ch C A2
    ifbieq2d_1)
  (@ifeq2d ph ch A2 B2 C
    ifbieq2d_2)


/-- Equivalence deduction for conditional operators. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem ifbieq12d {ph ps ch : wff} {A2 B2 C D : «class»}
  (ifbieq12d_1 : ⊦ wi ph (wb ps ch))
  (ifbieq12d_2 : ⊦ wi ph (wceq A2 C))
  (ifbieq12d_3 : ⊦ wi ph (wceq B2 D)) :
  ⊦ wi ph (wceq (cif ps A2 B2) (cif ch C D)) :=
@eqtrd ph (cif ps A2 B2) (cif ch A2 B2) (cif ch C D)
  (@ifbid ph ps ch A2 B2
    ifbieq12d_1)
  (@ifeq12d ph ch A2 C B2 D
    ifbieq12d_2
    ifbieq12d_3)


/-- Deduction form of ~ nfif . (Contributed by NM, 15-Feb-2013.) (Revised by Mario Carneiro,
13-Oct-2016.) -/
theorem nfifd {ph ps : setvar → wff} {A2 B2 : setvar → «class»}
  (nfifd_2 : ∀ x3, ⊦ wi (ph x3) (wnf (λ x3, ps x3)))
  (nfifd_3 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (nfifd_4 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnfc (λ x3, cif (ps x3) (A2 x3) (B2 x3))) :=
@nfcxfrd (λ x3, ph x3) (λ x3, cif (ps x3) (A2 x3) (B2 x3)) (λ x3, cab (λ y, wi (wi (wcel (cv y) (B2 x3)) (ps x3)) (wa (wcel (cv y) (A2 x3)) (ps x3))))
  (λ x3, @dfif2 (ps x3) (A2 x3) (B2 x3))
  (λ x3, setvar.forget $ λ y : setvar,
    show ⊦ wi (ph x3) (wnfc (λ x3, cab (λ y, wi (wi (wcel (cv y) (B2 x3)) (ps x3)) (wa (wcel (cv y) (A2 x3)) (ps x3))))), from
    @nfabdw (λ x3 y, ph x3) (λ x3 y, wi (wi (wcel (cv y) (B2 x3)) (ps x3)) (wa (wcel (cv y) (A2 x3)) (ps x3)))
      (λ x3, @nfv (ph x3))
      (λ x3 y, @nfimd (λ x3, ph x3) (λ x3, wi (wcel (cv y) (B2 x3)) (ps x3)) (λ x3, wa (wcel (cv y) (A2 x3)) (ps x3))
        (λ x3, @nfimd (λ x3, ph x3) (λ x3, wcel (cv y) (B2 x3)) (λ x3, ps x3)
          (λ x3, @nfcrd (λ x3 y, ph x3) (λ x3 y, B2 x3)
            (λ x3 y, nfifd_4 x3) x3 y)
          (λ x3, nfifd_2 x3) x3)
        (λ x3, @nfand (λ x3, ph x3) (λ x3, wcel (cv y) (A2 x3)) (λ x3, ps x3)
          (λ x3, @nfcrd (λ x3 y, ph x3) (λ x3 y, A2 x3)
            (λ x3 y, nfifd_3 x3) x3 y)
          (λ x3, nfifd_2 x3) x3) x3) x3 y) x3


/-- Bound-variable hypothesis builder for a conditional operator. (Contributed by NM, 16-Feb-2005.)
(Proof shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem nfif {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (nfif_1 : ⊦ wnf (λ x3, ph x3))
  (nfif_2 : ⊦ wnfc (λ x3, A2 x3))
  (nfif_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cif (ph x3) (A2 x3) (B2 x3)) :=
@mptru (wnfc (λ x3, cif (ph x3) (A2 x3) (B2 x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnfc (λ x3, cif (ph x3) (A2 x3) (B2 x3))), from
    @nfifd (λ x3, wtru) (λ x3, ph x3) (λ x3, A2 x3) (λ x3, B2 x3)
      (λ x3, @a1i (wnf (λ x3, ph x3)) wtru
        nfif_1)
      (λ x3, @a1i (wnfc (λ x3, A2 x3)) wtru
        nfif_2)
      (λ x3, @a1i (wnfc (λ x3, B2 x3)) wtru
        nfif_3) x3)


/-- Conditional equality. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem ifeq1da {ph ps : wff} {A2 B2 C : «class»}
  (ifeq1da_1 : ⊦ wi (wa ph ps) (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps A2 C) (cif ps B2 C)) :=
@pm2_61dan ph ps (wceq (cif ps A2 C) (cif ps B2 C))
  (@ifeq1d (wa ph ps) ps A2 B2 C
    ifeq1da_1)
  (@adantl (wn ps) (wceq (cif ps A2 C) (cif ps B2 C)) ph
    (@eqtr4d (wn ps) (cif ps A2 C) C (cif ps B2 C)
      (@iffalse ps A2 C)
      (@iffalse ps B2 C)))


/-- Conditional equality. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem ifeq2da {ph ps : wff} {A2 B2 C : «class»}
  (ifeq2da_1 : ⊦ wi (wa ph (wn ps)) (wceq A2 B2)) :
  ⊦ wi ph (wceq (cif ps C A2) (cif ps C B2)) :=
@pm2_61dan ph ps (wceq (cif ps C A2) (cif ps C B2))
  (@adantl ps (wceq (cif ps C A2) (cif ps C B2)) ph
    (@eqtr4d ps (cif ps C A2) C (cif ps C B2)
      (@iftrue ps C A2)
      (@iftrue ps C B2)))
  (@ifeq2d (wa ph (wn ps)) ps A2 B2 C
    ifeq2da_1)


/-- Equivalence deduction for conditional operators. (Contributed by Wolf Lammen, 24-Jun-2021.) -/
theorem ifeq12da {ph ps : wff} {A2 B2 C D : «class»}
  (ifeq12da_1 : ⊦ wi (wa ph ps) (wceq A2 C))
  (ifeq12da_2 : ⊦ wi (wa ph (wn ps)) (wceq B2 D)) :
  ⊦ wi ph (wceq (cif ps A2 B2) (cif ps C D)) :=
@pm2_61dan ph ps (wceq (cif ps A2 B2) (cif ps C D))
  (@sylan9eq ph ps (cif ps A2 B2) (cif ps C B2) (cif ps C D)
    (@ifeq1da ph ps A2 C B2
      ifeq12da_1)
    (@eqtr4d ps (cif ps C B2) C (cif ps C D)
      (@iftrue ps C B2)
      (@iftrue ps C D)))
  (@sylan9eq ph (wn ps) (cif ps A2 B2) (cif ps A2 D) (cif ps C D)
    (@ifeq2da ph ps B2 D A2
      ifeq12da_2)
    (@eqtr4d (wn ps) (cif ps A2 D) D (cif ps C D)
      (@iffalse ps A2 D)
      (@iffalse ps C D)))


/-- Conditional closure. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem ifclda {ph ps : wff} {A2 B2 C : «class»}
  (ifclda_1 : ⊦ wi (wa ph ps) (wcel A2 C))
  (ifclda_2 : ⊦ wi (wa ph (wn ps)) (wcel B2 C)) :
  ⊦ wi ph (wcel (cif ps A2 B2) C) :=
@pm2_61dan ph ps (wcel (cif ps A2 B2) C)
  (@eqeltrd (wa ph ps) (cif ps A2 B2) A2 C
    (@adantl ps (wceq (cif ps A2 B2) A2) ph
      (@iftrue ps A2 B2))
    ifclda_1)
  (@eqeltrd (wa ph (wn ps)) (cif ps A2 B2) B2 C
    (@adantl (wn ps) (wceq (cif ps A2 B2) B2) ph
      (@iffalse ps A2 B2))
    ifclda_2)


/-- Separation of the values of the conditional operator. (Contributed by Alexander van der Vekens,
13-Apr-2018.) -/
theorem ifeqda {ph ps : wff} {A2 B2 C : «class»}
  (ifeqda_1 : ⊦ wi (wa ph ps) (wceq A2 C))
  (ifeqda_2 : ⊦ wi (wa ph (wn ps)) (wceq B2 C)) :
  ⊦ wi ph (wceq (cif ps A2 B2) C) :=
@pm2_61dan ph ps (wceq (cif ps A2 B2) C)
  (@eqtrd (wa ph ps) (cif ps A2 B2) A2 C
    (@adantl ps (wceq (cif ps A2 B2) A2) ph
      (@iftrue ps A2 B2))
    ifeqda_1)
  (@eqtrd (wa ph (wn ps)) (cif ps A2 B2) B2 C
    (@adantl (wn ps) (wceq (cif ps A2 B2) B2) ph
      (@iffalse ps A2 B2))
    ifeqda_2)


/-- Elimination of a conditional operator contained in a wff ` ps ` . (Contributed by NM,
15-Feb-2005.) (Proof shortened by NM, 25-Apr-2019.) -/
theorem elimif {ph ps ch th : wff} {A2 B2 : «class»}
  (elimif_1 : ⊦ wi (wceq (cif ph A2 B2) A2) (wb ps ch))
  (elimif_2 : ⊦ wi (wceq (cif ph A2 B2) B2) (wb ps th)) :
  ⊦ wb ps (wo (wa ph ch) (wa (wn ph) th)) :=
@cases ph ps ch th
  (@syl ph (wceq (cif ph A2 B2) A2) (wb ps ch)
    (@iftrue ph A2 B2)
    elimif_1)
  (@syl (wn ph) (wceq (cif ph A2 B2) B2) (wb ps th)
    (@iffalse ph A2 B2)
    elimif_2)


/-- A wff ` th ` containing a conditional operator is true when both of its cases are true.
(Contributed by NM, 15-Feb-2015.) -/
theorem ifbothda {ph ps ch th et : wff} {A2 B2 : «class»}
  (ifboth_1 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ps th))
  (ifboth_2 : ⊦ wi (wceq B2 (cif ph A2 B2)) (wb ch th))
  (ifbothda_3 : ⊦ wi (wa et ph) ps)
  (ifbothda_4 : ⊦ wi (wa et (wn ph)) ch) :
  ⊦ wi et th :=
@pm2_61dan et ph th
  (@mpbid (wa et ph) ps th
    ifbothda_3
    (@adantl ph (wb ps th) et
      (@syl ph (wceq A2 (cif ph A2 B2)) (wb ps th)
        (@eqcomd ph (cif ph A2 B2) A2
          (@iftrue ph A2 B2))
        ifboth_1)))
  (@mpbid (wa et (wn ph)) ch th
    ifbothda_4
    (@adantl (wn ph) (wb ch th) et
      (@syl (wn ph) (wceq B2 (cif ph A2 B2)) (wb ch th)
        (@eqcomd (wn ph) (cif ph A2 B2) B2
          (@iffalse ph A2 B2))
        ifboth_2)))


/-- A wff ` th ` containing a conditional operator is true when both of its cases are true.
(Contributed by NM, 3-Sep-2006.) (Revised by Mario Carneiro, 15-Feb-2015.) -/
theorem ifboth {ph ps ch th : wff} {A2 B2 : «class»}
  (ifboth_1 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ps th))
  (ifboth_2 : ⊦ wi (wceq B2 (cif ph A2 B2)) (wb ch th)) :
  ⊦ wi (wa ps ch) th :=
@ifbothda ph ps ch th (wa ps ch) A2 B2
  ifboth_1
  ifboth_2
  (@simpll ps ch ph)
  (@simplr ps ch (wn ph))


/-- Identical true and false arguments in the conditional operator. (Contributed by NM,
18-Apr-2005.) -/
theorem ifid {ph : wff} {A2 : «class»} :
  ⊦ wceq (cif ph A2 A2) A2 :=
@pm2_61i ph (wceq (cif ph A2 A2) A2)
  (@iftrue ph A2 A2)
  (@iffalse ph A2 A2)


/-- Membership in a conditional operator. (Contributed by NM, 14-Feb-2005.) -/
theorem elif {ph : wff} {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cif ph B2 C)) (wo (wa ph (wcel A2 B2)) (wa (wn ph) (wcel A2 C))) :=
@elimif ph (wcel A2 (cif ph B2 C)) (wcel A2 B2) (wcel A2 C) B2 C
  (@eleq2 (cif ph B2 C) B2 A2)
  (@eleq2 (cif ph B2 C) C A2)


/-- Membership (closure) of a conditional operator. (Contributed by NM, 4-Apr-2005.) -/
theorem ifcl {ph : wff} {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 C)) (wcel (cif ph A2 B2) C) :=
@ifboth ph (wcel A2 C) (wcel B2 C) (wcel (cif ph A2 B2) C) A2 B2
  (@eleq1 A2 (cif ph A2 B2) C)
  (@eleq1 B2 (cif ph A2 B2) C)


/-- Membership (closure) of a conditional operator, deduction form. (Contributed by SO,
16-Jul-2018.) -/
theorem ifcld {ph ps : wff} {A2 B2 C : «class»}
  (ifcld_a : ⊦ wi ph (wcel A2 C))
  (ifcld_b : ⊦ wi ph (wcel B2 C)) :
  ⊦ wi ph (wcel (cif ps A2 B2) C) :=
@syl2anc ph (wcel A2 C) (wcel B2 C) (wcel (cif ps A2 B2) C)
  ifcld_a
  ifcld_b
  (@ifcl ps A2 B2 C)


/-- Inference associated with ~ ifcl . Membership (closure) of a conditional operator. Also usable
to keep a membership hypothesis for the weak deduction theorem ~ dedth when the special case ` B e.
C ` is provable. (Contributed by NM, 14-Aug-1999.) (Proof shortened by BJ, 1-Sep-2022.) -/
theorem ifcli {ph : wff} {A2 B2 C : «class»}
  (ifcli_1 : ⊦ wcel A2 C)
  (ifcli_2 : ⊦ wcel B2 C) :
  ⊦ wcel (cif ph A2 B2) C :=
@mp2an (wcel A2 C) (wcel B2 C) (wcel (cif ph A2 B2) C)
  ifcli_1
  ifcli_2
  (@ifcl ph A2 B2 C)


/-- Existence of the conditional operator (deduction form). (Contributed by SN, 26-Jul-2024.) -/
theorem ifexd {ph ps : wff} {A2 B2 V W : «class»}
  (ifexd_1 : ⊦ wi ph (wcel A2 V))
  (ifexd_2 : ⊦ wi ph (wcel B2 W)) :
  ⊦ wi ph (wcel (cif ps A2 B2) cvv) :=
@ifcld ph ps A2 B2 cvv
  (@elexd ph A2 V
    ifexd_1)
  (@elexd ph B2 W
    ifexd_2)


/-- Existence of the conditional operator (closed form). (Contributed by NM, 21-Mar-2011.) (Proof
shortened by BJ, 1-Sep-2022.) -/
theorem ifexg {ph : wff} {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wcel (cif ph A2 B2) cvv) :=
@ifexd (wa (wcel A2 V) (wcel B2 W)) ph A2 B2 V W
  (@simpl (wcel A2 V) (wcel B2 W))
  (@simpr (wcel A2 V) (wcel B2 W))


/-- Existence of the conditional operator (inference form). (Contributed by NM, 2-Sep-2004.) -/
theorem ifex {ph : wff} {A2 B2 : «class»}
  (ifex_1 : ⊦ wcel A2 cvv)
  (ifex_2 : ⊦ wcel B2 cvv) :
  ⊦ wcel (cif ph A2 B2) cvv :=
@ifcli ph A2 B2 cvv
  ifex_1
  ifex_2


/-- The possible values of a conditional operator. (Contributed by NM, 17-Jun-2007.) (Proof
shortened by Andrew Salmon, 26-Jun-2011.) -/
theorem ifeqor {ph : wff} {A2 B2 : «class»} :
  ⊦ wo (wceq (cif ph A2 B2) A2) (wceq (cif ph A2 B2) B2) :=
@orri (wceq (cif ph A2 B2) A2) (wceq (cif ph A2 B2) B2)
  (@iffalsed (wn (wceq (cif ph A2 B2) A2)) ph A2 B2
    (@con3i ph (wceq (cif ph A2 B2) A2)
      (@iftrue ph A2 B2)))


/-- Negating the first argument swaps the last two arguments of a conditional operator. (Contributed
by NM, 21-Jun-2007.) -/
theorem ifnot {ph : wff} {A2 B2 : «class»} :
  ⊦ wceq (cif (wn ph) A2 B2) (cif ph B2 A2) :=
@pm2_61i ph (wceq (cif (wn ph) A2 B2) (cif ph B2 A2))
  (@eqtr4d ph (cif (wn ph) A2 B2) B2 (cif ph B2 A2)
    (@iffalsed ph (wn ph) A2 B2
      (@notnot ph))
    (@iftrue ph B2 A2))
  (@eqtr4d (wn ph) (cif (wn ph) A2 B2) A2 (cif ph B2 A2)
    (@iftrue (wn ph) A2 B2)
    (@iffalse ph B2 A2))


/-- Weak deduction theorem that eliminates a hypothesis ` ph ` , making it become an antecedent. We
assume that a proof exists for ` ph ` when the class variable ` A ` is replaced with a specific
class ` B ` . The hypothesis ` ch ` should be assigned to the inference, and the inference
hypothesis eliminated with ~ elimhyp . If the inference has other hypotheses with class variable ` A
` , these can be kept by assigning ~ keephyp to them. For more information, see the Weak Deduction
Theorem page ~ mmdeduction.html . (Contributed by NM, 15-May-1999.) -/
theorem dedth {ph ps ch : wff} {A2 B2 : «class»}
  (dedth_1 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ps ch))
  (dedth_2 : ⊦ ch) :
  ⊦ wi ph ps :=
@mpbiri ph ps ch
  dedth_2
  (@syl ph (wceq A2 (cif ph A2 B2)) (wb ps ch)
    (@eqcomd ph (cif ph A2 B2) A2
      (@iftrue ph A2 B2))
    dedth_1)


/-- Weak deduction theorem eliminating two hypotheses. This theorem is simpler to use than ~ dedth2v
but requires that each hypothesis have exactly one class variable. See also comments in ~ dedth .
(Contributed by NM, 15-May-1999.) -/
theorem dedth2h {ph ps ch th ta : wff} {A2 B2 C D : «class»}
  (dedth2h_1 : ⊦ wi (wceq A2 (cif ph A2 C)) (wb ch th))
  (dedth2h_2 : ⊦ wi (wceq B2 (cif ps B2 D)) (wb th ta))
  (dedth2h_3 : ⊦ ta) :
  ⊦ wi (wa ph ps) ch :=
@imp ph ps ch
  (@dedth ph (wi ps ch) (wi ps th) A2 C
    (@imbi2d (wceq A2 (cif ph A2 C)) ch th ps
      dedth2h_1)
    (@dedth ps th ta B2 D
      dedth2h_2
      dedth2h_3))


/-- Weak deduction theorem eliminating three hypotheses. See comments in ~ dedth2h . (Contributed by
NM, 15-May-1999.) -/
theorem dedth3h {ph ps ch th ta et ze : wff} {A2 B2 C D R S : «class»}
  (dedth3h_1 : ⊦ wi (wceq A2 (cif ph A2 D)) (wb th ta))
  (dedth3h_2 : ⊦ wi (wceq B2 (cif ps B2 R)) (wb ta et))
  (dedth3h_3 : ⊦ wi (wceq C (cif ch C S)) (wb et ze))
  (dedth3h_4 : ⊦ ze) :
  ⊦ wi (w3a ph ps ch) th :=
@«3impib» ph ps ch th
  (@dedth ph (wi (wa ps ch) th) (wi (wa ps ch) ta) A2 D
    (@imbi2d (wceq A2 (cif ph A2 D)) th ta (wa ps ch)
      dedth3h_1)
    (@dedth2h ps ch ta et ze B2 C R S
      dedth3h_2
      dedth3h_3
      dedth3h_4))


/-- Eliminate a hypothesis containing class variable ` A ` when it is known for a specific class ` B
` . For more information, see comments in ~ dedth . (Contributed by NM, 15-May-1999.) -/
theorem elimhyp {ph ps ch : wff} {A2 B2 : «class»}
  (elimhyp_1 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ph ps))
  (elimhyp_2 : ⊦ wi (wceq B2 (cif ph A2 B2)) (wb ch ps))
  (elimhyp_3 : ⊦ ch) :
  ⊦ ps :=
@pm2_61i ph ps
  (@ibi ph ps
    (@syl ph (wceq A2 (cif ph A2 B2)) (wb ph ps)
      (@eqcomd ph (cif ph A2 B2) A2
        (@iftrue ph A2 B2))
      elimhyp_1))
  (@mpbii (wn ph) ch ps
    elimhyp_3
    (@syl (wn ph) (wceq B2 (cif ph A2 B2)) (wb ch ps)
      (@eqcomd (wn ph) (cif ph A2 B2) B2
        (@iffalse ph A2 B2))
      elimhyp_2))


/-- Eliminate a membership hypothesis for weak deduction theorem, when special case ` B e. C ` is
provable. (Contributed by NM, 15-May-1999.) -/
theorem elimel {A2 B2 C : «class»}
  (elimel_1 : ⊦ wcel B2 C) :
  ⊦ wcel (cif (wcel A2 C) A2 B2) C :=
@elimhyp (wcel A2 C) (wcel (cif (wcel A2 C) A2 B2) C) (wcel B2 C) A2 B2
  (@eleq1 A2 (cif (wcel A2 C) A2 B2) C)
  (@eleq1 B2 (cif (wcel A2 C) A2 B2) C)
  elimel_1


/-- Version of ~ elimhyp where the hypothesis is deduced from the final antecedent. See ~ divalg for
an example of its use. (Contributed by Paul Chapman, 25-Mar-2008.) -/
theorem elimdhyp {ph ps ch th : wff} {A2 B2 : «class»}
  (elimdhyp_1 : ⊦ wi ph ps)
  (elimdhyp_2 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ps ch))
  (elimdhyp_3 : ⊦ wi (wceq B2 (cif ph A2 B2)) (wb th ch))
  (elimdhyp_4 : ⊦ th) :
  ⊦ ch :=
@pm2_61i ph ch
  (@mpbid ph ps ch
    elimdhyp_1
    (@syl ph (wceq A2 (cif ph A2 B2)) (wb ps ch)
      (@eqcomd ph (cif ph A2 B2) A2
        (@iftrue ph A2 B2))
      elimdhyp_2))
  (@mpbii (wn ph) th ch
    elimdhyp_4
    (@syl (wn ph) (wceq B2 (cif ph A2 B2)) (wb th ch)
      (@eqcomd (wn ph) (cif ph A2 B2) B2
        (@iffalse ph A2 B2))
      elimdhyp_3))


/-- Transform a hypothesis ` ps ` that we want to keep (but contains the same class variable ` A `
used in the eliminated hypothesis) for use with the weak deduction theorem. (Contributed by NM,
15-May-1999.) -/
theorem keephyp {ph ps ch th : wff} {A2 B2 : «class»}
  (keephyp_1 : ⊦ wi (wceq A2 (cif ph A2 B2)) (wb ps th))
  (keephyp_2 : ⊦ wi (wceq B2 (cif ph A2 B2)) (wb ch th))
  (keephyp_3 : ⊦ ps)
  (keephyp_4 : ⊦ ch) :
  ⊦ th :=
@mp2an ps ch th
  keephyp_3
  keephyp_4
  (@ifboth ph ps ch th A2 B2
    keephyp_1
    keephyp_2)


-- /-- Extend class notation to include power class. (The tilde in the Metamath token is meant to
-- suggest the calligraphic font of the P.) -/
-- constant cpw : «class» → «class»


-- /-- Define power class. Definition 5.10 of [TakeutiZaring] p. 17, but we also let it apply to
-- proper classes, i.e. those that are not members of ` _V ` . When applied to a set, this produces
-- its power set. A power set of S is the set of all subsets of S, including the empty set and S
-- itself. For example, if ` A = { 3 , 5 , 7 } ` , then ` ~P A = { (/) , { 3 } , { 5 } , { 7 } , { 3
-- , 5 } , ` ` { 3 , 7 } , { 5 , 7 } , { 3 , 5 , 7 } } ` ( ~ ex-pw ). We will later introduce the
-- Axiom of Power Sets ~ ax-pow , which can be expressed in class notation per ~ pwexg . Still later
-- we will prove, in ~ hashpw , that the size of the power set of a finite set is 2 raised to the
-- power of the size of the set. (Contributed by NM, 24-Jun-1993.) -/
-- axiom df_pw {A2 : «class»} : ⊦ wceq (cpw A2) (cab (λ x3, wss (cv x3) A2))


/-- Membership in a power class. Theorem 86 of [Suppes] p. 47. See also ~ elpw2g . (Contributed by
NM, 6-Aug-2000.) (Proof shortened by BJ, 31-Dec-2023.) -/
theorem elpwg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (cpw B2)) (wss A2 B2)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 V) (wb (wcel A2 (cpw B2)) (wss A2 B2)), from
  @elab2gw (λ x3, wss (cv x3) B2) (λ y, wss (cv y) B2) (λ x3, wss A2 B2) (λ x3, A2) (λ x3 y, cpw B2) (λ x3 y, V)
    (λ x3 y, @sseq1 (cv x3) (cv y) B2)
    (λ x3 y, @sseq1 (cv y) A2 B2)
    (λ x3 y, @df_pw B2) x3 y


/-- Membership in a power class. Theorem 86 of [Suppes] p. 47. (Contributed by NM, 31-Dec-1993.)
(Proof shortened by BJ, 31-Dec-2023.) -/
theorem elpw {A2 B2 : «class»}
  (elpw_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cpw B2)) (wss A2 B2) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cpw B2)) (wss A2 B2))
  elpw_1
  (@elpwg A2 B2 cvv)


/-- Setvar variable membership in a power class. (Contributed by David A. Wheeler, 8-Dec-2018.) -/
theorem velpw {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wcel (cv x3) (cpw (A2 x3))) (wss (cv x3) (A2 x3)) :=
@elpw (cv x3) (A2 x3)
  (@vex x3)


/-- Membership in a power class. (Contributed by Glauco Siliprandi, 11-Oct-2020.) -/
theorem elpwd {ph : wff} {A2 B2 V : «class»}
  (elpwd_1 : ⊦ wi ph (wcel A2 V))
  (elpwd_2 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wcel A2 (cpw B2)) :=
@mpbird ph (wcel A2 (cpw B2)) (wss A2 B2)
  elpwd_2
  (@syl ph (wcel A2 V) (wb (wcel A2 (cpw B2)) (wss A2 B2))
    elpwd_1
    (@elpwg A2 B2 V))


/-- Subset relation implied by membership in a power class. (Contributed by NM, 17-Feb-2007.) -/
theorem elpwi {A2 B2 : «class»} :
  ⊦ wi (wcel A2 (cpw B2)) (wss A2 B2) :=
@ibi (wcel A2 (cpw B2)) (wss A2 B2)
  (@elpwg A2 B2 (cpw B2))


/-- An element of a power class is a subclass. Deduction form of ~ elpwi . (Contributed by David
Moews, 1-May-2017.) -/
theorem elpwid {ph : wff} {A2 B2 : «class»}
  (elpwid_1 : ⊦ wi ph (wcel A2 (cpw B2))) :
  ⊦ wi ph (wss A2 B2) :=
@syl ph (wcel A2 (cpw B2)) (wss A2 B2)
  elpwid_1
  (@elpwi A2 B2)


/-- If ` A ` belongs to a part of ` C ` , then ` A ` belongs to ` C ` . (Contributed by FL,
3-Aug-2009.) -/
theorem elelpwi {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wcel B2 (cpw C))) (wcel A2 C) :=
@impcom (wcel B2 (cpw C)) (wcel A2 B2) (wcel A2 C)
  (@sseld (wcel B2 (cpw C)) B2 C A2
    (@elpwi B2 C))


/-- The powerclass preserves inclusion. See ~ sspwb for the biconditional version. (Contributed by
NM, 13-Oct-1996.) Extract forward implication of ~ sspwb since it requires fewer axioms. (Revised by
BJ, 13-Apr-2024.) -/
theorem sspw {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (cpw A2) (cpw B2)) :=
@ssrdv (wss A2 B2) (cpw A2) (cpw B2)
  (λ x3, @«3imtr4g» (wss A2 B2) (wss (cv x3) A2) (wss (cv x3) B2) (wcel (cv x3) (cpw A2)) (wcel (cv x3) (cpw B2))
    (@com12 (wss (cv x3) A2) (wss A2 B2) (wss (cv x3) B2)
      (@sstr2 (cv x3) A2 B2))
    (@velpw (λ x3, A2) x3)
    (@velpw (λ x3, B2) x3))


/-- The powerclass preserves inclusion (inference form). (Contributed by BJ, 13-Apr-2024.) -/
theorem sspwi {A2 B2 : «class»}
  (sspwi_1 : ⊦ wss A2 B2) :
  ⊦ wss (cpw A2) (cpw B2) :=
@ax_mp (wss A2 B2) (wss (cpw A2) (cpw B2))
  sspwi_1
  (@sspw A2 B2)


/-- The powerclass preserves inclusion (deduction form). (Contributed by BJ, 13-Apr-2024.) -/
theorem sspwd {ph : wff} {A2 B2 : «class»}
  (sspwd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cpw A2) (cpw B2)) :=
@syl ph (wss A2 B2) (wss (cpw A2) (cpw B2))
  sspwd_1
  (@sspw A2 B2)


/-- Equality theorem for power class. (Contributed by NM, 21-Jun-1993.) (Proof shortened by BJ,
13-Apr-2024.) -/
theorem pweq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cpw A2) (cpw B2)) :=
@eqssd (wceq A2 B2) (cpw A2) (cpw B2)
  (@sspwd (wceq A2 B2) A2 B2
    (@eqimss A2 B2))
  (@sspwd (wceq A2 B2) B2 A2
    (@eqimss2 B2 A2))


/-- Equality inference for power class. (Contributed by NM, 27-Nov-2013.) -/
theorem pweqi {A2 B2 : «class»}
  (pweqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cpw A2) (cpw B2) :=
@ax_mp (wceq A2 B2) (wceq (cpw A2) (cpw B2))
  pweqi_1
  (@pweq A2 B2)


/-- Equality deduction for power class. (Contributed by NM, 27-Nov-2013.) -/
theorem pweqd {ph : wff} {A2 B2 : «class»}
  (pweqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cpw A2) (cpw B2)) :=
@syl ph (wceq A2 B2) (wceq (cpw A2) (cpw B2))
  pweqd_1
  (@pweq A2 B2)


/-- A set is an element of its power set. (Contributed by Stefan O'Rear, 1-Feb-2015.) -/
theorem pwidg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel A2 (cpw A2)) :=
@mpbiri (wcel A2 V) (wcel A2 (cpw A2)) (wss A2 A2)
  (@ssid A2)
  (@elpwg A2 A2 V)


/-- A set is a member of its power class. Theorem 87 of [Suppes] p. 47. (Contributed by NM,
5-Aug-1993.) -/
theorem pwid {A2 : «class»}
  (pwid_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel A2 (cpw A2) :=
@ax_mp (wcel A2 cvv) (wcel A2 (cpw A2))
  pwid_1
  (@pwidg A2 cvv)


/-- Break up the power class of a union into a union of smaller classes. (Contributed by NM,
25-Mar-2007.) (Proof shortened by Thierry Arnoux, 20-Dec-2016.) Remove use of ~ ax-sep , ~ ax-nul ,
~ ax-pr and shorten proof. (Revised by BJ, 14-Apr-2024.) -/
theorem pwundif {A2 B2 : «class»} :
  ⊦ wceq (cpw (cun A2 B2)) (cun (cdif (cpw (cun A2 B2)) (cpw A2)) (cpw A2)) :=
@eqtr3i (cun (cpw A2) (cdif (cpw (cun A2 B2)) (cpw A2))) (cpw (cun A2 B2)) (cun (cdif (cpw (cun A2 B2)) (cpw A2)) (cpw A2))
  (@mpbi (wss (cpw A2) (cpw (cun A2 B2))) (wceq (cun (cpw A2) (cdif (cpw (cun A2 B2)) (cpw A2))) (cpw (cun A2 B2)))
    (@sspwi A2 (cun A2 B2)
      (@ssun1 A2 B2))
    (@undif (cpw A2) (cpw (cun A2 B2))))
  (@uncom (cpw A2) (cdif (cpw (cun A2 B2)) (cpw A2)))


-- /-- Extend class notation to include singleton. -/
-- constant csn : «class» → «class»


-- /-- Define the singleton of a class. Definition 7.1 of [Quine] p. 48. For convenience, it is
-- well-defined for proper classes, i.e., those that are not elements of ` _V ` , see ~ snprc . For
-- an alternate definition see ~ dfsn2 . (Contributed by NM, 21-Jun-1993.) -/
-- axiom df_sn {A2 : «class»} : ⊦ wceq (csn A2) (cab (λ x3, wceq (cv x3) A2))


-- /-- Extend class notation to include unordered pair. -/
-- constant cpr : «class» → «class» → «class»


-- /-- Define unordered pair of classes. Definition 7.1 of [Quine] p. 48. For example, ` A e. { 1 ,
-- -u 1 } -> ( A ^ 2 ) = 1 ` ( ~ ex-pr ). They are unordered, so ` { A , B } = { B , A } ` as proven
-- by ~ prcom . For a more traditional definition, but requiring a dummy variable, see ~ dfpr2 . ` {
-- A , A } ` is also an unordered pair, but also a singleton because of ` { A } = { A , A } ` (see ~
-- dfsn2 ). Therefore, ` { A , B } ` is called a _proper_ (unordered) pair iff ` A =/= B ` and ` A `
-- and ` B ` are sets. Note: ordered pairs are a completely different object defined below in ~
-- df-op . When the term "pair" is used without qualifier, it generally means "unordered pair", and
-- the context makes it clear which version is meant. (Contributed by NM, 21-Jun-1993.) -/
-- axiom df_pr {A2 B2 : «class»} : ⊦ wceq (cpr A2 B2) (cun (csn A2) (csn B2))


-- /-- Extend class notation to include unordered triple (sometimes called "unordered triplet"). -/
-- constant ctp : «class» → «class» → «class» → «class»


-- /-- Define unordered triple of classes. Definition of [Enderton] p. 19. Note: ordered triples are
-- a completely different object defined below in ~ df-ot . As with all tuples, when the term
-- "triple" is used without qualifier, it means "ordered triple". (Contributed by NM, 9-Apr-1994.)
-- -/
-- axiom df_tp {A2 B2 C : «class»} : ⊦ wceq (ctp A2 B2 C) (cun (cpr A2 B2) (csn C))


-- /-- Extend class notation to include ordered pair. -/
-- constant cop : «class» → «class» → «class»


-- /-- Definition of an ordered pair, equivalent to Kuratowski's definition ` { { A } , { A , B } }
-- ` when the arguments are sets. Since the behavior of Kuratowski definition is not very useful for
-- proper classes, we define it to be empty in this case (see ~ opprc1 , ~ opprc2 , and ~ 0nelop ).
-- For Kuratowski's actual definition when the arguments are sets, see ~ dfop . For the justifying
-- theorem (for sets) see ~ opth . See ~ dfopif for an equivalent formulation using the ` if `
-- operation. Definition 9.1 of [Quine] p. 58 defines an ordered pair unconditionally as ` <. A , B
-- >. = { { A } , { A , B } } ` , which has different behavior from our ~ df-op when the arguments
-- are proper classes. Ordinarily this difference is not important, since neither definition is
-- meaningful in that case. Our ~ df-op was chosen because it often makes proofs shorter by
-- eliminating unnecessary sethood hypotheses. There are other ways to define ordered pairs. The
-- basic requirement is that two ordered pairs are equal iff their respective members are equal. In
-- 1914 Norbert Wiener gave the first successful definition ` <. A , B >. `_2 ` = { { { A } , (/) }
-- , { { B } } } ` , justified by ~ opthwiener . This was simplified by Kazimierz Kuratowski in 1921
-- to our present definition. An even simpler definition ` <. A , B >. `_3 ` = { A , { A , B } } `
-- is justified by ~ opthreg , but it requires the Axiom of Regularity for its justification and is
-- not commonly used. A definition that also works for proper classes is ` <. A , B >. `_4 ` = ( ( A
-- X. { (/) } ) u. ( B X. { { (/) } } ) ) ` , justified by ~ opthprc . Nearly at the same time as
-- Norbert Wiener, Felix Hausdorff proposed the following definition in "Grundz&uuml;ge der
-- Mengenlehre" ("Basics of Set Theory"), p. 32, in 1914: ` <. A , B >. `_5 ` = { { A , O } , { B ,
-- T } } ` . Hausdorff used ` 1 ` and ` 2 ` instead of ` O ` and ` T ` , but actually any two
-- different fixed sets will do (e.g., ` O = (/) ` and ` T = { (/) } ` , see ~ 0nep0 ). Furthermore,
-- Hausdorff demanded that ` O ` and ` T ` are both different from ` A ` as well as ` B ` , which is
-- actually not necessary (at least not in full extent), see ~ opthhausdorff0 and ~ opthhausdorff .
-- If we restrict our sets to nonnegative integers, an ordered pair definition that involves only
-- elementary arithmetic is provided by ~ nn0opthi . An ordered pair of real numbers can also be
-- represented by a complex number as shown by ~ cru . Kuratowski's ordered pair definition is
-- standard for ZFC set theory, but it is very inconvenient to use in New Foundations theory because
-- it is not type-level; a common alternate definition in New Foundations is the definition from
-- [Rosser] p. 281. Since there are other ways to define ordered pairs, we discourage direct use of
-- this definition so that most theorems won't depend on this particular construction; theorems will
-- instead rely on ~ dfopif . (Contributed by NM, 28-May-1995.) (Revised by Mario Carneiro,
-- 26-Apr-2015.) (Avoid depending on this detail.) -/
-- axiom df_op {A2 B2 : «class»} : ⊦ wceq (cop A2 B2) (cab (λ x3, w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))))


/-- Equality theorem for singletons. Part of Exercise 4 of [TakeutiZaring] p. 15. (Contributed by
NM, 21-Jun-1993.) -/
theorem sneq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (csn A2) (csn B2)) :=
@«3eqtr4g» (wceq A2 B2) (cab (λ x3, wceq (cv x3) A2)) (cab (λ x3, wceq (cv x3) B2)) (csn A2) (csn B2)
  (@abbidv (wceq A2 B2) (λ x3, wceq (cv x3) A2) (λ x3, wceq (cv x3) B2)
    (λ x3, @eqeq2 A2 B2 (cv x3)))
  (@df_sn A2)
  (@df_sn B2)


/-- Equality inference for singletons. (Contributed by NM, 22-Jan-2004.) -/
theorem sneqi {A2 B2 : «class»}
  (sneqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (csn A2) (csn B2) :=
@ax_mp (wceq A2 B2) (wceq (csn A2) (csn B2))
  sneqi_1
  (@sneq A2 B2)


/-- Equality deduction for singletons. (Contributed by NM, 22-Jan-2004.) -/
theorem sneqd {ph : wff} {A2 B2 : «class»}
  (sneqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (csn A2) (csn B2)) :=
@syl ph (wceq A2 B2) (wceq (csn A2) (csn B2))
  sneqd_1
  (@sneq A2 B2)


/-- Alternate definition of singleton. Definition 5.1 of [TakeutiZaring] p. 15. (Contributed by NM,
24-Apr-1994.) -/
theorem dfsn2 {A2 : «class»} :
  ⊦ wceq (csn A2) (cpr A2 A2) :=
@eqtr2i (cpr A2 A2) (cun (csn A2) (csn A2)) (csn A2)
  (@df_pr A2 A2)
  (@unidm (csn A2))


/-- There is exactly one element in a singleton. Exercise 2 of [TakeutiZaring] p. 15 (generalized).
(Contributed by NM, 13-Sep-1995.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem elsng {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (csn B2)) (wceq A2 B2)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 V) (wb (wcel A2 (csn B2)) (wceq A2 B2)), from
  @elab2gw (λ x3, wceq (cv x3) B2) (λ y, wceq (cv y) B2) (λ x3, wceq A2 B2) (λ x3, A2) (λ x3 y, csn B2) (λ x3 y, V)
    (λ x3 y, @eqeq1 (cv x3) (cv y) B2)
    (λ x3 y, @eqeq1 (cv y) A2 B2)
    (λ x3 y, @df_sn B2) x3 y


/-- There is exactly one element in a singleton. Exercise 2 of [TakeutiZaring] p. 15. (Contributed
by NM, 13-Sep-1995.) -/
theorem elsn {A2 B2 : «class»}
  (elsn_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (csn B2)) (wceq A2 B2) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (csn B2)) (wceq A2 B2))
  elsn_1
  (@elsng A2 B2 cvv)


/-- There is only one element in a singleton. Exercise 2 of [TakeutiZaring] p. 15. (Contributed by
NM, 21-Jun-1993.) -/
theorem velsn {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wcel (cv x3) (csn (A2 x3))) (wceq (cv x3) (A2 x3)) :=
@elsn (cv x3) (A2 x3)
  (@vex x3)


/-- There is at most one element in a singleton. (Contributed by NM, 5-Jun-1994.) -/
theorem elsni {A2 B2 : «class»} :
  ⊦ wi (wcel A2 (csn B2)) (wceq A2 B2) :=
@ibi (wcel A2 (csn B2)) (wceq A2 B2)
  (@elsng A2 B2 (csn B2))


/-- Condition for a class abstraction to be a singleton. Formerly part of proof of ~ dfiota2 .
(Contributed by Andrew Salmon, 30-Jun-2011.) (Revised by AV, 24-Aug-2022.) -/
theorem absn {ph : setvar → wff} {Y : «class»} :
  ⊦ wb (wceq (cab (λ x3, ph x3)) (csn Y)) (wal (λ x3, wb (ph x3) (wceq (cv x3) Y))) :=
@bitr4i (wceq (cab (λ x3, ph x3)) (csn Y)) (wceq (cab (λ x3, ph x3)) (cab (λ x3, wceq (cv x3) Y))) (wal (λ x3, wb (ph x3) (wceq (cv x3) Y)))
  (@eqeq2i (csn Y) (cab (λ x3, wceq (cv x3) Y)) (cab (λ x3, ph x3))
    (@df_sn Y))
  (@abbi (λ x3, ph x3) (λ x3, wceq (cv x3) Y))


/-- Alternate definition of a pair. Definition 5.1 of [TakeutiZaring] p. 15. (Contributed by NM,
24-Apr-1994.) -/
theorem dfpr2 {A2 B2 : «class»} :
  ⊦ wceq (cpr A2 B2) (cab (λ x3, wo (wceq (cv x3) A2) (wceq (cv x3) B2))) :=
@eqtri (cpr A2 B2) (cun (csn A2) (csn B2)) (cab (λ x3, wo (wceq (cv x3) A2) (wceq (cv x3) B2)))
  (@df_pr A2 B2)
  (@abbi2i (λ x3, wo (wceq (cv x3) A2) (wceq (cv x3) B2)) (cun (csn A2) (csn B2))
    (λ x3, @bitri (wcel (cv x3) (cun (csn A2) (csn B2))) (wo (wcel (cv x3) (csn A2)) (wcel (cv x3) (csn B2))) (wo (wceq (cv x3) A2) (wceq (cv x3) B2))
      (@elun (cv x3) (csn A2) (csn B2))
      (@orbi12i (wcel (cv x3) (csn A2)) (wceq (cv x3) A2) (wcel (cv x3) (csn B2)) (wceq (cv x3) B2)
        (@velsn (λ x3, A2) x3)
        (@velsn (λ x3, B2) x3))))


/-- A member of a pair of classes is one or the other of them, and conversely as soon as it is a
set. Exercise 1 of [TakeutiZaring] p. 15, generalized. (Contributed by NM, 13-Sep-1995.) -/
theorem elprg {A2 B2 C V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 V) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))), from
  @elab2gw (λ x3, wo (wceq (cv x3) B2) (wceq (cv x3) C)) (λ y, wo (wceq (cv y) B2) (wceq (cv y) C)) (λ x3, wo (wceq A2 B2) (wceq A2 C)) (λ x3, A2) (λ x3 y, cpr B2 C) (λ x3 y, V)
    (λ x3 y, @orbi12d (wceq (cv x3) (cv y)) (wceq (cv x3) B2) (wceq (cv y) B2) (wceq (cv x3) C) (wceq (cv y) C)
      (@eqeq1 (cv x3) (cv y) B2)
      (@eqeq1 (cv x3) (cv y) C))
    (λ x3 y, @orbi12d (wceq (cv y) A2) (wceq (cv y) B2) (wceq A2 B2) (wceq (cv y) C) (wceq A2 C)
      (@eqeq1 (cv y) A2 B2)
      (@eqeq1 (cv y) A2 C))
    (λ x3 y, @dfpr2 B2 C) x3 y


/-- If a class is an element of a pair, then it is one of the two paired elements. (Contributed by
Scott Fenton, 1-Apr-2011.) -/
theorem elpri {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)) :=
@ibi (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))
  (@elprg A2 B2 C (cpr B2 C))


/-- A member of a pair of classes is one or the other of them, and conversely as soon as it is a
set. Exercise 1 of [TakeutiZaring] p. 15. (Contributed by NM, 13-Sep-1995.) -/
theorem elpr {A2 B2 C : «class»}
  (elpr_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)))
  elpr_1
  (@elprg A2 B2 C cvv)


/-- A member of a pair of sets is one or the other of them, and conversely. Exercise 1 of
[TakeutiZaring] p. 15. (Contributed by NM, 14-Oct-2005.) Generalize from sethood hypothesis to
sethood antecedent. (Revised by BJ, 25-May-2024.) -/
theorem elpr2g {A2 B2 C V W : «class»} :
  ⊦ wi (wa (wcel B2 V) (wcel C W)) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))) :=
@pm5_21ndd (wa (wcel B2 V) (wcel C W)) (wcel A2 cvv) (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))
  (@a1i (wi (wcel A2 (cpr B2 C)) (wcel A2 cvv)) (wa (wcel B2 V) (wcel C W))
    (@elex A2 (cpr B2 C)))
  (@jaao (wcel B2 V) (wceq A2 B2) (wcel A2 cvv) (wcel C W) (wceq A2 C)
    (@syl (wcel B2 V) (wcel B2 cvv) (wi (wceq A2 B2) (wcel A2 cvv))
      (@elex B2 V)
      (@eleq1a B2 cvv A2))
    (@syl (wcel C W) (wcel C cvv) (wi (wceq A2 C) (wcel A2 cvv))
      (@elex C W)
      (@eleq1a C cvv A2)))
  (@a1i (wi (wcel A2 cvv) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)))) (wa (wcel B2 V) (wcel C W))
    (@elprg A2 B2 C cvv))


/-- A member of a pair of sets is one or the other of them, and conversely. Exercise 1 of
[TakeutiZaring] p. 15. (Contributed by NM, 14-Oct-2005.) (Proof shortened by JJ, 23-Jul-2021.) -/
theorem elpr2 {A2 B2 C : «class»}
  (elpr2_1 : ⊦ wcel B2 cvv)
  (elpr2_2 : ⊦ wcel C cvv) :
  ⊦ wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)) :=
@mp2an (wcel B2 cvv) (wcel C cvv) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)))
  elpr2_1
  elpr2_2
  (@elpr2g A2 B2 C cvv cvv)


/-- If an element doesn't match the items in an unordered pair, it is not in the unordered pair,
deduction version. (Contributed by Alexander van der Vekens, 25-Jan-2018.) -/
theorem nelprd {ph : wff} {A2 B2 C : «class»}
  (nelprd_1 : ⊦ wi ph (wne A2 B2))
  (nelprd_2 : ⊦ wi ph (wne A2 C)) :
  ⊦ wi ph (wn (wcel A2 (cpr B2 C))) :=
@syl2anc ph (wne A2 B2) (wne A2 C) (wn (wcel A2 (cpr B2 C)))
  nelprd_1
  nelprd_2
  (@sylbi (wa (wne A2 B2) (wne A2 C)) (wn (wo (wceq A2 B2) (wceq A2 C))) (wn (wcel A2 (cpr B2 C)))
    (@neanior A2 B2 A2 C)
    (@con3i (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))
      (@elpri A2 B2 C)))


/-- A set is a member of its singleton. Part of Theorem 7.6 of [Quine] p. 49. (Contributed by NM,
28-Oct-2003.) -/
theorem snidg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel A2 (csn A2)) :=
@mpbiri (wcel A2 V) (wcel A2 (csn A2)) (wceq A2 A2)
  (@eqid A2)
  (@elsng A2 A2 V)


/-- A class is a set iff it is a member of its singleton. (Contributed by NM, 5-Apr-2004.) -/
theorem snidb {A2 : «class»} :
  ⊦ wb (wcel A2 cvv) (wcel A2 (csn A2)) :=
@impbii (wcel A2 cvv) (wcel A2 (csn A2))
  (@snidg A2 cvv)
  (@elex A2 (csn A2))


/-- A set is a member of its singleton. Part of Theorem 7.6 of [Quine] p. 49. (Contributed by NM,
31-Dec-1993.) -/
theorem snid {A2 : «class»}
  (snid_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel A2 (csn A2) :=
@mpbi (wcel A2 cvv) (wcel A2 (csn A2))
  snid_1
  (@snidb A2)


/-- A setvar variable is a member of its singleton. (Contributed by David A. Wheeler, 8-Dec-2018.)
-/
theorem vsnid
  (x3 : setvar) : ⊦ wcel (cv x3) (csn (cv x3)) :=
@snid (cv x3)
  (@vex x3)


/-- There is exactly one element in a singleton. Exercise 2 of [TakeutiZaring] p. 15. This variation
requires only that ` B ` , rather than ` A ` , be a set. (Contributed by NM, 28-Oct-2003.) -/
theorem elsn2g {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wb (wcel A2 (csn B2)) (wceq A2 B2)) :=
@impbid2 (wcel B2 V) (wcel A2 (csn B2)) (wceq A2 B2)
  (@elsni A2 B2)
  (@syl5ibrcom (wcel B2 V) (wcel A2 (csn B2)) (wceq A2 B2) (wcel B2 (csn B2))
    (@snidg B2 V)
    (@eleq1 A2 B2 (csn B2)))


/-- There is exactly one element in a singleton. Exercise 2 of [TakeutiZaring] p. 15. This variation
requires only that ` B ` , rather than ` A ` , be a set. (Contributed by NM, 12-Jun-1994.) -/
theorem elsn2 {A2 B2 : «class»}
  (elsn2_1 : ⊦ wcel B2 cvv) :
  ⊦ wb (wcel A2 (csn B2)) (wceq A2 B2) :=
@ax_mp (wcel B2 cvv) (wb (wcel A2 (csn B2)) (wceq A2 B2))
  elsn2_1
  (@elsn2g A2 B2 cvv)


/-- If a class is not equal to the class in a singleton, then it is not in the singleton.
(Contributed by Glauco Siliprandi, 17-Aug-2020.) (Proof shortened by BJ, 4-May-2021.) -/
theorem nelsn {A2 B2 : «class»} :
  ⊦ wi (wne A2 B2) (wn (wcel A2 (csn B2))) :=
@necon3ai (wcel A2 (csn B2)) A2 B2
  (@elsni A2 B2)


/-- Substitution expressed in terms of quantification over a singleton. (Contributed by NM,
14-Dec-2005.) (Revised by Mario Carneiro, 23-Apr-2015.) -/
theorem ralsnsg {ph : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wral (λ x3, ph x3) (λ x3, csn A2)) (wsbc (λ x3, ph x3) A2)) :=
@bitr4id (wcel A2 (V x3)) (wral (λ x3, ph x3) (λ x3, csn A2)) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wsbc (λ x3, ph x3) A2)
  (@bitri (wral (λ x3, ph x3) (λ x3, csn A2)) (wal (λ x3, wi (wcel (cv x3) (csn A2)) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))
    (@df_ral (λ x3, ph x3) (λ x3, csn A2))
    (@albii (λ x3, wi (wcel (cv x3) (csn A2)) (ph x3)) (λ x3, wi (wceq (cv x3) A2) (ph x3))
      (λ x3, @imbi1i (wcel (cv x3) (csn A2)) (wceq (cv x3) A2) (ph x3)
        (@velsn (λ x3, A2) x3))))
  (@sbc6g (λ x3, ph x3) A2 (λ x3, V x3) x3)


/-- Substitution expressed in terms of quantification over a singleton. (Contributed by NM,
14-Dec-2005.) (Revised by Mario Carneiro, 23-Apr-2015.) Avoid ~ ax-10 , ~ ax-12 . (Revised by Gino
Giotto, 30-Sep-2024.) -/
theorem ralsng {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (ralsng_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wral (λ x3, ph x3) (λ x3, csn A2)) ps) :=
@syl5bb (wral (λ x3, ph x3) (λ x3, csn A2)) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wcel A2 (V x3)) ps
  (@bitri (wral (λ x3, ph x3) (λ x3, csn A2)) (wal (λ x3, wi (wcel (cv x3) (csn A2)) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3)))
    (@df_ral (λ x3, ph x3) (λ x3, csn A2))
    (@albii (λ x3, wi (wcel (cv x3) (csn A2)) (ph x3)) (λ x3, wi (wceq (cv x3) A2) (ph x3))
      (λ x3, @imbi1i (wcel (cv x3) (csn A2)) (wceq (cv x3) A2) (ph x3)
        (@velsn (λ x3, A2) x3))))
  (@syl (wcel A2 (V x3)) (wex (λ x3, wceq (cv x3) A2)) (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) ps)
    (@elisset A2 (λ x3, V x3) x3)
    (@«3bitrd» (wex (λ x3, wceq (cv x3) A2)) (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) ps)) (wi (wex (λ x3, wceq (cv x3) A2)) ps) ps
      (@a1i (wb (wal (λ x3, wi (wceq (cv x3) A2) (ph x3))) (wal (λ x3, wi (wceq (cv x3) A2) ps))) (wex (λ x3, wceq (cv x3) A2))
        (@albii (λ x3, wi (wceq (cv x3) A2) (ph x3)) (λ x3, wi (wceq (cv x3) A2) ps)
          (λ x3, @pm5_74i (wceq (cv x3) A2) (ph x3) ps
            (ralsng_1 x3))))
      (@a1i (wb (wal (λ x3, wi (wceq (cv x3) A2) ps)) (wi (wex (λ x3, wceq (cv x3) A2)) ps)) (wex (λ x3, wceq (cv x3) A2))
        (@«19_23v» (λ x3, wceq (cv x3) A2) ps))
      (@pm5_5 (wex (λ x3, wceq (cv x3) A2)) ps)))


/-- Restricted existential quantification over a singleton. (Contributed by NM, 29-Jan-2012.) Avoid
~ ax-10 , ~ ax-12 . (Revised by Gino Giotto, 30-Sep-2024.) -/
theorem rexsng {ph : setvar → wff} {ps : wff} {A2 : «class»} {V : setvar → «class»}
  (ralsng_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wrex (λ x3, ph x3) (λ x3, csn A2)) ps) :=
@syl (wcel A2 (V x3)) (wb (wral (λ x3, wn (ph x3)) (λ x3, csn A2)) (wn ps)) (wb (wrex (λ x3, ph x3) (λ x3, csn A2)) ps)
  (@ralsng (λ x3, wn (ph x3)) (wn ps) A2 (λ x3, V x3)
    (λ x3, @notbid (wceq (cv x3) A2) (ph x3) ps
      (ralsng_1 x3)) x3)
  (@syl5bb (wrex (λ x3, ph x3) (λ x3, csn A2)) (wn (wral (λ x3, wn (ph x3)) (λ x3, csn A2))) (wb (wral (λ x3, wn (ph x3)) (λ x3, csn A2)) (wn ps)) ps
    (@dfrex2 (λ x3, ph x3) (λ x3, csn A2))
    (@con1bid (wb (wral (λ x3, wn (ph x3)) (λ x3, csn A2)) (wn ps)) ps (wral (λ x3, wn (ph x3)) (λ x3, csn A2))
      (@bicom1 (wral (λ x3, wn (ph x3)) (λ x3, csn A2)) (wn ps))))


/-- Convert a universal quantification restricted to a singleton to a substitution. (Contributed by
NM, 27-Apr-2009.) -/
theorem ralsn {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (ralsn_1 : ⊦ wcel A2 cvv)
  (ralsn_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, csn A2)) ps :=
@ax_mp (wcel A2 cvv) (wb (wral (λ x3, ph x3) (λ x3, csn A2)) ps)
  ralsn_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wral (λ x3, ph x3) (λ x3, csn A2)) ps), from
    @ralsng (λ x3, ph x3) ps A2 (λ x3, cvv)
      (λ x3, ralsn_2 x3) x3)


/-- Convert an existential quantification restricted to a singleton to a substitution. (Contributed
by Jeff Madsen, 5-Jan-2011.) -/
theorem rexsn {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (ralsn_1 : ⊦ wcel A2 cvv)
  (ralsn_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, csn A2)) ps :=
@ax_mp (wcel A2 cvv) (wb (wrex (λ x3, ph x3) (λ x3, csn A2)) ps)
  ralsn_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wrex (λ x3, ph x3) (λ x3, csn A2)) ps), from
    @rexsng (λ x3, ph x3) ps A2 (λ x3, cvv)
      (λ x3, ralsn_2 x3) x3)


/-- Membership in an extension of a power class. (Contributed by NM, 26-Mar-2007.) -/
theorem elpwunsn {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cdif (cpw (cun B2 (csn C))) (cpw B2))) (wcel C A2) :=
@sylbi (wcel A2 (cdif (cpw (cun B2 (csn C))) (cpw B2))) (wa (wcel A2 (cpw (cun B2 (csn C)))) (wn (wcel A2 (cpw B2)))) (wcel C A2)
  (@eldif A2 (cpw (cun B2 (csn C))) (cpw B2))
  (@syldan (wcel A2 (cpw (cun B2 (csn C)))) (wn (wcel A2 (cpw B2))) (wrex (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2)) (wcel C A2)
    (@sylibr (wa (wcel A2 (cpw (cun B2 (csn C)))) (wn (wcel A2 (cpw B2)))) (wn (wral (λ x3, wcel (cv x3) B2) (λ x3, A2))) (wrex (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2))
      (@biimpa (wcel A2 (cpw (cun B2 (csn C)))) (wn (wcel A2 (cpw B2))) (wn (wral (λ x3, wcel (cv x3) B2) (λ x3, A2)))
        (@notbid (wcel A2 (cpw (cun B2 (csn C)))) (wcel A2 (cpw B2)) (wral (λ x3, wcel (cv x3) B2) (λ x3, A2))
          (@bitrdi (wcel A2 (cpw (cun B2 (csn C)))) (wcel A2 (cpw B2)) (wss A2 B2) (wral (λ x3, wcel (cv x3) B2) (λ x3, A2))
            (@elpwg A2 B2 (cpw (cun B2 (csn C))))
            (@dfss3 A2 B2))))
      (@rexnal (λ x3, wcel (cv x3) B2) (λ x3, A2)))
    (@imp (wcel A2 (cpw (cun B2 (csn C)))) (wrex (λ x3, wn (wcel (cv x3) B2)) (λ x3, A2)) (wcel C A2)
      (@rexlimdv (wcel A2 (cpw (cun B2 (csn C)))) (λ x3, wn (wcel (cv x3) B2)) (wcel C A2) (λ x3, A2)
        (λ x3, @pm2_43b (wcel A2 (cpw (cun B2 (csn C)))) (wcel (cv x3) A2) (wi (wn (wcel (cv x3) B2)) (wcel C A2))
          (@com4r (wcel A2 (cpw (cun B2 (csn C)))) (wcel (cv x3) A2) (wn (wcel (cv x3) B2)) (wcel (cv x3) A2) (wcel C A2)
            (@expd (wcel A2 (cpw (cun B2 (csn C)))) (wcel (cv x3) A2) (wn (wcel (cv x3) B2)) (wi (wcel (cv x3) A2) (wcel C A2))
              (@syl6 (wcel A2 (cpw (cun B2 (csn C)))) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wceq (cv x3) C) (wi (wcel (cv x3) A2) (wcel C A2))
                (@«3syl» (wcel A2 (cpw (cun B2 (csn C)))) (wss A2 (cun B2 (csn C))) (wi (wcel (cv x3) A2) (wcel (cv x3) (cun B2 (csn C)))) (wi (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wceq (cv x3) C))
                  (@elpwi A2 (cun B2 (csn C)))
                  (@ssel A2 (cun B2 (csn C)) (cv x3))
                  (@impd (wi (wcel (cv x3) A2) (wcel (cv x3) (cun B2 (csn C)))) (wcel (cv x3) A2) (wn (wcel (cv x3) B2)) (wceq (cv x3) C)
                    (@imim2i (wcel (cv x3) (cun B2 (csn C))) (wi (wn (wcel (cv x3) B2)) (wceq (cv x3) C)) (wcel (cv x3) A2)
                      (@sylbi (wcel (cv x3) (cun B2 (csn C))) (wo (wcel (cv x3) B2) (wcel (cv x3) (csn C))) (wi (wn (wcel (cv x3) B2)) (wceq (cv x3) C))
                        (@elun (cv x3) B2 (csn C))
                        (@ord (wo (wcel (cv x3) B2) (wcel (cv x3) (csn C))) (wcel (cv x3) B2) (wceq (cv x3) C)
                          (@orim2i (wcel (cv x3) (csn C)) (wceq (cv x3) C) (wcel (cv x3) B2)
                            (@elsni (cv x3) C)))))))
                (@biimpd (wceq (cv x3) C) (wcel (cv x3) A2) (wcel C A2)
                  (@eleq1 (cv x3) C A2)))))))))


/-- Members of an unordered triple of classes. (Contributed by FL, 2-Feb-2014.) (Proof shortened by
Mario Carneiro, 11-Feb-2015.) -/
theorem eltpg {A2 B2 C D V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (ctp B2 C D)) (w3o (wceq A2 B2) (wceq A2 C) (wceq A2 D))) :=
@«3bitr4g» (wcel A2 V) (wo (wcel A2 (cpr B2 C)) (wcel A2 (csn D))) (wo (wo (wceq A2 B2) (wceq A2 C)) (wceq A2 D)) (wcel A2 (ctp B2 C D)) (w3o (wceq A2 B2) (wceq A2 C) (wceq A2 D))
  (@orbi12d (wcel A2 V) (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)) (wcel A2 (csn D)) (wceq A2 D)
    (@elprg A2 B2 C V)
    (@elsng A2 D V))
  (@bitri (wcel A2 (ctp B2 C D)) (wcel A2 (cun (cpr B2 C) (csn D))) (wo (wcel A2 (cpr B2 C)) (wcel A2 (csn D)))
    (@eleq2i (ctp B2 C D) (cun (cpr B2 C) (csn D)) A2
      (@df_tp B2 C D))
    (@elun A2 (cpr B2 C) (csn D)))
  (@df_3or (wceq A2 B2) (wceq A2 C) (wceq A2 D))


/-- Bound-variable hypothesis builder for unordered pairs. (Contributed by NM, 14-Nov-1995.) -/
theorem nfpr {A2 B2 : setvar → «class»}
  (nfpr_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfpr_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cpr (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cpr (A2 x3) (B2 x3)) (λ x3, cab (λ y, wo (wceq (cv y) (A2 x3)) (wceq (cv y) (B2 x3))))
  (λ x3, @dfpr2 (A2 x3) (B2 x3))
  (@nfab (λ x3 y, wo (wceq (cv y) (A2 x3)) (wceq (cv y) (B2 x3)))
    (λ y, @nfor (λ x3, wceq (cv y) (A2 x3)) (λ x3, wceq (cv y) (B2 x3))
      (@nfeq2 (cv y) (λ x3, A2 x3)
        nfpr_1)
      (@nfeq2 (cv y) (λ x3, B2 x3)
        nfpr_2)))


/-- Membership of a conditional operator in an unordered pair. (Contributed by NM, 17-Jun-2007.) -/
theorem ifpr {ph : wff} {A2 B2 C D : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wcel (cif ph A2 B2) (cpr A2 B2)) :=
@syl2an (wcel A2 C) (wcel A2 cvv) (wcel B2 cvv) (wcel (cif ph A2 B2) (cpr A2 B2)) (wcel B2 D)
  (@elex A2 C)
  (@elex B2 D)
  (@syl (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cif ph A2 B2) cvv) (wcel (cif ph A2 B2) (cpr A2 B2))
    (@ifcl ph A2 B2 cvv)
    (@mpbiri (wcel (cif ph A2 B2) cvv) (wcel (cif ph A2 B2) (cpr A2 B2)) (wo (wceq (cif ph A2 B2) A2) (wceq (cif ph A2 B2) B2))
      (@ifeqor ph A2 B2)
      (@elprg (cif ph A2 B2) A2 B2 cvv)))


/-- Convert a restricted universal quantification over a pair to a conjunction. (Contributed by NM,
17-Sep-2011.) (Revised by Mario Carneiro, 23-Apr-2015.) Avoid ~ ax-10 , ~ ax-12 . (Revised by Gino
Giotto, 30-Sep-2024.) -/
theorem ralprg {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»} {V W : setvar → «class»}
  (ralprg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ralprg_2 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch))
  (x3 : setvar) : ⊦ wi (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wb (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wa ps ch)) :=
@syl5bb (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wa (wral (λ x3, ph x3) (λ x3, csn A2)) (wral (λ x3, ph x3) (λ x3, csn B2))) (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wa ps ch)
  (@bitri (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wral (λ x3, ph x3) (λ x3, cun (csn A2) (csn B2))) (wa (wral (λ x3, ph x3) (λ x3, csn A2)) (wral (λ x3, ph x3) (λ x3, csn B2)))
    (@raleqi (λ x3, ph x3) (cpr A2 B2) (cun (csn A2) (csn B2))
      (@df_pr A2 B2))
    (@ralunb (λ x3, ph x3) (λ x3, csn A2) (λ x3, csn B2)))
  (@bi2anan9 (wcel A2 (V x3)) (wral (λ x3, ph x3) (λ x3, csn A2)) ps (wcel B2 (W x3)) (wral (λ x3, ph x3) (λ x3, csn B2)) ch
    (@ralsng (λ x3, ph x3) ps A2 (λ x3, V x3)
      (λ x3, ralprg_1 x3) x3)
    (@ralsng (λ x3, ph x3) ch B2 (λ x3, W x3)
      (λ x3, ralprg_2 x3) x3))


/-- Convert a restricted existential quantification over a pair to a disjunction. (Contributed by
NM, 17-Sep-2011.) (Revised by Mario Carneiro, 23-Apr-2015.) Avoid ~ ax-10 , ~ ax-12 . (Revised by
Gino Giotto, 30-Sep-2024.) -/
theorem rexprg {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»} {V W : setvar → «class»}
  (ralprg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ralprg_2 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch))
  (x3 : setvar) : ⊦ wi (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch)) :=
@syl (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wb (wral (λ x3, wn (ph x3)) (λ x3, cpr A2 B2)) (wa (wn ps) (wn ch))) (wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch))
  (@ralprg (λ x3, wn (ph x3)) (wn ps) (wn ch) A2 B2 (λ x3, V x3) (λ x3, W x3)
    (λ x3, @notbid (wceq (cv x3) A2) (ph x3) ps
      (ralprg_1 x3))
    (λ x3, @notbid (wceq (cv x3) B2) (ph x3) ch
      (ralprg_2 x3)) x3)
  (@sylbb2 (wb (wral (λ x3, wn (ph x3)) (λ x3, cpr A2 B2)) (wa (wn ps) (wn ch))) (wb (wn (wrex (λ x3, ph x3) (λ x3, cpr A2 B2))) (wn (wo ps ch))) (wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch))
    (@bibi12i (wral (λ x3, wn (ph x3)) (λ x3, cpr A2 B2)) (wn (wrex (λ x3, ph x3) (λ x3, cpr A2 B2))) (wa (wn ps) (wn ch)) (wn (wo ps ch))
      (@ralnex (λ x3, ph x3) (λ x3, cpr A2 B2))
      (@pm4_56 ps ch))
    (@notbi (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch)))


/-- Convert a restricted existential quantification over a triple to a disjunction. (Contributed by
Mario Carneiro, 23-Apr-2015.) -/
theorem rextpg {ph : setvar → wff} {ps ch th : wff} {A2 B2 C : «class»} {V W X : setvar → «class»}
  (ralprg_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ralprg_2 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch))
  (raltpg_3 : ∀ x3, ⊦ wi (wceq (cv x3) C) (wb (ph x3) th))
  (x3 : setvar) : ⊦ wi (w3a (wcel A2 (V x3)) (wcel B2 (W x3)) (wcel C (X x3))) (wb (wrex (λ x3, ph x3) (λ x3, ctp A2 B2 C)) (w3o ps ch th)) :=
@«3bitr4g» (w3a (wcel A2 (V x3)) (wcel B2 (W x3)) (wcel C (X x3))) (wo (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wrex (λ x3, ph x3) (λ x3, csn C))) (wo (wo ps ch) th) (wrex (λ x3, ph x3) (λ x3, ctp A2 B2 C)) (w3o ps ch th)
  (@«3impa» (wcel A2 (V x3)) (wcel B2 (W x3)) (wcel C (X x3)) (wb (wo (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wrex (λ x3, ph x3) (λ x3, csn C))) (wo (wo ps ch) th))
    (@sylan9bb (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wo (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wrex (λ x3, ph x3) (λ x3, csn C))) (wo (wo ps ch) (wrex (λ x3, ph x3) (λ x3, csn C))) (wcel C (X x3)) (wo (wo ps ch) th)
      (@orbi1d (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch) (wrex (λ x3, ph x3) (λ x3, csn C))
        (@rexprg (λ x3, ph x3) ps ch A2 B2 (λ x3, V x3) (λ x3, W x3)
          (λ x3, ralprg_1 x3)
          (λ x3, ralprg_2 x3) x3))
      (@orbi2d (wcel C (X x3)) (wrex (λ x3, ph x3) (λ x3, csn C)) th (wo ps ch)
        (@rexsng (λ x3, ph x3) th C (λ x3, X x3)
          (λ x3, raltpg_3 x3) x3))))
  (@bitri (wrex (λ x3, ph x3) (λ x3, ctp A2 B2 C)) (wrex (λ x3, ph x3) (λ x3, cun (cpr A2 B2) (csn C))) (wo (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wrex (λ x3, ph x3) (λ x3, csn C)))
    (@rexeqi (λ x3, ph x3) (ctp A2 B2 C) (cun (cpr A2 B2) (csn C))
      (@df_tp A2 B2 C))
    (@rexun (λ x3, ph x3) (λ x3, cpr A2 B2) (λ x3, csn C)))
  (@df_3or ps ch th)


/-- Convert a restricted universal quantification over a pair to a conjunction. (Contributed by NM,
3-Jun-2007.) (Revised by Mario Carneiro, 23-Apr-2015.) -/
theorem ralpr {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»}
  (ralpr_1 : ⊦ wcel A2 cvv)
  (ralpr_2 : ⊦ wcel B2 cvv)
  (ralpr_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ralpr_4 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch)) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wa ps ch) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wa ps ch))
  ralpr_1
  ralpr_2
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wb (wral (λ x3, ph x3) (λ x3, cpr A2 B2)) (wa ps ch)), from
    @ralprg (λ x3, ph x3) ps ch A2 B2 (λ x3, cvv) (λ x3, cvv)
      (λ x3, ralpr_3 x3)
      (λ x3, ralpr_4 x3) x3)


/-- Convert a restricted existential quantification over a pair to a disjunction. (Contributed by
NM, 3-Jun-2007.) (Revised by Mario Carneiro, 23-Apr-2015.) -/
theorem rexpr {ph : setvar → wff} {ps ch : wff} {A2 B2 : «class»}
  (ralpr_1 : ⊦ wcel A2 cvv)
  (ralpr_2 : ⊦ wcel B2 cvv)
  (ralpr_3 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (ralpr_4 : ∀ x3, ⊦ wi (wceq (cv x3) B2) (wb (ph x3) ch)) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch))
  ralpr_1
  ralpr_2
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wb (wrex (λ x3, ph x3) (λ x3, cpr A2 B2)) (wo ps ch)), from
    @rexprg (λ x3, ph x3) ps ch A2 B2 (λ x3, cvv) (λ x3, cvv)
      (λ x3, ralpr_3 x3)
      (λ x3, ralpr_4 x3) x3)


/-- Bound-variable hypothesis builder for singletons. (Contributed by NM, 14-Nov-1995.) -/
theorem nfsn {A2 : setvar → «class»}
  (nfsn_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, csn (A2 x3)) :=
@nfcxfr (λ x3, csn (A2 x3)) (λ x3, cpr (A2 x3) (A2 x3))
  (λ x3, @dfsn2 (A2 x3))
  (@nfpr (λ x3, A2 x3) (λ x3, A2 x3)
    nfsn_1
    nfsn_1)


/-- Intersection with the singleton of a non-member is disjoint. (Contributed by NM, 22-May-1998.)
(Proof shortened by Andrew Salmon, 29-Jun-2011.) (Proof shortened by Wolf Lammen, 30-Sep-2014.) -/
theorem disjsn {A2 B2 : «class»} :
  ⊦ wb (wceq (cin A2 (csn B2)) c0) (wn (wcel B2 A2)) :=
@«3bitri» (wceq (cin A2 (csn B2)) c0) (wal (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) (csn B2))))) (wal (λ x3, wn (wa (wceq (cv x3) B2) (wcel (cv x3) A2)))) (wn (wcel B2 A2))
  (@disj1 A2 (csn B2))
  (@albii (λ x3, wi (wcel (cv x3) A2) (wn (wcel (cv x3) (csn B2)))) (λ x3, wn (wa (wceq (cv x3) B2) (wcel (cv x3) A2)))
    (λ x3, @«3bitri» (wi (wcel (cv x3) A2) (wn (wcel (cv x3) (csn B2)))) (wi (wcel (cv x3) (csn B2)) (wn (wcel (cv x3) A2))) (wi (wceq (cv x3) B2) (wn (wcel (cv x3) A2))) (wn (wa (wceq (cv x3) B2) (wcel (cv x3) A2)))
      (@con2b (wcel (cv x3) A2) (wcel (cv x3) (csn B2)))
      (@imbi1i (wcel (cv x3) (csn B2)) (wceq (cv x3) B2) (wn (wcel (cv x3) A2))
        (@velsn (λ x3, B2) x3))
      (@imnan (wceq (cv x3) B2) (wcel (cv x3) A2))))
  (@xchbinxr (wal (λ x3, wn (wa (wceq (cv x3) B2) (wcel (cv x3) A2)))) (wex (λ x3, wa (wceq (cv x3) B2) (wcel (cv x3) A2))) (wcel B2 A2)
    (@alnex (λ x3, wa (wceq (cv x3) B2) (wcel (cv x3) A2)))
    (@dfclel B2 A2))


/-- Two distinct singletons are disjoint. (Contributed by NM, 25-May-1998.) -/
theorem disjsn2 {A2 B2 : «class»} :
  ⊦ wi (wne A2 B2) (wceq (cin (csn A2) (csn B2)) c0) :=
@sylibr (wne A2 B2) (wn (wcel B2 (csn A2))) (wceq (cin (csn A2) (csn B2)) c0)
  (@necon3ai (wcel B2 (csn A2)) A2 B2
    (@eqcomd (wcel B2 (csn A2)) B2 A2
      (@elsni B2 A2)))
  (@disjsn (csn A2) B2)


/-- The singleton of a proper class (one that doesn't exist) is the empty set. Theorem 7.2 of
[Quine] p. 48. (Contributed by NM, 21-Jun-1993.) -/
theorem snprc {A2 : «class»} :
  ⊦ wb (wn (wcel A2 cvv)) (wceq (csn A2) c0) :=
@con1bii (wceq (csn A2) c0) (wcel A2 cvv)
  (@«3bitr4i» (wex (λ x3, wcel (cv x3) (csn A2))) (wex (λ x3, wceq (cv x3) A2)) (wn (wceq (csn A2) c0)) (wcel A2 cvv)
    (@exbii (λ x3, wcel (cv x3) (csn A2)) (λ x3, wceq (cv x3) A2)
      (λ x3, @velsn (λ x3, A2) x3))
    (@neq0 (csn A2))
    (@isset A2))


/-- Another way to express existential uniqueness of a wff: its class abstraction is a singleton.
(Contributed by Mario Carneiro, 14-Nov-2016.) -/
theorem euabsn2 {ph : setvar → wff} :
  ⊦ wb (weu (λ x3, ph x3)) (wex (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y)))) :=
@bitr4i (weu (λ x3, ph x3)) (wex (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y))))) (wex (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y))))
  (@eu6 (λ x3, ph x3))
  (@exbii (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y))) (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y))))
    (λ y, @absn (λ x3, ph x3) (cv y)))


/-- A way to express restricted existential uniqueness of a wff: its restricted class abstraction is
a singleton. (Contributed by NM, 30-May-2006.) (Proof shortened by Mario Carneiro, 14-Nov-2016.) -/
theorem reusn {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wex (λ y, wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (csn (cv y)))) :=
@«3bitr4i» (weu (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wex (λ y, wceq (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (csn (cv y)))) (wreu (λ x3, ph x3) (λ x3, A2 x3)) (wex (λ y, wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (csn (cv y))))
  (@euabsn2 (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
  (@df_reu (λ x3, ph x3) (λ x3, A2 x3))
  (@exbii (λ y, wceq (crab (λ x3, ph x3) (λ x3, A2 x3)) (csn (cv y))) (λ y, wceq (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (csn (cv y)))
    (λ y, @eqeq1i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (csn (cv y))
      (@df_rab (λ x3, ph x3) (λ x3, A2 x3))))


/-- Commutative law for unordered pairs. (Contributed by NM, 15-Jul-1993.) -/
theorem prcom {A2 B2 : «class»} :
  ⊦ wceq (cpr A2 B2) (cpr B2 A2) :=
@«3eqtr4i» (cun (csn A2) (csn B2)) (cun (csn B2) (csn A2)) (cpr A2 B2) (cpr B2 A2)
  (@uncom (csn A2) (csn B2))
  (@df_pr A2 B2)
  (@df_pr B2 A2)


/-- Equality theorem for unordered pairs. (Contributed by NM, 29-Mar-1998.) -/
theorem preq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cpr A2 C) (cpr B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (cun (csn A2) (csn C)) (cun (csn B2) (csn C)) (cpr A2 C) (cpr B2 C)
  (@uneq1d (wceq A2 B2) (csn A2) (csn B2) (csn C)
    (@sneq A2 B2))
  (@df_pr A2 C)
  (@df_pr B2 C)


/-- Equality theorem for unordered pairs. (Contributed by NM, 15-Jul-1993.) -/
theorem preq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cpr C A2) (cpr C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cpr A2 C) (cpr B2 C) (cpr C A2) (cpr C B2)
  (@preq1 A2 B2 C)
  (@prcom C A2)
  (@prcom C B2)


/-- Equality theorem for unordered pairs. (Contributed by NM, 19-Oct-2012.) -/
theorem preq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 C) (wceq B2 D)) (wceq (cpr A2 B2) (cpr C D)) :=
@sylan9eq (wceq A2 C) (wceq B2 D) (cpr A2 B2) (cpr C B2) (cpr C D)
  (@preq1 A2 C B2)
  (@preq2 B2 D C)


/-- Equality deduction for unordered pairs. (Contributed by NM, 19-Oct-2012.) -/
theorem preq1d {ph : wff} {A2 B2 C : «class»}
  (preq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cpr A2 C) (cpr B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cpr A2 C) (cpr B2 C))
  preq1d_1
  (@preq1 A2 B2 C)


/-- Equality deduction for unordered pairs. (Contributed by NM, 19-Oct-2012.) -/
theorem preq2d {ph : wff} {A2 B2 C : «class»}
  (preq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cpr C A2) (cpr C B2)) :=
@syl ph (wceq A2 B2) (wceq (cpr C A2) (cpr C B2))
  preq1d_1
  (@preq2 A2 B2 C)


/-- Equality deduction for unordered pairs. (Contributed by NM, 19-Oct-2012.) -/
theorem preq12d {ph : wff} {A2 B2 C D : «class»}
  (preq1d_1 : ⊦ wi ph (wceq A2 B2))
  (preq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cpr A2 C) (cpr B2 D)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wceq (cpr A2 C) (cpr B2 D))
  preq1d_1
  preq12d_2
  (@preq12 A2 C B2 D)


/-- Equality theorem for unordered triples. (Contributed by NM, 13-Sep-2011.) -/
theorem tpeq1 {A2 B2 C D : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ctp A2 C D) (ctp B2 C D)) :=
@«3eqtr4g» (wceq A2 B2) (cun (cpr A2 C) (csn D)) (cun (cpr B2 C) (csn D)) (ctp A2 C D) (ctp B2 C D)
  (@uneq1d (wceq A2 B2) (cpr A2 C) (cpr B2 C) (csn D)
    (@preq1 A2 B2 C))
  (@df_tp A2 C D)
  (@df_tp B2 C D)


/-- Equality theorem for unordered triples. (Contributed by NM, 13-Sep-2011.) -/
theorem tpeq2 {A2 B2 C D : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ctp C A2 D) (ctp C B2 D)) :=
@«3eqtr4g» (wceq A2 B2) (cun (cpr C A2) (csn D)) (cun (cpr C B2) (csn D)) (ctp C A2 D) (ctp C B2 D)
  (@uneq1d (wceq A2 B2) (cpr C A2) (cpr C B2) (csn D)
    (@preq2 A2 B2 C))
  (@df_tp C A2 D)
  (@df_tp C B2 D)


/-- Equality theorem for unordered triples. (Contributed by NM, 13-Sep-2011.) -/
theorem tpeq3 {A2 B2 C D : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ctp C D A2) (ctp C D B2)) :=
@«3eqtr4g» (wceq A2 B2) (cun (cpr C D) (csn A2)) (cun (cpr C D) (csn B2)) (ctp C D A2) (ctp C D B2)
  (@uneq2d (wceq A2 B2) (csn A2) (csn B2) (cpr C D)
    (@sneq A2 B2))
  (@df_tp C D A2)
  (@df_tp C D B2)


/-- Equality theorem for unordered triples. (Contributed by NM, 22-Jun-2014.) -/
theorem tpeq1d {ph : wff} {A2 B2 C D : «class»}
  (tpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ctp A2 C D) (ctp B2 C D)) :=
@syl ph (wceq A2 B2) (wceq (ctp A2 C D) (ctp B2 C D))
  tpeq1d_1
  (@tpeq1 A2 B2 C D)


/-- Equality theorem for unordered triples. (Contributed by NM, 22-Jun-2014.) -/
theorem tpeq2d {ph : wff} {A2 B2 C D : «class»}
  (tpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ctp C A2 D) (ctp C B2 D)) :=
@syl ph (wceq A2 B2) (wceq (ctp C A2 D) (ctp C B2 D))
  tpeq1d_1
  (@tpeq2 A2 B2 C D)


/-- Equality theorem for unordered triples. (Contributed by NM, 22-Jun-2014.) -/
theorem tpeq3d {ph : wff} {A2 B2 C D : «class»}
  (tpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ctp C D A2) (ctp C D B2)) :=
@syl ph (wceq A2 B2) (wceq (ctp C D A2) (ctp C D B2))
  tpeq1d_1
  (@tpeq3 A2 B2 C D)


/-- Equality theorem for unordered triples. (Contributed by NM, 22-Jun-2014.) -/
theorem tpeq123d {ph : wff} {A2 B2 C D E F : «class»}
  (tpeq1d_1 : ⊦ wi ph (wceq A2 B2))
  (tpeq123d_2 : ⊦ wi ph (wceq C D))
  (tpeq123d_3 : ⊦ wi ph (wceq E F)) :
  ⊦ wi ph (wceq (ctp A2 C E) (ctp B2 D F)) :=
@«3eqtrd» ph (ctp A2 C E) (ctp B2 C E) (ctp B2 D E) (ctp B2 D F)
  (@tpeq1d ph A2 B2 C E
    tpeq1d_1)
  (@tpeq2d ph C D B2 E
    tpeq123d_2)
  (@tpeq3d ph E F B2 D
    tpeq123d_3)


/-- An unordered pair contains its first member. Part of Theorem 7.6 of [Quine] p. 49. (Contributed
by Stefan Allan, 8-Nov-2008.) -/
theorem prid1g {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel A2 (cpr A2 B2)) :=
@mpbiri (wcel A2 V) (wcel A2 (cpr A2 B2)) (wo (wceq A2 A2) (wceq A2 B2))
  (@orci (wceq A2 A2) (wceq A2 B2)
    (@eqid A2))
  (@elprg A2 A2 B2 V)


/-- An unordered pair contains its second member. Part of Theorem 7.6 of [Quine] p. 49. (Contributed
by Stefan Allan, 8-Nov-2008.) -/
theorem prid2g {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wcel B2 (cpr A2 B2)) :=
@eleqtrdi (wcel B2 V) B2 (cpr B2 A2) (cpr A2 B2)
  (@prid1g B2 A2 V)
  (@prcom B2 A2)


/-- An unordered pair contains its first member. Part of Theorem 7.6 of [Quine] p. 49. (Contributed
by NM, 24-Jun-1993.) -/
theorem prid1 {A2 B2 : «class»}
  (prid1_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel A2 (cpr A2 B2) :=
@ax_mp (wcel A2 cvv) (wcel A2 (cpr A2 B2))
  prid1_1
  (@prid1g A2 B2 cvv)


/-- An unordered pair contains its second member. Part of Theorem 7.6 of [Quine] p. 49. (Note: the
proof from ~ prid2g and ~ ax-mp has one fewer essential step but one more total step.) (Contributed
by NM, 5-Aug-1993.) -/
theorem prid2 {A2 B2 : «class»}
  (prid2_1 : ⊦ wcel B2 cvv) :
  ⊦ wcel B2 (cpr A2 B2) :=
@eleqtri B2 (cpr B2 A2) (cpr A2 B2)
  (@prid1 B2 A2
    prid2_1)
  (@prcom B2 A2)


/-- A proper class vanishes in an unordered pair. (Contributed by NM, 15-Jul-1993.) -/
theorem prprc1 {A2 B2 : «class»} :
  ⊦ wi (wn (wcel A2 cvv)) (wceq (cpr A2 B2) (csn B2)) :=
@sylbi (wn (wcel A2 cvv)) (wceq (csn A2) c0) (wceq (cpr A2 B2) (csn B2))
  (@snprc A2)
  (@«3eqtr4g» (wceq (csn A2) c0) (cun (csn A2) (csn B2)) (cun c0 (csn B2)) (cpr A2 B2) (csn B2)
    (@uneq1 (csn A2) c0 (csn B2))
    (@df_pr A2 B2)
    (@eqtr2i (cun c0 (csn B2)) (cun (csn B2) c0) (csn B2)
      (@uncom c0 (csn B2))
      (@un0 (csn B2))))


/-- A proper class vanishes in an unordered pair. (Contributed by NM, 22-Mar-2006.) -/
theorem prprc2 {A2 B2 : «class»} :
  ⊦ wi (wn (wcel B2 cvv)) (wceq (cpr A2 B2) (csn A2)) :=
@syl5eq (wn (wcel B2 cvv)) (cpr A2 B2) (cpr B2 A2) (csn A2)
  (@prcom A2 B2)
  (@prprc1 B2 A2)


/-- Closed theorem form of ~ tpid1 . (Contributed by Glauco Siliprandi, 23-Oct-2021.) -/
theorem tpid1g {A2 B2 C D : «class»} :
  ⊦ wi (wcel A2 B2) (wcel A2 (ctp A2 C D)) :=
@mpbiri (wcel A2 B2) (wcel A2 (ctp A2 C D)) (w3o (wceq A2 A2) (wceq A2 C) (wceq A2 D))
  (@«3mix1i» (wceq A2 A2) (wceq A2 C) (wceq A2 D)
    (@eqid A2))
  (@eltpg A2 A2 C D B2)


/-- The singleton of a set is not empty. (Contributed by NM, 14-Dec-2008.) -/
theorem snnzg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wne (csn A2) c0) :=
@ne0d (wcel A2 V) (csn A2) A2
  (@snidg A2 V)


/-- The singleton of a set is not empty. (Contributed by NM, 10-Apr-1994.) -/
theorem snnz {A2 : «class»}
  (snnz_1 : ⊦ wcel A2 cvv) :
  ⊦ wne (csn A2) c0 :=
@ax_mp (wcel A2 cvv) (wne (csn A2) c0)
  snnz_1
  (@snnzg A2 cvv)


/-- A pair containing a set is not empty. (Contributed by NM, 9-Apr-1994.) -/
theorem prnz {A2 B2 : «class»}
  (prnz_1 : ⊦ wcel A2 cvv) :
  ⊦ wne (cpr A2 B2) c0 :=
@ne0ii A2 (cpr A2 B2)
  (@prid1 A2 B2
    prnz_1)


/-- A pair containing a set is not empty. (Contributed by FL, 19-Sep-2011.) (Proof shortened by JJ,
23-Jul-2021.) -/
theorem prnzg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wne (cpr A2 B2) c0) :=
@ne0d (wcel A2 V) (cpr A2 B2) A2
  (@prid1g A2 B2 V)


/-- An unordered triple containing a set is not empty. (Contributed by Thierry Arnoux, 8-Apr-2019.)
-/
theorem tpnzd {ph : wff} {A2 B2 C V : «class»}
  (tpnzd_1 : ⊦ wi ph (wcel A2 V)) :
  ⊦ wi ph (wne (ctp A2 B2 C) c0) :=
@«3syl» ph (wcel A2 V) (wcel A2 (ctp A2 B2 C)) (wne (ctp A2 B2 C) c0)
  tpnzd_1
  (@tpid1g A2 V B2 C)
  (@ne0i (ctp A2 B2 C) A2)


/-- The singleton of an element of a class is a subset of the class (general form of ~ snss ).
Theorem 7.4 of [Quine] p. 49. (Contributed by NM, 22-Jul-2001.) -/
theorem snssg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 B2) (wss (csn A2) B2)) :=
@«3bitr4rd» (wcel A2 V) (wal (λ x3, wi (wcel (cv x3) (csn A2)) (wcel (cv x3) B2))) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2))) (wss (csn A2) B2) (wcel A2 B2)
  (@a1i (wb (wal (λ x3, wi (wcel (cv x3) (csn A2)) (wcel (cv x3) B2))) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2)))) (wcel A2 V)
    (@albii (λ x3, wi (wcel (cv x3) (csn A2)) (wcel (cv x3) B2)) (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2))
      (λ x3, @imbi1i (wcel (cv x3) (csn A2)) (wceq (cv x3) A2) (wcel (cv x3) B2)
        (@velsn (λ x3, A2) x3))))
  (@a1i (wb (wss (csn A2) B2) (wal (λ x3, wi (wcel (cv x3) (csn A2)) (wcel (cv x3) B2)))) (wcel A2 V)
    (@dfss2 (csn A2) B2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 V) (wb (wcel A2 B2) (wal (λ x3, wi (wceq (cv x3) A2) (wcel (cv x3) B2)))), from
    @clel2g A2 B2 (λ x3, V) x3)


/-- The singleton of an element of a class is a subset of the class (inference form of ~ snssg ).
Theorem 7.4 of [Quine] p. 49. (Contributed by NM, 21-Jun-1993.) -/
theorem snss {A2 B2 : «class»}
  (snss_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 B2) (wss (csn A2) B2) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 B2) (wss (csn A2) B2))
  snss_1
  (@snssg A2 B2 cvv)


/-- Membership in a set with an element removed. (Contributed by NM, 10-Oct-2007.) -/
theorem eldifsn {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cdif B2 (csn C))) (wa (wcel A2 B2) (wne A2 C)) :=
@bitri (wcel A2 (cdif B2 (csn C))) (wa (wcel A2 B2) (wn (wcel A2 (csn C)))) (wa (wcel A2 B2) (wne A2 C))
  (@eldif A2 B2 (csn C))
  (@pm5_32i (wcel A2 B2) (wn (wcel A2 (csn C))) (wne A2 C)
    (@necon3bbid (wcel A2 B2) (wcel A2 (csn C)) A2 C
      (@elsng A2 C B2)))


/-- Membership in a set with an element removed. (Contributed by NM, 10-Mar-2015.) -/
theorem eldifsni {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cdif B2 (csn C))) (wne A2 C) :=
@simprbi (wcel A2 (cdif B2 (csn C))) (wcel A2 B2) (wne A2 C)
  (@eldifsn A2 B2 C)


/-- The class ` A ` is not in ` ( B \ { A } ) ` . (Contributed by David Moews, 1-May-2017.) -/
theorem neldifsn {A2 B2 : «class»} :
  ⊦ wn (wcel A2 (cdif B2 (csn A2))) :=
@mto (wcel A2 (cdif B2 (csn A2))) (wne A2 A2)
  (@neirr A2)
  (@eldifsni A2 B2 A2)


/-- A set is an element of the universal class excluding a singleton iff it is not the singleton
element. (Contributed by AV, 7-Apr-2019.) -/
theorem eldifvsn {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (cdif cvv (csn B2))) (wne A2 B2)) :=
@bitr4id (wcel A2 V) (wcel A2 (cdif cvv (csn B2))) (wa (wcel A2 cvv) (wne A2 B2)) (wne A2 B2)
  (@eldifsn A2 cvv B2)
  (@biantrurd (wcel A2 V) (wcel A2 cvv) (wne A2 B2)
    (@elex A2 V))


/-- An element not in a set can be removed without affecting the set. (Contributed by NM,
16-Mar-2006.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem difsn {A2 B2 : «class»} :
  ⊦ wi (wn (wcel A2 B2)) (wceq (cdif B2 (csn A2)) B2) :=
@eqrdv (wn (wcel A2 B2)) (cdif B2 (csn A2)) B2
  (λ x3, @syl5bb (wcel (cv x3) (cdif B2 (csn A2))) (wa (wcel (cv x3) B2) (wne (cv x3) A2)) (wn (wcel A2 B2)) (wcel (cv x3) B2)
    (@eldifsn (cv x3) B2 A2)
    (@impbid2 (wn (wcel A2 B2)) (wa (wcel (cv x3) B2) (wne (cv x3) A2)) (wcel (cv x3) B2)
      (@simpl (wcel (cv x3) B2) (wne (cv x3) A2))
      (@ancld (wn (wcel A2 B2)) (wcel (cv x3) B2) (wne (cv x3) A2)
        (@nelelne A2 B2 (cv x3)))))


/-- The singleton of an element of a class is a subset of the class. (Contributed by NM,
6-Jun-1994.) -/
theorem snssi {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wss (csn A2) B2) :=
@ibi (wcel A2 B2) (wss (csn A2) B2)
  (@snssg A2 B2 B2)


/-- The singleton of an element of a class is a subset of the class (deduction form). (Contributed
by Jonathan Ben-Naim, 3-Jun-2011.) -/
theorem snssd {ph : wff} {A2 B2 : «class»}
  (snssd_1 : ⊦ wi ph (wcel A2 B2)) :
  ⊦ wi ph (wss (csn A2) B2) :=
@syl ph (wcel A2 B2) (wss (csn A2) B2)
  snssd_1
  (@snssi A2 B2)


/-- If we remove a single element from a class then put it back in, we end up with the original
class. (Contributed by NM, 2-Oct-2006.) -/
theorem difsnid {A2 B2 : «class»} :
  ⊦ wi (wcel B2 A2) (wceq (cun (cdif A2 (csn B2)) (csn B2)) A2) :=
@syl5eq (wcel B2 A2) (cun (cdif A2 (csn B2)) (csn B2)) (cun (csn B2) (cdif A2 (csn B2))) A2
  (@uncom (cdif A2 (csn B2)) (csn B2))
  (@sylib (wcel B2 A2) (wss (csn B2) A2) (wceq (cun (csn B2) (cdif A2 (csn B2))) A2)
    (@snssi B2 A2)
    (@undif (csn B2) A2))


/-- Compute the power set of the empty set. Theorem 89 of [Suppes] p. 47. (Contributed by NM,
5-Aug-1993.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem pw0 :
  ⊦ wceq (cpw c0) (csn c0) :=
@«3eqtr4i» (cab (λ x3, wss (cv x3) c0)) (cab (λ x3, wceq (cv x3) c0)) (cpw c0) (csn c0)
  (@abbii (λ x3, wss (cv x3) c0) (λ x3, wceq (cv x3) c0)
    (λ x3, @ss0b (cv x3)))
  (@df_pw c0)
  (@df_sn c0)


/-- A singleton is a subset of an unordered pair containing its member. (Contributed by NM,
27-Aug-2004.) -/
theorem snsspr1 {A2 B2 : «class»} :
  ⊦ wss (csn A2) (cpr A2 B2) :=
@sseqtrri (csn A2) (cun (csn A2) (csn B2)) (cpr A2 B2)
  (@ssun1 (csn A2) (csn B2))
  (@df_pr A2 B2)


/-- A singleton is a subset of an unordered pair containing its member. (Contributed by NM,
2-May-2009.) -/
theorem snsspr2 {A2 B2 : «class»} :
  ⊦ wss (csn B2) (cpr A2 B2) :=
@sseqtrri (csn B2) (cun (csn A2) (csn B2)) (cpr A2 B2)
  (@ssun2 (csn B2) (csn A2))
  (@df_pr A2 B2)


/-- A singleton is a subset of an unordered triple containing its member. (Contributed by NM,
9-Oct-2013.) -/
theorem snsstp1 {A2 B2 C : «class»} :
  ⊦ wss (csn A2) (ctp A2 B2 C) :=
@sseqtrri (csn A2) (cun (cpr A2 B2) (csn C)) (ctp A2 B2 C)
  (@sstri (csn A2) (cpr A2 B2) (cun (cpr A2 B2) (csn C))
    (@snsspr1 A2 B2)
    (@ssun1 (cpr A2 B2) (csn C)))
  (@df_tp A2 B2 C)


/-- A singleton is a subset of an unordered triple containing its member. (Contributed by NM,
9-Oct-2013.) -/
theorem snsstp2 {A2 B2 C : «class»} :
  ⊦ wss (csn B2) (ctp A2 B2 C) :=
@sseqtrri (csn B2) (cun (cpr A2 B2) (csn C)) (ctp A2 B2 C)
  (@sstri (csn B2) (cpr A2 B2) (cun (cpr A2 B2) (csn C))
    (@snsspr2 A2 B2)
    (@ssun1 (cpr A2 B2) (csn C)))
  (@df_tp A2 B2 C)


/-- A singleton is a subset of an unordered triple containing its member. (Contributed by NM,
9-Oct-2013.) -/
theorem snsstp3 {A2 B2 C : «class»} :
  ⊦ wss (csn C) (ctp A2 B2 C) :=
@sseqtrri (csn C) (cun (cpr A2 B2) (csn C)) (ctp A2 B2 C)
  (@ssun2 (csn C) (cpr A2 B2))
  (@df_tp A2 B2 C)


/-- A pair of elements of a class is a subset of the class. Theorem 7.5 of [Quine] p. 49.
(Contributed by NM, 22-Mar-2006.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem prssg {A2 B2 C V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wb (wa (wcel A2 C) (wcel B2 C)) (wss (cpr A2 B2) C)) :=
@bitrdi (wa (wcel A2 V) (wcel B2 W)) (wa (wcel A2 C) (wcel B2 C)) (wa (wss (csn A2) C) (wss (csn B2) C)) (wss (cpr A2 B2) C)
  (@bi2anan9 (wcel A2 V) (wcel A2 C) (wss (csn A2) C) (wcel B2 W) (wcel B2 C) (wss (csn B2) C)
    (@snssg A2 C V)
    (@snssg B2 C W))
  (@bitr4i (wa (wss (csn A2) C) (wss (csn B2) C)) (wss (cun (csn A2) (csn B2)) C) (wss (cpr A2 B2) C)
    (@unss (csn A2) (csn B2) C)
    (@sseq1i (cpr A2 B2) (cun (csn A2) (csn B2)) C
      (@df_pr A2 B2)))


/-- A pair of elements of a class is a subset of the class. Theorem 7.5 of [Quine] p. 49.
(Contributed by NM, 30-May-1994.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) (Proof shortened
by JJ, 23-Jul-2021.) -/
theorem prss {A2 B2 C : «class»}
  (prss_1 : ⊦ wcel A2 cvv)
  (prss_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wa (wcel A2 C) (wcel B2 C)) (wss (cpr A2 B2) C) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wa (wcel A2 C) (wcel B2 C)) (wss (cpr A2 B2) C))
  prss_1
  prss_2
  (@prssg A2 B2 C cvv cvv)


/-- A pair of elements of a class is a subset of the class. (Contributed by NM, 16-Jan-2015.) -/
theorem prssi {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 C)) (wss (cpr A2 B2) C) :=
@ibi (wa (wcel A2 C) (wcel B2 C)) (wss (cpr A2 B2) C)
  (@prssg A2 B2 C C C)


/-- Deduction version of ~ prssi : A pair of elements of a class is a subset of the class.
(Contributed by Glauco Siliprandi, 17-Aug-2020.) -/
theorem prssd {ph : wff} {A2 B2 C : «class»}
  (prssd_1 : ⊦ wi ph (wcel A2 C))
  (prssd_2 : ⊦ wi ph (wcel B2 C)) :
  ⊦ wi ph (wss (cpr A2 B2) C) :=
@syl2anc ph (wcel A2 C) (wcel B2 C) (wss (cpr A2 B2) C)
  prssd_1
  prssd_2
  (@prssi A2 B2 C)


/-- The subsets of a singleton. (Contributed by NM, 24-Apr-2004.) -/
theorem sssn {A2 B2 : «class»} :
  ⊦ wb (wss A2 (csn B2)) (wo (wceq A2 c0) (wceq A2 (csn B2))) :=
@impbii (wss A2 (csn B2)) (wo (wceq A2 c0) (wceq A2 (csn B2)))
  (@orrd (wss A2 (csn B2)) (wceq A2 c0) (wceq A2 (csn B2))
    (@syl6ibr (wss A2 (csn B2)) (wn (wceq A2 c0)) (wa (wss A2 (csn B2)) (wss (csn B2) A2)) (wceq A2 (csn B2))
      (@anc2li (wss A2 (csn B2)) (wn (wceq A2 c0)) (wss (csn B2) A2)
        (@syl6 (wss A2 (csn B2)) (wn (wceq A2 c0)) (wcel B2 A2) (wss (csn B2) A2)
          (@syl5bi (wn (wceq A2 c0)) (wex (λ x3, wcel (cv x3) A2)) (wss A2 (csn B2)) (wcel B2 A2)
            (@neq0 A2)
            (@exlimdv (wss A2 (csn B2)) (λ x3, wcel (cv x3) A2) (wcel B2 A2)
              (λ x3, @ibd (wss A2 (csn B2)) (wcel (cv x3) A2) (wcel B2 A2)
                (@syl6 (wss A2 (csn B2)) (wcel (cv x3) A2) (wceq (cv x3) B2) (wb (wcel (cv x3) A2) (wcel B2 A2))
                  (@syl6 (wss A2 (csn B2)) (wcel (cv x3) A2) (wcel (cv x3) (csn B2)) (wceq (cv x3) B2)
                    (@ssel A2 (csn B2) (cv x3))
                    (@elsni (cv x3) B2))
                  (@eleq1 (cv x3) B2 A2)))))
          (@snssi B2 A2)))
      (@eqss A2 (csn B2))))
  (@jaoi (wceq A2 c0) (wss A2 (csn B2)) (wceq A2 (csn B2))
    (@mpbiri (wceq A2 c0) (wss A2 (csn B2)) (wss c0 (csn B2))
      (@«0ss» (csn B2))
      (@sseq1 A2 c0 (csn B2)))
    (@eqimss A2 (csn B2)))


/-- Two ways to express that a nonempty set equals a singleton. (Contributed by NM, 15-Dec-2007.)
(Proof shortened by JJ, 23-Jul-2021.) -/
theorem eqsn {A2 B2 : «class»} :
  ⊦ wi (wne A2 c0) (wb (wceq A2 (csn B2)) (wral (λ x3, wceq (cv x3) B2) (λ x3, A2))) :=
@bitrdi (wne A2 c0) (wceq A2 (csn B2)) (wo (wceq A2 c0) (wceq A2 (csn B2))) (wral (λ x3, wceq (cv x3) B2) (λ x3, A2))
  (@sylbi (wne A2 c0) (wn (wceq A2 c0)) (wb (wceq A2 (csn B2)) (wo (wceq A2 c0) (wceq A2 (csn B2))))
    (@df_ne A2 c0)
    (@biorf (wceq A2 c0) (wceq A2 (csn B2))))
  (@«3bitr3i» (wss A2 (csn B2)) (wral (λ x3, wcel (cv x3) (csn B2)) (λ x3, A2)) (wo (wceq A2 c0) (wceq A2 (csn B2))) (wral (λ x3, wceq (cv x3) B2) (λ x3, A2))
    (@dfss3 A2 (csn B2))
    (@sssn A2 B2)
    (@ralbii (λ x3, wcel (cv x3) (csn B2)) (λ x3, wceq (cv x3) B2) (λ x3, A2)
      (λ x3, @velsn (λ x3, B2) x3)))


/-- Closed form of ~ sneqr . (Contributed by Scott Fenton, 1-Apr-2011.) (Proof shortened by JJ,
23-Jul-2021.) -/
theorem sneqrg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wi (wceq (csn A2) (csn B2)) (wceq A2 B2)) :=
@sylibd (wcel A2 V) (wceq (csn A2) (csn B2)) (wcel A2 (csn B2)) (wceq A2 B2)
  (@syl5ibcom (wcel A2 V) (wcel A2 (csn A2)) (wceq (csn A2) (csn B2)) (wcel A2 (csn B2))
    (@snidg A2 V)
    (@eleq2 (csn A2) (csn B2) A2))
  (@elsng A2 B2 V)


/-- If the singletons of two sets are equal, the two sets are equal. Part of Exercise 4 of
[TakeutiZaring] p. 15. (Contributed by NM, 27-Aug-1993.) -/
theorem sneqr {A2 B2 : «class»}
  (sneqr_1 : ⊦ wcel A2 cvv) :
  ⊦ wi (wceq (csn A2) (csn B2)) (wceq A2 B2) :=
@ax_mp (wcel A2 cvv) (wi (wceq (csn A2) (csn B2)) (wceq A2 B2))
  sneqr_1
  (@sneqrg A2 B2 cvv)


/-- There exists at most one set whose singleton is equal to a given class. See also ~ moeq .
(Contributed by BJ, 24-Sep-2022.) -/
theorem mosneq {A2 : «class»} :
  ⊦ wmo (λ x3, wceq (csn (cv x3)) A2) :=
@mpbir (wmo (λ x3, wceq (csn (cv x3)) A2)) (wal (λ x3, wal (λ y, wi (wa (wceq (csn (cv x3)) A2) (wceq (csn (cv y)) A2)) (wceq (cv x3) (cv y)))))
  (@gen2 (λ x3 y, wi (wa (wceq (csn (cv x3)) A2) (wceq (csn (cv y)) A2)) (wceq (cv x3) (cv y)))
    (λ x3 y, @syl (wa (wceq (csn (cv x3)) A2) (wceq (csn (cv y)) A2)) (wceq (csn (cv x3)) (csn (cv y))) (wceq (cv x3) (cv y))
      (@eqtr3 (csn (cv x3)) (csn (cv y)) A2)
      (@sneqr (cv x3) (cv y)
        (@vex x3))))
  (@mo4 (λ x3, wceq (csn (cv x3)) A2) (λ y, wceq (csn (cv y)) A2)
    (λ x3 y, @eqeq1d (wceq (cv x3) (cv y)) (csn (cv x3)) (csn (cv y)) A2
      (@sneq (cv x3) (cv y))))


/-- Two singletons of sets are equal iff their elements are equal. (Contributed by Scott Fenton,
16-Apr-2012.) -/
theorem sneqbg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wceq (csn A2) (csn B2)) (wceq A2 B2)) :=
@impbid1 (wcel A2 V) (wceq (csn A2) (csn B2)) (wceq A2 B2)
  (@sneqrg A2 B2 V)
  (@sneq A2 B2)


/-- Biconditional equality lemma for unordered pairs, deduction form. Two unordered pairs have the
same second element iff the first elements are equal. (Contributed by AV, 18-Dec-2020.) -/
theorem preq1b {ph : wff} {A2 B2 C V W : «class»}
  (preq1b_a : ⊦ wi ph (wcel A2 V))
  (preq1b_b : ⊦ wi ph (wcel B2 W)) :
  ⊦ wi ph (wb (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2)) :=
@impbid1 ph (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2)
  (@ex ph (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2)
    (@oplem1 (wa ph (wceq (cpr A2 C) (cpr B2 C))) (wceq A2 B2) (wceq A2 C) (wceq B2 A2) (wceq B2 C)
      (@imp ph (wceq (cpr A2 C) (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))
        (@sylibd ph (wceq (cpr A2 C) (cpr B2 C)) (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C))
          (@syl5ibcom ph (wcel A2 (cpr A2 C)) (wceq (cpr A2 C) (cpr B2 C)) (wcel A2 (cpr B2 C))
            (@syl ph (wcel A2 V) (wcel A2 (cpr A2 C))
              preq1b_a
              (@prid1g A2 C V))
            (@eleq2 (cpr A2 C) (cpr B2 C) A2))
          (@syl ph (wcel A2 V) (wb (wcel A2 (cpr B2 C)) (wo (wceq A2 B2) (wceq A2 C)))
            preq1b_a
            (@elprg A2 B2 C V))))
      (@imp ph (wceq (cpr A2 C) (cpr B2 C)) (wo (wceq B2 A2) (wceq B2 C))
        (@sylibd ph (wceq (cpr A2 C) (cpr B2 C)) (wcel B2 (cpr A2 C)) (wo (wceq B2 A2) (wceq B2 C))
          (@syl5ibrcom ph (wcel B2 (cpr A2 C)) (wceq (cpr A2 C) (cpr B2 C)) (wcel B2 (cpr B2 C))
            (@syl ph (wcel B2 W) (wcel B2 (cpr B2 C))
              preq1b_b
              (@prid1g B2 C W))
            (@eleq2 (cpr A2 C) (cpr B2 C) B2))
          (@syl ph (wcel B2 W) (wb (wcel B2 (cpr A2 C)) (wo (wceq B2 A2) (wceq B2 C)))
            preq1b_b
            (@elprg B2 A2 C W))))
      (@eqcom A2 B2)
      (@eqeq2 A2 C B2)))
  (@preq1 A2 B2 C)


/-- Reverse equality lemma for unordered pairs. If two unordered pairs have the same second element,
the first elements are equal. (Contributed by NM, 18-Oct-1995.) -/
theorem preqr1 {A2 B2 C : «class»}
  (preqr1_a : ⊦ wcel A2 cvv)
  (preqr1_b : ⊦ wcel B2 cvv) :
  ⊦ wi (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2) :=
@biimpi (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2)
  (@ax_mp (wcel A2 cvv) (wb (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2))
    preqr1_a
    (@preq1b (wcel A2 cvv) A2 B2 C cvv cvv
      (@id (wcel A2 cvv))
      (@a1i (wcel B2 cvv) (wcel A2 cvv)
        preqr1_b)))


/-- Reverse equality lemma for unordered pairs. If two unordered pairs have the same first element,
the second elements are equal. (Contributed by NM, 15-Jul-1993.) -/
theorem preqr2 {A2 B2 C : «class»}
  (preqr1_a : ⊦ wcel A2 cvv)
  (preqr1_b : ⊦ wcel B2 cvv) :
  ⊦ wi (wceq (cpr C A2) (cpr C B2)) (wceq A2 B2) :=
@sylbi (wceq (cpr C A2) (cpr C B2)) (wceq (cpr A2 C) (cpr B2 C)) (wceq A2 B2)
  (@eqeq12i (cpr C A2) (cpr A2 C) (cpr C B2) (cpr B2 C)
    (@prcom C A2)
    (@prcom C B2))
  (@preqr1 A2 B2 C
    preqr1_a
    preqr1_b)


/-- Rewrite ~ df-op using ` if ` . When both arguments are sets, it reduces to the standard
Kuratowski definition; otherwise, it is defined to be the empty set. Avoid directly depending on
this detail so that theorems will not depend on the Kuratowski construction. (Contributed by Mario
Carneiro, 26-Apr-2015.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by SN, 1-Aug-2024.) (Avoid
depending on this detail.) -/
theorem dfopif {A2 B2 : «class»} :
  ⊦ wceq (cop A2 B2) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0) :=
@eqriv (cop A2 B2) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0)
  (λ x3, @«3bitr4i» (w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wo (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0))) (wcel (cv x3) (cop A2 B2)) (wcel (cv x3) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0))
    (@«3bitr4i» (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wo (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0)) (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))))) (w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wo (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0)))
      (@ax_mp (wn (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0))) (wb (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wo (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0)) (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))))))
        (@intnan (wcel (cv x3) c0) (wn (wa (wcel A2 cvv) (wcel B2 cvv)))
          (@noel (cv x3)))
        (@biorf (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0)) (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))))))
      (@df_3an (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))))
      (@orcom (wa (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (wa (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wcel (cv x3) c0))))
    (@elv (λ x3, wb (wcel (cv x3) (cop A2 B2)) (w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))))
      (λ x3, setvar.forget $ λ y : setvar,
        show ⊦ wi (wcel (cv x3) cvv) (wb (wcel (cv x3) (cop A2 B2)) (w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))))), from
        @elab2gw (λ x3, w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (λ y, w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv y) (cpr (csn A2) (cpr A2 B2)))) (λ x3, w3a (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2)))) (λ x3, cv x3) (λ x3 y, cop A2 B2) (λ x3 y, cvv)
          (λ x3 y, @«3anbi3d» (wceq (cv x3) (cv y)) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))) (wcel (cv y) (cpr (csn A2) (cpr A2 B2))) (wcel A2 cvv) (wcel B2 cvv)
            (@eleq1w (λ x3 y, cpr (csn A2) (cpr A2 B2)) x3 y))
          (λ x3 y, @«3anbi3d» (wceq (cv y) (cv x3)) (wcel (cv y) (cpr (csn A2) (cpr A2 B2))) (wcel (cv x3) (cpr (csn A2) (cpr A2 B2))) (wcel A2 cvv) (wcel B2 cvv)
            (@eleq1w (λ y x3, cpr (csn A2) (cpr A2 B2)) y x3))
          (λ x3 y, @df_op A2 B2) x3 y) x3)
    (@elif (wa (wcel A2 cvv) (wcel B2 cvv)) (cv x3) (cpr (csn A2) (cpr A2 B2)) c0))


/-- Value of the ordered pair when the arguments are sets. (Contributed by Mario Carneiro,
26-Apr-2015.) (Avoid depending on this detail.) -/
theorem dfopg {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wceq (cop A2 B2) (cpr (csn A2) (cpr A2 B2))) :=
@syl2an (wcel A2 V) (wcel A2 cvv) (wcel B2 cvv) (wceq (cop A2 B2) (cpr (csn A2) (cpr A2 B2))) (wcel B2 W)
  (@elex A2 V)
  (@elex B2 W)
  (@syl5eq (wa (wcel A2 cvv) (wcel B2 cvv)) (cop A2 B2) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0) (cpr (csn A2) (cpr A2 B2))
    (@dfopif A2 B2)
    (@iftrue (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0))


/-- Value of an ordered pair when the arguments are sets, with the conclusion corresponding to
Kuratowski's original definition. (Contributed by NM, 25-Jun-1998.) (Avoid depending on this
detail.) -/
theorem dfop {A2 B2 : «class»}
  (dfop_1 : ⊦ wcel A2 cvv)
  (dfop_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cop A2 B2) (cpr (csn A2) (cpr A2 B2)) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wceq (cop A2 B2) (cpr (csn A2) (cpr A2 B2)))
  dfop_1
  dfop_2
  (@dfopg A2 B2 cvv cvv)


/-- Equality theorem for ordered pairs. (Contributed by NM, 25-Jun-1998.) (Revised by Mario
Carneiro, 26-Apr-2015.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 26-May-2024.)
-/
theorem opeq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cop A2 C) (cop B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (cab (λ x3, w3a (wcel A2 cvv) (wcel C cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 C))))) (cab (λ x3, w3a (wcel B2 cvv) (wcel C cvv) (wcel (cv x3) (cpr (csn B2) (cpr B2 C))))) (cop A2 C) (cop B2 C)
  (@abbidv (wceq A2 B2) (λ x3, w3a (wcel A2 cvv) (wcel C cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 C)))) (λ x3, w3a (wcel B2 cvv) (wcel C cvv) (wcel (cv x3) (cpr (csn B2) (cpr B2 C))))
    (λ x3, @«3anbi13d» (wceq A2 B2) (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn A2) (cpr A2 C))) (wcel (cv x3) (cpr (csn B2) (cpr B2 C))) (wcel C cvv)
      (@eleq1 A2 B2 cvv)
      (@eleq2d (wceq A2 B2) (cpr (csn A2) (cpr A2 C)) (cpr (csn B2) (cpr B2 C)) (cv x3)
        (@preq12d (wceq A2 B2) (csn A2) (csn B2) (cpr A2 C) (cpr B2 C)
          (@sneq A2 B2)
          (@preq1 A2 B2 C)))))
  (@df_op A2 C)
  (@df_op B2 C)


/-- Equality theorem for ordered pairs. (Contributed by NM, 25-Jun-1998.) (Revised by Mario
Carneiro, 26-Apr-2015.) Avoid ~ ax-10 , ~ ax-11 , ~ ax-12 . (Revised by Gino Giotto, 26-May-2024.)
-/
theorem opeq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cop C A2) (cop C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cab (λ x3, w3a (wcel C cvv) (wcel A2 cvv) (wcel (cv x3) (cpr (csn C) (cpr C A2))))) (cab (λ x3, w3a (wcel C cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn C) (cpr C B2))))) (cop C A2) (cop C B2)
  (@abbidv (wceq A2 B2) (λ x3, w3a (wcel C cvv) (wcel A2 cvv) (wcel (cv x3) (cpr (csn C) (cpr C A2)))) (λ x3, w3a (wcel C cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn C) (cpr C B2))))
    (λ x3, @«3anbi23d» (wceq A2 B2) (wcel A2 cvv) (wcel B2 cvv) (wcel (cv x3) (cpr (csn C) (cpr C A2))) (wcel (cv x3) (cpr (csn C) (cpr C B2))) (wcel C cvv)
      (@eleq1 A2 B2 cvv)
      (@eleq2d (wceq A2 B2) (cpr (csn C) (cpr C A2)) (cpr (csn C) (cpr C B2)) (cv x3)
        (@preq2d (wceq A2 B2) (cpr C A2) (cpr C B2) (csn C)
          (@preq2 A2 B2 C)))))
  (@df_op C A2)
  (@df_op C B2)


/-- Equality theorem for ordered pairs. (Contributed by NM, 28-May-1995.) -/
theorem opeq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 C) (wceq B2 D)) (wceq (cop A2 B2) (cop C D)) :=
@sylan9eq (wceq A2 C) (wceq B2 D) (cop A2 B2) (cop C B2) (cop C D)
  (@opeq1 A2 C B2)
  (@opeq2 B2 D C)


/-- Equality inference for ordered pairs. (Contributed by NM, 16-Dec-2006.) -/
theorem opeq1i {A2 B2 C : «class»}
  (opeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cop A2 C) (cop B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cop A2 C) (cop B2 C))
  opeq1i_1
  (@opeq1 A2 B2 C)


/-- Equality inference for ordered pairs. (Contributed by NM, 16-Dec-2006.) -/
theorem opeq2i {A2 B2 C : «class»}
  (opeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cop C A2) (cop C B2) :=
@ax_mp (wceq A2 B2) (wceq (cop C A2) (cop C B2))
  opeq1i_1
  (@opeq2 A2 B2 C)


/-- Equality inference for ordered pairs. (Contributed by NM, 16-Dec-2006.) (Proof shortened by Eric
Schmidt, 4-Apr-2007.) -/
theorem opeq12i {A2 B2 C D : «class»}
  (opeq1i_1 : ⊦ wceq A2 B2)
  (opeq12i_2 : ⊦ wceq C D) :
  ⊦ wceq (cop A2 C) (cop B2 D) :=
@mp2an (wceq A2 B2) (wceq C D) (wceq (cop A2 C) (cop B2 D))
  opeq1i_1
  opeq12i_2
  (@opeq12 A2 C B2 D)


/-- Equality deduction for ordered pairs. (Contributed by NM, 16-Dec-2006.) -/
theorem opeq1d {ph : wff} {A2 B2 C : «class»}
  (opeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cop A2 C) (cop B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cop A2 C) (cop B2 C))
  opeq1d_1
  (@opeq1 A2 B2 C)


/-- Equality deduction for ordered pairs. (Contributed by NM, 16-Dec-2006.) -/
theorem opeq2d {ph : wff} {A2 B2 C : «class»}
  (opeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cop C A2) (cop C B2)) :=
@syl ph (wceq A2 B2) (wceq (cop C A2) (cop C B2))
  opeq1d_1
  (@opeq2 A2 B2 C)


/-- Equality deduction for ordered pairs. (Contributed by NM, 16-Dec-2006.) (Proof shortened by
Andrew Salmon, 29-Jun-2011.) -/
theorem opeq12d {ph : wff} {A2 B2 C D : «class»}
  (opeq1d_1 : ⊦ wi ph (wceq A2 B2))
  (opeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cop A2 C) (cop B2 D)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wceq (cop A2 C) (cop B2 D))
  opeq1d_1
  opeq12d_2
  (@opeq12 A2 C B2 D)


/-- Bound-variable hypothesis builder for ordered pairs. (Contributed by NM, 14-Nov-1995.) -/
theorem nfop {A2 B2 : setvar → «class»}
  (nfop_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfop_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cop (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cop (A2 x3) (B2 x3)) (λ x3, cif (wa (wcel (A2 x3) cvv) (wcel (B2 x3) cvv)) (cpr (csn (A2 x3)) (cpr (A2 x3) (B2 x3))) c0)
  (λ x3, @dfopif (A2 x3) (B2 x3))
  (@nfif (λ x3, wa (wcel (A2 x3) cvv) (wcel (B2 x3) cvv)) (λ x3, cpr (csn (A2 x3)) (cpr (A2 x3) (B2 x3))) (λ x3, c0)
    (@nfan (λ x3, wcel (A2 x3) cvv) (λ x3, wcel (B2 x3) cvv)
      (@nfel1 (λ x3, A2 x3) cvv
        nfop_1)
      (@nfel1 (λ x3, B2 x3) cvv
        nfop_2))
    (@nfpr (λ x3, csn (A2 x3)) (λ x3, cpr (A2 x3) (B2 x3))
      (@nfsn (λ x3, A2 x3)
        nfop_1)
      (@nfpr (λ x3, A2 x3) (λ x3, B2 x3)
        nfop_1
        nfop_2))
    (@nfcv c0))


/-- Deduction version of bound-variable hypothesis builder ~ nfop . This shows how the deduction
version of a not-free theorem such as ~ nfop can be created from the corresponding not-free
inference theorem. (Contributed by NM, 4-Feb-2008.) -/
theorem nfopd {ph : setvar → wff} {A2 B2 : setvar → «class»}
  (nfopd_2 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (nfopd_3 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnfc (λ x3, cop (A2 x3) (B2 x3))) :=
@mpbii (ph x3) (wnfc (λ x3, cop (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3)))))) (wnfc (λ x3, cop (A2 x3) (B2 x3)))
  (@nfop (λ x3, cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (λ x3, cab (λ z, wal (λ x3, wcel (cv z) (B2 x3))))
    (@nfaba1 (λ x3 z, wcel (cv z) (A2 x3)))
    (@nfaba1 (λ x3 z, wcel (cv z) (B2 x3))))
  (@syl2anc (ph x3) (wnfc (λ x3, A2 x3)) (wnfc (λ x3, B2 x3)) (wb (wnfc (λ x3, cop (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3)))))) (wnfc (λ x3, cop (A2 x3) (B2 x3))))
    (nfopd_2 x3)
    (nfopd_3 x3)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wa (wnfc (λ x3, A2 x3)) (wnfc (λ x3, B2 x3))) (wb (wnfc (λ x3, cop (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3)))))) (wnfc (λ x3, cop (A2 x3) (B2 x3)))), from
      @nfceqdf (λ x3, wa (wnfc (λ x3, A2 x3)) (wnfc (λ x3, B2 x3))) (λ x3, cop (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3))))) (λ x3, cop (A2 x3) (B2 x3))
        (@nfan (λ x3, wnfc (λ x3, A2 x3)) (λ x3, wnfc (λ x3, B2 x3))
          (@nfnfc1 (λ x3, A2 x3))
          (@nfnfc1 (λ x3, B2 x3)))
        (λ x3, @opeq12d (wa (wnfc (λ x3, A2 x3)) (wnfc (λ x3, B2 x3))) (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (A2 x3) (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3)))) (B2 x3)
          (@adantr (wnfc (λ x3, A2 x3)) (wceq (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (A2 x3)) (wnfc (λ x3, B2 x3))
            (@abidnf (λ x3, A2 x3) x3))
          (@adantl (wnfc (λ x3, B2 x3)) (wceq (cab (λ z, wal (λ x3, wcel (cv z) (B2 x3)))) (B2 x3)) (wnfc (λ x3, A2 x3))
            (@abidnf (λ x3, B2 x3) x3))) x3))


/-- Expansion of an ordered pair when either member is a proper class. (Contributed by Mario
Carneiro, 26-Apr-2015.) -/
theorem opprc {A2 B2 : «class»} :
  ⊦ wi (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (wceq (cop A2 B2) c0) :=
@syl5eq (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (cop A2 B2) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0) c0
  (@dfopif A2 B2)
  (@iffalse (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0)


/-- Expansion of an ordered pair when the first member is a proper class. See also ~ opprc .
(Contributed by NM, 10-Apr-2004.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opprc1 {A2 B2 : «class»} :
  ⊦ wi (wn (wcel A2 cvv)) (wceq (cop A2 B2) c0) :=
@nsyl5 (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel A2 cvv) (wceq (cop A2 B2) c0)
  (@simpl (wcel A2 cvv) (wcel B2 cvv))
  (@opprc A2 B2)


/-- Expansion of an ordered pair when the second member is a proper class. See also ~ opprc .
(Contributed by NM, 15-Nov-1994.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opprc2 {A2 B2 : «class»} :
  ⊦ wi (wn (wcel B2 cvv)) (wceq (cop A2 B2) c0) :=
@nsyl5 (wa (wcel A2 cvv) (wcel B2 cvv)) (wcel B2 cvv) (wceq (cop A2 B2) c0)
  (@simpr (wcel A2 cvv) (wcel B2 cvv))
  (@opprc A2 B2)


/-- If an ordered pair has an element, then its arguments are sets. (Contributed by Mario Carneiro,
26-Apr-2015.) -/
theorem oprcl {A2 B2 C : «class»} :
  ⊦ wi (wcel C (cop A2 B2)) (wa (wcel A2 cvv) (wcel B2 cvv)) :=
@nsyl2 (wcel C (cop A2 B2)) (wceq (cop A2 B2) c0) (wa (wcel A2 cvv) (wcel B2 cvv))
  (@n0i (cop A2 B2) C)
  (@opprc A2 B2)


-- /-- Extend class notation to include the union of a class. Read: "union (of) ` A ` ". -/
-- constant cuni : «class» → «class»


-- /-- Define the union of a class i.e. the collection of all members of the members of the class.
-- Definition 5.5 of [TakeutiZaring] p. 16. For example, ` U. { { 1 , 3 } , { 1 , 8 } } = { 1 , 3 ,
-- 8 } ` ( ~ ex-uni ). This is similar to the union of two classes ~ df-un . (Contributed by NM,
-- 23-Aug-1993.) -/
-- axiom df_uni {A2 : «class»} : ⊦ wceq (cuni A2) (cab (λ x3, wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))))


/-- Alternate definition of class union. (Contributed by NM, 28-Jun-1998.) -/
theorem dfuni2 {A2 : «class»} :
  ⊦ wceq (cuni A2) (cab (λ x3, wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2))) :=
@eqtri (cuni A2) (cab (λ x3, wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)))) (cab (λ x3, wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2)))
  (@df_uni A2)
  (@abbii (λ x3, wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (λ x3, wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2))
    (λ x3, @bitr4i (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wex (λ y, wa (wcel (cv y) A2) (wcel (cv x3) (cv y)))) (wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2))
      (@exancom (λ y, wcel (cv x3) (cv y)) (λ y, wcel (cv y) A2))
      (@df_rex (λ y, wcel (cv x3) (cv y)) (λ y, A2))))


/-- Membership in class union. (Contributed by NM, 22-May-1994.) -/
theorem eluni {A2 B2 : «class»} :
  ⊦ wb (wcel A2 (cuni B2)) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2))) :=
@pm5_21nii (wcel A2 (cuni B2)) (wcel A2 cvv) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2)))
  (@elex A2 (cuni B2))
  (@exlimiv (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2)) (wcel A2 cvv)
    (λ x3, @adantr (wcel A2 (cv x3)) (wcel A2 cvv) (wcel (cv x3) B2)
      (@elex A2 (cv x3))))
  (setvar.forget $ λ y : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cuni B2)) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2)))), from
    @elab2gw (λ y, wex (λ x3, wa (wcel (cv y) (cv x3)) (wcel (cv x3) B2))) (λ z, wex (λ x3, wa (wcel (cv z) (cv x3)) (wcel (cv x3) B2))) (λ y, wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2))) (λ y, A2) (λ y z, cuni B2) (λ y z, cvv)
      (λ y z, @exbidv (wceq (cv y) (cv z)) (λ x3, wa (wcel (cv y) (cv x3)) (wcel (cv x3) B2)) (λ x3, wa (wcel (cv z) (cv x3)) (wcel (cv x3) B2))
        (λ x3, @anbi1d (wceq (cv y) (cv z)) (wcel (cv y) (cv x3)) (wcel (cv z) (cv x3)) (wcel (cv x3) B2)
          (@elequ1 x3 y z)))
      (λ y z, @exbidv (wceq (cv z) A2) (λ x3, wa (wcel (cv z) (cv x3)) (wcel (cv x3) B2)) (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2))
        (λ x3, @anbi1d (wceq (cv z) A2) (wcel (cv z) (cv x3)) (wcel A2 (cv x3)) (wcel (cv x3) B2)
          (@eleq1 (cv z) A2 (cv x3))))
      (λ y z, @df_uni B2) y z)


/-- Membership in class union. Restricted quantifier version. (Contributed by NM, 31-Aug-1999.) -/
theorem eluni2 {A2 B2 : «class»} :
  ⊦ wb (wcel A2 (cuni B2)) (wrex (λ x3, wcel A2 (cv x3)) (λ x3, B2)) :=
@«3bitr4i» (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) B2))) (wex (λ x3, wa (wcel (cv x3) B2) (wcel A2 (cv x3)))) (wcel A2 (cuni B2)) (wrex (λ x3, wcel A2 (cv x3)) (λ x3, B2))
  (@exancom (λ x3, wcel A2 (cv x3)) (λ x3, wcel (cv x3) B2))
  (@eluni A2 B2)
  (@df_rex (λ x3, wcel A2 (cv x3)) (λ x3, B2))


/-- Membership in class union. (Contributed by NM, 24-Mar-1995.) -/
theorem elunii {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wcel B2 C)) (wcel A2 (cuni C)) :=
@sylibr (wa (wcel A2 B2) (wcel B2 C)) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) C))) (wcel A2 (cuni C))
  (@anabsi7 (wcel A2 B2) (wcel B2 C) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) C)))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel B2 C) (wi (wa (wcel A2 B2) (wcel B2 C)) (wex (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) C)))), from
      @spcegv (λ x3, wa (wcel A2 (cv x3)) (wcel (cv x3) C)) (wa (wcel A2 B2) (wcel B2 C)) B2 (λ x3, C)
        (λ x3, @anbi12d (wceq (cv x3) B2) (wcel A2 (cv x3)) (wcel A2 B2) (wcel (cv x3) C) (wcel B2 C)
          (@eleq2 (cv x3) B2 A2)
          (@eleq1 (cv x3) B2 C)) x3))
  (@eluni A2 C)


/-- Deduction version of ~ nfuni . (Contributed by NM, 18-Feb-2013.) -/
theorem nfunid {ph : setvar → wff} {A2 : setvar → «class»}
  (nfunid_3 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnfc (λ x3, cuni (A2 x3))) :=
@nfcxfrd (λ x3, ph x3) (λ x3, cuni (A2 x3)) (λ x3, cab (λ y, wrex (λ z, wcel (cv y) (cv z)) (λ z, A2 x3)))
  (λ x3, @dfuni2 (A2 x3))
  (λ x3, setvar.forget $ λ y : setvar,
    show ⊦ wi (ph x3) (wnfc (λ x3, cab (λ y, wrex (λ z, wcel (cv y) (cv z)) (λ z, A2 x3)))), from
    @nfabdw (λ x3 y, ph x3) (λ x3 y, wrex (λ z, wcel (cv y) (cv z)) (λ z, A2 x3))
      (λ x3, @nfv (ph x3))
      (λ x3 y, setvar.forget $ λ z : setvar,
        show ⊦ wi (ph x3) (wnf (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, A2 x3))), from
        @nfrexd (λ x3 z, ph x3) (λ x3 z, wcel (cv y) (cv z)) (λ x3 z, A2 x3)
          (λ x3, @nfv (ph x3))
          (λ x3 z, nfunid_3 x3)
          (λ x3 z, @nfvd (λ x3, ph x3) (wcel (cv y) (cv z)) x3) x3 z) x3 y) x3


/-- Bound-variable hypothesis builder for union. (Contributed by NM, 30-Dec-1996.) (Proof shortened
by Andrew Salmon, 27-Aug-2011.) -/
theorem nfuni {A2 : setvar → «class»}
  (nfuni_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, cuni (A2 x3)) :=
@ax_mp (wnfc (λ x3, A2 x3)) (wnfc (λ x3, cuni (A2 x3)))
  nfuni_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wnfc (λ x3, A2 x3)) (wnfc (λ x3, cuni (A2 x3))), from
    @nfunid (λ x3, wnfc (λ x3, A2 x3)) (λ x3, A2 x3)
      (λ x3, @id (wnfc (λ x3, A2 x3))) x3)


/-- Subclass relationship for class union. Theorem 61 of [Suppes] p. 39. (Contributed by NM,
22-Mar-1998.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) -/
theorem uniss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (cuni A2) (cuni B2)) :=
@ssrdv (wss A2 B2) (cuni A2) (cuni B2)
  (λ x3, @«3imtr4g» (wss A2 B2) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2))) (wcel (cv x3) (cuni A2)) (wcel (cv x3) (cuni B2))
    (@eximdv (wss A2 B2) (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2))
      (λ y, @anim2d (wss A2 B2) (wcel (cv y) A2) (wcel (cv y) B2) (wcel (cv x3) (cv y))
        (@ssel A2 B2 (cv y))))
    (@eluni (cv x3) A2)
    (@eluni (cv x3) B2))


/-- Subclass relationship for subclass union. Inference form of ~ uniss . (Contributed by David
Moews, 1-May-2017.) -/
theorem unissi {A2 B2 : «class»}
  (unissi_1 : ⊦ wss A2 B2) :
  ⊦ wss (cuni A2) (cuni B2) :=
@ax_mp (wss A2 B2) (wss (cuni A2) (cuni B2))
  unissi_1
  (@uniss A2 B2)


/-- Subclass relationship for subclass union. Deduction form of ~ uniss . (Contributed by David
Moews, 1-May-2017.) -/
theorem unissd {ph : wff} {A2 B2 : «class»}
  (unissd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wss (cuni A2) (cuni B2)) :=
@syl ph (wss A2 B2) (wss (cuni A2) (cuni B2))
  unissd_1
  (@uniss A2 B2)


/-- Equality theorem for class union. Exercise 15 of [TakeutiZaring] p. 18. (Contributed by NM,
10-Aug-1993.) (Proof shortened by Andrew Salmon, 29-Jun-2011.) (Proof shortened by BJ, 13-Apr-2024.)
-/
theorem unieq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cuni A2) (cuni B2)) :=
@eqssd (wceq A2 B2) (cuni A2) (cuni B2)
  (@unissd (wceq A2 B2) A2 B2
    (@eqimss A2 B2))
  (@unissd (wceq A2 B2) B2 A2
    (@eqimss2 B2 A2))


/-- Inference of equality of two class unions. (Contributed by NM, 30-Aug-1993.) -/
theorem unieqi {A2 B2 : «class»}
  (unieqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cuni A2) (cuni B2) :=
@ax_mp (wceq A2 B2) (wceq (cuni A2) (cuni B2))
  unieqi_1
  (@unieq A2 B2)


/-- Deduction of equality of two class unions. (Contributed by NM, 21-Apr-1995.) -/
theorem unieqd {ph : wff} {A2 B2 : «class»}
  (unieqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cuni A2) (cuni B2)) :=
@syl ph (wceq A2 B2) (wceq (cuni A2) (cuni B2))
  unieqd_1
  (@unieq A2 B2)


/-- Membership in union of a class abstraction. (Contributed by NM, 11-Aug-1994.) (Revised by Mario
Carneiro, 14-Nov-2016.) -/
theorem eluniab {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wcel A2 (cuni (cab (λ x3, ph x3)))) (wex (λ x3, wa (wcel A2 (cv x3)) (ph x3))) :=
@bitri (wcel A2 (cuni (cab (λ x3, ph x3)))) (wex (λ y, wa (wcel A2 (cv y)) (wcel (cv y) (cab (λ x3, ph x3))))) (wex (λ x3, wa (wcel A2 (cv x3)) (ph x3)))
  (@eluni A2 (cab (λ x3, ph x3)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wb (wex (λ y, wa (wcel A2 (cv y)) (wcel (cv y) (cab (λ x3, ph x3))))) (wex (λ x3, wa (wcel A2 (cv x3)) (ph x3))), from
    @cbvexv1 (λ y x3, wa (wcel A2 (cv y)) (wcel (cv y) (cab (λ x3, ph x3)))) (λ y x3, wa (wcel A2 (cv x3)) (ph x3))
      (λ y, @nfan (λ x3, wcel A2 (cv y)) (λ x3, wcel (cv y) (cab (λ x3, ph x3)))
        (@nfv (wcel A2 (cv y)))
        (@nfsab1 (λ x3 y, ph x3) y))
      (λ x3, @nfv (wa (wcel A2 (cv x3)) (ph x3)))
      (λ y x3, @anbi12d (wceq (cv y) (cv x3)) (wcel A2 (cv y)) (wcel A2 (cv x3)) (wcel (cv y) (cab (λ x3, ph x3))) (ph x3)
        (@eleq2w (λ y x3, A2) y x3)
        (@bitrdi (wceq (cv y) (cv x3)) (wcel (cv y) (cab (λ x3, ph x3))) (wcel (cv x3) (cab (λ x3, ph x3))) (ph x3)
          (@eleq1w (λ y x3, cab (λ x3, ph x3)) y x3)
          (@abid (λ x3, ph x3) x3))) y x3)


/-- Membership in union of a class abstraction. (Contributed by NM, 4-Oct-2006.) -/
theorem elunirab {ph : setvar → wff} {A2 : «class»} {B2 : setvar → «class»} :
  ⊦ wb (wcel A2 (cuni (crab (λ x3, ph x3) (λ x3, B2 x3)))) (wrex (λ x3, wa (wcel A2 (cv x3)) (ph x3)) (λ x3, B2 x3)) :=
@«3bitr4i» (wcel A2 (cuni (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3))))) (wex (λ x3, wa (wcel A2 (cv x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))) (wcel A2 (cuni (crab (λ x3, ph x3) (λ x3, B2 x3)))) (wrex (λ x3, wa (wcel A2 (cv x3)) (ph x3)) (λ x3, B2 x3))
  (@eluniab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)) A2)
  (@eleq2i (cuni (crab (λ x3, ph x3) (λ x3, B2 x3))) (cuni (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))) A2
    (@unieqi (crab (λ x3, ph x3) (λ x3, B2 x3)) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (@df_rab (λ x3, ph x3) (λ x3, B2 x3))))
  (@bitri (wrex (λ x3, wa (wcel A2 (cv x3)) (ph x3)) (λ x3, B2 x3)) (wex (λ x3, wa (wcel (cv x3) (B2 x3)) (wa (wcel A2 (cv x3)) (ph x3)))) (wex (λ x3, wa (wcel A2 (cv x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3))))
    (@df_rex (λ x3, wa (wcel A2 (cv x3)) (ph x3)) (λ x3, B2 x3))
    (@exbii (λ x3, wa (wcel (cv x3) (B2 x3)) (wa (wcel A2 (cv x3)) (ph x3))) (λ x3, wa (wcel A2 (cv x3)) (wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (λ x3, @an12 (wcel (cv x3) (B2 x3)) (wcel A2 (cv x3)) (ph x3))))


/-- The union of a pair is the union of its members. Proposition 5.7 of [TakeutiZaring] p. 16.
(Contributed by NM, 25-Aug-2006.) Avoid using ~ unipr to prove it from ~ uniprg . (Revised by BJ,
1-Sep-2024.) -/
theorem uniprg {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wceq (cuni (cpr A2 B2)) (cun A2 B2)) :=
@«3eqtr4g» (wa (wcel A2 V) (wcel B2 W)) (cab (λ x3, wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2))))) (cab (λ x3, wo (wcel (cv x3) A2) (wcel (cv x3) B2))) (cuni (cpr A2 B2)) (cun A2 B2)
  (@abbidv (wa (wcel A2 V) (wcel B2 W)) (λ x3, wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2)))) (λ x3, wo (wcel (cv x3) A2) (wcel (cv x3) B2))
    (λ x3, @syl5bb (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2)))) (wo (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))) (wa (wcel A2 V) (wcel B2 W)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2))
      (@bitri (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2)))) (wex (λ y, wo (wa (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))) (wo (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y)))))
        (@exbii (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2))) (λ y, wo (wa (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))
          (λ y, @bitri (wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpr A2 B2))) (wa (wcel (cv x3) (cv y)) (wo (wceq (cv y) A2) (wceq (cv y) B2))) (wo (wa (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))
            (@anbi2i (wcel (cv y) (cpr A2 B2)) (wo (wceq (cv y) A2) (wceq (cv y) B2)) (wcel (cv x3) (cv y))
              (@elpr (cv y) A2 B2
                (@vex y)))
            (@bitri (wa (wcel (cv x3) (cv y)) (wo (wceq (cv y) A2) (wceq (cv y) B2))) (wa (wo (wceq (cv y) A2) (wceq (cv y) B2)) (wcel (cv x3) (cv y))) (wo (wa (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))
              (@ancom (wcel (cv x3) (cv y)) (wo (wceq (cv y) A2) (wceq (cv y) B2)))
              (@andir (wceq (cv y) A2) (wceq (cv y) B2) (wcel (cv x3) (cv y))))))
        (@«19_43» (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y))) (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y)))))
      (@orbi12d (wa (wcel A2 V) (wcel B2 W)) (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wcel (cv x3) A2) (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y)))) (wcel (cv x3) B2)
        (@adantr (wcel A2 V) (wb (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wcel (cv x3) A2)) (wcel B2 W)
          (@bicomd (wcel A2 V) (wcel (cv x3) A2) (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y))))
            (setvar.forget $ λ y : setvar,
              show ⊦ wi (wcel A2 V) (wb (wcel (cv x3) A2) (wex (λ y, wa (wceq (cv y) A2) (wcel (cv x3) (cv y))))), from
              @clel3g (cv x3) A2 (λ y, V) y)))
        (@adantl (wcel B2 W) (wb (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y)))) (wcel (cv x3) B2)) (wcel A2 V)
          (@bicomd (wcel B2 W) (wcel (cv x3) B2) (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))
            (setvar.forget $ λ y : setvar,
              show ⊦ wi (wcel B2 W) (wb (wcel (cv x3) B2) (wex (λ y, wa (wceq (cv y) B2) (wcel (cv x3) (cv y))))), from
              @clel3g (cv x3) B2 (λ y, W) y))))))
  (@df_uni (cpr A2 B2))
  (@df_un A2 B2)


/-- The union of a pair is the union of its members. Proposition 5.7 of [TakeutiZaring] p. 16.
(Contributed by NM, 23-Aug-1993.) (Proof shortened by BJ, 1-Sep-2024.) -/
theorem unipr {A2 B2 : «class»}
  (unipr_1 : ⊦ wcel A2 cvv)
  (unipr_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cuni (cpr A2 B2)) (cun A2 B2) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wceq (cuni (cpr A2 B2)) (cun A2 B2))
  unipr_1
  unipr_2
  (@uniprg A2 B2 cvv cvv)


/-- A set equals the union of its singleton. Theorem 8.2 of [Quine] p. 53. (Contributed by NM,
13-Aug-2002.) -/
theorem unisng {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wceq (cuni (csn A2)) A2) :=
@«3eqtrd» (wcel A2 V) (cuni (csn A2)) (cuni (cpr A2 A2)) (cun A2 A2) A2
  (@a1i (wceq (cuni (csn A2)) (cuni (cpr A2 A2))) (wcel A2 V)
    (@unieqi (csn A2) (cpr A2 A2)
      (@dfsn2 A2)))
  (@anidms (wcel A2 V) (wceq (cuni (cpr A2 A2)) (cun A2 A2))
    (@uniprg A2 A2 V V))
  (@a1i (wceq (cun A2 A2) A2) (wcel A2 V)
    (@unidm A2))


/-- A set equals the union of its singleton. Theorem 8.2 of [Quine] p. 53. (Contributed by NM,
30-Aug-1993.) -/
theorem unisn {A2 : «class»}
  (unisn_1 : ⊦ wcel A2 cvv) :
  ⊦ wceq (cuni (csn A2)) A2 :=
@ax_mp (wcel A2 cvv) (wceq (cuni (csn A2)) A2)
  unisn_1
  (@unisng A2 cvv)


/-- The class union of the union of two classes. Theorem 8.3 of [Quine] p. 53. (Contributed by NM,
20-Aug-1993.) -/
theorem uniun {A2 B2 : «class»} :
  ⊦ wceq (cuni (cun A2 B2)) (cun (cuni A2) (cuni B2)) :=
@eqriv (cuni (cun A2 B2)) (cun (cuni A2) (cuni B2))
  (λ x3, @«3bitr4i» (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cun A2 B2)))) (wo (wcel (cv x3) (cuni A2)) (wcel (cv x3) (cuni B2))) (wcel (cv x3) (cuni (cun A2 B2))) (wcel (cv x3) (cun (cuni A2) (cuni B2)))
    (@«3bitr4i» (wex (λ y, wo (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))) (wo (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cun A2 B2)))) (wo (wcel (cv x3) (cuni A2)) (wcel (cv x3) (cuni B2)))
      (@«19_43» (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
      (@exbii (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cun A2 B2))) (λ y, wo (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
        (λ y, @bitri (wa (wcel (cv x3) (cv y)) (wcel (cv y) (cun A2 B2))) (wa (wcel (cv x3) (cv y)) (wo (wcel (cv y) A2) (wcel (cv y) B2))) (wo (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
          (@anbi2i (wcel (cv y) (cun A2 B2)) (wo (wcel (cv y) A2) (wcel (cv y) B2)) (wcel (cv x3) (cv y))
            (@elun (cv y) A2 B2))
          (@andi (wcel (cv x3) (cv y)) (wcel (cv y) A2) (wcel (cv y) B2))))
      (@orbi12i (wcel (cv x3) (cuni A2)) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wcel (cv x3) (cuni B2)) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
        (@eluni (cv x3) A2)
        (@eluni (cv x3) B2)))
    (@eluni (cv x3) (cun A2 B2))
    (@elun (cv x3) (cuni A2) (cuni B2)))


/-- The class union of the intersection of two classes. Exercise 4.12(n) of [Mendelson] p. 235. See
~ uniinqs for a condition where equality holds. (Contributed by NM, 4-Dec-2003.) (Proof shortened by
Andrew Salmon, 29-Jun-2011.) -/
theorem uniin {A2 B2 : «class»} :
  ⊦ wss (cuni (cin A2 B2)) (cin (cuni A2) (cuni B2)) :=
@ssriv (cuni (cin A2 B2)) (cin (cuni A2) (cuni B2))
  (λ x3, @«3imtr4i» (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cin A2 B2)))) (wa (wcel (cv x3) (cuni A2)) (wcel (cv x3) (cuni B2))) (wcel (cv x3) (cuni (cin A2 B2))) (wcel (cv x3) (cin (cuni A2) (cuni B2)))
    (@«3imtr4i» (wex (λ y, wa (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))) (wa (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cin A2 B2)))) (wa (wcel (cv x3) (cuni A2)) (wcel (cv x3) (cuni B2)))
      (@«19_40» (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
      (@exbii (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cin A2 B2))) (λ y, wa (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
        (λ y, @bitri (wa (wcel (cv x3) (cv y)) (wcel (cv y) (cin A2 B2))) (wa (wcel (cv x3) (cv y)) (wa (wcel (cv y) A2) (wcel (cv y) B2))) (wa (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
          (@anbi2i (wcel (cv y) (cin A2 B2)) (wa (wcel (cv y) A2) (wcel (cv y) B2)) (wcel (cv x3) (cv y))
            (@elin (cv y) A2 B2))
          (@anandi (wcel (cv x3) (cv y)) (wcel (cv y) A2) (wcel (cv y) B2))))
      (@anbi12i (wcel (cv x3) (cuni A2)) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wcel (cv x3) (cuni B2)) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) B2)))
        (@eluni (cv x3) A2)
        (@eluni (cv x3) B2)))
    (@eluni (cv x3) (cin A2 B2))
    (@elin (cv x3) (cuni A2) (cuni B2)))


/-- Subclass relationship for class union. (Contributed by NM, 24-May-1994.) (Proof shortened by
Andrew Salmon, 29-Jun-2011.) (Proof shortened by JJ, 26-Jul-2021.) -/
theorem ssuni {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wcel B2 C)) (wss A2 (cuni C)) :=
@impcom (wcel B2 C) (wss A2 B2) (wss A2 (cuni C))
  (@«3imtr4g» (wcel B2 C) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2))) (wal (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cuni C)))) (wss A2 B2) (wss A2 (cuni C))
    (@alimdv (wcel B2 C) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) B2)) (λ x3, wi (wcel (cv x3) A2) (wcel (cv x3) (cuni C)))
      (λ x3, @imim2d (wcel B2 C) (wcel (cv x3) B2) (wcel (cv x3) (cuni C)) (wcel (cv x3) A2)
        (@expcom (wcel (cv x3) B2) (wcel B2 C) (wcel (cv x3) (cuni C))
          (@elunii (cv x3) B2 C))))
    (@dfss2 A2 B2)
    (@dfss2 A2 (cuni C)))


/-- The union of a set is empty iff the set is included in the singleton of the empty set.
(Contributed by NM, 12-Sep-2004.) -/
theorem uni0b {A2 : «class»} :
  ⊦ wb (wceq (cuni A2) c0) (wss A2 (csn c0)) :=
@«3bitr4ri» (wral (λ x3, wcel (cv x3) (csn c0)) (λ x3, A2)) (wral (λ x3, wceq (cv x3) c0) (λ x3, A2)) (wss A2 (csn c0)) (wceq (cuni A2) c0)
  (@ralbii (λ x3, wcel (cv x3) (csn c0)) (λ x3, wceq (cv x3) c0) (λ x3, A2)
    (λ x3, @velsn (λ x3, c0) x3))
  (@dfss3 A2 (csn c0))
  (@con4bii (wceq (cuni A2) c0) (wral (λ x3, wceq (cv x3) c0) (λ x3, A2))
    (@«3bitri» (wn (wceq (cuni A2) c0)) (wex (λ y, wcel (cv y) (cuni A2))) (wrex (λ x3, wn (wceq (cv x3) c0)) (λ x3, A2)) (wn (wral (λ x3, wceq (cv x3) c0) (λ x3, A2)))
      (@neq0 (cuni A2))
      (@«3bitr4ri» (wrex (λ x3, wex (λ y, wcel (cv y) (cv x3))) (λ x3, A2)) (wex (λ y, wrex (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))) (wrex (λ x3, wn (wceq (cv x3) c0)) (λ x3, A2)) (wex (λ y, wcel (cv y) (cuni A2)))
        (@rexcom4 (λ x3 y, wcel (cv y) (cv x3)) (λ x3, A2))
        (@rexbii (λ x3, wn (wceq (cv x3) c0)) (λ x3, wex (λ y, wcel (cv y) (cv x3))) (λ x3, A2)
          (λ x3, @neq0 (cv x3)))
        (@exbii (λ y, wcel (cv y) (cuni A2)) (λ y, wrex (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))
          (λ y, @eluni2 (cv y) A2)))
      (@rexnal (λ x3, wceq (cv x3) c0) (λ x3, A2))))


/-- The union of the empty set is the empty set. Theorem 8.7 of [Quine] p. 54. (Contributed by NM,
16-Sep-1993.) Remove use of ~ ax-nul . (Revised by Eric Schmidt, 4-Apr-2007.) -/
theorem uni0 :
  ⊦ wceq (cuni c0) c0 :=
@mpbir (wceq (cuni c0) c0) (wss c0 (csn c0))
  (@«0ss» (csn c0))
  (@uni0b c0)


/-- An element of a class is a subclass of its union. Theorem 8.6 of [Quine] p. 54. Also the basis
for Proposition 7.20 of [TakeutiZaring] p. 40. (Contributed by NM, 6-Jun-1994.) -/
theorem elssuni {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wss A2 (cuni B2)) :=
@mpan (wss A2 A2) (wcel A2 B2) (wss A2 (cuni B2))
  (@ssid A2)
  (@ssuni A2 A2 B2)


/-- Condition turning a subclass relationship for union into an equality. (Contributed by NM,
18-Jul-2006.) -/
theorem unissel {A2 B2 : «class»} :
  ⊦ wi (wa (wss (cuni A2) B2) (wcel B2 A2)) (wceq (cuni A2) B2) :=
@eqssd (wa (wss (cuni A2) B2) (wcel B2 A2)) (cuni A2) B2
  (@simpl (wss (cuni A2) B2) (wcel B2 A2))
  (@adantl (wcel B2 A2) (wss B2 (cuni A2)) (wss (cuni A2) B2)
    (@elssuni B2 A2))


/-- Relationship involving membership, subset, and union. Exercise 5 of [Enderton] p. 26 and its
converse. (Contributed by NM, 20-Sep-2003.) -/
theorem unissb {A2 B2 : «class»} :
  ⊦ wb (wss (cuni A2) B2) (wral (λ x3, wss (cv x3) B2) (λ x3, A2)) :=
@«3bitr4i» (wal (λ y, wi (wcel (cv y) (cuni A2)) (wcel (cv y) B2))) (wal (λ x3, wi (wcel (cv x3) A2) (wss (cv x3) B2))) (wss (cuni A2) B2) (wral (λ x3, wss (cv x3) B2) (λ x3, A2))
  (@bitri (wal (λ y, wi (wcel (cv y) (cuni A2)) (wcel (cv y) B2))) (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wss (cv x3) B2)))
    (@albii (λ y, wi (wcel (cv y) (cuni A2)) (wcel (cv y) B2)) (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))
      (λ y, @bitr4i (wi (wcel (cv y) (cuni A2)) (wcel (cv y) B2)) (wi (wex (λ x3, wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2))) (wcel (cv y) B2)) (wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))
        (@imbi1i (wcel (cv y) (cuni A2)) (wex (λ x3, wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2))) (wcel (cv y) B2)
          (@eluni (cv y) A2))
        (@«19_23v» (λ x3, wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2))))
    (@bitri (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))) (wal (λ x3, wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wss (cv x3) B2)))
      (@alcom (λ y x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)))
      (@albii (λ x3, wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2))) (λ x3, wi (wcel (cv x3) A2) (wss (cv x3) B2))
        (λ x3, @«3bitr4i» (wal (λ y, wi (wcel (cv x3) A2) (wi (wcel (cv y) (cv x3)) (wcel (cv y) B2)))) (wi (wcel (cv x3) A2) (wal (λ y, wi (wcel (cv y) (cv x3)) (wcel (cv y) B2)))) (wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2))) (wi (wcel (cv x3) A2) (wss (cv x3) B2))
          (@«19_21v» (wcel (cv x3) A2) (λ y, wi (wcel (cv y) (cv x3)) (wcel (cv y) B2)))
          (@albii (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)) (λ y, wi (wcel (cv x3) A2) (wi (wcel (cv y) (cv x3)) (wcel (cv y) B2)))
            (λ y, @bitri (wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) B2)) (wi (wcel (cv y) (cv x3)) (wi (wcel (cv x3) A2) (wcel (cv y) B2))) (wi (wcel (cv x3) A2) (wi (wcel (cv y) (cv x3)) (wcel (cv y) B2)))
              (@impexp (wcel (cv y) (cv x3)) (wcel (cv x3) A2) (wcel (cv y) B2))
              (@bi2_04 (wcel (cv y) (cv x3)) (wcel (cv x3) A2) (wcel (cv y) B2))))
          (@imbi2i (wss (cv x3) B2) (wal (λ y, wi (wcel (cv y) (cv x3)) (wcel (cv y) B2))) (wcel (cv x3) A2)
            (@dfss2 (cv x3) B2))))))
  (@dfss2 (cuni A2) B2)
  (@df_ral (λ x3, wss (cv x3) B2) (λ x3, A2))


/-- A class is a subclass of the power class of its union. Exercise 6(b) of [Enderton] p. 38.
(Contributed by NM, 14-Oct-1996.) -/
theorem pwuni {A2 : «class»} :
  ⊦ wss A2 (cpw (cuni A2)) :=
@ssriv A2 (cpw (cuni A2))
  (λ x3, @sylibr (wcel (cv x3) A2) (wss (cv x3) (cuni A2)) (wcel (cv x3) (cpw (cuni A2)))
    (@elssuni (cv x3) A2)
    (@velpw (λ x3, cuni A2) x3))


-- /-- Extend class notation to include the intersection of a class. Read: "intersection (of) ` A `
-- ". -/
-- constant cint : «class» → «class»


-- /-- Define the intersection of a class. Definition 7.35 of [TakeutiZaring] p. 44. For example, `
-- |^| { { 1 , 3 } , { 1 , 8 } } = { 1 } ` . Compare this with the intersection of two classes, ~
-- df-in . (Contributed by NM, 18-Aug-1993.) -/
-- axiom df_int {A2 : «class»} : ⊦ wceq (cint A2) (cab (λ x3, wal (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y)))))


/-- Alternate definition of class intersection. (Contributed by NM, 28-Jun-1998.) -/
theorem dfint2 {A2 : «class»} :
  ⊦ wceq (cint A2) (cab (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, A2))) :=
@eqtr4i (cint A2) (cab (λ x3, wal (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y))))) (cab (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, A2)))
  (@df_int A2)
  (@abbii (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, A2)) (λ x3, wal (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y))))
    (λ x3, @df_ral (λ y, wcel (cv x3) (cv y)) (λ y, A2)))


/-- Equality law for intersection. (Contributed by NM, 13-Sep-1999.) -/
theorem inteq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cint A2) (cint B2)) :=
@«3eqtr4g» (wceq A2 B2) (cab (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, A2))) (cab (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, B2))) (cint A2) (cint B2)
  (@abbidv (wceq A2 B2) (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, A2)) (λ x3, wral (λ y, wcel (cv x3) (cv y)) (λ y, B2))
    (λ x3, @raleq (λ y, wcel (cv x3) (cv y)) A2 B2))
  (@dfint2 A2)
  (@dfint2 B2)


/-- Equality inference for class intersection. (Contributed by NM, 2-Sep-2003.) -/
theorem inteqi {A2 B2 : «class»}
  (inteqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cint A2) (cint B2) :=
@ax_mp (wceq A2 B2) (wceq (cint A2) (cint B2))
  inteqi_1
  (@inteq A2 B2)


/-- Equality deduction for class intersection. (Contributed by NM, 2-Sep-2003.) -/
theorem inteqd {ph : wff} {A2 B2 : «class»}
  (inteqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cint A2) (cint B2)) :=
@syl ph (wceq A2 B2) (wceq (cint A2) (cint B2))
  inteqd_1
  (@inteq A2 B2)


/-- Membership in class intersection. (Contributed by NM, 21-May-1994.) -/
theorem elint {A2 B2 : «class»}
  (elint_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cint B2)) (wal (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3)))) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cint B2)) (wal (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3)))))
  elint_1
  (setvar.forget $ λ y : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cint B2)) (wal (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3))))), from
    @elab2gw (λ z, wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv z) (cv x3)))) (λ y, wal (λ x3, wi (wcel (cv x3) B2) (wcel (cv y) (cv x3)))) (λ z, wal (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3)))) (λ z, A2) (λ z y, cint B2) (λ z y, cvv)
      (λ z y, @albidv (wceq (cv z) (cv y)) (λ x3, wi (wcel (cv x3) B2) (wcel (cv z) (cv x3))) (λ x3, wi (wcel (cv x3) B2) (wcel (cv y) (cv x3)))
        (λ x3, @imbi2d (wceq (cv z) (cv y)) (wcel (cv z) (cv x3)) (wcel (cv y) (cv x3)) (wcel (cv x3) B2)
          (@eleq1 (cv z) (cv y) (cv x3))))
      (λ z y, @albidv (wceq (cv y) A2) (λ x3, wi (wcel (cv x3) B2) (wcel (cv y) (cv x3))) (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3)))
        (λ x3, @imbi2d (wceq (cv y) A2) (wcel (cv y) (cv x3)) (wcel A2 (cv x3)) (wcel (cv x3) B2)
          (@eleq1 (cv y) A2 (cv x3))))
      (λ z y, @df_int B2) z y)


/-- Membership in class intersection. (Contributed by NM, 14-Oct-1999.) -/
theorem elint2 {A2 B2 : «class»}
  (elint2_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cint B2)) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2)) :=
@bitr4i (wcel A2 (cint B2)) (wal (λ x3, wi (wcel (cv x3) B2) (wcel A2 (cv x3)))) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2))
  (@elint A2 B2
    elint2_1)
  (@df_ral (λ x3, wcel A2 (cv x3)) (λ x3, B2))


/-- Membership in class intersection, with the sethood requirement expressed as an antecedent.
(Contributed by NM, 20-Nov-2003.) (Proof shortened by JJ, 26-Jul-2021.) -/
theorem elintg {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (cint B2)) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2))) :=
setvar.forget $ λ y : setvar,
  setvar.forget $ λ z : setvar,
  show ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (cint B2)) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2))), from
  @elab2gw (λ z, wral (λ x3, wcel (cv z) (cv x3)) (λ x3, B2)) (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)) (λ z, wral (λ x3, wcel A2 (cv x3)) (λ x3, B2)) (λ z, A2) (λ z y, cint B2) (λ z y, V x3)
    (λ z y, @ralbidv (wceq (cv z) (cv y)) (λ x3, wcel (cv z) (cv x3)) (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)
      (λ x3, @elequ1 x3 z y))
    (λ z y, @ralbidv (wceq (cv y) A2) (λ x3, wcel (cv y) (cv x3)) (λ x3, wcel A2 (cv x3)) (λ x3, B2)
      (λ x3, @eleq1 (cv y) A2 (cv x3)))
    (λ z y, @dfint2 B2) z y


/-- Membership in class intersection. (Contributed by NM, 14-Oct-1999.) (Proof shortened by Andrew
Salmon, 9-Jul-2011.) -/
theorem elinti {A2 B2 C : «class»} :
  ⊦ wi (wcel A2 (cint B2)) (wi (wcel C B2) (wcel A2 C)) :=
@pm2_43i (wcel A2 (cint B2)) (wi (wcel C B2) (wcel A2 C))
  (@syl6bi (wcel A2 (cint B2)) (wcel A2 (cint B2)) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2)) (wi (wcel C B2) (wcel A2 C))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel A2 (cint B2)) (wb (wcel A2 (cint B2)) (wral (λ x3, wcel A2 (cv x3)) (λ x3, B2))), from
      @elintg A2 B2 (λ x3, cint B2) x3)
    (@rspccv (λ x3, wcel A2 (cv x3)) (wcel A2 C) C B2
      (λ x3, @eleq2 (cv x3) C A2)))


/-- Bound-variable hypothesis builder for intersection. (Contributed by NM, 2-Feb-1997.) (Proof
shortened by Andrew Salmon, 12-Aug-2011.) -/
theorem nfint {A2 : setvar → «class»}
  (nfint_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, cint (A2 x3)) :=
@nfcxfr (λ x3, cint (A2 x3)) (λ x3, cab (λ y, wral (λ z, wcel (cv y) (cv z)) (λ z, A2 x3)))
  (λ x3, @dfint2 (A2 x3))
  (@nfab (λ x3 y, wral (λ z, wcel (cv y) (cv z)) (λ z, A2 x3))
    (λ y, @nfralw (λ x3 z, wcel (cv y) (cv z)) (λ x3 z, A2 x3)
      (λ z, nfint_1)
      (λ z, @nfv (wcel (cv y) (cv z)))))


/-- Membership in the intersection of a class abstraction. (Contributed by NM, 30-Aug-1993.) -/
theorem elintab {ph : setvar → wff} {A2 : «class»}
  (inteqab_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cint (cab (λ x3, ph x3)))) (wal (λ x3, wi (ph x3) (wcel A2 (cv x3)))) :=
@bitri (wcel A2 (cint (cab (λ x3, ph x3)))) (wal (λ y, wi (wcel (cv y) (cab (λ x3, ph x3))) (wcel A2 (cv y)))) (wal (λ x3, wi (ph x3) (wcel A2 (cv x3))))
  (@elint A2 (cab (λ x3, ph x3))
    inteqab_1)
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wb (wal (λ y, wi (wcel (cv y) (cab (λ x3, ph x3))) (wcel A2 (cv y)))) (wal (λ x3, wi (ph x3) (wcel A2 (cv x3)))), from
    @cbvalv1 (λ y x3, wi (wcel (cv y) (cab (λ x3, ph x3))) (wcel A2 (cv y))) (λ y x3, wi (ph x3) (wcel A2 (cv x3)))
      (λ y, @nfim (λ x3, wcel (cv y) (cab (λ x3, ph x3))) (λ x3, wcel A2 (cv y))
        (@nfsab1 (λ x3 y, ph x3) y)
        (@nfv (wcel A2 (cv y))))
      (λ x3, @nfv (wi (ph x3) (wcel A2 (cv x3))))
      (λ y x3, @imbi12d (wceq (cv y) (cv x3)) (wcel (cv y) (cab (λ x3, ph x3))) (ph x3) (wcel A2 (cv y)) (wcel A2 (cv x3))
        (@bitrdi (wceq (cv y) (cv x3)) (wcel (cv y) (cab (λ x3, ph x3))) (wcel (cv x3) (cab (λ x3, ph x3))) (ph x3)
          (@eleq1w (λ y x3, cab (λ x3, ph x3)) y x3)
          (@abid (λ x3, ph x3) x3))
        (@eleq2w (λ y x3, A2) y x3)) y x3)


/-- Membership in the intersection of a class abstraction. (Contributed by NM, 17-Oct-1999.) -/
theorem elintrab {ph : setvar → wff} {A2 : «class»} {B2 : setvar → «class»}
  (inteqab_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cint (crab (λ x3, ph x3) (λ x3, B2 x3)))) (wral (λ x3, wi (ph x3) (wcel A2 (cv x3))) (λ x3, B2 x3)) :=
@«3bitr4i» (wcel A2 (cint (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3))))) (wal (λ x3, wi (wcel (cv x3) (B2 x3)) (wi (ph x3) (wcel A2 (cv x3))))) (wcel A2 (cint (crab (λ x3, ph x3) (λ x3, B2 x3)))) (wral (λ x3, wi (ph x3) (wcel A2 (cv x3))) (λ x3, B2 x3))
  (@bitri (wcel A2 (cint (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3))))) (wal (λ x3, wi (wa (wcel (cv x3) (B2 x3)) (ph x3)) (wcel A2 (cv x3)))) (wal (λ x3, wi (wcel (cv x3) (B2 x3)) (wi (ph x3) (wcel A2 (cv x3)))))
    (@elintab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)) A2
      inteqab_1)
    (@albii (λ x3, wi (wa (wcel (cv x3) (B2 x3)) (ph x3)) (wcel A2 (cv x3))) (λ x3, wi (wcel (cv x3) (B2 x3)) (wi (ph x3) (wcel A2 (cv x3))))
      (λ x3, @impexp (wcel (cv x3) (B2 x3)) (ph x3) (wcel A2 (cv x3)))))
  (@eleq2i (cint (crab (λ x3, ph x3) (λ x3, B2 x3))) (cint (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))) A2
    (@inteqi (crab (λ x3, ph x3) (λ x3, B2 x3)) (cab (λ x3, wa (wcel (cv x3) (B2 x3)) (ph x3)))
      (@df_rab (λ x3, ph x3) (λ x3, B2 x3))))
  (@df_ral (λ x3, wi (ph x3) (wcel A2 (cv x3))) (λ x3, B2 x3))


/-- The intersection of the empty set is the universal class. Exercise 2 of [TakeutiZaring] p. 44.
(Contributed by NM, 18-Aug-1993.) (Proof shortened by JJ, 26-Jul-2021.) -/
theorem int0 :
  ⊦ wceq (cint c0) cvv :=
@eqriv (cint c0) cvv
  (λ y, @«2th» (wcel (cv y) (cint c0)) (wcel (cv y) cvv)
    (@mpbir (wcel (cv y) (cint c0)) (wral (λ x3, wcel (cv y) (cv x3)) (λ x3, c0))
      (@ral0 (λ x3, wcel (cv y) (cv x3)))
      (@elint2 (cv y) c0
        (@vex y)))
    (@vex y))


/-- An element of a class includes the intersection of the class. Exercise 4 of [TakeutiZaring] p.
44 (with correction), generalized to classes. (Contributed by NM, 18-Nov-1995.) -/
theorem intss1 {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wss (cint B2) A2) :=
@ssrdv (wcel A2 B2) (cint B2) A2
  (λ x3, @syl5bi (wcel (cv x3) (cint B2)) (wal (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y)))) (wcel A2 B2) (wcel (cv x3) A2)
    (@elint (cv x3) B2
      (@vex x3))
    (@pm2_43a (wal (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y)))) (wcel A2 B2) (wcel (cv x3) A2)
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wcel A2 B2) (wi (wal (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y)))) (wi (wcel A2 B2) (wcel (cv x3) A2))), from
        @spcgv (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y))) (wi (wcel A2 B2) (wcel (cv x3) A2)) A2 (λ y, B2)
          (λ y, @imbi12d (wceq (cv y) A2) (wcel (cv y) B2) (wcel A2 B2) (wcel (cv x3) (cv y)) (wcel (cv x3) A2)
            (@eleq1 (cv y) A2 B2)
            (@eleq2 (cv y) A2 (cv x3))) y)))


/-- Subclass of a class intersection. Theorem 5.11(viii) of [Monk1] p. 52 and its converse.
(Contributed by NM, 14-Oct-1999.) -/
theorem ssint {A2 B2 : «class»} :
  ⊦ wb (wss A2 (cint B2)) (wral (λ x3, wss A2 (cv x3)) (λ x3, B2)) :=
@«3bitri» (wss A2 (cint B2)) (wral (λ y, wcel (cv y) (cint B2)) (λ y, A2)) (wral (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)) (λ y, A2)) (wral (λ x3, wss A2 (cv x3)) (λ x3, B2))
  (@dfss3 A2 (cint B2))
  (@ralbii (λ y, wcel (cv y) (cint B2)) (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)) (λ y, A2)
    (λ y, @elint2 (cv y) B2
      (@vex y)))
  (@bitr4i (wral (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)) (λ y, A2)) (wral (λ x3, wral (λ y, wcel (cv y) (cv x3)) (λ y, A2)) (λ x3, B2)) (wral (λ x3, wss A2 (cv x3)) (λ x3, B2))
    (@ralcom (λ y x3, wcel (cv y) (cv x3)) (λ y, A2) (λ x3, B2))
    (@ralbii (λ x3, wss A2 (cv x3)) (λ x3, wral (λ y, wcel (cv y) (cv x3)) (λ y, A2)) (λ x3, B2)
      (λ x3, @dfss3 A2 (cv x3))))


/-- Subclass of the intersection of a class abstraction. (Contributed by NM, 31-Jul-2006.) (Proof
shortened by Andrew Salmon, 9-Jul-2011.) -/
theorem ssintab {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wss A2 (cint (cab (λ x3, ph x3)))) (wal (λ x3, wi (ph x3) (wss A2 (cv x3)))) :=
@bitri (wss A2 (cint (cab (λ x3, ph x3)))) (wral (λ y, wss A2 (cv y)) (λ y, cab (λ x3, ph x3))) (wal (λ x3, wi (ph x3) (wss A2 (cv x3))))
  (@ssint A2 (cab (λ x3, ph x3)))
  (@ralab2 (λ x3, ph x3) (λ y, wss A2 (cv y)) (λ x3, wss A2 (cv x3))
    (λ y x3, @sseq2 (cv y) (cv x3) A2))


/-- Subclass of the least upper bound. (Contributed by NM, 8-Aug-2000.) -/
theorem ssintub {A2 B2 : «class»} :
  ⊦ wss A2 (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wss A2 (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))), from
  @mprgbir (λ y, wss A2 (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2)))) (λ y, wss A2 (cv y)) (λ y, crab (λ x3, wss A2 (cv x3)) (λ x3, B2))
    (λ y, @ssint A2 (crab (λ x3, wss A2 (cv x3)) (λ x3, B2)))
    (λ y, @simprbi (wcel (cv y) (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))) (wcel (cv y) B2) (wss A2 (cv y))
      (@elrab (λ x3, wss A2 (cv x3)) (wss A2 (cv y)) (cv y) B2
        (λ x3, @sseq2 (cv x3) (cv y) A2))) y


/-- Any member of a class is the smallest of those members that include it. (Contributed by NM,
13-Aug-2002.) (Proof shortened by Andrew Salmon, 9-Jul-2011.) -/
theorem intmin {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wceq (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))) A2) :=
@eqssd (wcel A2 B2) (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))) A2
  (@ssrdv (wcel A2 B2) (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2))) A2
    (λ y, @syl5bi (wcel (cv y) (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2)))) (wral (λ x3, wi (wss A2 (cv x3)) (wcel (cv y) (cv x3))) (λ x3, B2)) (wcel A2 B2) (wcel (cv y) A2)
      (@elintrab (λ x3, wss A2 (cv x3)) (cv y) (λ x3, B2)
        (@vex y))
      (@mpii (wcel A2 B2) (wral (λ x3, wi (wss A2 (cv x3)) (wcel (cv y) (cv x3))) (λ x3, B2)) (wss A2 A2) (wcel (cv y) A2)
        (@ssid A2)
        (@rspcv (λ x3, wi (wss A2 (cv x3)) (wcel (cv y) (cv x3))) (wi (wss A2 A2) (wcel (cv y) A2)) A2 B2
          (λ x3, @imbi12d (wceq (cv x3) A2) (wss A2 (cv x3)) (wss A2 A2) (wcel (cv y) (cv x3)) (wcel (cv y) A2)
            (@sseq2 (cv x3) A2 A2)
            (@eleq2 (cv x3) A2 (cv y)))))))
  (@a1i (wss A2 (cint (crab (λ x3, wss A2 (cv x3)) (λ x3, B2)))) (wcel A2 B2)
    (@ssintub A2 B2))


/-- Intersection of subclasses. (Contributed by NM, 14-Oct-1999.) (Proof shortened by OpenAI,
25-Mar-2020.) -/
theorem intss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (cint B2) (cint A2)) :=
@«3sstr4g» (wss A2 B2) (cab (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2))) (cab (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))) (cint B2) (cint A2)
  (@ss2abdv (wss A2 B2) (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, B2)) (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))
    (λ y, @ssralv (λ x3, wcel (cv y) (cv x3)) A2 B2))
  (@dfint2 B2)
  (@dfint2 A2)


/-- The intersection of a nonempty set is a subclass of its union. (Contributed by NM, 29-Jul-2006.)
-/
theorem intssuni {A2 : «class»} :
  ⊦ wi (wne A2 c0) (wss (cint A2) (cuni A2)) :=
@ssrdv (wne A2 c0) (cint A2) (cuni A2)
  (λ x3, @«3imtr4g» (wne A2 c0) (wral (λ y, wcel (cv x3) (cv y)) (λ y, A2)) (wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2)) (wcel (cv x3) (cint A2)) (wcel (cv x3) (cuni A2))
    (@ex (wne A2 c0) (wral (λ y, wcel (cv x3) (cv y)) (λ y, A2)) (wrex (λ y, wcel (cv x3) (cv y)) (λ y, A2))
      (@r19_2z (λ y, wcel (cv x3) (cv y)) A2))
    (@elint2 (cv x3) A2
      (@vex x3))
    (@eluni2 (cv x3) A2))


/-- Subclass relationship for intersection and union. (Contributed by NM, 29-Jul-2006.) -/
theorem intssuni2 {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 B2) (wne A2 c0)) (wss (cint A2) (cuni B2)) :=
@sylan9ssr (wne A2 c0) (wss A2 B2) (cint A2) (cuni A2) (cuni B2)
  (@intssuni A2)
  (@uniss A2 B2)


/-- Under subset ordering, the intersection of a restricted class abstraction is less than or equal
to any of its members. (Contributed by NM, 7-Sep-2013.) -/
theorem intminss {ph : setvar → wff} {ps : wff} {A2 B2 : «class»}
  (intminss_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wa (wcel A2 B2) ps) (wss (cint (crab (λ x3, ph x3) (λ x3, B2))) A2) :=
@sylbir (wa (wcel A2 B2) ps) (wcel A2 (crab (λ x3, ph x3) (λ x3, B2))) (wss (cint (crab (λ x3, ph x3) (λ x3, B2))) A2)
  (@elrab (λ x3, ph x3) ps A2 B2
    (λ x3, intminss_1 x3))
  (@intss1 A2 (crab (λ x3, ph x3) (λ x3, B2)))


/-- The class intersection of the union of two classes. Theorem 78 of [Suppes] p. 42. (Contributed
by NM, 22-Sep-2002.) -/
theorem intun {A2 B2 : «class»} :
  ⊦ wceq (cint (cun A2 B2)) (cin (cint A2) (cint B2)) :=
@eqriv (cint (cun A2 B2)) (cin (cint A2) (cint B2))
  (λ x3, @«3bitr4i» (wal (λ y, wi (wcel (cv y) (cun A2 B2)) (wcel (cv x3) (cv y)))) (wa (wcel (cv x3) (cint A2)) (wcel (cv x3) (cint B2))) (wcel (cv x3) (cint (cun A2 B2))) (wcel (cv x3) (cin (cint A2) (cint B2)))
    (@«3bitr4i» (wal (λ y, wa (wi (wcel (cv y) A2) (wcel (cv x3) (cv y))) (wi (wcel (cv y) B2) (wcel (cv x3) (cv y))))) (wa (wal (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y)))) (wal (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y))))) (wal (λ y, wi (wcel (cv y) (cun A2 B2)) (wcel (cv x3) (cv y)))) (wa (wcel (cv x3) (cint A2)) (wcel (cv x3) (cint B2)))
      (@«19_26» (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y))) (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y))))
      (@albii (λ y, wi (wcel (cv y) (cun A2 B2)) (wcel (cv x3) (cv y))) (λ y, wa (wi (wcel (cv y) A2) (wcel (cv x3) (cv y))) (wi (wcel (cv y) B2) (wcel (cv x3) (cv y))))
        (λ y, @elunant (wcel (cv x3) (cv y)) A2 B2 (cv y)))
      (@anbi12i (wcel (cv x3) (cint A2)) (wal (λ y, wi (wcel (cv y) A2) (wcel (cv x3) (cv y)))) (wcel (cv x3) (cint B2)) (wal (λ y, wi (wcel (cv y) B2) (wcel (cv x3) (cv y))))
        (@elint (cv x3) A2
          (@vex x3))
        (@elint (cv x3) B2
          (@vex x3))))
    (@elint (cv x3) (cun A2 B2)
      (@vex x3))
    (@elin (cv x3) (cint A2) (cint B2)))


/-- The intersection of a pair is the intersection of its members. Closed form of ~ intpr . Theorem
71 of [Suppes] p. 42. (Contributed by FL, 27-Apr-2008.) (Proof shortened by BJ, 1-Sep-2024.) -/
theorem intprg {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wceq (cint (cpr A2 B2)) (cin A2 B2)) :=
@sylibr (wa (wcel A2 V) (wcel B2 W)) (wal (λ x3, wb (wcel (cv x3) (cint (cpr A2 B2))) (wcel (cv x3) (cin A2 B2)))) (wceq (cint (cpr A2 B2)) (cin A2 B2))
  (@alrimiv (wa (wcel A2 V) (wcel B2 W)) (λ x3, wb (wcel (cv x3) (cint (cpr A2 B2))) (wcel (cv x3) (cin A2 B2)))
    (λ x3, @syl5bb (wcel (cv x3) (cint (cpr A2 B2))) (wa (wal (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wal (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))) (wa (wcel A2 V) (wcel B2 W)) (wcel (cv x3) (cin A2 B2))
      (@«3bitri» (wcel (cv x3) (cint (cpr A2 B2))) (wal (λ y, wi (wcel (cv y) (cpr A2 B2)) (wcel (cv x3) (cv y)))) (wal (λ y, wa (wi (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))) (wa (wal (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wal (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y)))))
        (@elint (cv x3) (cpr A2 B2)
          (@vex x3))
        (@albii (λ y, wi (wcel (cv y) (cpr A2 B2)) (wcel (cv x3) (cv y))) (λ y, wa (wi (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))
          (λ y, @bitri (wi (wcel (cv y) (cpr A2 B2)) (wcel (cv x3) (cv y))) (wi (wo (wceq (cv y) A2) (wceq (cv y) B2)) (wcel (cv x3) (cv y))) (wa (wi (wceq (cv y) A2) (wcel (cv x3) (cv y))) (wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))
            (@imbi1i (wcel (cv y) (cpr A2 B2)) (wo (wceq (cv y) A2) (wceq (cv y) B2)) (wcel (cv x3) (cv y))
              (@elpr (cv y) A2 B2
                (@vex y)))
            (@jaob (wceq (cv y) A2) (wcel (cv x3) (cv y)) (wceq (cv y) B2))))
        (@«19_26» (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y))) (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y)))))
      (@syl5rbb (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wcel A2 V) (wcel B2 W)) (wa (wal (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wal (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y)))))
        (@elin (cv x3) A2 B2)
        (@bi2anan9 (wcel A2 V) (wcel (cv x3) A2) (wal (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y)))) (wcel B2 W) (wcel (cv x3) B2) (wal (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))
          (setvar.forget $ λ y : setvar,
            show ⊦ wi (wcel A2 V) (wb (wcel (cv x3) A2) (wal (λ y, wi (wceq (cv y) A2) (wcel (cv x3) (cv y))))), from
            @clel4g (cv x3) A2 (λ y, V) y)
          (setvar.forget $ λ y : setvar,
            show ⊦ wi (wcel B2 W) (wb (wcel (cv x3) B2) (wal (λ y, wi (wceq (cv y) B2) (wcel (cv x3) (cv y))))), from
            @clel4g (cv x3) B2 (λ y, W) y)))))
  (@dfcleq (cint (cpr A2 B2)) (cin A2 B2))


/-- The intersection of a pair is the intersection of its members. Theorem 71 of [Suppes] p. 42.
(Contributed by NM, 14-Oct-1999.) Prove from ~ intprg . (Revised by BJ, 1-Sep-2024.) -/
theorem intpr {A2 B2 : «class»}
  (intpr_1 : ⊦ wcel A2 cvv)
  (intpr_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cint (cpr A2 B2)) (cin A2 B2) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wceq (cint (cpr A2 B2)) (cin A2 B2))
  intpr_1
  intpr_2
  (@intprg A2 B2 cvv cvv)


/-- Intersection of a singleton. (Contributed by Stefan O'Rear, 22-Feb-2015.) -/
theorem intsng {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wceq (cint (csn A2)) A2) :=
@syl5eq (wcel A2 V) (cint (csn A2)) (cint (cpr A2 A2)) A2
  (@inteqi (csn A2) (cpr A2 A2)
    (@dfsn2 A2))
  (@eqtrdi (wcel A2 V) (cint (cpr A2 A2)) (cin A2 A2) A2
    (@anidms (wcel A2 V) (wceq (cint (cpr A2 A2)) (cin A2 A2))
      (@intprg A2 A2 V V))
    (@inidm A2))


/-- The intersection of a singleton is its member. Theorem 70 of [Suppes] p. 41. (Contributed by NM,
29-Sep-2002.) -/
theorem intsn {A2 : «class»}
  (intsn_1 : ⊦ wcel A2 cvv) :
  ⊦ wceq (cint (csn A2)) A2 :=
@ax_mp (wcel A2 cvv) (wceq (cint (csn A2)) A2)
  intsn_1
  (@intsng A2 cvv)


/-- Theorem joining a singleton to an intersection. (Contributed by NM, 29-Sep-2002.) -/
theorem intunsn {A2 B2 : «class»}
  (intunsn_1 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cint (cun A2 (csn B2))) (cin (cint A2) B2) :=
@eqtri (cint (cun A2 (csn B2))) (cin (cint A2) (cint (csn B2))) (cin (cint A2) B2)
  (@intun A2 (csn B2))
  (@ineq2i (cint (csn B2)) B2 (cint A2)
    (@intsn B2
      intunsn_1))


/-- Relative intersection of an empty set. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem rint0 {A2 X : «class»} :
  ⊦ wi (wceq X c0) (wceq (cin A2 (cint X)) A2) :=
@eqtrdi (wceq X c0) (cin A2 (cint X)) (cin A2 (cint c0)) A2
  (@ineq2d (wceq X c0) (cint X) (cint c0) A2
    (@inteq X c0))
  (@eqtri (cin A2 (cint c0)) (cin A2 cvv) A2
    (@ineq2i (cint c0) cvv A2
      int0)
    (@inv1 A2))


/-- Membership in a restricted intersection. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem elrint {A2 : setvar → «class»} {B2 X : «class»}
  (y : setvar) : ⊦ wb (wcel X (cin (A2 y) (cint B2))) (wa (wcel X (A2 y)) (wral (λ y, wcel X (cv y)) (λ y, B2))) :=
@bitri (wcel X (cin (A2 y) (cint B2))) (wa (wcel X (A2 y)) (wcel X (cint B2))) (wa (wcel X (A2 y)) (wral (λ y, wcel X (cv y)) (λ y, B2)))
  (@elin X (A2 y) (cint B2))
  (@pm5_32i (wcel X (A2 y)) (wcel X (cint B2)) (wral (λ y, wcel X (cv y)) (λ y, B2))
    (@elintg X B2 (λ y, A2 y) y))


/-- Membership in a restricted intersection. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem elrint2 {A2 : setvar → «class»} {B2 X : «class»}
  (y : setvar) : ⊦ wi (wcel X (A2 y)) (wb (wcel X (cin (A2 y) (cint B2))) (wral (λ y, wcel X (cv y)) (λ y, B2))) :=
@baib (wcel X (cin (A2 y) (cint B2))) (wcel X (A2 y)) (wral (λ y, wcel X (cv y)) (λ y, B2))
  (@elrint (λ y, A2 y) B2 X y)


-- /-- Extend class notation to include indexed union. Note: Historically (prior to 21-Oct-2005),
-- set.mm used the notation ` U. x e. A B ` , with the same union symbol as ~ cuni . While that
-- syntax was unambiguous, it did not allow for LALR parsing of the syntax constructions in set.mm.
-- The new syntax uses a distinguished symbol ` U_ ` instead of ` U. ` and does allow LALR parsing.
-- Thanks to Peter Backes for suggesting this change. -/
-- constant ciun : (setvar → «class») → (setvar → «class») → «class»


-- /-- Extend class notation to include indexed intersection. Note: Historically (prior to
-- 21-Oct-2005), set.mm used the notation ` |^| x e. A B ` , with the same intersection symbol as ~
-- cint . Although that syntax was unambiguous, it did not allow for LALR parsing of the syntax
-- constructions in set.mm. The new syntax uses a distinguished symbol ` |^|_ ` instead of ` |^| `
-- and does allow LALR parsing. Thanks to Peter Backes for suggesting this change. -/
-- constant ciin : (setvar → «class») → (setvar → «class») → «class»


-- /-- Define indexed union. Definition indexed union in [Stoll] p. 45. In most applications, ` A `
-- is independent of ` x ` (although this is not required by the definition), and ` B ` depends on `
-- x ` i.e. can be read informally as ` B ( x ) ` . We call ` x ` the index, ` A ` the index set,
-- and ` B ` the indexed set. In most books, ` x e. A ` is written as a subscript or underneath a
-- union symbol ` U. ` . We use a special union symbol ` U_ ` to make it easier to distinguish from
-- plain class union. In many theorems, you will see that ` x ` and ` A ` are in the same distinct
-- variable group (meaning ` A ` cannot depend on ` x ` ) and that ` B ` and ` x ` do not share a
-- distinct variable group (meaning that can be thought of as ` B ( x ) ` i.e. can be substituted
-- with a class expression containing ` x ` ). An alternate definition tying indexed union to
-- ordinary union is ~ dfiun2 . Theorem ~ uniiun provides a definition of ordinary union in terms of
-- indexed union. Theorems ~ fniunfv and ~ funiunfv are useful when ` B ` is a function.
-- (Contributed by NM, 27-Jun-1998.) -/
-- axiom df_iun {A2 B2 : setvar → «class»} : ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))


-- /-- Define indexed intersection. Definition of [Stoll] p. 45. See the remarks for its sibling
-- operation of indexed union ~ df-iun . An alternate definition tying indexed intersection to
-- ordinary intersection is ~ dfiin2 . Theorem ~ intiin provides a definition of ordinary
-- intersection in terms of indexed intersection. (Contributed by NM, 27-Jun-1998.) -/
-- axiom df_iin {A2 B2 : setvar → «class»} : ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cab (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))


/-- Membership in indexed union. (Contributed by NM, 3-Sep-2003.) -/
theorem eliun {A2 : «class»} {B2 C : setvar → «class»} :
  ⊦ wb (wcel A2 (ciun (λ x3, B2 x3) (λ x3, C x3))) (wrex (λ x3, wcel A2 (C x3)) (λ x3, B2 x3)) :=
@pm5_21nii (wcel A2 (ciun (λ x3, B2 x3) (λ x3, C x3))) (wcel A2 cvv) (wrex (λ x3, wcel A2 (C x3)) (λ x3, B2 x3))
  (@elex A2 (ciun (λ x3, B2 x3) (λ x3, C x3)))
  (@rexlimivw (λ x3, wcel A2 (C x3)) (wcel A2 cvv) (λ x3, B2 x3)
    (λ x3, @elex A2 (C x3)))
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (ciun (λ x3, B2 x3) (λ x3, C x3))) (wrex (λ x3, wcel A2 (C x3)) (λ x3, B2 x3))), from
    @elab2gw (λ y, wrex (λ x3, wcel (cv y) (C x3)) (λ x3, B2 x3)) (λ w, wrex (λ x3, wcel (cv w) (C x3)) (λ x3, B2 x3)) (λ y, wrex (λ x3, wcel A2 (C x3)) (λ x3, B2 x3)) (λ y, A2) (λ y w, ciun (λ x3, B2 x3) (λ x3, C x3)) (λ y w, cvv)
      (λ y w, @rexbidv (wceq (cv y) (cv w)) (λ x3, wcel (cv y) (C x3)) (λ x3, wcel (cv w) (C x3)) (λ x3, B2 x3)
        (λ x3, @eleq1 (cv y) (cv w) (C x3)))
      (λ y w, @rexbidv (wceq (cv w) A2) (λ x3, wcel (cv w) (C x3)) (λ x3, wcel A2 (C x3)) (λ x3, B2 x3)
        (λ x3, @eleq1 (cv w) A2 (C x3)))
      (λ y w, @df_iun (λ x3, B2 x3) (λ x3, C x3)) y w)


/-- Membership in indexed intersection. (Contributed by NM, 3-Sep-2003.) -/
theorem eliin {A2 : «class»} {B2 C V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (ciin (λ x3, B2 x3) (λ x3, C x3))) (wral (λ x3, wcel A2 (C x3)) (λ x3, B2 x3))) :=
setvar.forget $ λ w : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (ciin (λ x3, B2 x3) (λ x3, C x3))) (wral (λ x3, wcel A2 (C x3)) (λ x3, B2 x3))), from
  @elab2gw (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, B2 x3)) (λ w, wral (λ x3, wcel (cv w) (C x3)) (λ x3, B2 x3)) (λ y, wral (λ x3, wcel A2 (C x3)) (λ x3, B2 x3)) (λ y, A2) (λ y w, ciin (λ x3, B2 x3) (λ x3, C x3)) (λ y w, V x3)
    (λ y w, @ralbidv (wceq (cv y) (cv w)) (λ x3, wcel (cv y) (C x3)) (λ x3, wcel (cv w) (C x3)) (λ x3, B2 x3)
      (λ x3, @eleq1w (λ y w, C x3) y w))
    (λ y w, @ralbidv (wceq (cv w) A2) (λ x3, wcel (cv w) (C x3)) (λ x3, wcel A2 (C x3)) (λ x3, B2 x3)
      (λ x3, @eleq1 (cv w) A2 (C x3)))
    (λ y w, @df_iin (λ x3, B2 x3) (λ x3, C x3)) y w


/-- Commutation of union with indexed union. (Contributed by Mario Carneiro, 18-Jan-2014.) -/
theorem iuncom4 {A2 B2 : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cuni (B2 x3))) (cuni (ciun (λ x3, A2 x3) (λ x3, B2 x3))) :=
@eqriv (ciun (λ x3, A2 x3) (λ x3, cuni (B2 x3))) (cuni (ciun (λ x3, A2 x3) (λ x3, B2 x3)))
  (λ y, @«3bitr4i» (wrex (λ x3, wcel (cv y) (cuni (B2 x3))) (λ x3, A2 x3)) (wrex (λ z, wcel (cv y) (cv z)) (λ z, ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cuni (B2 x3)))) (wcel (cv y) (cuni (ciun (λ x3, A2 x3) (λ x3, B2 x3))))
    (@«3bitr4i» (wrex (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)) (λ x3, A2 x3)) (wex (λ z, wa (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z)))) (wrex (λ x3, wcel (cv y) (cuni (B2 x3))) (λ x3, A2 x3)) (wrex (λ z, wcel (cv y) (cv z)) (λ z, ciun (λ x3, A2 x3) (λ x3, B2 x3)))
      (@bitri (wrex (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)) (λ x3, A2 x3)) (wex (λ z, wrex (λ x3, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z))) (λ x3, A2 x3))) (wex (λ z, wa (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z))))
        (@bitri (wrex (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wex (λ z, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z)))) (λ x3, A2 x3)) (wex (λ z, wrex (λ x3, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z))) (λ x3, A2 x3)))
          (@rexbii (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)) (λ x3, wex (λ z, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z)))) (λ x3, A2 x3)
            (λ x3, @df_rex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)))
          (@rexcom4 (λ x3 z, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z))) (λ x3, A2 x3)))
        (@exbii (λ z, wrex (λ x3, wa (wcel (cv z) (B2 x3)) (wcel (cv y) (cv z))) (λ x3, A2 x3)) (λ z, wa (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z)))
          (λ z, @r19_41v (λ x3, wcel (cv z) (B2 x3)) (wcel (cv y) (cv z)) (λ x3, A2 x3))))
      (@rexbii (λ x3, wcel (cv y) (cuni (B2 x3))) (λ x3, wrex (λ z, wcel (cv y) (cv z)) (λ z, B2 x3)) (λ x3, A2 x3)
        (λ x3, @eluni2 (cv y) (B2 x3)))
      (@bitri (wrex (λ z, wcel (cv y) (cv z)) (λ z, ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wex (λ z, wa (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (cv z)))) (wex (λ z, wa (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z))))
        (@df_rex (λ z, wcel (cv y) (cv z)) (λ z, ciun (λ x3, A2 x3) (λ x3, B2 x3)))
        (@exbii (λ z, wa (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (cv z))) (λ z, wa (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z)))
          (λ z, @anbi1i (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cv z))
            (@eliun (cv z) (λ x3, A2 x3) (λ x3, B2 x3))))))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, cuni (B2 x3)))
    (@eluni2 (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))))


/-- Indexed union of a constant class, i.e. where ` B ` does not depend on ` x ` . (Contributed by
NM, 5-Sep-2004.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem iunconst {A2 B2 : «class»} :
  ⊦ wi (wne A2 c0) (wceq (ciun (λ x3, A2) (λ x3, B2)) B2) :=
@eqrdv (wne A2 c0) (ciun (λ x3, A2) (λ x3, B2)) B2
  (λ y, @bitr4id (wne A2 c0) (wcel (cv y) (ciun (λ x3, A2) (λ x3, B2))) (wrex (λ x3, wcel (cv y) B2) (λ x3, A2)) (wcel (cv y) B2)
    (@eliun (cv y) (λ x3, A2) (λ x3, B2))
    (@r19_9rzv (wcel (cv y) B2) A2))


/-- Indexed intersection of a constant class, i.e. where ` B ` does not depend on ` x ` .
(Contributed by Mario Carneiro, 6-Feb-2015.) -/
theorem iinconst {A2 B2 : «class»} :
  ⊦ wi (wne A2 c0) (wceq (ciin (λ x3, A2) (λ x3, B2)) B2) :=
@eqrdv (wne A2 c0) (ciin (λ x3, A2) (λ x3, B2)) B2
  (λ y, @bitr4id (wne A2 c0) (wcel (cv y) (ciin (λ x3, A2) (λ x3, B2))) (wral (λ x3, wcel (cv y) B2) (λ x3, A2)) (wcel (cv y) B2)
    (@elv (λ y, wb (wcel (cv y) (ciin (λ x3, A2) (λ x3, B2))) (wral (λ x3, wcel (cv y) B2) (λ x3, A2)))
      (λ y, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel (cv y) cvv) (wb (wcel (cv y) (ciin (λ x3, A2) (λ x3, B2))) (wral (λ x3, wcel (cv y) B2) (λ x3, A2))), from
        @eliin (cv y) (λ x3, A2) (λ x3, B2) (λ x3, cvv) x3) y)
    (@r19_3rzv (wcel (cv y) B2) A2))


/-- Subclass theorem for indexed union. (Contributed by NM, 10-Dec-2004.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem iunss1 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wss A2 B2) (wss (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))) :=
@ssrdv (wss A2 B2) (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))
  (λ y, @«3imtr4g» (wss A2 B2) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, B2)) (wcel (cv y) (ciun (λ x3, A2) (λ x3, C x3))) (wcel (cv y) (ciun (λ x3, B2) (λ x3, C x3)))
    (@ssrexv (λ x3, wcel (cv y) (C x3)) A2 B2)
    (@eliun (cv y) (λ x3, A2) (λ x3, C x3))
    (@eliun (cv y) (λ x3, B2) (λ x3, C x3)))


/-- Equality theorem for indexed union. (Contributed by NM, 27-Jun-1998.) -/
theorem iuneq1 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wss (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))) (wss (ciun (λ x3, B2) (λ x3, C x3)) (ciun (λ x3, A2) (λ x3, C x3)))) (wceq A2 B2) (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3)))
  (@anim12i (wss A2 B2) (wss (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))) (wss B2 A2) (wss (ciun (λ x3, B2) (λ x3, C x3)) (ciun (λ x3, A2) (λ x3, C x3)))
    (@iunss1 A2 B2 (λ x3, C x3))
    (@iunss1 B2 A2 (λ x3, C x3)))
  (@eqss A2 B2)
  (@eqss (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3)))


/-- Equality theorem for indexed intersection. (Contributed by NM, 27-Jun-1998.) -/
theorem iineq1 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ciin (λ x3, A2) (λ x3, C x3)) (ciin (λ x3, B2) (λ x3, C x3))) :=
@«3eqtr4g» (wceq A2 B2) (cab (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, A2))) (cab (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, B2))) (ciin (λ x3, A2) (λ x3, C x3)) (ciin (λ x3, B2) (λ x3, C x3))
  (@abbidv (wceq A2 B2) (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, A2)) (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, B2))
    (λ y, @raleq (λ x3, wcel (cv y) (C x3)) A2 B2))
  (@df_iin (λ x3, A2) (λ x3, C x3))
  (@df_iin (λ x3, B2) (λ x3, C x3))


/-- Subclass theorem for indexed union. (Contributed by NM, 26-Nov-2003.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem ss2iun {A2 B2 C : setvar → «class»} :
  ⊦ wi (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) :=
@ssrdv (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))
  (λ y, @«3imtr4g» (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3)))
    (@syl (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)) (wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)))
      (@ralimi (λ x3, wss (B2 x3) (C x3)) (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)
        (λ x3, @ssel (B2 x3) (C x3) (cv y)))
      (@rexim (λ x3, wcel (cv y) (B2 x3)) (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, B2 x3))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, C x3)))


/-- Equality theorem for indexed union. (Contributed by NM, 22-Oct-2003.) -/
theorem iuneq2 {A2 B2 C : setvar → «class»} :
  ⊦ wi (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) :=
@«3imtr4i» (wa (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wral (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3))) (wa (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wss (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)))) (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)))
  (@anim12i (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wral (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3)) (wss (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)))
    (@ss2iun (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3))
    (@ss2iun (λ x3, A2 x3) (λ x3, C x3) (λ x3, B2 x3)))
  (@bitri (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wral (λ x3, wa (wss (B2 x3) (C x3)) (wss (C x3) (B2 x3))) (λ x3, A2 x3)) (wa (wral (λ x3, wss (B2 x3) (C x3)) (λ x3, A2 x3)) (wral (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3)))
    (@ralbii (λ x3, wceq (B2 x3) (C x3)) (λ x3, wa (wss (B2 x3) (C x3)) (wss (C x3) (B2 x3))) (λ x3, A2 x3)
      (λ x3, @eqss (B2 x3) (C x3)))
    (@r19_26 (λ x3, wss (B2 x3) (C x3)) (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3)))
  (@eqss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)))


/-- Equality theorem for indexed intersection. (Contributed by NM, 22-Oct-2003.) (Proof shortened by
Andrew Salmon, 25-Jul-2011.) -/
theorem iineq2 {A2 B2 C : setvar → «class»} :
  ⊦ wi (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))) :=
@«3eqtr4g» (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (cab (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) (cab (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))) (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))
  (@abbidv (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, wral (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))
    (λ y, @syl (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wral (λ x3, wb (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)) (wb (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wral (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)))
      (@ralimi (λ x3, wceq (B2 x3) (C x3)) (λ x3, wb (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)
        (λ x3, @eleq2 (B2 x3) (C x3) (cv y)))
      (@ralbi (λ x3, wcel (cv y) (B2 x3)) (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))))
  (@df_iin (λ x3, A2 x3) (λ x3, B2 x3))
  (@df_iin (λ x3, A2 x3) (λ x3, C x3))


/-- Equality inference for indexed union. (Contributed by NM, 22-Oct-2003.) -/
theorem iuneq2i {A2 B2 C : setvar → «class»}
  (iuneq2i_1 : ∀ x3, ⊦ wi (wcel (cv x3) (A2 x3)) (wceq (B2 x3) (C x3))) :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)), from
  @mprg (λ x3, wceq (B2 x3) (C x3)) (λ x3, wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) (λ x3, A2 x3)
    (λ x3, @iuneq2 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3))
    (λ x3, iuneq2i_1 x3) x3


/-- Equality inference for indexed intersection. (Contributed by NM, 22-Oct-2003.) -/
theorem iineq2i {A2 B2 C : setvar → «class»}
  (iuneq2i_1 : ∀ x3, ⊦ wi (wcel (cv x3) (A2 x3)) (wceq (B2 x3) (C x3))) :
  ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3)), from
  @mprg (λ x3, wceq (B2 x3) (C x3)) (λ x3, wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))) (λ x3, A2 x3)
    (λ x3, @iineq2 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3))
    (λ x3, iuneq2i_1 x3) x3


/-- Equality deduction for indexed intersection. (Contributed by NM, 7-Dec-2011.) -/
theorem iineq2d {ph : setvar → wff} {A2 B2 C : setvar → «class»}
  (iineq2d_1 : ⊦ wnf (λ x3, ph x3))
  (iineq2d_2 : ∀ x3, ⊦ wi (wa (ph x3) (wcel (cv x3) (A2 x3))) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))) :=
@syl (ph x3) (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3)))
  (@ralrimi (λ x3, ph x3) (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)
    iineq2d_1
    (λ x3, @ex (ph x3) (wcel (cv x3) (A2 x3)) (wceq (B2 x3) (C x3))
      (iineq2d_2 x3)) x3)
  (@iineq2 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3))


/-- Equality deduction for indexed union. (Contributed by NM, 3-Aug-2004.) -/
theorem iuneq2dv {ph : wff} {A2 B2 C : setvar → «class»}
  (iuneq2dv_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wceq (B2 x3) (C x3))) :
  ⊦ wi ph (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) :=
@syl ph (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)))
  (@ralrimiva ph (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)
    (λ x3, iuneq2dv_1 x3))
  (@iuneq2 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3))


/-- Equality deduction for indexed intersection. (Contributed by NM, 3-Aug-2004.) -/
theorem iineq2dv {ph : wff} {A2 B2 C : setvar → «class»}
  (iuneq2dv_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wceq (B2 x3) (C x3))) :
  ⊦ wi ph (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi ph (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (ciin (λ x3, A2 x3) (λ x3, C x3))), from
  @iineq2d (λ x3, ph) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
    (@nfv ph)
    (λ x3, iuneq2dv_1 x3) x3


/-- Equality theorem for indexed union, deduction version. (Contributed by Drahflow, 22-Oct-2015.)
-/
theorem iuneq1d {ph : setvar → wff} {A2 B2 : «class»} {C : setvar → «class»}
  (iuneq1d_1 : ∀ x3, ⊦ wi (ph x3) (wceq A2 B2))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))) :=
@syl (ph x3) (wceq A2 B2) (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3)))
  (iuneq1d_1 x3)
  (@iuneq1 A2 B2 (λ x3, C x3))


/-- Equality deduction for indexed union, deduction version. (Contributed by Drahflow, 22-Oct-2015.)
-/
theorem iuneq12d {ph : wff} {A2 B2 : «class»} {C D : setvar → «class»}
  (iuneq1d_1 : ⊦ wi ph (wceq A2 B2))
  (iuneq12d_2 : ∀ x3, ⊦ wi ph (wceq (C x3) (D x3))) :
  ⊦ wi ph (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, D x3))) :=
@eqtrd ph (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, D x3))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi ph (wceq (ciun (λ x3, A2) (λ x3, C x3)) (ciun (λ x3, B2) (λ x3, C x3))), from
    @iuneq1d (λ x3, ph) A2 B2 (λ x3, C x3)
      (λ x3, iuneq1d_1) x3)
  (@iuneq2dv ph (λ x3, B2) (λ x3, C x3) (λ x3, D x3)
    (λ x3, @adantr ph (wceq (C x3) (D x3)) (wcel (cv x3) B2)
      (iuneq12d_2 x3)))


/-- Equality deduction for indexed union. (Contributed by Drahflow, 22-Oct-2015.) -/
theorem iuneq2d {ph : wff} {A2 : «class»} {B2 C : setvar → «class»}
  (iuneq2d_2 : ∀ x3, ⊦ wi ph (wceq (B2 x3) (C x3))) :
  ⊦ wi ph (wceq (ciun (λ x3, A2) (λ x3, B2 x3)) (ciun (λ x3, A2) (λ x3, C x3))) :=
@iuneq2dv ph (λ x3, A2) (λ x3, B2 x3) (λ x3, C x3)
  (λ x3, @adantr ph (wceq (B2 x3) (C x3)) (wcel (cv x3) A2)
    (iuneq2d_2 x3))


/-- Bound-variable hypothesis builder for indexed union. (Contributed by Mario Carneiro,
25-Jan-2014.) Add disjoint variable condition to avoid ~ ax-13 . See ~ nfiung for a less restrictive
version requiring more axioms. (Revised by Gino Giotto, 20-Jan-2024.) -/
theorem nfiun {A2 B2 : setvar → setvar → «class»}
  (nfiun_1 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (nfiun_2 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y)) :
  ⊦ wnfc (λ y, ciun (λ x3, A2 x3 y) (λ x3, B2 x3 y)) :=
@nfcxfr (λ y, ciun (λ x3, A2 x3 y) (λ x3, B2 x3 y)) (λ y, cab (λ z, wrex (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2 x3 y)))
  (λ y, @df_iun (λ x3, A2 x3 y) (λ x3, B2 x3 y))
  (@nfab (λ y z, wrex (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2 x3 y))
    (λ z, @nfrex (λ y x3, wcel (cv z) (B2 x3 y)) (λ y x3, A2 x3 y)
      (λ x3, nfiun_1 x3)
      (λ x3, @nfcri (λ y z, B2 x3 y)
        (λ z, nfiun_2 x3) z)))


/-- Bound-variable hypothesis builder for indexed intersection. (Contributed by Mario Carneiro,
25-Jan-2014.) Add disjoint variable condition to avoid ~ ax-13 . See ~ nfiing for a less restrictive
version requiring more axioms. (Revised by Gino Giotto, 20-Jan-2024.) -/
theorem nfiin {A2 B2 : setvar → setvar → «class»}
  (nfiun_1 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (nfiun_2 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y)) :
  ⊦ wnfc (λ y, ciin (λ x3, A2 x3 y) (λ x3, B2 x3 y)) :=
@nfcxfr (λ y, ciin (λ x3, A2 x3 y) (λ x3, B2 x3 y)) (λ y, cab (λ z, wral (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2 x3 y)))
  (λ y, @df_iin (λ x3, A2 x3 y) (λ x3, B2 x3 y))
  (@nfab (λ y z, wral (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2 x3 y))
    (λ z, @nfralw (λ y x3, wcel (cv z) (B2 x3 y)) (λ y x3, A2 x3 y)
      (λ x3, nfiun_1 x3)
      (λ x3, @nfcri (λ y z, B2 x3 y)
        (λ z, nfiun_2 x3) z)))


/-- Bound-variable hypothesis builder for indexed union. (Contributed by NM, 12-Oct-2003.) -/
theorem nfiu1 {A2 B2 : setvar → «class»} :
  ⊦ wnfc (λ x3, ciun (λ x3, A2 x3) (λ x3, B2 x3)) :=
@nfcxfr (λ x3, ciun (λ x3, A2 x3) (λ x3, B2 x3)) (λ x3, cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))
  (λ x3, @df_iun (λ x3, A2 x3) (λ x3, B2 x3))
  (@nfab (λ x3 y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))
    (λ y, @nfre1 (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))


/-- Alternate definition of indexed union when ` B ` is a set. Definition 15(a) of [Suppes] p. 44.
(Contributed by NM, 23-Mar-2006.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) (Proof shortened
by Rohan Ridenour, 11-Aug-2023.) -/
theorem dfiun2g {A2 B2 : setvar → «class»} {C : setvar → setvar → «class»}
  (y : setvar) : ⊦ wi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))) :=
@eqrdv (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))
  (λ z, @«3bitr4g» (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wex (λ y, wa (wcel (cv z) (cv y)) (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv z) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))))
    (@bitrdi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wex (λ y, wrex (λ x3, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y))) (λ x3, A2 x3))) (wex (λ y, wa (wcel (cv z) (cv y)) (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))
      (@bitrdi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y)))) (λ x3, A2 x3)) (wex (λ y, wrex (λ x3, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y))) (λ x3, A2 x3)))
        (setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wb (wrex (λ x3, wcel (cv z) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y)))) (λ x3, A2 x3))), from
          @rexbida (λ x3, wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (λ x3, wcel (cv z) (B2 x3)) (λ x3, wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y)))) (λ x3, A2 x3)
            (@nfra1 (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3))
            (λ x3, @syl (wa (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wcel (cv x3) (A2 x3))) (wcel (B2 x3) (C x3 y)) (wb (wcel (cv z) (B2 x3)) (wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y)))))
              (@rspa (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3) x3)
              (@clel3g (cv z) (B2 x3) (λ y, C x3 y) y)) x3)
        (@rexcom4 (λ x3 y, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y))) (λ x3, A2 x3)))
      (@bitri (wex (λ y, wrex (λ x3, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y))) (λ x3, A2 x3))) (wex (λ y, wa (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv z) (cv y)))) (wex (λ y, wa (wcel (cv z) (cv y)) (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))
        (@exbii (λ y, wrex (λ x3, wa (wceq (cv y) (B2 x3)) (wcel (cv z) (cv y))) (λ x3, A2 x3)) (λ y, wa (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv z) (cv y)))
          (λ y, @r19_41v (λ x3, wceq (cv y) (B2 x3)) (wcel (cv z) (cv y)) (λ x3, A2 x3)))
        (@exancom (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, wcel (cv z) (cv y)))))
    (@eliun (cv z) (λ x3, A2 x3) (λ x3, B2 x3))
    (@eluniab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (cv z)))


/-- Alternate definition of indexed intersection when ` B ` is a set. (Contributed by Jeff Hankins,
27-Aug-2009.) -/
theorem dfiin2g {A2 B2 : setvar → «class»} {C : setvar → setvar → «class»}
  (y : setvar) : ⊦ wi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))) :=
@«3eqtr4g» (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (cab (λ w, wral (λ x3, wcel (cv w) (B2 x3)) (λ x3, A2 x3))) (cab (λ w, wal (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z))))) (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))
  (@abbidv (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (λ w, wral (λ x3, wcel (cv w) (B2 x3)) (λ x3, A2 x3)) (λ w, wal (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z))))
    (λ w, @syl5bb (wral (λ x3, wcel (cv w) (B2 x3)) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3)))) (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wal (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z))))
      (@df_ral (λ x3, wcel (cv w) (B2 x3)) (λ x3, A2 x3))
      (@bitrdi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))) (wal (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z))))
        (@sylbi (wral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (C x3 y)))) (wb (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))))
          (@df_ral (λ x3, wcel (B2 x3) (C x3 y)) (λ x3, A2 x3))
          (@syl (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (C x3 y)))) (wal (λ x3, wb (wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3))) (wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))) (wb (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))))
            (@alimi (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (C x3 y))) (λ x3, wb (wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3))) (wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))
              (λ x3, @pm5_74d (wi (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (C x3 y))) (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))
                (@imim2i (wcel (B2 x3) (C x3 y)) (wb (wcel (cv w) (B2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))) (wcel (cv x3) (A2 x3))
                  (@impbid2 (wcel (B2 x3) (C x3 y)) (wcel (cv w) (B2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))
                    (@alrimiv (wcel (cv w) (B2 x3)) (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))
                      (λ z, @biimprcd (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)) (wcel (cv w) (B2 x3))
                        (@eleq2 (cv z) (B2 x3) (cv w))))
                    (@mpii (wcel (B2 x3) (C x3 y)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))) (wceq (B2 x3) (B2 x3)) (wcel (cv w) (B2 x3))
                      (@eqid (B2 x3))
                      (setvar.forget $ λ z : setvar,
                        show ⊦ wi (wcel (B2 x3) (C x3 y)) (wi (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))) (wi (wceq (B2 x3) (B2 x3)) (wcel (cv w) (B2 x3)))), from
                        @spcgv (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (wi (wceq (B2 x3) (B2 x3)) (wcel (cv w) (B2 x3))) (B2 x3) (λ z, C x3 y)
                          (λ z, @imbi12d (wceq (cv z) (B2 x3)) (wceq (cv z) (B2 x3)) (wceq (B2 x3) (B2 x3)) (wcel (cv w) (cv z)) (wcel (cv w) (B2 x3))
                            (@eqeq1 (cv z) (B2 x3) (B2 x3))
                            (@eleq2 (cv z) (B2 x3) (cv w))) z))))))
            (@albi (λ x3, wi (wcel (cv x3) (A2 x3)) (wcel (cv w) (B2 x3))) (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))))
        (@«3bitr3ri» (wal (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3))) (wal (λ x3, wal (λ z, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))) (wal (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z)))) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))
          (@bitr4i (wal (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3))) (wal (λ z, wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))) (wal (λ x3, wal (λ z, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))
            (@albii (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3)) (λ z, wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))
              (λ z, @df_ral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3)))
            (@alcom (λ x3 z, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))))
          (@albii (λ z, wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3)) (λ z, wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z)))
            (λ z, @bitr4i (wral (λ x3, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))) (λ x3, A2 x3)) (wi (wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv w) (cv z))) (wi (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wcel (cv w) (cv z)))
              (@r19_23v (λ x3, wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)) (λ x3, A2 x3))
              (@imbi1i (wcel (cv z) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (wcel (cv w) (cv z))
                (@elab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)) (cv z)
                  (@vex z)
                  (λ y, @rexbidv (wceq (cv y) (cv z)) (λ x3, wceq (cv y) (B2 x3)) (λ x3, wceq (cv z) (B2 x3)) (λ x3, A2 x3)
                    (λ x3, @eqeq1 (cv y) (cv z) (B2 x3)))))))
          (@albii (λ x3, wal (λ z, wi (wcel (cv x3) (A2 x3)) (wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z))))) (λ x3, wi (wcel (cv x3) (A2 x3)) (wal (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))
            (λ x3, @«19_21v» (wcel (cv x3) (A2 x3)) (λ z, wi (wceq (cv z) (B2 x3)) (wcel (cv w) (cv z)))))))))
  (@df_iin (λ x3, A2 x3) (λ x3, B2 x3))
  (@df_int (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))


/-- Alternate definition of indexed union when ` B ` is a set. Definition 15(a) of [Suppes] p. 44.
(Contributed by NM, 27-Jun-1998.) (Revised by David Abernethy, 19-Jun-2012.) -/
theorem dfiun2 {A2 B2 : setvar → «class»}
  (dfiun2_1 : ∀ x3, ⊦ wcel (B2 x3) cvv) :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))), from
  @mprg (λ x3, wcel (B2 x3) cvv) (λ x3, wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))) (λ x3, A2 x3)
    (λ x3, setvar.forget $ λ y : setvar,
      show ⊦ wi (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))), from
      @dfiun2g (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, cvv) y)
    (λ x3, @a1i (wcel (B2 x3) cvv) (wcel (cv x3) (A2 x3))
      (dfiun2_1 x3)) x3


/-- Alternate definition of indexed intersection when ` B ` is a set. Definition 15(b) of [Suppes]
p. 44. (Contributed by NM, 28-Jun-1998.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem dfiin2 {A2 B2 : setvar → «class»}
  (dfiun2_1 : ∀ x3, ⊦ wcel (B2 x3) cvv) :
  ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))), from
  @mprg (λ x3, wcel (B2 x3) cvv) (λ x3, wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))) (λ x3, A2 x3)
    (λ x3, setvar.forget $ λ y : setvar,
      show ⊦ wi (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3)) (wceq (ciin (λ x3, A2 x3) (λ x3, B2 x3)) (cint (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))), from
      @dfiin2g (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, cvv) y)
    (λ x3, @a1i (wcel (B2 x3) cvv) (wcel (cv x3) (A2 x3))
      (dfiun2_1 x3)) x3


/-- Rule used to change the bound variables in an indexed union, with the substitution specified
implicitly by the hypothesis. (Contributed by NM, 26-Mar-2006.) (Revised by Andrew Salmon,
25-Jul-2011.) Add disjoint variable condition to avoid ~ ax-13 . See ~ cbviung for a less
restrictive version requiring more axioms. (Revised by Gino Giotto, 20-Jan-2024.) -/
theorem cbviun {A2 : «class»} {B2 C : setvar → setvar → «class»}
  (cbviun_1 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y))
  (cbviun_2 : ∀ y, ⊦ wnfc (λ x3, C x3 y))
  (cbviun_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (B2 x3 y) (C x3 y)))
  (x3 y : setvar) : ⊦ wceq (ciun (λ x3, A2) (λ x3, B2 x3 y)) (ciun (λ y, A2) (λ y, C x3 y)) :=
@«3eqtr4i» (cab (λ z, wrex (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2))) (cab (λ z, wrex (λ y, wcel (cv z) (C x3 y)) (λ y, A2))) (ciun (λ x3, A2) (λ x3, B2 x3 y)) (ciun (λ y, A2) (λ y, C x3 y))
  (@abbii (λ z, wrex (λ x3, wcel (cv z) (B2 x3 y)) (λ x3, A2)) (λ z, wrex (λ y, wcel (cv z) (C x3 y)) (λ y, A2))
    (λ z, @cbvrexw (λ x3 y, wcel (cv z) (B2 x3 y)) (λ x3 y, wcel (cv z) (C x3 y)) A2
      (λ x3, @nfcri (λ y z, B2 x3 y)
        (λ z, cbviun_1 x3) z)
      (λ y, @nfcri (λ x3 z, C x3 y)
        (λ z, cbviun_2 y) z)
      (λ x3 y, @eleq2d (wceq (cv x3) (cv y)) (B2 x3 y) (C x3 y) (cv z)
        (cbviun_3 x3 y)) x3 y))
  (@df_iun (λ x3, A2) (λ x3, B2 x3 y))
  (@df_iun (λ y, A2) (λ y, C x3 y))


/-- Rule used to change the bound variables in an indexed union, with the substitution specified
implicitly by the hypothesis. (Contributed by NM, 15-Sep-2003.) Add disjoint variable condition to
avoid ~ ax-13 . See ~ cbviunvg for a less restrictive version requiring more axioms. (Revised by
Gino Giotto, 20-Jan-2024.) -/
theorem cbviunv {A2 : «class»} {B2 C : setvar → «class»}
  (cbviunv_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (B2 x3) (C y))) :
  ⊦ wceq (ciun (λ x3, A2) (λ x3, B2 x3)) (ciun (λ y, A2) (λ y, C y)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wceq (ciun (λ x3, A2) (λ x3, B2 x3)) (ciun (λ y, A2) (λ y, C y)), from
  @cbviun A2 (λ x3 y, B2 x3) (λ x3 y, C y)
    (λ x3, @nfcv (B2 x3))
    (λ y, @nfcv (C y))
    (λ x3 y, cbviunv_1 x3 y) x3 y


/-- Subset theorem for an indexed union. (Contributed by NM, 13-Sep-2003.) (Proof shortened by
Andrew Salmon, 25-Jul-2011.) -/
theorem iunss {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wb (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C) (wral (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) :=
@«3bitri» (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C) (wss (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) C) (wal (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) C))) (wral (λ x3, wss (B2 x3) C) (λ x3, A2 x3))
  (@sseq1i (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) C
    (@df_iun (λ x3, A2 x3) (λ x3, B2 x3)))
  (@abss (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) C)
  (@«3bitrri» (wral (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (wral (λ x3, wal (λ y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C))) (λ x3, A2 x3)) (wal (λ y, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C)) (λ x3, A2 x3))) (wal (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) C)))
    (@ralbii (λ x3, wss (B2 x3) C) (λ x3, wal (λ y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C))) (λ x3, A2 x3)
      (λ x3, @dfss2 (B2 x3) C))
    (@ralcom4 (λ x3 y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C)) (λ x3, A2 x3))
    (@albii (λ y, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C)) (λ x3, A2 x3)) (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) C))
      (λ y, @r19_23v (λ x3, wcel (cv y) (B2 x3)) (wcel (cv y) C) (λ x3, A2 x3))))


/-- Identity law for subset of an indexed union. (Contributed by NM, 12-Oct-2003.) (Proof shortened
by Andrew Salmon, 25-Jul-2011.) -/
theorem ssiun2 {A2 B2 : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel (cv x3) (A2 x3)) (wss (B2 x3) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) :=
@ssrdv (wcel (cv x3) (A2 x3)) (B2 x3) (ciun (λ x3, A2 x3) (λ x3, B2 x3))
  (λ y, @syl6ibr (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3)))
    (@ex (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))
      (@rspe (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3) x3))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, B2 x3)))


/-- Subset relationship for an indexed union. (Contributed by NM, 26-Oct-2003.) -/
theorem ssiun2s {A2 : «class»} {B2 : setvar → «class»} {C D : «class»}
  (ssiun2s_1 : ∀ x3, ⊦ wi (wceq (cv x3) C) (wceq (B2 x3) D)) :
  ⊦ wi (wcel C A2) (wss D (ciun (λ x3, A2) (λ x3, B2 x3))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wcel C A2) (wss D (ciun (λ x3, A2) (λ x3, B2 x3))), from
  @vtoclgaf (λ x3, wss (B2 x3) (ciun (λ x3, A2) (λ x3, B2 x3))) (λ x3, wss D (ciun (λ x3, A2) (λ x3, B2 x3))) (λ x3, C) A2
    (@nfcv C)
    (@nfss (λ x3, D) (λ x3, ciun (λ x3, A2) (λ x3, B2 x3))
      (@nfcv D)
      (@nfiu1 (λ x3, A2) (λ x3, B2 x3)))
    (λ x3, @sseq1d (wceq (cv x3) C) (B2 x3) D (ciun (λ x3, A2) (λ x3, B2 x3))
      (ssiun2s_1 x3))
    (λ x3, @ssiun2 (λ x3, A2) (λ x3, B2 x3) x3) x3


/-- Subset theorem for an indexed union. (Contributed by Glauco Siliprandi, 8-Apr-2021.) -/
theorem iunssd {ph : wff} {A2 B2 : setvar → «class»} {C : «class»}
  (iunssd_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wss (B2 x3) C)) :
  ⊦ wi ph (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C) :=
@sylibr ph (wral (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (wss (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C)
  (@ralrimiva ph (λ x3, wss (B2 x3) C) (λ x3, A2 x3)
    (λ x3, iunssd_1 x3))
  (@iunss (λ x3, A2 x3) (λ x3, B2 x3) C)


/-- The indexed union of a class abstraction. (Contributed by NM, 27-Dec-2004.) -/
theorem iunab {ph : setvar → setvar → wff} {A2 : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3))), from
  @mpgbir (λ y, wceq (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)))) (λ y, wb (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)))))
    (λ y, setvar.forget $ λ y : setvar,
      show ⊦ wb (wceq (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)))) (wal (λ y, wb (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)))))), from
      @cleqf (λ y, ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (λ y, cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)))
        (@nfiun (λ x3 y, A2 x3) (λ x3 y, cab (λ y, ph x3 y))
          (λ x3, @nfcv (A2 x3))
          (λ x3, @nfab1 (λ y, ph x3 y)))
        (@nfab1 (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3))) y)
    (λ y, @«3bitr4i» (wrex (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, A2 x3)) (wrex (λ x3, ph x3 y) (λ x3, A2 x3)) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3))))
      (@rexbii (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, ph x3 y) (λ x3, A2 x3)
        (λ x3, @abid (λ y, ph x3 y) y))
      (@eliun (cv y) (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))
      (@abid (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)) y)) y


/-- The indexed union of a restricted class abstraction. (Contributed by NM, 3-Jan-2004.) (Proof
shortened by Mario Carneiro, 14-Nov-2016.) -/
theorem iunrab {ph : setvar → setvar → wff} {A2 B2 : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y))) (crab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)) (λ y, B2 y)) :=
@«3eqtr4i» (ciun (λ x3, A2 x3) (λ x3, cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))) (cab (λ y, wrex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2 x3))) (ciun (λ x3, A2 x3) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y))) (crab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)) (λ y, B2 y))
  (@iunab (λ x3 y, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2 x3))
  (@iuneq2i (λ x3, A2 x3) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y)) (λ x3, cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))
    (λ x3, @a1i (wceq (crab (λ y, ph x3 y) (λ y, B2 y)) (cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))) (wcel (cv x3) (A2 x3))
      (@df_rab (λ y, ph x3 y) (λ y, B2 y))))
  (@eqtr4i (crab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)) (λ y, B2 y)) (cab (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2 x3)))) (cab (λ y, wrex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2 x3)))
    (@df_rab (λ y, wrex (λ x3, ph x3 y) (λ x3, A2 x3)) (λ y, B2 y))
    (@abbii (λ y, wrex (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2 x3)) (λ y, wa (wcel (cv y) (B2 y)) (wrex (λ x3, ph x3 y) (λ x3, A2 x3)))
      (λ y, @r19_42v (wcel (cv y) (B2 y)) (λ x3, ph x3 y) (λ x3, A2 x3))))


/-- Subset theorem for an indexed intersection. (Contributed by FL, 15-Oct-2012.) (Proof shortened
by Mario Carneiro, 14-Oct-2016.) -/
theorem ssiinf {A2 B2 C : setvar → «class»}
  (ssiinf_1 : ⊦ wnfc (λ x3, C x3))
  (x3 : setvar) : ⊦ wb (wss (C x3) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3)) :=
@«3bitr4i» (wral (λ y, wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (λ y, C x3)) (wral (λ x3, wral (λ y, wcel (cv y) (B2 x3)) (λ y, C x3)) (λ x3, A2 x3)) (wss (C x3) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wss (C x3) (B2 x3)) (λ x3, A2 x3))
  (@bitri (wral (λ y, wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (λ y, C x3)) (wral (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, C x3)) (wral (λ x3, wral (λ y, wcel (cv y) (B2 x3)) (λ y, C x3)) (λ x3, A2 x3))
    (@ralbii (λ y, wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, C x3)
      (λ y, @elv (λ y, wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))
        (λ y, setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wcel (cv y) cvv) (wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))), from
          @eliin (cv y) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, cvv) x3) y))
    (setvar.forget $ λ y : setvar,
      show ⊦ wb (wral (λ y, wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, C x3)) (wral (λ x3, wral (λ y, wcel (cv y) (B2 x3)) (λ y, C x3)) (λ x3, A2 x3)), from
      @ralcomf (λ y x3, wcel (cv y) (B2 x3)) (λ y x3, C x3) (λ y x3, A2 x3)
        (λ y, ssiinf_1)
        (λ x3, @nfcv (A2 x3)) y x3))
  (@dfss3 (C x3) (ciin (λ x3, A2 x3) (λ x3, B2 x3)))
  (@ralbii (λ x3, wss (C x3) (B2 x3)) (λ x3, wral (λ y, wcel (cv y) (B2 x3)) (λ y, C x3)) (λ x3, A2 x3)
    (λ x3, @dfss3 (C x3) (B2 x3)))


/-- Subset theorem for an indexed intersection. (Contributed by NM, 15-Oct-2003.) -/
theorem ssiin {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wb (wss C (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wss C (B2 x3)) (λ x3, A2 x3)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wb (wss C (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wss C (B2 x3)) (λ x3, A2 x3)), from
  @ssiinf (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C)
    (@nfcv C) x3


/-- Subset implication for an indexed intersection. (Contributed by NM, 15-Oct-2003.) (Proof
shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem iinss {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wi (wrex (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (wss (ciin (λ x3, A2 x3) (λ x3, B2 x3)) C) :=
@ssrdv (wrex (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (ciin (λ x3, A2 x3) (λ x3, B2 x3)) C
  (λ y, @syl5bi (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (wcel (cv y) C)
    (@elv (λ y, wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))
      (λ y, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel (cv y) cvv) (wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))), from
        @eliin (cv y) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, cvv) x3) y)
    (@syl (wrex (λ x3, wss (B2 x3) C) (λ x3, A2 x3)) (wrex (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C)) (λ x3, A2 x3)) (wi (wral (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) C))
      (@reximi (λ x3, wss (B2 x3) C) (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) C)) (λ x3, A2 x3)
        (λ x3, @ssel (B2 x3) C (cv y)))
      (@r19_36v (λ x3, wcel (cv y) (B2 x3)) (wcel (cv y) C) (λ x3, A2 x3))))


/-- Class union in terms of indexed union. Definition in [Stoll] p. 43. (Contributed by NM,
28-Jun-1998.) -/
theorem uniiun {A2 : «class»} :
  ⊦ wceq (cuni A2) (ciun (λ x3, A2) (λ x3, cv x3)) :=
@eqtr4i (cuni A2) (cab (λ y, wrex (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))) (ciun (λ x3, A2) (λ x3, cv x3))
  (@dfuni2 A2)
  (@df_iun (λ x3, A2) (λ x3, cv x3))


/-- Class intersection in terms of indexed intersection. Definition in [Stoll] p. 44. (Contributed
by NM, 28-Jun-1998.) -/
theorem intiin {A2 : «class»} :
  ⊦ wceq (cint A2) (ciin (λ x3, A2) (λ x3, cv x3)) :=
@eqtr4i (cint A2) (cab (λ y, wral (λ x3, wcel (cv y) (cv x3)) (λ x3, A2))) (ciin (λ x3, A2) (λ x3, cv x3))
  (@dfint2 A2)
  (@df_iin (λ x3, A2) (λ x3, cv x3))


/-- An indexed union of singletons recovers the index set. (Contributed by NM, 6-Sep-2005.) -/
theorem iunid {A2 : «class»} :
  ⊦ wceq (ciun (λ x3, A2) (λ x3, csn (cv x3))) A2 :=
@eqtri (ciun (λ x3, A2) (λ x3, csn (cv x3))) (ciun (λ x3, A2) (λ x3, cab (λ y, wceq (cv x3) (cv y)))) A2
  (@iuneq2i (λ x3, A2) (λ x3, csn (cv x3)) (λ x3, cab (λ y, wceq (cv x3) (cv y)))
    (λ x3, @a1i (wceq (csn (cv x3)) (cab (λ y, wceq (cv x3) (cv y)))) (wcel (cv x3) A2)
      (@eqtri (csn (cv x3)) (cab (λ y, wceq (cv y) (cv x3))) (cab (λ y, wceq (cv x3) (cv y)))
        (@df_sn (cv x3))
        (@abbii (λ y, wceq (cv y) (cv x3)) (λ y, wceq (cv x3) (cv y))
          (λ y, @equcom y x3)))))
  (@«3eqtr2i» (ciun (λ x3, A2) (λ x3, cab (λ y, wceq (cv x3) (cv y)))) (cab (λ y, wrex (λ x3, wceq (cv x3) (cv y)) (λ x3, A2))) (cab (λ y, wcel (cv y) A2)) A2
    (@iunab (λ x3 y, wceq (cv x3) (cv y)) (λ x3, A2))
    (@abbii (λ y, wcel (cv y) A2) (λ y, wrex (λ x3, wceq (cv x3) (cv y)) (λ x3, A2))
      (λ y, @risset (cv y) A2))
    (@abid2 A2))


/-- An indexed union of the empty set is empty. (Contributed by NM, 26-Mar-2003.) (Proof shortened
by Andrew Salmon, 25-Jul-2011.) -/
theorem iun0 {A2 : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, c0)) c0 :=
@nel0 (ciun (λ x3, A2 x3) (λ x3, c0))
  (λ y, @mtbir (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, c0))) (wrex (λ x3, wcel (cv y) c0) (λ x3, A2 x3))
    (@nrex (λ x3, wcel (cv y) c0) (λ x3, A2 x3)
      (λ x3, @a1i (wn (wcel (cv y) c0)) (wcel (cv x3) (A2 x3))
        (@noel (cv y))))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, c0)))


/-- An empty indexed union is empty. (Contributed by NM, 4-Dec-2004.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem «0iun» {A2 : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, c0) (λ x3, A2 x3)) c0 :=
@nel0 (ciun (λ x3, c0) (λ x3, A2 x3))
  (λ y, @mtbir (wcel (cv y) (ciun (λ x3, c0) (λ x3, A2 x3))) (wrex (λ x3, wcel (cv y) (A2 x3)) (λ x3, c0))
    (@rex0 (λ x3, wcel (cv y) (A2 x3)))
    (@eliun (cv y) (λ x3, c0) (λ x3, A2 x3)))


/-- An empty indexed intersection is the universal class. (Contributed by NM, 20-Oct-2005.) -/
theorem «0iin» {A2 : setvar → «class»} :
  ⊦ wceq (ciin (λ x3, c0) (λ x3, A2 x3)) cvv :=
@eqtr4i (ciin (λ x3, c0) (λ x3, A2 x3)) (cab (λ y, wral (λ x3, wcel (cv y) (A2 x3)) (λ x3, c0))) cvv
  (@df_iin (λ x3, c0) (λ x3, A2 x3))
  (@abbi2i (λ y, wral (λ x3, wcel (cv y) (A2 x3)) (λ x3, c0)) cvv
    (λ y, @«2th» (wcel (cv y) cvv) (wral (λ x3, wcel (cv y) (A2 x3)) (λ x3, c0))
      (@vex y)
      (@ral0 (λ x3, wcel (cv y) (A2 x3)))))


/-- Indexed intersection of a class abstraction. (Contributed by NM, 6-Dec-2011.) -/
theorem iinab {ph : setvar → setvar → wff} {A2 : setvar → «class»} :
  ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wceq (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3))), from
  @mpgbir (λ y, wceq (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)))) (λ y, wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)))))
    (λ y, setvar.forget $ λ y : setvar,
      show ⊦ wb (wceq (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)))) (wal (λ y, wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)))))), from
      @cleqf (λ y, ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y))) (λ y, cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)))
        (@nfiin (λ x3 y, A2 x3) (λ x3 y, cab (λ y, ph x3 y))
          (λ x3, @nfcv (A2 x3))
          (λ x3, @nfab1 (λ y, ph x3 y)))
        (@nfab1 (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3))) y)
    (λ y, @«3bitr4i» (wral (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, A2 x3)) (wral (λ x3, ph x3 y) (λ x3, A2 x3)) (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wcel (cv y) (cab (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3))))
      (@ralbii (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, ph x3 y) (λ x3, A2 x3)
        (λ x3, @abid (λ y, ph x3 y) y))
      (@elv (λ y, wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wral (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, A2 x3)))
        (λ y, setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wcel (cv y) cvv) (wb (wcel (cv y) (ciin (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)))) (wral (λ x3, wcel (cv y) (cab (λ y, ph x3 y))) (λ x3, A2 x3))), from
          @eliin (cv y) (λ x3, A2 x3) (λ x3, cab (λ y, ph x3 y)) (λ x3, cvv) x3) y)
      (@abid (λ y, wral (λ x3, ph x3 y) (λ x3, A2 x3)) y)) y


/-- Indexed intersection of a restricted class abstraction. (Contributed by NM, 6-Dec-2011.) -/
theorem iinrab {ph : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»} :
  ⊦ wi (wne A2 c0) (wceq (ciin (λ x3, A2) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y))) (crab (λ y, wral (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))) :=
@«3eqtr4g» (wne A2 c0) (cab (λ y, wral (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2))) (cab (λ y, wa (wcel (cv y) (B2 y)) (wral (λ x3, ph x3 y) (λ x3, A2)))) (ciin (λ x3, A2) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y))) (crab (λ y, wral (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))
  (@abbidv (wne A2 c0) (λ y, wral (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)) (λ y, wa (wcel (cv y) (B2 y)) (wral (λ x3, ph x3 y) (λ x3, A2)))
    (λ y, @r19_28zv (wcel (cv y) (B2 y)) (λ x3, ph x3 y) A2))
  (@eqtri (ciin (λ x3, A2) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y))) (ciin (λ x3, A2) (λ x3, cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))) (cab (λ y, wral (λ x3, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)))
    (@iineq2i (λ x3, A2) (λ x3, crab (λ y, ph x3 y) (λ y, B2 y)) (λ x3, cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))
      (λ x3, @a1i (wceq (crab (λ y, ph x3 y) (λ y, B2 y)) (cab (λ y, wa (wcel (cv y) (B2 y)) (ph x3 y)))) (wcel (cv x3) A2)
        (@df_rab (λ y, ph x3 y) (λ y, B2 y))))
    (@iinab (λ x3 y, wa (wcel (cv y) (B2 y)) (ph x3 y)) (λ x3, A2)))
  (@df_rab (λ y, wral (λ x3, ph x3 y) (λ x3, A2)) (λ y, B2 y))


/-- Indexed union of intersection. Generalization of half of theorem "Distributive laws" in
[Enderton] p. 30. Use ~ uniiun to recover Enderton's theorem. (Contributed by NM, 26-Mar-2004.) -/
theorem iunin2 {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cin B2 (C x3))) (cin B2 (ciun (λ x3, A2 x3) (λ x3, C x3))) :=
@eqriv (ciun (λ x3, A2 x3) (λ x3, cin B2 (C x3))) (cin B2 (ciun (λ x3, A2 x3) (λ x3, C x3)))
  (λ y, @«3bitr4i» (wrex (λ x3, wcel (cv y) (cin B2 (C x3))) (λ x3, A2 x3)) (wa (wcel (cv y) B2) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3)))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cin B2 (C x3)))) (wcel (cv y) (cin B2 (ciun (λ x3, A2 x3) (λ x3, C x3))))
    (@«3bitr4i» (wrex (λ x3, wa (wcel (cv y) B2) (wcel (cv y) (C x3))) (λ x3, A2 x3)) (wa (wcel (cv y) B2) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))) (wrex (λ x3, wcel (cv y) (cin B2 (C x3))) (λ x3, A2 x3)) (wa (wcel (cv y) B2) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))))
      (@r19_42v (wcel (cv y) B2) (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))
      (@rexbii (λ x3, wcel (cv y) (cin B2 (C x3))) (λ x3, wa (wcel (cv y) B2) (wcel (cv y) (C x3))) (λ x3, A2 x3)
        (λ x3, @elin (cv y) B2 (C x3)))
      (@anbi2i (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)) (wcel (cv y) B2)
        (@eliun (cv y) (λ x3, A2 x3) (λ x3, C x3))))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, cin B2 (C x3)))
    (@elin (cv y) B2 (ciun (λ x3, A2 x3) (λ x3, C x3))))


/-- Indexed union of intersection. Generalization of half of theorem "Distributive laws" in
[Enderton] p. 30. Use ~ uniiun to recover Enderton's theorem. (Contributed by Mario Carneiro,
30-Aug-2015.) -/
theorem iunin1 {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cin (C x3) B2)) (cin (ciun (λ x3, A2 x3) (λ x3, C x3)) B2) :=
@«3eqtr4i» (ciun (λ x3, A2 x3) (λ x3, cin B2 (C x3))) (cin B2 (ciun (λ x3, A2 x3) (λ x3, C x3))) (ciun (λ x3, A2 x3) (λ x3, cin (C x3) B2)) (cin (ciun (λ x3, A2 x3) (λ x3, C x3)) B2)
  (@iunin2 (λ x3, A2 x3) B2 (λ x3, C x3))
  (@iuneq2i (λ x3, A2 x3) (λ x3, cin (C x3) B2) (λ x3, cin B2 (C x3))
    (λ x3, @a1i (wceq (cin (C x3) B2) (cin B2 (C x3))) (wcel (cv x3) (A2 x3))
      (@incom (C x3) B2)))
  (@incom (ciun (λ x3, A2 x3) (λ x3, C x3)) B2)


/-- Indexed intersection of class difference. Generalization of half of theorem "De Morgan's laws"
in [Enderton] p. 31. Use ~ uniiun to recover Enderton's theorem. (Contributed by NM, 5-Oct-2006.) -/
theorem iindif2 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wne A2 c0) (wceq (ciin (λ x3, A2) (λ x3, cdif B2 (C x3))) (cdif B2 (ciun (λ x3, A2) (λ x3, C x3)))) :=
@eqrdv (wne A2 c0) (ciin (λ x3, A2) (λ x3, cdif B2 (C x3))) (cdif B2 (ciun (λ x3, A2) (λ x3, C x3)))
  (λ y, @«3bitr4g» (wne A2 c0) (wral (λ x3, wcel (cv y) (cdif B2 (C x3))) (λ x3, A2)) (wa (wcel (cv y) B2) (wn (wcel (cv y) (ciun (λ x3, A2) (λ x3, C x3))))) (wcel (cv y) (ciin (λ x3, A2) (λ x3, cdif B2 (C x3)))) (wcel (cv y) (cdif B2 (ciun (λ x3, A2) (λ x3, C x3))))
    (@«3bitr3g» (wne A2 c0) (wral (λ x3, wa (wcel (cv y) B2) (wn (wcel (cv y) (C x3)))) (λ x3, A2)) (wa (wcel (cv y) B2) (wral (λ x3, wn (wcel (cv y) (C x3))) (λ x3, A2))) (wral (λ x3, wcel (cv y) (cdif B2 (C x3))) (λ x3, A2)) (wa (wcel (cv y) B2) (wn (wcel (cv y) (ciun (λ x3, A2) (λ x3, C x3)))))
      (@r19_28zv (wcel (cv y) B2) (λ x3, wn (wcel (cv y) (C x3))) A2)
      (@ralbii (λ x3, wa (wcel (cv y) B2) (wn (wcel (cv y) (C x3)))) (λ x3, wcel (cv y) (cdif B2 (C x3))) (λ x3, A2)
        (λ x3, @bicomi (wcel (cv y) (cdif B2 (C x3))) (wa (wcel (cv y) B2) (wn (wcel (cv y) (C x3))))
          (@eldif (cv y) B2 (C x3))))
      (@anbi2i (wral (λ x3, wn (wcel (cv y) (C x3))) (λ x3, A2)) (wn (wcel (cv y) (ciun (λ x3, A2) (λ x3, C x3)))) (wcel (cv y) B2)
        (@xchbinxr (wral (λ x3, wn (wcel (cv y) (C x3))) (λ x3, A2)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2)) (wcel (cv y) (ciun (λ x3, A2) (λ x3, C x3)))
          (@ralnex (λ x3, wcel (cv y) (C x3)) (λ x3, A2))
          (@eliun (cv y) (λ x3, A2) (λ x3, C x3)))))
    (@elv (λ y, wb (wcel (cv y) (ciin (λ x3, A2) (λ x3, cdif B2 (C x3)))) (wral (λ x3, wcel (cv y) (cdif B2 (C x3))) (λ x3, A2)))
      (λ y, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel (cv y) cvv) (wb (wcel (cv y) (ciin (λ x3, A2) (λ x3, cdif B2 (C x3)))) (wral (λ x3, wcel (cv y) (cdif B2 (C x3))) (λ x3, A2))), from
        @eliin (cv y) (λ x3, A2) (λ x3, cdif B2 (C x3)) (λ x3, cvv) x3) y)
    (@eldif (cv y) B2 (ciun (λ x3, A2) (λ x3, C x3))))


/-- Relative intersection of an empty family. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem riin0 {A2 : «class»} {S : setvar → «class»} {X : «class»} :
  ⊦ wi (wceq X c0) (wceq (cin A2 (ciin (λ x3, X) (λ x3, S x3))) A2) :=
@eqtrdi (wceq X c0) (cin A2 (ciin (λ x3, X) (λ x3, S x3))) (cin A2 (ciin (λ x3, c0) (λ x3, S x3))) A2
  (@ineq2d (wceq X c0) (ciin (λ x3, X) (λ x3, S x3)) (ciin (λ x3, c0) (λ x3, S x3)) A2
    (@iineq1 X c0 (λ x3, S x3)))
  (@eqtri (cin A2 (ciin (λ x3, c0) (λ x3, S x3))) (cin A2 cvv) A2
    (@ineq2i (ciin (λ x3, c0) (λ x3, S x3)) cvv A2
      (@«0iin» (λ x3, S x3)))
    (@inv1 A2))


/-- Relative intersection of a nonempty family. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem riinn0 {A2 : «class»} {S : setvar → «class»} {X : «class»} :
  ⊦ wi (wa (wral (λ x3, wss (S x3) A2) (λ x3, X)) (wne X c0)) (wceq (cin A2 (ciin (λ x3, X) (λ x3, S x3))) (ciin (λ x3, X) (λ x3, S x3))) :=
@syl5eq (wa (wral (λ x3, wss (S x3) A2) (λ x3, X)) (wne X c0)) (cin A2 (ciin (λ x3, X) (λ x3, S x3))) (cin (ciin (λ x3, X) (λ x3, S x3)) A2) (ciin (λ x3, X) (λ x3, S x3))
  (@incom A2 (ciin (λ x3, X) (λ x3, S x3)))
  (@sylib (wa (wral (λ x3, wss (S x3) A2) (λ x3, X)) (wne X c0)) (wss (ciin (λ x3, X) (λ x3, S x3)) A2) (wceq (cin (ciin (λ x3, X) (λ x3, S x3)) A2) (ciin (λ x3, X) (λ x3, S x3)))
    (@syl (wa (wral (λ x3, wss (S x3) A2) (λ x3, X)) (wne X c0)) (wrex (λ x3, wss (S x3) A2) (λ x3, X)) (wss (ciin (λ x3, X) (λ x3, S x3)) A2)
      (@ancoms (wne X c0) (wral (λ x3, wss (S x3) A2) (λ x3, X)) (wrex (λ x3, wss (S x3) A2) (λ x3, X))
        (@r19_2z (λ x3, wss (S x3) A2) X))
      (@iinss (λ x3, X) (λ x3, S x3) A2))
    (@df_ss (ciin (λ x3, X) (λ x3, S x3)) A2))


/-- Relative intersection of a relative abstraction. (Contributed by Stefan O'Rear, 3-Apr-2015.) -/
theorem riinrab {ph : setvar → setvar → wff} {A2 X : «class»} :
  ⊦ wceq (cin A2 (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2)))) (crab (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2)) :=
@pm2_61ine (wceq (cin A2 (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2)))) (crab (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2))) X c0
  (@eqtrd (wceq X c0) (cin A2 (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2)))) A2 (crab (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2))
    (@riin0 A2 (λ x3, crab (λ y, ph x3 y) (λ y, A2)) X)
    (@sylibr (wceq X c0) (wral (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2)) (wceq A2 (crab (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2)))
      (@ralrimivw (wceq X c0) (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2)
        (λ y, @rzal (λ x3, ph x3 y) X))
      (@rabid2 (λ y, wral (λ x3, ph x3 y) (λ x3, X)) A2)))
  (@eqtrd (wne X c0) (cin A2 (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2)))) (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2))) (crab (λ y, wral (λ x3, ph x3 y) (λ x3, X)) (λ y, A2))
    (@mpan (wral (λ x3, wss (crab (λ y, ph x3 y) (λ y, A2)) A2) (λ x3, X)) (wne X c0) (wceq (cin A2 (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2)))) (ciin (λ x3, X) (λ x3, crab (λ y, ph x3 y) (λ y, A2))))
      (@rgenw (λ x3, wss (crab (λ y, ph x3 y) (λ y, A2)) A2) (λ x3, X)
        (λ x3, @ssrab2 (λ y, ph x3 y) A2))
      (@riinn0 A2 (λ x3, crab (λ y, ph x3 y) (λ y, A2)) X))
    (@iinrab (λ x3 y, ph x3 y) X (λ y, A2)))


/-- A singleton index picks out an instance of an indexed union's argument. (Contributed by Mario
Carneiro, 25-Jun-2016.) -/
theorem iunxsng {A2 : «class»} {B2 : setvar → «class»} {C : «class»} {V : setvar → «class»}
  (iunxsng_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (B2 x3) C))
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wceq (ciun (λ x3, csn A2) (λ x3, B2 x3)) C) :=
@eqrdv (wcel A2 (V x3)) (ciun (λ x3, csn A2) (λ x3, B2 x3)) C
  (λ y, @syl5bb (wcel (cv y) (ciun (λ x3, csn A2) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, csn A2)) (wcel A2 (V x3)) (wcel (cv y) C)
    (@eliun (cv y) (λ x3, csn A2) (λ x3, B2 x3))
    (@rexsng (λ x3, wcel (cv y) (B2 x3)) (wcel (cv y) C) A2 (λ x3, V x3)
      (λ x3, @eleq2d (wceq (cv x3) A2) (B2 x3) C (cv y)
        (iunxsng_1 x3)) x3))


/-- A singleton index picks out an instance of an indexed union's argument. (Contributed by NM,
26-Mar-2004.) (Proof shortened by Mario Carneiro, 25-Jun-2016.) -/
theorem iunxsn {A2 : «class»} {B2 : setvar → «class»} {C : «class»}
  (iunxsn_1 : ⊦ wcel A2 cvv)
  (iunxsn_2 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wceq (B2 x3) C)) :
  ⊦ wceq (ciun (λ x3, csn A2) (λ x3, B2 x3)) C :=
@ax_mp (wcel A2 cvv) (wceq (ciun (λ x3, csn A2) (λ x3, B2 x3)) C)
  iunxsn_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wceq (ciun (λ x3, csn A2) (λ x3, B2 x3)) C), from
    @iunxsng A2 (λ x3, B2 x3) C (λ x3, cvv)
      (λ x3, iunxsn_2 x3) x3)


/-- Separate a union in an indexed union. (Contributed by NM, 27-Dec-2004.) (Proof shortened by
Mario Carneiro, 17-Nov-2016.) -/
theorem iunun {A2 B2 C : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, cun (B2 x3) (C x3))) (cun (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))) :=
@eqriv (ciun (λ x3, A2 x3) (λ x3, cun (B2 x3) (C x3))) (cun (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3)))
  (λ y, @«3bitr4i» (wrex (λ x3, wcel (cv y) (cun (B2 x3) (C x3))) (λ x3, A2 x3)) (wo (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3)))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cun (B2 x3) (C x3)))) (wcel (cv y) (cun (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))))
    (@«3bitr4i» (wrex (λ x3, wo (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)) (wo (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))) (wrex (λ x3, wcel (cv y) (cun (B2 x3) (C x3))) (λ x3, A2 x3)) (wo (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))))
      (@r19_43 (λ x3, wcel (cv y) (B2 x3)) (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))
      (@rexbii (λ x3, wcel (cv y) (cun (B2 x3) (C x3))) (λ x3, wo (wcel (cv y) (B2 x3)) (wcel (cv y) (C x3))) (λ x3, A2 x3)
        (λ x3, @elun (cv y) (B2 x3) (C x3)))
      (@orbi12i (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3))
        (@eliun (cv y) (λ x3, A2 x3) (λ x3, B2 x3))
        (@eliun (cv y) (λ x3, A2 x3) (λ x3, C x3))))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, cun (B2 x3) (C x3)))
    (@elun (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, C x3))))


/-- Separate a union in the index of an indexed union. (Contributed by NM, 26-Mar-2004.) (Proof
shortened by Mario Carneiro, 17-Nov-2016.) -/
theorem iunxun {A2 B2 C : setvar → «class»} :
  ⊦ wceq (ciun (λ x3, cun (A2 x3) (B2 x3)) (λ x3, C x3)) (cun (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, B2 x3) (λ x3, C x3))) :=
@eqriv (ciun (λ x3, cun (A2 x3) (B2 x3)) (λ x3, C x3)) (cun (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, B2 x3) (λ x3, C x3)))
  (λ y, @«3bitr4i» (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, cun (A2 x3) (B2 x3))) (wo (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wcel (cv y) (ciun (λ x3, B2 x3) (λ x3, C x3)))) (wcel (cv y) (ciun (λ x3, cun (A2 x3) (B2 x3)) (λ x3, C x3))) (wcel (cv y) (cun (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, B2 x3) (λ x3, C x3))))
    (@bitr4i (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, cun (A2 x3) (B2 x3))) (wo (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, B2 x3))) (wo (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wcel (cv y) (ciun (λ x3, B2 x3) (λ x3, C x3))))
      (@rexun (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3) (λ x3, B2 x3))
      (@orbi12i (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3))) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, A2 x3)) (wcel (cv y) (ciun (λ x3, B2 x3) (λ x3, C x3))) (wrex (λ x3, wcel (cv y) (C x3)) (λ x3, B2 x3))
        (@eliun (cv y) (λ x3, A2 x3) (λ x3, C x3))
        (@eliun (cv y) (λ x3, B2 x3) (λ x3, C x3))))
    (@eliun (cv y) (λ x3, cun (A2 x3) (B2 x3)) (λ x3, C x3))
    (@elun (cv y) (ciun (λ x3, A2 x3) (λ x3, C x3)) (ciun (λ x3, B2 x3) (λ x3, C x3))))


/-- Subclass relationship for power class and union. (Contributed by NM, 18-Jul-2006.) -/
theorem sspwuni {A2 B2 : «class»} :
  ⊦ wb (wss A2 (cpw B2)) (wss (cuni A2) B2) :=
@«3bitr4i» (wral (λ x3, wcel (cv x3) (cpw B2)) (λ x3, A2)) (wral (λ x3, wss (cv x3) B2) (λ x3, A2)) (wss A2 (cpw B2)) (wss (cuni A2) B2)
  (@ralbii (λ x3, wcel (cv x3) (cpw B2)) (λ x3, wss (cv x3) B2) (λ x3, A2)
    (λ x3, @velpw (λ x3, B2) x3))
  (@dfss3 A2 (cpw B2))
  (@unissb A2 B2)


/-- Relationship for power class and union. (Contributed by NM, 18-Jul-2006.) -/
theorem elpwuni {A2 B2 : «class»} :
  ⊦ wi (wcel B2 A2) (wb (wss A2 (cpw B2)) (wceq (cuni A2) B2)) :=
@syl5bb (wss A2 (cpw B2)) (wss (cuni A2) B2) (wcel B2 A2) (wceq (cuni A2) B2)
  (@sspwuni A2 B2)
  (@impbid1 (wcel B2 A2) (wss (cuni A2) B2) (wceq (cuni A2) B2)
    (@expcom (wss (cuni A2) B2) (wcel B2 A2) (wceq (cuni A2) B2)
      (@unissel A2 B2))
    (@eqimss (cuni A2) B2))


/-- Relative intersection of a nonempty set. (Contributed by Stefan O'Rear, 3-Apr-2015.) (Revised by
Mario Carneiro, 5-Jun-2015.) -/
theorem rintn0 {A2 X : «class»} :
  ⊦ wi (wa (wss X (cpw A2)) (wne X c0)) (wceq (cin A2 (cint X)) (cint X)) :=
@sylib (wa (wss X (cpw A2)) (wne X c0)) (wss (cint X) A2) (wceq (cin A2 (cint X)) (cint X))
  (@sstrdi (wa (wss X (cpw A2)) (wne X c0)) (cint X) (cuni (cpw A2)) A2
    (@intssuni2 X (cpw A2))
    (@mpbi (wss (cpw A2) (cpw A2)) (wss (cuni (cpw A2)) A2)
      (@ssid (cpw A2))
      (@sspwuni (cpw A2) A2)))
  (@sseqin2 (cint X) A2)


-- /-- Extend wff notation to include the statement that a family of classes ` B ( x ) ` , for ` x
-- e. A ` , is a disjoint family. -/
-- constant wdisj : (setvar → «class») → (setvar → «class») → wff


-- /-- A collection of classes ` B ( x ) ` is disjoint when for each element ` y ` , it is in ` B (
-- x ) ` for at most one ` x ` . (Contributed by Mario Carneiro, 14-Nov-2016.) (Revised by NM,
-- 16-Jun-2017.) -/
-- axiom df_disj {A2 B2 : setvar → «class»} : ⊦ wb (wdisj (λ x3, A2 x3) (λ x3, B2 x3)) (wal (λ y, wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))


/-- Alternate definition for disjoint classes. (Contributed by NM, 17-Jun-2017.) -/
theorem dfdisj2 {A2 B2 : setvar → «class»} :
  ⊦ wb (wdisj (λ x3, A2 x3) (λ x3, B2 x3)) (wal (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))) :=
@bitri (wdisj (λ x3, A2 x3) (λ x3, B2 x3)) (wal (λ y, wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) (wal (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))))
  (@df_disj (λ x3, A2 x3) (λ x3, B2 x3))
  (@albii (λ y, wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))
    (λ y, @df_rmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))


/-- Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is disjoint. (Contributed by Mario
Carneiro, 26-Mar-2015.) (Revised by Mario Carneiro, 14-Nov-2016.) -/
theorem disjor {A2 : «class»} {B2 C : setvar → «class»}
  (disjor_1 : ∀ i j, ⊦ wi (wceq (cv i) (cv j)) (wceq (B2 i) (C j))) :
  ⊦ wb (wdisj (λ i, A2) (λ i, B2 i)) (wral (λ i, wral (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, A2)) (λ i, A2)) :=
@bitr4i (wdisj (λ i, A2) (λ i, B2 i)) (wal (λ x3, wrmo (λ i, wcel (cv x3) (B2 i)) (λ i, A2))) (wral (λ i, wral (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, A2)) (λ i, A2))
  (@df_disj (λ i, A2) (λ i, B2 i))
  (@«3bitr4i» (wral (λ i, wal (λ x3, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2))) (λ i, A2)) (wal (λ x3, wral (λ i, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2)) (λ i, A2))) (wral (λ i, wral (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, A2)) (λ i, A2)) (wal (λ x3, wrmo (λ i, wcel (cv x3) (B2 i)) (λ i, A2)))
    (@ralcom4 (λ i x3, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2)) (λ i, A2))
    (@ralbii (λ i, wral (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, A2)) (λ i, wal (λ x3, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2))) (λ i, A2)
      (λ i, @bitri (wral (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, A2)) (wral (λ j, wal (λ x3, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j)))) (λ j, A2)) (wal (λ x3, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2)))
        (@ralbii (λ j, wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (λ j, wal (λ x3, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j)))) (λ j, A2)
          (λ j, @«3bitri» (wo (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0)) (wo (wceq (cin (B2 i) (C j)) c0) (wceq (cv i) (cv j))) (wi (wn (wceq (cin (B2 i) (C j)) c0)) (wceq (cv i) (cv j))) (wal (λ x3, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))))
            (@orcom (wceq (cv i) (cv j)) (wceq (cin (B2 i) (C j)) c0))
            (@df_or (wceq (cin (B2 i) (C j)) c0) (wceq (cv i) (cv j)))
            (@bitr4i (wi (wn (wceq (cin (B2 i) (C j)) c0)) (wceq (cv i) (cv j))) (wi (wex (λ x3, wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j)))) (wceq (cv i) (cv j))) (wal (λ x3, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))))
              (@imbi1i (wn (wceq (cin (B2 i) (C j)) c0)) (wex (λ x3, wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j)))) (wceq (cv i) (cv j))
                (@bitri (wn (wceq (cin (B2 i) (C j)) c0)) (wex (λ x3, wcel (cv x3) (cin (B2 i) (C j)))) (wex (λ x3, wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))))
                  (@neq0 (cin (B2 i) (C j)))
                  (@exbii (λ x3, wcel (cv x3) (cin (B2 i) (C j))) (λ x3, wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j)))
                    (λ x3, @elin (cv x3) (B2 i) (C j)))))
              (@«19_23v» (λ x3, wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))))))
        (@ralcom4 (λ j x3, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2))))
    (@albii (λ x3, wrmo (λ i, wcel (cv x3) (B2 i)) (λ i, A2)) (λ x3, wral (λ i, wral (λ j, wi (wa (wcel (cv x3) (B2 i)) (wcel (cv x3) (C j))) (wceq (cv i) (cv j))) (λ j, A2)) (λ i, A2))
      (λ x3, @rmo4 (λ i, wcel (cv x3) (B2 i)) (λ j, wcel (cv x3) (C j)) A2
        (λ i j, @eleq2d (wceq (cv i) (cv j)) (B2 i) (C j) (cv x3)
          (disjor_1 i j)))))


/-- If there is a function ` C ( y ) ` such that ` C ( y ) = x ` for all ` y e. B ( x ) ` , then the
sets ` B ( x ) ` for distinct ` x e. A ` are disjoint. (Contributed by Mario Carneiro, 10-Dec-2016.)
-/
theorem invdisj {A2 B2 C : setvar → «class»} :
  ⊦ wi (wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (wdisj (λ x3, A2 x3) (λ x3, B2 x3)) :=
@sylibr (wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (wal (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))) (wdisj (λ x3, A2 x3) (λ x3, B2 x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (wal (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))), from
    @alrimi (λ y, wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (λ y, wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))
      (@nfra2w (λ x3 y, wceq (C y) (cv x3)) (λ x3, A2 x3) (λ x3 y, B2 x3))
      (λ y, @syl (wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))) (wceq (cv x3) (C y)))) (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))
        (@sylbi (wral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3)) (wal (λ x3, wi (wcel (cv x3) (A2 x3)) (wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)))) (wal (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))) (wceq (cv x3) (C y))))
          (@df_ral (λ x3, wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (λ x3, A2 x3))
          (@alimi (λ x3, wi (wcel (cv x3) (A2 x3)) (wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3))) (λ x3, wi (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))) (wceq (cv x3) (C y)))
            (λ x3, @impd (wi (wcel (cv x3) (A2 x3)) (wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3))) (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)) (wceq (cv x3) (C y))
              (@imim2i (wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (C y))) (wcel (cv x3) (A2 x3))
                (@syl6ib (wral (λ y, wceq (C y) (cv x3)) (λ y, B2 x3)) (wcel (cv y) (B2 x3)) (wceq (C y) (cv x3)) (wceq (cv x3) (C y))
                  (@rsp (λ y, wceq (C y) (cv x3)) (λ y, B2 x3) y)
                  (@eqcom (C y) (cv x3)))))))
        (@mo2icl (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))) (C y))) y)
  (@dfdisj2 (λ x3, A2 x3) (λ x3, B2 x3))


/-- A disjoint collection yields disjoint indexed unions for disjoint index sets. (Contributed by
Mario Carneiro, 26-Mar-2015.) (Revised by Mario Carneiro, 14-Nov-2016.) -/
theorem disjiun {A2 : «class»} {B2 : setvar → «class»} {C D : «class»} :
  ⊦ wi (wa (wdisj (λ x3, A2) (λ x3, B2 x3)) (w3a (wss C A2) (wss D A2) (wceq (cin C D) c0))) (wceq (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))) c0) :=
@sylibr (wa (wdisj (λ x3, A2) (λ x3, B2 x3)) (w3a (wss C A2) (wss D A2) (wceq (cin C D) c0))) (wal (λ y, wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))))) (wceq (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))) c0)
  (@impcom (w3a (wss C A2) (wss D A2) (wceq (cin C D) c0)) (wdisj (λ x3, A2) (λ x3, B2 x3)) (wal (λ y, wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))))))
    (@syl5bi (wdisj (λ x3, A2) (λ x3, B2 x3)) (wal (λ y, wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2))) (w3a (wss C A2) (wss D A2) (wceq (cin C D) c0)) (wal (λ y, wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))))))
      (@df_disj (λ x3, A2) (λ x3, B2 x3))
      (@alimdv (w3a (wss C A2) (wss D A2) (wceq (cin C D) c0)) (λ y, wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (λ y, wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))))
        (λ y, @«3impa» (wss C A2) (wss D A2) (wceq (cin C D) c0) (wi (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))))))
          (@impancom (wa (wss C A2) (wss D A2)) (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (wceq (cin C D) c0) (wn (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))))
            (@necon2bd (wa (wa (wss C A2) (wss D A2)) (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2))) (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))) (cin C D) c0
              (@syl5bi (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))) (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wa (wa (wss C A2) (wss D A2)) (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2))) (wne (cin C D) c0)
                (@bitri (wcel (cv y) (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))) (wa (wcel (cv y) (ciun (λ x3, C) (λ x3, B2 x3))) (wcel (cv y) (ciun (λ x3, D) (λ x3, B2 x3)))) (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))
                  (@elin (cv y) (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3)))
                  (@anbi12i (wcel (cv y) (ciun (λ x3, C) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wcel (cv y) (ciun (λ x3, D) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))
                    (@eliun (cv y) (λ x3, C) (λ x3, B2 x3))
                    (@eliun (cv y) (λ x3, D) (λ x3, B2 x3))))
                (@impcom (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (wa (wss C A2) (wss D A2)) (wi (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wne (cin C D) c0))
                  (@sylbi (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (wex (λ z, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2))) (wi (wa (wss C A2) (wss D A2)) (wi (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wne (cin C D) c0)))
                    (setvar.forget $ λ z : setvar,
                      show ⊦ wb (wrmo (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2)) (wex (λ z, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2))), from
                      @rmo2 (λ x3 z, wcel (cv y) (B2 x3)) A2
                        (λ x3, @nfv (wcel (cv y) (B2 x3))) z)
                    (@expd (wex (λ z, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2))) (wa (wss C A2) (wss D A2)) (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wne (cin C D) c0)
                      (@syl5bi (wa (wa (wss C A2) (wss D A2)) (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))) (wa (wa (wss C A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))) (wa (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))) (wex (λ z, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2))) (wne (cin C D) c0)
                        (@an4 (wss C A2) (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))
                        (@exlimiv (λ z, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wi (wa (wa (wss C A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))) (wa (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))) (wne (cin C D) c0))
                          (λ z, @syl6 (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wa (wa (wss C A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))) (wa (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)))) (wa (wcel (cv z) C) (wcel (cv z) D)) (wne (cin C D) c0)
                            (@anim12d (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wa (wss C A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))) (wcel (cv z) C) (wa (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wcel (cv z) D)
                              (@expimpd (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wss C A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wcel (cv z) C)
                                (@syl (wa (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wss C A2)) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, C)) (wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wcel (cv z) C))
                                  (@impcom (wss C A2) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, C))
                                    (@ssralv (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) C A2))
                                  (@ex (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C)) (wcel (cv z) C)
                                    (@syl (wa (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, C)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))) (wrex (λ x3, wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (λ x3, C)) (wcel (cv z) C)
                                      (@r19_29 (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, wcel (cv y) (B2 x3)) (λ x3, C))
                                      (@rexlimiv (λ x3, wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (wcel (cv z) C) (λ x3, C)
                                        (λ x3, @biimpcd (wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (wcel (cv x3) C) (wcel (cv z) C)
                                          (@eleq1d (wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (cv x3) (cv z) C
                                            (@imp (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))
                                              (@id (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))))))))))))
                              (@expimpd (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wss D A2) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)) (wcel (cv z) D)
                                (@syl (wa (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wss D A2)) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, D)) (wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)) (wcel (cv z) D))
                                  (@impcom (wss D A2) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, A2)) (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, D))
                                    (@ssralv (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) D A2))
                                  (@ex (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, D)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D)) (wcel (cv z) D)
                                    (@syl (wa (wral (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, D)) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))) (wrex (λ x3, wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (λ x3, D)) (wcel (cv z) D)
                                      (@r19_29 (λ x3, wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (λ x3, wcel (cv y) (B2 x3)) (λ x3, D))
                                      (@rexlimiv (λ x3, wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (wcel (cv z) D) (λ x3, D)
                                        (λ x3, @biimpcd (wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (wcel (cv x3) D) (wcel (cv z) D)
                                          (@eleq1d (wa (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3))) (cv x3) (cv z) D
                                            (@imp (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))) (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z))
                                              (@id (wi (wcel (cv y) (B2 x3)) (wceq (cv x3) (cv z)))))))))))))
                            (@inelcm (cv z) C D))))))))))))))
  (@eq0 (cin (ciun (λ x3, C) (λ x3, B2 x3)) (ciun (λ x3, D) (λ x3, B2 x3))))


-- /-- Extend wff notation to include the general binary relation predicate. Note that the syntax is
-- simply three class symbols in a row. Since binary relations are the only possible wff expressions
-- consisting of three class expressions in a row, the syntax is unambiguous. (For an example of how
-- syntax could become ambiguous if we are not careful, see the comment in ~ cneg .) -/
-- constant wbr : «class» → «class» → «class» → wff


-- /-- Define a general binary relation. Note that the syntax is simply three class symbols in a
-- row. Definition 6.18 of [TakeutiZaring] p. 29 generalized to arbitrary classes. Class ` R ` often
-- denotes a relation such as " ` < ` " that compares two classes ` A ` and ` B ` , which might be
-- numbers such as ` 1 ` and ` 2 ` (see ~ df-ltxr for the specific definition of ` < ` ). As a wff,
-- relations are true or false. For example, ` ( R = { <. 2 , 6 >. , <. 3 , 9 >. } -> 3 R 9 ) ` ( ~
-- ex-br ). Often class ` R ` meets the ` Rel ` criteria to be defined in ~ df-rel , and in
-- particular ` R ` may be a function (see ~ df-fun ). This definition of relations is well-defined,
-- although not very meaningful, when classes ` A ` and/or ` B ` are proper classes (i.e., are not
-- sets). On the other hand, we often find uses for this definition when ` R ` is a proper class
-- (see for example ~ iprc ). (Contributed by NM, 31-Dec-1993.) -/
-- axiom df_br {A2 B2 R : «class»} : ⊦ wb (wbr A2 B2 R) (wcel (cop A2 B2) R)


/-- Equality theorem for binary relations. (Contributed by NM, 4-Jun-1995.) -/
theorem breq {A2 B2 R S : «class»} :
  ⊦ wi (wceq R S) (wb (wbr A2 B2 R) (wbr A2 B2 S)) :=
@«3bitr4g» (wceq R S) (wcel (cop A2 B2) R) (wcel (cop A2 B2) S) (wbr A2 B2 R) (wbr A2 B2 S)
  (@eleq2 R S (cop A2 B2))
  (@df_br A2 B2 R)
  (@df_br A2 B2 S)


/-- Equality theorem for a binary relation. (Contributed by NM, 31-Dec-1993.) -/
theorem breq1 {A2 B2 C R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wbr A2 C R) (wbr B2 C R)) :=
@«3bitr4g» (wceq A2 B2) (wcel (cop A2 C) R) (wcel (cop B2 C) R) (wbr A2 C R) (wbr B2 C R)
  (@eleq1d (wceq A2 B2) (cop A2 C) (cop B2 C) R
    (@opeq1 A2 B2 C))
  (@df_br A2 C R)
  (@df_br B2 C R)


/-- Equality theorem for a binary relation. (Contributed by NM, 31-Dec-1993.) -/
theorem breq2 {A2 B2 C R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wbr C A2 R) (wbr C B2 R)) :=
@«3bitr4g» (wceq A2 B2) (wcel (cop C A2) R) (wcel (cop C B2) R) (wbr C A2 R) (wbr C B2 R)
  (@eleq1d (wceq A2 B2) (cop C A2) (cop C B2) R
    (@opeq2 A2 B2 C))
  (@df_br C A2 R)
  (@df_br C B2 R)


/-- Equality theorem for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breq12 {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wb (wbr A2 C R) (wbr B2 D R)) :=
@sylan9bb (wceq A2 B2) (wbr A2 C R) (wbr B2 C R) (wceq C D) (wbr B2 D R)
  (@breq1 A2 B2 C R)
  (@breq2 C D B2 R)


/-- Equality inference for binary relations. (Contributed by NM, 19-Feb-2005.) -/
theorem breqi {A2 B2 R S : «class»}
  (breqi_1 : ⊦ wceq R S) :
  ⊦ wb (wbr A2 B2 R) (wbr A2 B2 S) :=
@ax_mp (wceq R S) (wb (wbr A2 B2 R) (wbr A2 B2 S))
  breqi_1
  (@breq A2 B2 R S)


/-- Equality inference for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breq1i {A2 B2 C R : «class»}
  (breq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wbr A2 C R) (wbr B2 C R) :=
@ax_mp (wceq A2 B2) (wb (wbr A2 C R) (wbr B2 C R))
  breq1i_1
  (@breq1 A2 B2 C R)


/-- Equality inference for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breq2i {A2 B2 C R : «class»}
  (breq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wbr C A2 R) (wbr C B2 R) :=
@ax_mp (wceq A2 B2) (wb (wbr C A2 R) (wbr C B2 R))
  breq1i_1
  (@breq2 A2 B2 C R)


/-- Equality inference for a binary relation. (Contributed by NM, 8-Feb-1996.) (Proof shortened by
Eric Schmidt, 4-Apr-2007.) -/
theorem breq12i {A2 B2 C D R : «class»}
  (breq1i_1 : ⊦ wceq A2 B2)
  (breq12i_2 : ⊦ wceq C D) :
  ⊦ wb (wbr A2 C R) (wbr B2 D R) :=
@mp2an (wceq A2 B2) (wceq C D) (wb (wbr A2 C R) (wbr B2 D R))
  breq1i_1
  breq12i_2
  (@breq12 A2 B2 C D R)


/-- Equality deduction for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breq1d {ph : wff} {A2 B2 C R : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wbr A2 C R) (wbr B2 C R)) :=
@syl ph (wceq A2 B2) (wb (wbr A2 C R) (wbr B2 C R))
  breq1d_1
  (@breq1 A2 B2 C R)


/-- Equality deduction for a binary relation. (Contributed by NM, 29-Oct-2011.) -/
theorem breqd {ph : wff} {A2 B2 C D : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wbr C D A2) (wbr C D B2)) :=
@syl ph (wceq A2 B2) (wb (wbr C D A2) (wbr C D B2))
  breq1d_1
  (@breq C D A2 B2)


/-- Equality deduction for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breq2d {ph : wff} {A2 B2 C R : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wbr C A2 R) (wbr C B2 R)) :=
@syl ph (wceq A2 B2) (wb (wbr C A2 R) (wbr C B2 R))
  breq1d_1
  (@breq2 A2 B2 C R)


/-- Equality deduction for a binary relation. (Contributed by NM, 8-Feb-1996.) (Proof shortened by
Andrew Salmon, 9-Jul-2011.) -/
theorem breq12d {ph : wff} {A2 B2 C D R : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2))
  (breq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wb (wbr A2 C R) (wbr B2 D R)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wb (wbr A2 C R) (wbr B2 D R))
  breq1d_1
  breq12d_2
  (@breq12 A2 B2 C D R)


/-- Equality deduction for a binary relation. (Contributed by NM, 29-Oct-2011.) -/
theorem breq123d {ph : wff} {A2 B2 C D R S : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2))
  (breq123d_2 : ⊦ wi ph (wceq R S))
  (breq123d_3 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wb (wbr A2 C R) (wbr B2 D S)) :=
@bitrd ph (wbr A2 C R) (wbr B2 D R) (wbr B2 D S)
  (@breq12d ph A2 B2 C D R
    breq1d_1
    breq123d_3)
  (@breqd ph R S B2 D
    breq123d_2)


/-- Equality deduction for a binary relation. (Contributed by Thierry Arnoux, 5-Oct-2020.) -/
theorem breqdi {ph : wff} {A2 B2 C D : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2))
  (breqdi_1 : ⊦ wi ph (wbr C D A2)) :
  ⊦ wi ph (wbr C D B2) :=
@mpbid ph (wbr C D A2) (wbr C D B2)
  breqdi_1
  (@breqd ph A2 B2 C D
    breq1d_1)


/-- Equality deduction for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breqan12d {ph ps : wff} {A2 B2 C D R : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2))
  (breqan12i_2 : ⊦ wi ps (wceq C D)) :
  ⊦ wi (wa ph ps) (wb (wbr A2 C R) (wbr B2 D R)) :=
@syl2an ph (wceq A2 B2) (wceq C D) (wb (wbr A2 C R) (wbr B2 D R)) ps
  breq1d_1
  breqan12i_2
  (@breq12 A2 B2 C D R)


/-- Equality deduction for a binary relation. (Contributed by NM, 8-Feb-1996.) -/
theorem breqan12rd {ph ps : wff} {A2 B2 C D R : «class»}
  (breq1d_1 : ⊦ wi ph (wceq A2 B2))
  (breqan12i_2 : ⊦ wi ps (wceq C D)) :
  ⊦ wi (wa ps ph) (wb (wbr A2 C R) (wbr B2 D R)) :=
@ancoms ph ps (wb (wbr A2 C R) (wbr B2 D R))
  (@breqan12d ph ps A2 B2 C D R
    breq1d_1
    breqan12i_2)


/-- Substitution of equal classes into the negation of a binary relation. (Contributed by Glauco
Siliprandi, 3-Jan-2021.) -/
theorem eqnbrtrd {ph : wff} {A2 B2 C R : «class»}
  (eqnbrtrd_1 : ⊦ wi ph (wceq A2 B2))
  (eqnbrtrd_2 : ⊦ wi ph (wn (wbr B2 C R))) :
  ⊦ wi ph (wn (wbr A2 C R)) :=
@mtbird ph (wbr A2 C R) (wbr B2 C R)
  eqnbrtrd_2
  (@breq1d ph A2 B2 C R
    eqnbrtrd_1)


/-- Two classes are different if they don't have the same relationship to a third class.
(Contributed by NM, 3-Jun-2012.) -/
theorem nbrne2 {A2 B2 C R : «class»} :
  ⊦ wi (wa (wbr A2 C R) (wn (wbr B2 C R))) (wne A2 B2) :=
@imp (wbr A2 C R) (wn (wbr B2 C R)) (wne A2 B2)
  (@necon3bd (wbr A2 C R) (wbr B2 C R) A2 B2
    (@biimpcd (wceq A2 B2) (wbr A2 C R) (wbr B2 C R)
      (@breq1 A2 B2 C R)))


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 1-Aug-1999.) -/
theorem eqbrtri {A2 B2 C R : «class»}
  (eqbrtr_1 : ⊦ wceq A2 B2)
  (eqbrtr_2 : ⊦ wbr B2 C R) :
  ⊦ wbr A2 C R :=
@mpbir (wbr A2 C R) (wbr B2 C R)
  eqbrtr_2
  (@breq1i A2 B2 C R
    eqbrtr_1)


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 8-Oct-1999.) -/
theorem eqbrtrd {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrd_1 : ⊦ wi ph (wceq A2 B2))
  (eqbrtrd_2 : ⊦ wi ph (wbr B2 C R)) :
  ⊦ wi ph (wbr A2 C R) :=
@mpbird ph (wbr A2 C R) (wbr B2 C R)
  eqbrtrd_2
  (@breq1d ph A2 B2 C R
    eqbrtrd_1)


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 1-Aug-1999.) -/
theorem eqbrtrri {A2 B2 C R : «class»}
  (eqbrtrr_1 : ⊦ wceq A2 B2)
  (eqbrtrr_2 : ⊦ wbr A2 C R) :
  ⊦ wbr B2 C R :=
@eqbrtri B2 A2 C R
  (@eqcomi A2 B2
    eqbrtrr_1)
  eqbrtrr_2


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 24-Oct-1999.) -/
theorem eqbrtrrd {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrrd_1 : ⊦ wi ph (wceq A2 B2))
  (eqbrtrrd_2 : ⊦ wi ph (wbr A2 C R)) :
  ⊦ wi ph (wbr B2 C R) :=
@eqbrtrd ph B2 A2 C R
  (@eqcomd ph A2 B2
    eqbrtrrd_1)
  eqbrtrrd_2


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 1-Aug-1999.) -/
theorem breqtri {A2 B2 C R : «class»}
  (breqtr_1 : ⊦ wbr A2 B2 R)
  (breqtr_2 : ⊦ wceq B2 C) :
  ⊦ wbr A2 C R :=
@mpbi (wbr A2 B2 R) (wbr A2 C R)
  breqtr_1
  (@breq2i B2 C A2 R
    breqtr_2)


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 24-Oct-1999.) -/
theorem breqtrd {ph : wff} {A2 B2 C R : «class»}
  (breqtrd_1 : ⊦ wi ph (wbr A2 B2 R))
  (breqtrd_2 : ⊦ wi ph (wceq B2 C)) :
  ⊦ wi ph (wbr A2 C R) :=
@mpbid ph (wbr A2 B2 R) (wbr A2 C R)
  breqtrd_1
  (@breq2d ph B2 C A2 R
    breqtrd_2)


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 1-Aug-1999.) -/
theorem breqtrri {A2 B2 C R : «class»}
  (breqtrr_1 : ⊦ wbr A2 B2 R)
  (breqtrr_2 : ⊦ wceq C B2) :
  ⊦ wbr A2 C R :=
@breqtri A2 B2 C R
  breqtrr_1
  (@eqcomi C B2
    breqtrr_2)


/-- Substitution of equal classes into a binary relation. (Contributed by NM, 24-Oct-1999.) -/
theorem breqtrrd {ph : wff} {A2 B2 C R : «class»}
  (breqtrrd_1 : ⊦ wi ph (wbr A2 B2 R))
  (breqtrrd_2 : ⊦ wi ph (wceq C B2)) :
  ⊦ wi ph (wbr A2 C R) :=
@breqtrd ph A2 B2 C R
  breqtrrd_1
  (@eqcomd ph C B2
    breqtrrd_2)


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 11-Aug-1999.)
-/
theorem «3brtr3i» {A2 B2 C D R : «class»}
  («3brtr3_1» : ⊦ wbr A2 B2 R)
  («3brtr3_2» : ⊦ wceq A2 C)
  («3brtr3_3» : ⊦ wceq B2 D) :
  ⊦ wbr C D R :=
@breqtri C B2 D R
  (@eqbrtrri A2 C B2 R
    «3brtr3_2»
    «3brtr3_1»)
  «3brtr3_3»


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 11-Aug-1999.)
-/
theorem «3brtr4i» {A2 B2 C D R : «class»}
  («3brtr4_1» : ⊦ wbr A2 B2 R)
  («3brtr4_2» : ⊦ wceq C A2)
  («3brtr4_3» : ⊦ wceq D B2) :
  ⊦ wbr C D R :=
@breqtrri C B2 D R
  (@eqbrtri C A2 B2 R
    «3brtr4_2»
    «3brtr4_1»)
  «3brtr4_3»


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 18-Oct-1999.)
-/
theorem «3brtr3d» {ph : wff} {A2 B2 C D R : «class»}
  («3brtr3d_1» : ⊦ wi ph (wbr A2 B2 R))
  («3brtr3d_2» : ⊦ wi ph (wceq A2 C))
  («3brtr3d_3» : ⊦ wi ph (wceq B2 D)) :
  ⊦ wi ph (wbr C D R) :=
@mpbid ph (wbr A2 B2 R) (wbr C D R)
  «3brtr3d_1»
  (@breq12d ph A2 C B2 D R
    «3brtr3d_2»
    «3brtr3d_3»)


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 21-Feb-2005.)
-/
theorem «3brtr4d» {ph : wff} {A2 B2 C D R : «class»}
  («3brtr4d_1» : ⊦ wi ph (wbr A2 B2 R))
  («3brtr4d_2» : ⊦ wi ph (wceq C A2))
  («3brtr4d_3» : ⊦ wi ph (wceq D B2)) :
  ⊦ wi ph (wbr C D R) :=
@mpbird ph (wbr C D R) (wbr A2 B2 R)
  «3brtr4d_1»
  (@breq12d ph C A2 D B2 R
    «3brtr4d_2»
    «3brtr4d_3»)


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 16-Jan-1997.)
-/
theorem «3brtr3g» {ph : wff} {A2 B2 C D R : «class»}
  («3brtr3g_1» : ⊦ wi ph (wbr A2 B2 R))
  («3brtr3g_2» : ⊦ wceq A2 C)
  («3brtr3g_3» : ⊦ wceq B2 D) :
  ⊦ wi ph (wbr C D R) :=
@sylib ph (wbr A2 B2 R) (wbr C D R)
  «3brtr3g_1»
  (@breq12i A2 C B2 D R
    «3brtr3g_2»
    «3brtr3g_3»)


/-- Substitution of equality into both sides of a binary relation. (Contributed by NM, 16-Jan-1997.)
-/
theorem «3brtr4g» {ph : wff} {A2 B2 C D R : «class»}
  («3brtr4g_1» : ⊦ wi ph (wbr A2 B2 R))
  («3brtr4g_2» : ⊦ wceq C A2)
  («3brtr4g_3» : ⊦ wceq D B2) :
  ⊦ wi ph (wbr C D R) :=
@sylibr ph (wbr A2 B2 R) (wbr C D R)
  «3brtr4g_1»
  (@breq12i C A2 D B2 R
    «3brtr4g_2»
    «3brtr4g_3»)


/-- A chained equality inference for a binary relation. (Contributed by NM, 11-Oct-1999.) -/
theorem eqbrtrid {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrid_1 : ⊦ wceq A2 B2)
  (eqbrtrid_2 : ⊦ wi ph (wbr B2 C R)) :
  ⊦ wi ph (wbr A2 C R) :=
@«3brtr4g» ph B2 C A2 C R
  eqbrtrid_2
  eqbrtrid_1
  (@eqid C)


/-- A chained equality inference for a binary relation. (Contributed by NM, 17-Sep-2004.) -/
theorem eqbrtrrid {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrrid_1 : ⊦ wceq B2 A2)
  (eqbrtrrid_2 : ⊦ wi ph (wbr B2 C R)) :
  ⊦ wi ph (wbr A2 C R) :=
@«3brtr3g» ph B2 C A2 C R
  eqbrtrrid_2
  eqbrtrrid_1
  (@eqid C)


/-- A chained equality inference for a binary relation. (Contributed by NM, 11-Oct-1999.) -/
theorem breqtrid {ph : wff} {A2 B2 C R : «class»}
  (breqtrid_1 : ⊦ wbr A2 B2 R)
  (breqtrid_2 : ⊦ wi ph (wceq B2 C)) :
  ⊦ wi ph (wbr A2 C R) :=
@breqtrd ph A2 B2 C R
  (@a1i (wbr A2 B2 R) ph
    breqtrid_1)
  breqtrid_2


/-- A chained equality inference for a binary relation. (Contributed by NM, 24-Apr-2005.) -/
theorem breqtrrid {ph : wff} {A2 B2 C R : «class»}
  (breqtrrid_1 : ⊦ wbr A2 B2 R)
  (breqtrrid_2 : ⊦ wi ph (wceq C B2)) :
  ⊦ wi ph (wbr A2 C R) :=
@breqtrid ph A2 B2 C R
  breqtrrid_1
  (@eqcomd ph C B2
    breqtrrid_2)


/-- A chained equality inference for a binary relation. (Contributed by NM, 12-Oct-1999.) -/
theorem eqbrtrdi {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrdi_1 : ⊦ wi ph (wceq A2 B2))
  (eqbrtrdi_2 : ⊦ wbr B2 C R) :
  ⊦ wi ph (wbr A2 C R) :=
@mpbiri ph (wbr A2 C R) (wbr B2 C R)
  eqbrtrdi_2
  (@breq1d ph A2 B2 C R
    eqbrtrdi_1)


/-- A chained equality inference for a binary relation. (Contributed by NM, 4-Jan-2006.) -/
theorem eqbrtrrdi {ph : wff} {A2 B2 C R : «class»}
  (eqbrtrrdi_1 : ⊦ wi ph (wceq B2 A2))
  (eqbrtrrdi_2 : ⊦ wbr B2 C R) :
  ⊦ wi ph (wbr A2 C R) :=
@eqbrtrdi ph A2 B2 C R
  (@eqcomd ph B2 A2
    eqbrtrrdi_1)
  eqbrtrrdi_2


/-- A chained equality inference for a binary relation. (Contributed by NM, 11-Oct-1999.) -/
theorem breqtrdi {ph : wff} {A2 B2 C R : «class»}
  (breqtrdi_1 : ⊦ wi ph (wbr A2 B2 R))
  (breqtrdi_2 : ⊦ wceq B2 C) :
  ⊦ wi ph (wbr A2 C R) :=
@«3brtr3g» ph A2 B2 A2 C R
  breqtrdi_1
  (@eqid A2)
  breqtrdi_2


/-- A chained equality inference for a binary relation. (Contributed by NM, 24-Apr-2005.) -/
theorem breqtrrdi {ph : wff} {A2 B2 C R : «class»}
  (breqtrrdi_1 : ⊦ wi ph (wbr A2 B2 R))
  (breqtrrdi_2 : ⊦ wceq C B2) :
  ⊦ wi ph (wbr A2 C R) :=
@breqtrdi ph A2 B2 C R
  breqtrrdi_1
  (@eqcomi C B2
    breqtrrdi_2)


/-- Deduction from a subclass relationship of binary relations. (Contributed by NM, 30-Apr-2004.) -/
theorem ssbrd {ph : wff} {A2 B2 C D : «class»}
  (ssbrd_1 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wi (wbr C D A2) (wbr C D B2)) :=
@«3imtr4g» ph (wcel (cop C D) A2) (wcel (cop C D) B2) (wbr C D A2) (wbr C D B2)
  (@sseld ph A2 B2 (cop C D)
    ssbrd_1)
  (@df_br C D A2)
  (@df_br C D B2)


/-- Implication from a subclass relationship of binary relations. (Contributed by Peter Mazsa,
11-Nov-2019.) -/
theorem ssbr {A2 B2 C D : «class»} :
  ⊦ wi (wss A2 B2) (wi (wbr C D A2) (wbr C D B2)) :=
@ssbrd (wss A2 B2) A2 B2 C D
  (@id (wss A2 B2))


/-- Inference from a subclass relationship of binary relations. (Contributed by NM, 28-Mar-2007.)
(Revised by Mario Carneiro, 8-Feb-2015.) -/
theorem ssbri {A2 B2 C D : «class»}
  (ssbri_1 : ⊦ wss A2 B2) :
  ⊦ wi (wbr C D A2) (wbr C D B2) :=
@ax_mp (wss A2 B2) (wi (wbr C D A2) (wbr C D B2))
  ssbri_1
  (@ssbr A2 B2 C D)


/-- Deduction version of bound-variable hypothesis builder ~ nfbr . (Contributed by NM,
13-Dec-2005.) (Revised by Mario Carneiro, 14-Oct-2016.) -/
theorem nfbrd {ph : setvar → wff} {A2 B2 R : setvar → «class»}
  (nfbrd_2 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (nfbrd_3 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, R x3)))
  (nfbrd_4 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnf (λ x3, wbr (A2 x3) (B2 x3) (R x3))) :=
@nfxfrd (λ x3, wbr (A2 x3) (B2 x3) (R x3)) (λ x3, wcel (cop (A2 x3) (B2 x3)) (R x3)) (λ x3, ph x3)
  (λ x3, @df_br (A2 x3) (B2 x3) (R x3))
  (λ x3, @nfeld (λ x3, ph x3) (λ x3, cop (A2 x3) (B2 x3)) (λ x3, R x3)
    (λ x3, @nfopd (λ x3, ph x3) (λ x3, A2 x3) (λ x3, B2 x3)
      (λ x3, nfbrd_2 x3)
      (λ x3, nfbrd_4 x3) x3)
    (λ x3, nfbrd_3 x3) x3) x3


/-- Bound-variable hypothesis builder for binary relation. (Contributed by NM, 1-Sep-1999.) (Revised
by Mario Carneiro, 14-Oct-2016.) -/
theorem nfbr {A2 B2 R : setvar → «class»}
  (nfbr_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfbr_2 : ⊦ wnfc (λ x3, R x3))
  (nfbr_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wbr (A2 x3) (B2 x3) (R x3)) :=
@mptru (wnf (λ x3, wbr (A2 x3) (B2 x3) (R x3)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi wtru (wnf (λ x3, wbr (A2 x3) (B2 x3) (R x3))), from
    @nfbrd (λ x3, wtru) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, R x3)
      (λ x3, @a1i (wnfc (λ x3, A2 x3)) wtru
        nfbr_1)
      (λ x3, @a1i (wnfc (λ x3, R x3)) wtru
        nfbr_2)
      (λ x3, @a1i (wnfc (λ x3, B2 x3)) wtru
        nfbr_3) x3)


/-- The empty binary relation never holds. (Contributed by NM, 23-Aug-2018.) -/
theorem br0 {A2 B2 : «class»} :
  ⊦ wn (wbr A2 B2 c0) :=
@mtbir (wbr A2 B2 c0) (wcel (cop A2 B2) c0)
  (@noel (cop A2 B2))
  (@df_br A2 B2 c0)


/-- The union of two binary relations. (Contributed by NM, 21-Dec-2008.) -/
theorem brun {A2 B2 R S : «class»} :
  ⊦ wb (wbr A2 B2 (cun R S)) (wo (wbr A2 B2 R) (wbr A2 B2 S)) :=
@«3bitr4i» (wcel (cop A2 B2) (cun R S)) (wo (wcel (cop A2 B2) R) (wcel (cop A2 B2) S)) (wbr A2 B2 (cun R S)) (wo (wbr A2 B2 R) (wbr A2 B2 S))
  (@elun (cop A2 B2) R S)
  (@df_br A2 B2 (cun R S))
  (@orbi12i (wbr A2 B2 R) (wcel (cop A2 B2) R) (wbr A2 B2 S) (wcel (cop A2 B2) S)
    (@df_br A2 B2 R)
    (@df_br A2 B2 S))


/-- The intersection of two relations. (Contributed by FL, 7-Oct-2008.) -/
theorem brin {A2 B2 R S : «class»} :
  ⊦ wb (wbr A2 B2 (cin R S)) (wa (wbr A2 B2 R) (wbr A2 B2 S)) :=
@«3bitr4i» (wcel (cop A2 B2) (cin R S)) (wa (wcel (cop A2 B2) R) (wcel (cop A2 B2) S)) (wbr A2 B2 (cin R S)) (wa (wbr A2 B2 R) (wbr A2 B2 S))
  (@elin (cop A2 B2) R S)
  (@df_br A2 B2 (cin R S))
  (@anbi12i (wbr A2 B2 R) (wcel (cop A2 B2) R) (wbr A2 B2 S) (wcel (cop A2 B2) S)
    (@df_br A2 B2 R)
    (@df_br A2 B2 S))


/-- The difference of two binary relations. (Contributed by Scott Fenton, 11-Apr-2011.) -/
theorem brdif {A2 B2 R S : «class»} :
  ⊦ wb (wbr A2 B2 (cdif R S)) (wa (wbr A2 B2 R) (wn (wbr A2 B2 S))) :=
@«3bitr4i» (wcel (cop A2 B2) (cdif R S)) (wa (wcel (cop A2 B2) R) (wn (wcel (cop A2 B2) S))) (wbr A2 B2 (cdif R S)) (wa (wbr A2 B2 R) (wn (wbr A2 B2 S)))
  (@eldif (cop A2 B2) R S)
  (@df_br A2 B2 (cdif R S))
  (@anbi12i (wbr A2 B2 R) (wcel (cop A2 B2) R) (wn (wbr A2 B2 S)) (wn (wcel (cop A2 B2) S))
    (@df_br A2 B2 R)
    (@notbii (wbr A2 B2 S) (wcel (cop A2 B2) S)
      (@df_br A2 B2 S)))


/-- Move substitution in and out of a binary relation. (Contributed by NM, 13-Dec-2005.) (Revised by
NM, 22-Aug-2018.) -/
theorem sbcbr123 {A2 B2 C R : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wsbc (λ x3, wbr (B2 x3) (C x3) (R x3)) (A2 x3)) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3))) :=
@pm5_21nii (wsbc (λ x3, wbr (B2 x3) (C x3) (R x3)) (A2 x3)) (wcel (A2 x3) cvv) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3)))
  (@sbcex (λ x3, wbr (B2 x3) (C x3) (R x3)) (λ x3, A2 x3) x3)
  (@con4i (wcel (A2 x3) cvv) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3)))
    (@mtbiri (wn (wcel (A2 x3) cvv)) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3))) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) c0)
      (@br0 (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)))
      (@breqd (wn (wcel (A2 x3) cvv)) (csb (A2 x3) (λ x3, R x3)) c0 (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3))
        (@csbprc (λ x3, A2 x3) (λ x3, R x3) x3))))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel (A2 x3) cvv) (wb (wsbc (λ x3, wbr (B2 x3) (C x3) (R x3)) (A2 x3)) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3)))), from
    @vtoclbg (λ y, wsb (λ x3, wbr (B2 x3) (C x3) (R x3)) y) (λ y, wbr (csb (cv y) (λ x3, B2 x3)) (csb (cv y) (λ x3, C x3)) (csb (cv y) (λ x3, R x3))) (wsbc (λ x3, wbr (B2 x3) (C x3) (R x3)) (A2 x3)) (wbr (csb (A2 x3) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, C x3)) (csb (A2 x3) (λ x3, R x3))) (A2 x3) (λ y, cvv)
      (λ y, @dfsbcq2 (λ x3, wbr (B2 x3) (C x3) (R x3)) y (λ x3, A2 x3) x3)
      (λ y, @breq123d (wceq (cv y) (A2 x3)) (csb (cv y) (λ x3, B2 x3)) (csb (A2 x3) (λ x3, B2 x3)) (csb (cv y) (λ x3, C x3)) (csb (A2 x3) (λ x3, C x3)) (csb (cv y) (λ x3, R x3)) (csb (A2 x3) (λ x3, R x3))
        (@csbeq1 (λ x3, cv y) (λ x3, A2 x3) (λ x3, B2 x3) x3)
        (@csbeq1 (λ x3, cv y) (λ x3, A2 x3) (λ x3, R x3) x3)
        (@csbeq1 (λ x3, cv y) (λ x3, A2 x3) (λ x3, C x3) x3))
      (λ y, setvar.forget $ λ x3 : setvar,
        show ⊦ wb (wsb (λ x3, wbr (B2 x3) (C x3) (R x3)) y) (wbr (csb (cv y) (λ x3, B2 x3)) (csb (cv y) (λ x3, C x3)) (csb (cv y) (λ x3, R x3))), from
        @sbiev (λ x3 y, wbr (B2 x3) (C x3) (R x3)) (λ x3 y, wbr (csb (cv y) (λ x3, B2 x3)) (csb (cv y) (λ x3, C x3)) (csb (cv y) (λ x3, R x3)))
          (λ y, @nfbr (λ x3, csb (cv y) (λ x3, B2 x3)) (λ x3, csb (cv y) (λ x3, C x3)) (λ x3, csb (cv y) (λ x3, R x3))
            (@nfcsb1v (cv y) (λ x3, B2 x3))
            (@nfcsb1v (cv y) (λ x3, R x3))
            (@nfcsb1v (cv y) (λ x3, C x3)))
          (λ x3 y, @breq123d (wceq (cv x3) (cv y)) (B2 x3) (csb (cv y) (λ x3, B2 x3)) (C x3) (csb (cv y) (λ x3, C x3)) (R x3) (csb (cv y) (λ x3, R x3))
            (@csbeq1a (λ x3, cv y) (λ x3, B2 x3) x3)
            (@csbeq1a (λ x3, cv y) (λ x3, R x3) x3)
            (@csbeq1a (λ x3, cv y) (λ x3, C x3) x3)) x3 y) y)


/-- Restricted existential specialization with a restricted universal quantifier over a relation,
closed form. (Contributed by AV, 20-Aug-2022.) -/
theorem brralrspcev {A2 : setvar → «class»} {B2 : «class»} {R X Y : setvar → «class»}
  (y : setvar) : ⊦ wi (wa (wcel B2 (X y)) (wral (λ y, wbr (A2 y) B2 (R y)) (λ y, Y y))) (wrex (λ x3, wral (λ y, wbr (A2 y) (cv x3) (R y)) (λ y, Y y)) (λ x3, X y)) :=
@rspcev (λ x3, wral (λ y, wbr (A2 y) (cv x3) (R y)) (λ y, Y y)) (wral (λ y, wbr (A2 y) B2 (R y)) (λ y, Y y)) B2 (X y)
  (λ x3, @ralbidv (wceq (cv x3) B2) (λ y, wbr (A2 y) (cv x3) (R y)) (λ y, wbr (A2 y) B2 (R y)) (λ y, Y y)
    (λ y, @breq2 (cv x3) B2 (A2 y) (R y)))


/-- Restricted existential specialization with a restricted universal quantifier over an implication
with a relation in the antecedent, closed form. (Contributed by AV, 20-Aug-2022.) -/
theorem brimralrspcev {ph ps : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {R X Y : setvar → «class»}
  (y : setvar) : ⊦ wi (wa (wcel B2 (X y)) (wral (λ y, wi (wa (ph y) (wbr (A2 y) B2 (R y))) (ps y)) (λ y, Y y))) (wrex (λ x3, wral (λ y, wi (wa (ph y) (wbr (A2 y) (cv x3) (R y))) (ps y)) (λ y, Y y)) (λ x3, X y)) :=
@rspceaimv (λ x3 y, wa (ph y) (wbr (A2 y) (cv x3) (R y))) (λ y, wa (ph y) (wbr (A2 y) B2 (R y))) (λ y, ps y) B2 (λ y, X y) (λ y, Y y)
  (λ x3 y, @anbi2d (wceq (cv x3) B2) (wbr (A2 y) (cv x3) (R y)) (wbr (A2 y) B2 (R y)) (ph y)
    (@breq2 (cv x3) B2 (A2 y) (R y))) y


-- /-- Extend class notation to include ordered-pair class abstraction (class builder). -/
-- constant copab : (setvar → setvar → wff) → «class»


-- /-- Define the class abstraction of a collection of ordered pairs. Definition 3.3 of [Monk1] p.
-- 34. Usually ` x ` and ` y ` are distinct, although the definition does not require it (see ~
-- dfid2 for a case where they are not distinct). The brace notation is called "class abstraction"
-- by Quine; it is also called "class builder" in the literature. An alternate definition using no
-- existential quantifiers is shown by ~ dfopab2 . An example is given by ~ ex-opab . (Contributed
-- by NM, 4-Jul-1994.) -/
-- axiom df_opab {ph : setvar → setvar → wff} : ⊦ wceq (copab (λ x3 y, ph x3 y)) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))


-- /-- Define the class abstraction of a collection of ordered pairs. Definition 3.3 of [Monk1] p.
-- 34. Usually ` x ` and ` y ` are distinct, although the definition does not require it (see ~
-- dfid2 for a case where they are not distinct). The brace notation is called "class abstraction"
-- by Quine; it is also called "class builder" in the literature. An alternate definition using no
-- existential quantifiers is shown by ~ dfopab2 . An example is given by ~ ex-opab . (Contributed
-- by NM, 4-Jul-1994.) -/
-- axiom df_opab_b {ph : setvar → wff} : ⊦ wceq (copab (λ x3 x3, ph x3)) (cab (λ z, wex (λ x3, wex (λ x3, wa (wceq (cv z) (cop (cv x3) (cv x3))) (ph x3)))))


/-- Equivalent wff's yield equal ordered-pair class abstractions (deduction form). (Contributed by
NM, 21-Feb-2004.) (Proof shortened by Andrew Salmon, 9-Jul-2011.) -/
theorem opabbid {ph ps ch : setvar → setvar → wff}
  (opabbid_1 : ∀ y, ⊦ wnf (λ x3, ph x3 y))
  (opabbid_2 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (opabbid_3 : ∀ x3 y, ⊦ wi (ph x3 y) (wb (ps x3 y) (ch x3 y)))
  (x3 y : setvar) : ⊦ wi (ph x3 y) (wceq (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y))) :=
@«3eqtr4g» (ph x3 y) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))))) (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y))
  (@abbidv (ph x3 y) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))))
    (λ z, @exbid (λ x3, ph x3 y) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y)))
      (opabbid_1 y)
      (λ x3, @exbid (λ y, ph x3 y) (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)) (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))
        (opabbid_2 x3)
        (λ y, @anbi2d (ph x3 y) (ps x3 y) (ch x3 y) (wceq (cv z) (cop (cv x3) (cv y)))
          (opabbid_3 x3 y)) y) x3))
  (@df_opab (λ x3 y, ps x3 y))
  (@df_opab (λ x3 y, ch x3 y))


/-- Equivalent wff's yield equal ordered-pair class abstractions (deduction form). (Contributed by
NM, 15-May-1995.) -/
theorem opabbidv {ph : wff} {ps ch : setvar → setvar → wff}
  (opabbidv_1 : ∀ x3 y, ⊦ wi ph (wb (ps x3 y) (ch x3 y))) :
  ⊦ wi ph (wceq (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y))) :=
@«3eqtr4g» ph (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))))) (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y))
  (@abbidv ph (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))))
    (λ z, @«2exbidv» ph (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)) (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ch x3 y))
      (λ x3 y, @anbi2d ph (ps x3 y) (ch x3 y) (wceq (cv z) (cop (cv x3) (cv y)))
        (opabbidv_1 x3 y))))
  (@df_opab (λ x3 y, ps x3 y))
  (@df_opab (λ x3 y, ch x3 y))


/-- Equivalent wff's yield equal class abstractions. (Contributed by NM, 15-May-1995.) -/
theorem opabbii {ph ps : setvar → setvar → wff}
  (opabbii_1 : ∀ x3 y, ⊦ wb (ph x3 y) (ps x3 y)) :
  ⊦ wceq (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)) :=
setvar.forget $ λ z : setvar,
  show ⊦ wceq (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)), from
  @ax_mp (wceq (cv z) (cv z)) (wceq (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)))
    (@eqid (cv z))
    (@opabbidv (wceq (cv z) (cv z)) (λ x3 y, ph x3 y) (λ x3 y, ps x3 y)
      (λ x3 y, @a1i (wb (ph x3 y) (ps x3 y)) (wceq (cv z) (cv z))
        (opabbii_1 x3 y)))


/-- Bound-variable hypothesis builder for class abstraction. (Contributed by NM, 1-Sep-1999.) Remove
disjoint variable conditions. (Revised by Andrew Salmon, 11-Jul-2011.) -/
theorem nfopab {ph : setvar → setvar → setvar → wff}
  (nfopab_1 : ∀ x3 y, ⊦ wnf (λ z, ph x3 y z)) :
  ⊦ wnfc (λ z, copab (λ x3 y, ph x3 y z)) :=
@nfcxfr (λ z, copab (λ x3 y, ph x3 y z)) (λ z, cab (λ w, wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)))))
  (λ z, @df_opab (λ x3 y, ph x3 y z))
  (@nfab (λ z w, wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z))))
    (λ w, @nfex (λ z x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)))
      (λ x3, @nfex (λ z y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z))
        (λ y, @nfan (λ z, wceq (cv w) (cop (cv x3) (cv y))) (λ z, ph x3 y z)
          (@nfv (wceq (cv w) (cop (cv x3) (cv y))))
          (nfopab_1 x3 y)))))


/-- The first abstraction variable in an ordered-pair class abstraction is effectively not free.
(Contributed by NM, 16-May-1995.) (Revised by Mario Carneiro, 14-Oct-2016.) -/
theorem nfopab1 {ph : setvar → setvar → wff} :
  ⊦ wnfc (λ x3, copab (λ x3 y, ph x3 y)) :=
@nfcxfr (λ x3, copab (λ x3 y, ph x3 y)) (λ x3, cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))
  (λ x3, @df_opab (λ x3 y, ph x3 y))
  (@nfab (λ x3 z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))
    (λ z, @nfe1 (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))


/-- The second abstraction variable in an ordered-pair class abstraction is effectively not free.
(Contributed by NM, 16-May-1995.) (Revised by Mario Carneiro, 14-Oct-2016.) -/
theorem nfopab2 {ph : setvar → setvar → wff} :
  ⊦ wnfc (λ y, copab (λ x3 y, ph x3 y)) :=
@nfcxfr (λ y, copab (λ x3 y, ph x3 y)) (λ y, cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))
  (λ y, @df_opab (λ x3 y, ph x3 y))
  (@nfab (λ y z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))
    (λ z, @nfex (λ y x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))
      (λ x3, @nfe1 (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))


/-- Rule used to change bound variables in an ordered-pair class abstraction, using implicit
substitution. (Contributed by NM, 14-Sep-2003.) -/
theorem cbvopab {ph ps : setvar → setvar → setvar → setvar → wff}
  (cbvopab_1 : ∀ x3 y w, ⊦ wnf (λ z, ph x3 y z w))
  (cbvopab_2 : ∀ x3 y z, ⊦ wnf (λ w, ph x3 y z w))
  (cbvopab_3 : ∀ y z w, ⊦ wnf (λ x3, ps x3 y z w))
  (cbvopab_4 : ∀ x3 z w, ⊦ wnf (λ y, ps x3 y z w))
  (cbvopab_5 : ∀ x3 y z w, ⊦ wi (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (wb (ph x3 y z w) (ps x3 y z w)))
  (x3 y z w : setvar) : ⊦ wceq (copab (λ x3 y, ph x3 y z w)) (copab (λ z w, ps x3 y z w)) :=
@«3eqtr4i» (cab (λ v, wex (λ x3, wex (λ y, wa (wceq (cv v) (cop (cv x3) (cv y))) (ph x3 y z w))))) (cab (λ v, wex (λ z, wex (λ w, wa (wceq (cv v) (cop (cv z) (cv w))) (ps x3 y z w))))) (copab (λ x3 y, ph x3 y z w)) (copab (λ z w, ps x3 y z w))
  (@abbii (λ v, wex (λ x3, wex (λ y, wa (wceq (cv v) (cop (cv x3) (cv y))) (ph x3 y z w)))) (λ v, wex (λ z, wex (λ w, wa (wceq (cv v) (cop (cv z) (cv w))) (ps x3 y z w))))
    (λ v, @cbvex2v (λ x3 y z w, wa (wceq (cv v) (cop (cv x3) (cv y))) (ph x3 y z w)) (λ x3 y z w, wa (wceq (cv v) (cop (cv z) (cv w))) (ps x3 y z w))
      (λ x3 y w, @nfan (λ z, wceq (cv v) (cop (cv x3) (cv y))) (λ z, ph x3 y z w)
        (@nfv (wceq (cv v) (cop (cv x3) (cv y))))
        (cbvopab_1 x3 y w))
      (λ x3 y z, @nfan (λ w, wceq (cv v) (cop (cv x3) (cv y))) (λ w, ph x3 y z w)
        (@nfv (wceq (cv v) (cop (cv x3) (cv y))))
        (cbvopab_2 x3 y z))
      (λ y z w, @nfan (λ x3, wceq (cv v) (cop (cv z) (cv w))) (λ x3, ps x3 y z w)
        (@nfv (wceq (cv v) (cop (cv z) (cv w))))
        (cbvopab_3 y z w))
      (λ x3 z w, @nfan (λ y, wceq (cv v) (cop (cv z) (cv w))) (λ y, ps x3 y z w)
        (@nfv (wceq (cv v) (cop (cv z) (cv w))))
        (cbvopab_4 x3 z w))
      (λ x3 y z w, @anbi12d (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (wceq (cv v) (cop (cv x3) (cv y))) (wceq (cv v) (cop (cv z) (cv w))) (ph x3 y z w) (ps x3 y z w)
        (@eqeq2d (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (cop (cv x3) (cv y)) (cop (cv z) (cv w)) (cv v)
          (@opeq12 (cv x3) (cv y) (cv z) (cv w)))
        (cbvopab_5 x3 y z w)) x3 y z w))
  (@df_opab (λ x3 y, ph x3 y z w))
  (@df_opab (λ z w, ps x3 y z w))


/-- Rule used to change bound variables in an ordered-pair class abstraction, using implicit
substitution. (Contributed by NM, 15-Oct-1996.) -/
theorem cbvopabv {ph ps : setvar → setvar → wff}
  (cbvopabv_1 : ∀ x3 y z w, ⊦ wi (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (wb (ph x3 y) (ps z w))) :
  ⊦ wceq (copab (λ x3 y, ph x3 y)) (copab (λ z w, ps z w)) :=
setvar.forget $ λ w : setvar,
  setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  setvar.forget $ λ z : setvar,
  show ⊦ wceq (copab (λ x3 y, ph x3 y)) (copab (λ z w, ps z w)), from
  @cbvopab (λ x3 y z w, ph x3 y) (λ x3 y z w, ps z w)
    (λ x3 y w, @nfv (ph x3 y))
    (λ x3 y z, @nfv (ph x3 y))
    (λ y z w, @nfv (ps z w))
    (λ x3 z w, @nfv (ps z w))
    (λ x3 y z w, cbvopabv_1 x3 y z w) x3 y z w


/-- Change first bound variable in an ordered-pair class abstraction, using explicit substitution.
(Contributed by NM, 6-Oct-2004.) (Revised by Mario Carneiro, 14-Oct-2016.) Add disjoint variable
condition to avoid ~ ax-13 . See ~ cbvopab1g for a less restrictive version requiring more axioms.
(Revised by Gino Giotto, 17-Jan-2024.) -/
theorem cbvopab1 {ph ps : setvar → setvar → setvar → wff}
  (cbvopab1_1 : ∀ x3 y, ⊦ wnf (λ z, ph x3 y z))
  (cbvopab1_2 : ∀ y z, ⊦ wnf (λ x3, ps x3 y z))
  (cbvopab1_3 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cv z)) (wb (ph x3 y z) (ps x3 y z)))
  (x3 z : setvar) : ⊦ wceq (copab (λ x3 y, ph x3 y z)) (copab (λ z y, ps x3 y z)) :=
@«3eqtr4i» (cab (λ w, wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z))))) (cab (λ w, wex (λ z, wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z))))) (copab (λ x3 y, ph x3 y z)) (copab (λ z y, ps x3 y z))
  (@abbii (λ w, wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)))) (λ w, wex (λ z, wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z))))
    (λ w, @bitri (wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)))) (wex (λ v, wex (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v)))) (wex (λ z, wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z))))
      (setvar.forget $ λ v : setvar,
        setvar.forget $ λ x3 : setvar,
        show ⊦ wb (wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)))) (wex (λ v, wex (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v)))), from
        @cbvexv1 (λ x3 v, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z))) (λ x3 v, wex (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v)))
          (λ x3, @nfv (wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z))))
          (λ v, @nfex (λ x3 y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v))
            (λ y, @nfan (λ x3, wceq (cv w) (cop (cv v) (cv y))) (λ x3, wsb (λ x3, ph x3 y z) v)
              (@nfv (wceq (cv w) (cop (cv v) (cv y))))
              (@nfs1v (λ x3 v, ph x3 y z) v)))
          (λ x3 v, @exbidv (wceq (cv x3) (cv v)) (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y z)) (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v))
            (λ y, @anbi12d (wceq (cv x3) (cv v)) (wceq (cv w) (cop (cv x3) (cv y))) (wceq (cv w) (cop (cv v) (cv y))) (ph x3 y z) (wsb (λ x3, ph x3 y z) v)
              (@eqeq2d (wceq (cv x3) (cv v)) (cop (cv x3) (cv y)) (cop (cv v) (cv y)) (cv w)
                (@opeq1 (cv x3) (cv v) (cv y)))
              (@sbequ12 (λ x3 v, ph x3 y z) x3 v))) x3 v)
      (setvar.forget $ λ v : setvar,
        show ⊦ wb (wex (λ v, wex (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v)))) (wex (λ z, wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z)))), from
        @cbvexv1 (λ v z, wex (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v))) (λ v z, wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z)))
          (λ v, @nfex (λ z y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v))
            (λ y, @nfan (λ z, wceq (cv w) (cop (cv v) (cv y))) (λ z, wsb (λ x3, ph x3 y z) v)
              (@nfv (wceq (cv w) (cop (cv v) (cv y))))
              (@nfsbv (λ x3 z, ph x3 y z) v
                (λ x3, cbvopab1_1 x3 y))))
          (λ z, @nfv (wex (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z))))
          (λ v z, @exbidv (wceq (cv v) (cv z)) (λ y, wa (wceq (cv w) (cop (cv v) (cv y))) (wsb (λ x3, ph x3 y z) v)) (λ y, wa (wceq (cv w) (cop (cv z) (cv y))) (ps x3 y z))
            (λ y, @anbi12d (wceq (cv v) (cv z)) (wceq (cv w) (cop (cv v) (cv y))) (wceq (cv w) (cop (cv z) (cv y))) (wsb (λ x3, ph x3 y z) v) (ps x3 y z)
              (@eqeq2d (wceq (cv v) (cv z)) (cop (cv v) (cv y)) (cop (cv z) (cv y)) (cv w)
                (@opeq1 (cv v) (cv z) (cv y)))
              (@sbhypf (λ x3 v, ph x3 y z) (λ x3 v, ps x3 y z) (λ v, cv z)
                (λ v, cbvopab1_2 y z)
                (λ x3 v, cbvopab1_3 x3 y z) x3 v))) v z)))
  (@df_opab (λ x3 y, ph x3 y z))
  (@df_opab (λ z y, ps x3 y z))


/-- Union of two ordered pair class abstractions. (Contributed by NM, 30-Sep-2002.) -/
theorem unopab {ph ps : setvar → setvar → wff} :
  ⊦ wceq (cun (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (copab (λ x3 y, wo (ph x3 y) (ps x3 y))) :=
@«3eqtr4i» (cun (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y)))))) (cun (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (copab (λ x3 y, wo (ph x3 y) (ps x3 y)))
  (@eqtri (cun (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))))) (cab (λ z, wo (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y))))))
    (@unab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))))
    (@abbii (λ z, wo (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y)))))
      (λ z, @bitr3i (wo (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (wex (λ x3, wo (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y)))))
        (@«19_43» (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))
        (@exbii (λ x3, wo (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y))))
          (λ x3, @bitr2i (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y)))) (wex (λ y, wo (wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))) (wo (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))
            (@exbii (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wo (ph x3 y) (ps x3 y))) (λ y, wo (wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))
              (λ y, @andi (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y) (ps x3 y)))
            (@«19_43» (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))))))
  (@uneq12i (copab (λ x3 y, ph x3 y)) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (copab (λ x3 y, ps x3 y)) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))))
    (@df_opab (λ x3 y, ph x3 y))
    (@df_opab (λ x3 y, ps x3 y)))
  (@df_opab (λ x3 y, wo (ph x3 y) (ps x3 y)))


-- /-- Extend the definition of a class to include maps-to notation for defining a function via a
-- rule. -/
-- constant cmpt : (setvar → «class») → (setvar → «class») → «class»


-- /-- Define maps-to notation for defining a function via a rule. Read as "the function which maps
-- ` x ` (in ` A ` ) to ` B ( x ) ` ". The class expression ` B ` is the value of the function at `
-- x ` and normally contains the variable ` x ` . An example is the square function for complex
-- numbers, ` ( x e. CC |-> ( x ^ 2 ) ) ` . Similar to the definition of mapping in [ChoquetDD] p.
-- 2. (Contributed by NM, 17-Feb-2008.) -/
-- axiom df_mpt {A2 B2 : setvar → «class»} : ⊦ wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))


/-- An equality inference for the maps-to notation. Compare ~ mpteq12dv . (Contributed by Scott
Fenton, 8-Aug-2013.) (Revised by Mario Carneiro, 11-Dec-2016.) -/
theorem mpteq12df {ph : setvar → wff} {A2 B2 C D : setvar → «class»}
  (mpteq12df_1 : ⊦ wnf (λ x3, ph x3))
  (mpteq12df_2 : ∀ x3, ⊦ wi (ph x3) (wceq (A2 x3) (C x3)))
  (mpteq12df_3 : ∀ x3, ⊦ wi (ph x3) (wceq (B2 x3) (D x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))) :=
@«3eqtr4g» (ph x3) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (copab (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3)))) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (ph x3) (wceq (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (copab (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3))))), from
    @opabbid (λ x3 y, ph x3) (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3)))
      (λ y, mpteq12df_1)
      (λ x3, @nfv (ph x3))
      (λ x3 y, @anbi12d (ph x3) (wcel (cv x3) (A2 x3)) (wcel (cv x3) (C x3)) (wceq (cv y) (B2 x3)) (wceq (cv y) (D x3))
        (@eleq2d (ph x3) (A2 x3) (C x3) (cv x3)
          (mpteq12df_2 x3))
        (@eqeq2d (ph x3) (B2 x3) (D x3) (cv y)
          (mpteq12df_3 x3))) x3 y)
  (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@df_mpt (λ x3, C x3) (λ x3, D x3))


/-- An equality theorem for the maps-to notation. (Contributed by Mario Carneiro, 16-Dec-2013.) -/
theorem mpteq12f {A2 B2 C D : setvar → «class»} :
  ⊦ wi (wa (wal (λ x3, wceq (A2 x3) (C x3))) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))) (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))) :=
@«3eqtr4g» (wa (wal (λ x3, wceq (A2 x3) (C x3))) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (copab (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3)))) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wa (wal (λ x3, wceq (A2 x3) (C x3))) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))) (wceq (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (copab (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3))))), from
    @opabbid (λ x3 y, wa (wal (λ x3, wceq (A2 x3) (C x3))) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))) (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (λ x3 y, wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3)))
      (λ y, @nfan (λ x3, wal (λ x3, wceq (A2 x3) (C x3))) (λ x3, wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))
        (@nfa1 (λ x3, wceq (A2 x3) (C x3)))
        (@nfra1 (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3)))
      (λ x3, @nfv (wa (wal (λ x3, wceq (A2 x3) (C x3))) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3))))
      (λ x3 y, @sylan9bbr (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3)) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (D x3))) (wal (λ x3, wceq (A2 x3) (C x3))) (wa (wcel (cv x3) (C x3)) (wceq (cv y) (D x3)))
        (@pm5_32da (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3)) (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)) (wceq (cv y) (D x3))
          (@eqeq2d (wa (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3)) (wcel (cv x3) (A2 x3))) (B2 x3) (D x3) (cv y)
            (@rspa (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2 x3) x3)))
        (@anbi1d (wal (λ x3, wceq (A2 x3) (C x3))) (wcel (cv x3) (A2 x3)) (wcel (cv x3) (C x3)) (wceq (cv y) (D x3))
          (@eleq2d (wal (λ x3, wceq (A2 x3) (C x3))) (A2 x3) (C x3) (cv x3)
            (@sp (λ x3, wceq (A2 x3) (C x3)) x3)))) x3 y)
  (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@df_mpt (λ x3, C x3) (λ x3, D x3))


/-- An equality inference for the maps-to notation. (Contributed by NM, 24-Aug-2011.) (Revised by
Mario Carneiro, 16-Dec-2013.) Drop ~ ax-10 while shortening its proof. (Revised by Steven Nguyen and
Gino Giotto, 1-Dec-2023.) -/
theorem mpteq12dv {ph : wff} {A2 B2 C D : setvar → «class»}
  (mpteq12dv_1 : ∀ x3, ⊦ wi ph (wceq (A2 x3) (C x3)))
  (mpteq12dv_2 : ∀ x3, ⊦ wi ph (wceq (B2 x3) (D x3))) :
  ⊦ wi ph (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi ph (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, C x3) (λ x3, D x3))), from
  @mpteq12df (λ x3, ph) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3) (λ x3, D x3)
    (@nfv ph)
    (λ x3, mpteq12dv_1 x3)
    (λ x3, mpteq12dv_2 x3) x3


/-- An equality theorem for the maps-to notation. (Contributed by NM, 16-Dec-2013.) -/
theorem mpteq12 {A2 : «class»} {B2 : setvar → «class»} {C : «class»} {D : setvar → «class»} :
  ⊦ wi (wa (wceq A2 C) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2))) (wceq (cmpt (λ x3, A2) (λ x3, B2 x3)) (cmpt (λ x3, C) (λ x3, D x3))) :=
@sylan (wceq A2 C) (wal (λ x3, wceq A2 C)) (wral (λ x3, wceq (B2 x3) (D x3)) (λ x3, A2)) (wceq (cmpt (λ x3, A2) (λ x3, B2 x3)) (cmpt (λ x3, C) (λ x3, D x3)))
  (@ax_5 (wceq A2 C))
  (@mpteq12f (λ x3, A2) (λ x3, B2 x3) (λ x3, C) (λ x3, D x3))


/-- An equality theorem for the maps-to notation. (Contributed by Mario Carneiro, 16-Dec-2013.) -/
theorem mpteq1 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3))) :=
@mpan2 (wceq A2 B2) (wral (λ x3, wceq (C x3) (C x3)) (λ x3, A2)) (wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3)))
  (@rgen (λ x3, wceq (C x3) (C x3)) (λ x3, A2)
    (λ x3, @eqidd (wcel (cv x3) A2) (C x3)))
  (@mpteq12 A2 (λ x3, C x3) B2 (λ x3, C x3))


/-- An equality theorem for the maps-to notation. (Contributed by Mario Carneiro, 11-Jun-2016.) -/
theorem mpteq1d {ph : setvar → wff} {A2 B2 : «class»} {C : setvar → «class»}
  (mpteq1d_1 : ∀ x3, ⊦ wi (ph x3) (wceq A2 B2))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3))) :=
@syl (ph x3) (wceq A2 B2) (wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3)))
  (mpteq1d_1 x3)
  (@mpteq1 A2 B2 (λ x3, C x3))


/-- An equality theorem for the maps-to notation. (Contributed by Glauco Siliprandi, 17-Aug-2020.)
-/
theorem mpteq1i {A2 B2 : «class»} {C : setvar → «class»}
  (mpteq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3)) :=
@ax_mp (wceq A2 B2) (wceq (cmpt (λ x3, A2) (λ x3, C x3)) (cmpt (λ x3, B2) (λ x3, C x3)))
  mpteq1i_1
  (@mpteq1 A2 B2 (λ x3, C x3))


/-- An equality inference for the maps-to notation. (Contributed by Mario Carneiro, 16-Dec-2013.) -/
theorem mpteq2ia {A2 B2 C : setvar → «class»}
  (mpteq2ia_1 : ∀ x3, ⊦ wi (wcel (cv x3) (A2 x3)) (wceq (B2 x3) (C x3))) :
  ⊦ wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3)) :=
@mp2an (wal (λ x3, wceq (A2 x3) (A2 x3))) (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3)))
  (@ax_gen (λ x3, wceq (A2 x3) (A2 x3))
    (λ x3, @eqid (A2 x3)))
  (@rgen (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)
    (λ x3, mpteq2ia_1 x3))
  (@mpteq12f (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, A2 x3) (λ x3, C x3))


/-- An equality inference for the maps-to notation. (Contributed by Mario Carneiro, 16-Dec-2013.) -/
theorem mpteq2i {A2 B2 C : setvar → «class»}
  (mpteq2i_1 : ∀ x3, ⊦ wceq (B2 x3) (C x3)) :
  ⊦ wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3)) :=
@mpteq2ia (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
  (λ x3, @a1i (wceq (B2 x3) (C x3)) (wcel (cv x3) (A2 x3))
    (mpteq2i_1 x3))


/-- Slightly more general equality inference for the maps-to notation. (Contributed by FL,
14-Sep-2013.) (Revised by Mario Carneiro, 16-Dec-2013.) -/
theorem mpteq2da {ph : setvar → wff} {A2 B2 C : setvar → «class»}
  (mpteq2da_1 : ⊦ wnf (λ x3, ph x3))
  (mpteq2da_2 : ∀ x3, ⊦ wi (wa (ph x3) (wcel (cv x3) (A2 x3))) (wceq (B2 x3) (C x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3))) :=
@sylancr (ph x3) (wal (λ x3, wceq (A2 x3) (A2 x3))) (wral (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3)))
  (@ax_gen (λ x3, wceq (A2 x3) (A2 x3))
    (λ x3, @eqid (A2 x3)))
  (@ralrimi (λ x3, ph x3) (λ x3, wceq (B2 x3) (C x3)) (λ x3, A2 x3)
    mpteq2da_1
    (λ x3, @ex (ph x3) (wcel (cv x3) (A2 x3)) (wceq (B2 x3) (C x3))
      (mpteq2da_2 x3)) x3)
  (@mpteq12f (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, A2 x3) (λ x3, C x3))


/-- Slightly more general equality inference for the maps-to notation. (Contributed by Scott Fenton,
25-Apr-2012.) -/
theorem mpteq2dva {ph : wff} {A2 B2 C : setvar → «class»}
  (mpteq2dva_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) (A2 x3))) (wceq (B2 x3) (C x3))) :
  ⊦ wi ph (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi ph (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3))), from
  @mpteq2da (λ x3, ph) (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
    (@nfv ph)
    (λ x3, mpteq2dva_1 x3) x3


/-- An equality inference for the maps-to notation. (Contributed by Mario Carneiro, 23-Aug-2014.) -/
theorem mpteq2dv {ph : wff} {A2 B2 C : setvar → «class»}
  (mpteq2dv_1 : ∀ x3, ⊦ wi ph (wceq (B2 x3) (C x3))) :
  ⊦ wi ph (wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (cmpt (λ x3, A2 x3) (λ x3, C x3))) :=
@mpteq2dva ph (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, C x3)
  (λ x3, @adantr ph (wceq (B2 x3) (C x3)) (wcel (cv x3) (A2 x3))
    (mpteq2dv_1 x3))


/-- Bound-variable hypothesis builder for the maps-to notation. (Contributed by NM, 20-Feb-2013.) -/
theorem nfmpt {A2 B2 : setvar → setvar → «class»}
  (nfmpt_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (nfmpt_2 : ∀ y, ⊦ wnfc (λ x3, B2 x3 y)) :
  ⊦ wnfc (λ x3, cmpt (λ y, A2 x3 y) (λ y, B2 x3 y)) :=
@nfcxfr (λ x3, cmpt (λ y, A2 x3 y) (λ y, B2 x3 y)) (λ x3, copab (λ y z, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (B2 x3 y))))
  (λ x3, @df_mpt (λ y, A2 x3 y) (λ y, B2 x3 y))
  (@nfopab (λ y z x3, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (B2 x3 y)))
    (λ y z, @nfan (λ x3, wcel (cv y) (A2 x3 y)) (λ x3, wceq (cv z) (B2 x3 y))
      (@nfcri (λ x3 y, A2 x3 y)
        (λ y, nfmpt_1 y) y)
      (@nfeq2 (cv z) (λ x3, B2 x3 y)
        (nfmpt_2 y))))


/-- Bound-variable hypothesis builder for the maps-to notation. (Contributed by FL, 17-Feb-2008.) -/
theorem nfmpt1 {A2 B2 : setvar → «class»} :
  ⊦ wnfc (λ x3, cmpt (λ x3, A2 x3) (λ x3, B2 x3)) :=
@nfcxfr (λ x3, cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (λ x3, copab (λ x3 z, wa (wcel (cv x3) (A2 x3)) (wceq (cv z) (B2 x3))))
  (λ x3, @df_mpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@nfopab1 (λ x3 z, wa (wcel (cv x3) (A2 x3)) (wceq (cv z) (B2 x3))))


/-- Rule to change the bound variable in a maps-to function, using implicit substitution. This
version has bound-variable hypotheses in place of distinct variable conditions. (Contributed by NM,
11-Sep-2011.) (Revised by Thierry Arnoux, 9-Mar-2017.) Add disjoint variable condition to avoid ~
ax-13 . See ~ cbvmptfg for a less restrictive version requiring more axioms. (Revised by Gino
Giotto, 17-Jan-2024.) -/
theorem cbvmptf {A2 B2 C : setvar → setvar → «class»}
  (cbvmptf_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (cbvmptf_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (cbvmptf_3 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y))
  (cbvmptf_4 : ∀ y, ⊦ wnfc (λ x3, C x3 y))
  (cbvmptf_5 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (B2 x3 y) (C x3 y)))
  (x3 y : setvar) : ⊦ wceq (cmpt (λ x3, A2 x3 y) (λ x3, B2 x3 y)) (cmpt (λ y, A2 x3 y) (λ y, C x3 y)) :=
@«3eqtr4i» (copab (λ x3 z, wa (wcel (cv x3) (A2 x3 y)) (wceq (cv z) (B2 x3 y)))) (copab (λ y z, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (C x3 y)))) (cmpt (λ x3, A2 x3 y) (λ x3, B2 x3 y)) (cmpt (λ y, A2 x3 y) (λ y, C x3 y))
  (@eqtri (copab (λ x3 z, wa (wcel (cv x3) (A2 x3 y)) (wceq (cv z) (B2 x3 y)))) (copab (λ w z, wa (wcel (cv w) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w))) (copab (λ y z, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (C x3 y))))
    (setvar.forget $ λ w : setvar,
      show ⊦ wceq (copab (λ x3 z, wa (wcel (cv x3) (A2 x3 y)) (wceq (cv z) (B2 x3 y)))) (copab (λ w z, wa (wcel (cv w) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w))), from
      @cbvopab1 (λ x3 z w, wa (wcel (cv x3) (A2 x3 y)) (wceq (cv z) (B2 x3 y))) (λ x3 z w, wa (wcel (cv w) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w))
        (λ x3 z, @nfv (wa (wcel (cv x3) (A2 x3 y)) (wceq (cv z) (B2 x3 y))))
        (λ z w, @nfan (λ x3, wcel (cv w) (A2 x3 y)) (λ x3, wsb (λ x3, wceq (cv z) (B2 x3 y)) w)
          (@nfcri (λ x3 w, A2 x3 y)
            (λ w, cbvmptf_1 y) w)
          (@nfs1v (λ x3 w, wceq (cv z) (B2 x3 y)) w))
        (λ x3 z w, @anbi12d (wceq (cv x3) (cv w)) (wcel (cv x3) (A2 x3 y)) (wcel (cv w) (A2 x3 y)) (wceq (cv z) (B2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w)
          (@eleq1w (λ x3 w, A2 x3 y) x3 w)
          (@sbequ12 (λ x3 w, wceq (cv z) (B2 x3 y)) x3 w)) x3 w)
    (setvar.forget $ λ w : setvar,
      show ⊦ wceq (copab (λ w z, wa (wcel (cv w) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w))) (copab (λ y z, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (C x3 y)))), from
      @cbvopab1 (λ w z y, wa (wcel (cv w) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w)) (λ w z y, wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (C x3 y)))
        (λ w z, @nfan (λ y, wcel (cv w) (A2 x3 y)) (λ y, wsb (λ x3, wceq (cv z) (B2 x3 y)) w)
          (@nfcri (λ y w, A2 x3 y)
            (λ w, cbvmptf_2 x3) w)
          (@nfsbv (λ x3 y, wceq (cv z) (B2 x3 y)) w
            (λ x3, @nfeq2 (cv z) (λ y, B2 x3 y)
              (cbvmptf_3 x3))))
        (λ z y, @nfv (wa (wcel (cv y) (A2 x3 y)) (wceq (cv z) (C x3 y))))
        (λ w z y, @anbi12d (wceq (cv w) (cv y)) (wcel (cv w) (A2 x3 y)) (wcel (cv y) (A2 x3 y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w) (wceq (cv z) (C x3 y))
          (@eleq1w (λ w y, A2 x3 y) w y)
          (@bitrdi (wceq (cv w) (cv y)) (wsb (λ x3, wceq (cv z) (B2 x3 y)) w) (wsb (λ x3, wceq (cv z) (B2 x3 y)) y) (wceq (cv z) (C x3 y))
            (@sbequ (λ w y x3, wceq (cv z) (B2 x3 y)) w y)
            (@sbiev (λ x3 y, wceq (cv z) (B2 x3 y)) (λ x3 y, wceq (cv z) (C x3 y))
              (λ y, @nfeq2 (cv z) (λ x3, C x3 y)
                (cbvmptf_4 y))
              (λ x3 y, @eqeq2d (wceq (cv x3) (cv y)) (B2 x3 y) (C x3 y) (cv z)
                (cbvmptf_5 x3 y)) x3 y))) w y))
  (@df_mpt (λ x3, A2 x3 y) (λ x3, B2 x3 y))
  (@df_mpt (λ y, A2 x3 y) (λ y, C x3 y))


/-- Rule to change the bound variable in a maps-to function, using implicit substitution. This
version has bound-variable hypotheses in place of distinct variable conditions. (Contributed by NM,
11-Sep-2011.) Add disjoint variable condition to avoid ~ ax-13 . See ~ cbvmptg for a less
restrictive version requiring more axioms. (Revised by Gino Giotto, 17-Jan-2024.) -/
theorem cbvmpt {A2 : «class»} {B2 C : setvar → setvar → «class»}
  (cbvmpt_1 : ∀ x3, ⊦ wnfc (λ y, B2 x3 y))
  (cbvmpt_2 : ∀ y, ⊦ wnfc (λ x3, C x3 y))
  (cbvmpt_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (B2 x3 y) (C x3 y)))
  (x3 y : setvar) : ⊦ wceq (cmpt (λ x3, A2) (λ x3, B2 x3 y)) (cmpt (λ y, A2) (λ y, C x3 y)) :=
@cbvmptf (λ x3 y, A2) (λ x3 y, B2 x3 y) (λ x3 y, C x3 y)
  (λ y, @nfcv A2)
  (λ x3, @nfcv A2)
  (λ x3, cbvmpt_1 x3)
  (λ y, cbvmpt_2 y)
  (λ x3 y, cbvmpt_3 x3 y) x3 y


/-- Rule to change the bound variable in a maps-to function, using implicit substitution.
(Contributed by Mario Carneiro, 19-Feb-2013.) Add disjoint variable condition to avoid ~ ax-13 . See
~ cbvmptvg for a less restrictive version requiring more axioms. (Revised by Gino Giotto,
17-Jan-2024.) -/
theorem cbvmptv {A2 : «class»} {B2 C : setvar → «class»}
  (cbvmptv_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wceq (B2 x3) (C y))) :
  ⊦ wceq (cmpt (λ x3, A2) (λ x3, B2 x3)) (cmpt (λ y, A2) (λ y, C y)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wceq (cmpt (λ x3, A2) (λ x3, B2 x3)) (cmpt (λ y, A2) (λ y, C y)), from
  @cbvmpt A2 (λ x3 y, B2 x3) (λ x3 y, C y)
    (λ x3, @nfcv (B2 x3))
    (λ y, @nfcv (C y))
    (λ x3 y, cbvmptv_1 x3 y) x3 y


-- /-- Extend wff notation to include transitive classes. Notation from [TakeutiZaring] p. 35. -/
-- constant wtr : «class» → wff


-- /-- Define the transitive class predicate. Not to be confused with a transitive relation (see ~
-- cotr ). Definition of [Enderton] p. 71 extended to arbitrary classes. For alternate definitions,
-- see ~ dftr2 (which is suggestive of the word "transitive"), ~ dftr3 , ~ dftr4 , ~ dftr5 , and
-- (when ` A ` is a set) ~ unisuc . The term "complete" is used instead of "transitive" in
-- Definition 3 of [Suppes] p. 130. (Contributed by NM, 29-Aug-1993.) -/
-- axiom df_tr {A2 : «class»} : ⊦ wb (wtr A2) (wss (cuni A2) A2)


/-- An alternate way of defining a transitive class. Exercise 7 of [TakeutiZaring] p. 40.
(Contributed by NM, 24-Apr-1994.) -/
theorem dftr2 {A2 : «class»} :
  ⊦ wb (wtr A2) (wal (λ x3, wal (λ y, wi (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wcel (cv x3) A2)))) :=
@«3bitr4i» (wss (cuni A2) A2) (wal (λ x3, wi (wcel (cv x3) (cuni A2)) (wcel (cv x3) A2))) (wtr A2) (wal (λ x3, wal (λ y, wi (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wcel (cv x3) A2))))
  (@dfss2 (cuni A2) A2)
  (@df_tr A2)
  (@albii (λ x3, wal (λ y, wi (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wcel (cv x3) A2))) (λ x3, wi (wcel (cv x3) (cuni A2)) (wcel (cv x3) A2))
    (λ x3, @bitr4i (wal (λ y, wi (wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wcel (cv x3) A2))) (wi (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wcel (cv x3) A2)) (wi (wcel (cv x3) (cuni A2)) (wcel (cv x3) A2))
      (@«19_23v» (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2)) (wcel (cv x3) A2))
      (@imbi1i (wcel (cv x3) (cuni A2)) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) A2))) (wcel (cv x3) A2)
        (@eluni (cv x3) A2))))


/-- An alternate way of defining a transitive class. (Contributed by NM, 20-Mar-2004.) -/
theorem dftr5 {A2 : «class»} :
  ⊦ wb (wtr A2) (wral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2)) :=
@bitri (wtr A2) (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2))
  (@dftr2 A2)
  (@bitri (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wal (λ x3, wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2))
    (@alcom (λ y x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))
    (@bitr4i (wal (λ x3, wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wral (λ y, wcel (cv y) A2) (λ y, cv x3)))) (wral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2))
      (@albii (λ x3, wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2))) (λ x3, wi (wcel (cv x3) A2) (wral (λ y, wcel (cv y) A2) (λ y, cv x3)))
        (λ x3, @bitri (wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2))) (wral (λ y, wi (wcel (cv x3) A2) (wcel (cv y) A2)) (λ y, cv x3)) (wi (wcel (cv x3) A2) (wral (λ y, wcel (cv y) A2) (λ y, cv x3)))
          (@bitr4i (wal (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2))) (wal (λ y, wi (wcel (cv y) (cv x3)) (wi (wcel (cv x3) A2) (wcel (cv y) A2)))) (wral (λ y, wi (wcel (cv x3) A2) (wcel (cv y) A2)) (λ y, cv x3))
            (@albii (λ y, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)) (λ y, wi (wcel (cv y) (cv x3)) (wi (wcel (cv x3) A2) (wcel (cv y) A2)))
              (λ y, @impexp (wcel (cv y) (cv x3)) (wcel (cv x3) A2) (wcel (cv y) A2)))
            (@df_ral (λ y, wi (wcel (cv x3) A2) (wcel (cv y) A2)) (λ y, cv x3)))
          (@r19_21v (wcel (cv x3) A2) (λ y, wcel (cv y) A2) (λ y, cv x3))))
      (@df_ral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2))))


/-- An alternate way of defining a transitive class. Definition 7.1 of [TakeutiZaring] p. 35.
(Contributed by NM, 29-Aug-1993.) -/
theorem dftr3 {A2 : «class»} :
  ⊦ wb (wtr A2) (wral (λ x3, wss (cv x3) A2) (λ x3, A2)) :=
@bitr4i (wtr A2) (wral (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2)) (wral (λ x3, wss (cv x3) A2) (λ x3, A2))
  (@dftr5 A2)
  (@ralbii (λ x3, wss (cv x3) A2) (λ x3, wral (λ y, wcel (cv y) A2) (λ y, cv x3)) (λ x3, A2)
    (λ x3, @dfss3 (cv x3) A2))


/-- An alternate way of defining a transitive class. Definition of [Enderton] p. 71. (Contributed by
NM, 29-Aug-1993.) -/
theorem dftr4 {A2 : «class»} :
  ⊦ wb (wtr A2) (wss A2 (cpw A2)) :=
@bitr4i (wtr A2) (wss (cuni A2) A2) (wss A2 (cpw A2))
  (@df_tr A2)
  (@sspwuni A2 A2)


/-- Equality theorem for the transitive class predicate. (Contributed by NM, 17-Sep-1993.) -/
theorem treq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wtr A2) (wtr B2)) :=
@«3bitr4g» (wceq A2 B2) (wss (cuni A2) A2) (wss (cuni B2) B2) (wtr A2) (wtr B2)
  (@bitrd (wceq A2 B2) (wss (cuni A2) A2) (wss (cuni B2) A2) (wss (cuni B2) B2)
    (@sseq1d (wceq A2 B2) (cuni A2) (cuni B2) A2
      (@unieq A2 B2))
    (@sseq2 A2 B2 (cuni B2)))
  (@df_tr A2)
  (@df_tr B2)


/-- In a transitive class, the membership relation is transitive. (Contributed by NM, 19-Apr-1994.)
(Proof shortened by Andrew Salmon, 9-Jul-2011.) -/
theorem trel {A2 B2 C : «class»} :
  ⊦ wi (wtr A2) (wi (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2)) :=
@sylbi (wtr A2) (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wi (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2))
  (@dftr2 A2)
  (@pm2_43b (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2)
    (setvar.forget $ λ x3 : setvar,
      setvar.forget $ λ y : setvar,
      show ⊦ wi (wa (wcel B2 C) (wcel C A2)) (wi (wal (λ y, wal (λ x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)))) (wi (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2))), from
      @spc2gv (λ y x3, wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2)) (wi (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2)) B2 C (λ y x3, C) (λ y x3, A2)
        (λ y x3, @imbi12d (wa (wceq (cv y) B2) (wceq (cv x3) C)) (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wa (wcel B2 C) (wcel C A2)) (wcel (cv y) A2) (wcel B2 A2)
          (@anbi12d (wa (wceq (cv y) B2) (wceq (cv x3) C)) (wcel (cv y) (cv x3)) (wcel B2 C) (wcel (cv x3) A2) (wcel C A2)
            (@eleq12 (cv y) B2 (cv x3) C)
            (@adantl (wceq (cv x3) C) (wb (wcel (cv x3) A2) (wcel C A2)) (wceq (cv y) B2)
              (@eleq1 (cv x3) C A2)))
          (@adantr (wceq (cv y) B2) (wb (wcel (cv y) A2) (wcel B2 A2)) (wceq (cv x3) C)
            (@eleq1 (cv y) B2 A2))) y x3))


/-- In a transitive class, the membership relation is transitive. (Contributed by NM, 19-Apr-1994.)
-/
theorem trel3 {A2 B2 C D : «class»} :
  ⊦ wi (wtr A2) (wi (w3a (wcel B2 C) (wcel C D) (wcel D A2)) (wcel B2 A2)) :=
@syld (wtr A2) (w3a (wcel B2 C) (wcel C D) (wcel D A2)) (wa (wcel B2 C) (wcel C A2)) (wcel B2 A2)
  (@syl5bi (w3a (wcel B2 C) (wcel C D) (wcel D A2)) (wa (wcel B2 C) (wa (wcel C D) (wcel D A2))) (wtr A2) (wa (wcel B2 C) (wcel C A2))
    (@«3anass» (wcel B2 C) (wcel C D) (wcel D A2))
    (@anim2d (wtr A2) (wa (wcel C D) (wcel D A2)) (wcel C A2) (wcel B2 C)
      (@trel A2 C D)))
  (@trel A2 B2 C)


/-- An element of a transitive class is a subset of the class. (Contributed by NM, 7-Aug-1994.)
(Proof shortened by JJ, 26-Jul-2021.) -/
theorem trss {A2 B2 : «class»} :
  ⊦ wi (wtr A2) (wi (wcel B2 A2) (wss B2 A2)) :=
@sylbi (wtr A2) (wral (λ x3, wss (cv x3) A2) (λ x3, A2)) (wi (wcel B2 A2) (wss B2 A2))
  (@dftr3 A2)
  (@rspccv (λ x3, wss (cv x3) A2) (wss B2 A2) B2 A2
    (λ x3, @sseq1 (cv x3) B2 A2))


/-- The intersection of transitive classes is transitive. (Contributed by NM, 9-May-1994.) -/
theorem trin {A2 B2 : «class»} :
  ⊦ wi (wa (wtr A2) (wtr B2)) (wtr (cin A2 B2)) :=
@sylibr (wa (wtr A2) (wtr B2)) (wral (λ x3, wss (cv x3) (cin A2 B2)) (λ x3, cin A2 B2)) (wtr (cin A2 B2))
  (@ralrimiv (wa (wtr A2) (wtr B2)) (λ x3, wss (cv x3) (cin A2 B2)) (λ x3, cin A2 B2)
    (λ x3, @syl6ib (wa (wtr A2) (wtr B2)) (wcel (cv x3) (cin A2 B2)) (wa (wss (cv x3) A2) (wss (cv x3) B2)) (wss (cv x3) (cin A2 B2))
      (@syl5bi (wcel (cv x3) (cin A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (wa (wtr A2) (wtr B2)) (wa (wss (cv x3) A2) (wss (cv x3) B2))
        (@elin (cv x3) A2 B2)
        (@im2anan9 (wtr A2) (wcel (cv x3) A2) (wss (cv x3) A2) (wtr B2) (wcel (cv x3) B2) (wss (cv x3) B2)
          (@trss A2 (cv x3))
          (@trss B2 (cv x3))))
      (@ssin (cv x3) A2 B2)))
  (@dftr3 (cin A2 B2))


/-- The empty set is transitive. (Contributed by NM, 16-Sep-1993.) -/
theorem tr0 :
  ⊦ wtr c0 :=
@mpbir (wtr c0) (wss c0 (cpw c0))
  (@«0ss» (cpw c0))
  (@dftr4 c0)


-- /-- Axiom of Replacement. An axiom scheme of Zermelo-Fraenkel set theory. Axiom 5 of
-- [TakeutiZaring] p. 19. It tells us that the image of any set under a function is also a set (see
-- the variant ~ funimaex ). Although ` ph ` may be any wff whatsoever, this axiom is useful (i.e.
-- its antecedent is satisfied) when we are given some function and ` ph ` encodes the predicate
-- "the value of the function at ` w ` is ` z ` ". Thus, ` ph ` will ordinarily have free variables
-- ` w ` and ` z ` - think of it informally as ` ph ( w , z ) ` . We prefix ` ph ` with the
-- quantifier ` A. y ` in order to "protect" the axiom from any ` ph ` containing ` y ` , thus
-- allowing us to eliminate any restrictions on ` ph ` . Another common variant is derived as ~
-- axrep5 , where you can find some further remarks. A slightly more compact version is shown as ~
-- axrep2 . A quite different variant is ~ zfrep6 , which if used in place of ~ ax-rep would also
-- require that the Separation Scheme ~ axsep be stated as a separate axiom. There is a very strong
-- generalization of Replacement that doesn't demand function-like behavior of ` ph ` . Two versions
-- of this generalization are called the Collection Principle ~ cp and the Boundedness Axiom ~ bnd .
-- Many developments of set theory distinguish the uses of Replacement from uses of the weaker
-- axioms of Separation ~ axsep , Null Set ~ axnul , and Pairing ~ axpr , all of which we derive
-- from Replacement. In order to make it easier to identify the uses of those redundant axioms, we
-- restate them as Axioms ~ ax-sep , ~ ax-nul , and ~ ax-pr below the theorems that prove them.
-- (Contributed by NM, 23-Dec-1993.) -/
-- axiom ax_rep {ph : setvar → setvar → setvar → wff} {x3 : setvar} : ⊦ wi (wal (λ w, wex (λ y, wal (λ z, wi (wal (λ y, ph y z w)) (wceq (cv z) (cv y)))))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph y z w)))))))


/-- The version of the Axiom of Replacement used in the Metamath Solitaire applet ~
https://us.metamath.org/mmsolitaire/mms.html . Equivalence is shown via the path ~ ax-rep ` -> ` ~
axrep1 ` -> ` ~ axrep2 ` -> ` ~ axrepnd ` -> ` ~ zfcndrep = ~ ax-rep . (Contributed by NM,
19-Nov-2005.) (Proof shortened by Mario Carneiro, 17-Nov-2016.) Remove dependency on ~ ax-13 .
(Revised by BJ, 31-May-2019.) -/
theorem axrep1 {ph : setvar → setvar → wff}
  (y : setvar) : ⊦ wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z)))))) :=
@«19_35ri» (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y))))) (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z)))))
  (@chvarvv (λ w y, wi (wal (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y)))))) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))))))) (λ y, wi (wal (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y)))))) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z)))))))
    (λ w y, @imbi2d (wceq (cv w) (cv y)) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))))) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z)))))) (wal (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y))))))
      (@exbidv (wceq (cv w) (cv y)) (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))))) (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z)))))
        (λ x3, @albidv (wceq (cv w) (cv y)) (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))) (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z))))
          (λ z, @bibi2d (wceq (cv w) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))) (wex (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z))) (wcel (cv z) (cv x3))
            (@exbidv (wceq (cv w) (cv y)) (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)) (λ x3, wa (wcel (cv x3) (cv y)) (ph x3 z))
              (λ x3, @anbi1d (wceq (cv w) (cv y)) (wcel (cv x3) (cv w)) (wcel (cv x3) (cv y)) (ph x3 z)
                (@elequ2 x3 w y)))))))
    (λ w y, @«3imtr3i» (wal (λ x3, wex (λ y, wal (λ z, wi (wal (λ y, ph x3 z)) (wceq (cv z) (cv y)))))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))))))) (wal (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y)))))) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))))))
      (@ax_rep (λ y z x3, ph x3 z) w)
      (@albii (λ x3, wex (λ y, wal (λ z, wi (wal (λ y, ph x3 z)) (wceq (cv z) (cv y))))) (λ x3, wex (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y)))))
        (λ x3, @exbii (λ y, wal (λ z, wi (wal (λ y, ph x3 z)) (wceq (cv z) (cv y)))) (λ y, wal (λ z, wi (ph x3 z) (wceq (cv z) (cv y))))
          (λ y, @albii (λ z, wi (wal (λ y, ph x3 z)) (wceq (cv z) (cv y))) (λ z, wi (ph x3 z) (wceq (cv z) (cv y)))
            (λ z, @imbi1i (wal (λ y, ph x3 z)) (ph x3 z) (wceq (cv z) (cv y))
              (@«19_3v» (ph x3 z))))))
      (setvar.forget $ λ x3 : setvar,
        setvar.forget $ λ y : setvar,
        show ⊦ wb (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))))))) (wex (λ x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))))), from
        @cbvexv1 (λ y x3, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z)))))) (λ y x3, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))))
          (λ y, @nfal (λ x3 z, wb (wcel (cv z) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z)))))
            (λ z, @nfbi (λ x3, wcel (cv z) (cv y)) (λ x3, wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))))
              (@nfv (wcel (cv z) (cv y)))
              (@nfe1 (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))))))
          (λ x3, @nfv (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))))))
          (λ y x3, @albidv (wceq (cv y) (cv x3)) (λ z, wb (wcel (cv z) (cv y)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))))) (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))))
            (λ z, @bibi12d (wceq (cv y) (cv x3)) (wcel (cv z) (cv y)) (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z)))) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))
              (@elequ2 z y x3)
              (@a1i (wb (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z)))) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z)))) (wceq (cv y) (cv x3))
                (@exbii (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 z))) (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 z))
                  (λ x3, @anbi2i (wal (λ y, ph x3 z)) (ph x3 z) (wcel (cv x3) (cv w))
                    (@«19_3v» (ph x3 z))))))) y x3)) y)


/-- Lemma for ~ axrep2 and ~ axrep3 . (Contributed by BJ, 6-Aug-2022.) -/
theorem axreplem {ph ps ch : setvar → setvar → setvar → setvar → setvar → wff} {z : setvar}
  (x3 y w v : setvar) : ⊦ wi (wceq (cv x3) (cv y)) (wb (wex (λ u, wi (ph x3 y w v u) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u))))))) (wex (λ u, wi (ph x3 y w v u) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u)))))))) :=
@exbidv (wceq (cv x3) (cv y)) (λ u, wi (ph x3 y w v u) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u)))))) (λ u, wi (ph x3 y w v u) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u))))))
  (λ u, @imbi2d (wceq (cv x3) (cv y)) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u))))) (wal (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u))))) (ph x3 y w v u)
    (@albidv (wceq (cv x3) (cv y)) (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u)))) (λ v, wb (ps x3 y w v u) (wex (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u))))
      (λ v, @bibi2d (wceq (cv x3) (cv y)) (wex (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u))) (wex (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u))) (ps x3 y w v u)
        (@exbidv (wceq (cv x3) (cv y)) (λ w, wa (wcel (cv z) (cv x3)) (ch x3 y w v u)) (λ w, wa (wcel (cv z) (cv y)) (ch x3 y w v u))
          (λ w, @anbi1d (wceq (cv x3) (cv y)) (wcel (cv z) (cv x3)) (wcel (cv z) (cv y)) (ch x3 y w v u)
            (@elequ2 z x3 y))))))


/-- Lemma for ~ axrep2 and ~ axrep3 . (Contributed by BJ, 6-Aug-2022.) -/
theorem axreplem_b {ph ps ch : setvar → setvar → setvar → setvar → wff}
  (x3 y v : setvar) : ⊦ wi (wceq (cv x3) (cv y)) (wb (wex (λ w, wi (ph x3 y w v) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v))))))) (wex (λ w, wi (ph x3 y w v) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v)))))))) :=
@exbidv (wceq (cv x3) (cv y)) (λ w, wi (ph x3 y w v) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v)))))) (λ w, wi (ph x3 y w v) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v))))))
  (λ w, @imbi2d (wceq (cv x3) (cv y)) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v))))) (wal (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v))))) (ph x3 y w v)
    (@albidv (wceq (cv x3) (cv y)) (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v)))) (λ v, wb (ps x3 y w v) (wex (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v))))
      (λ v, @bibi2d (wceq (cv x3) (cv y)) (wex (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v))) (wex (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v))) (ps x3 y w v)
        (@exbidv (wceq (cv x3) (cv y)) (λ w, wa (wcel (cv w) (cv x3)) (ch x3 y w v)) (λ w, wa (wcel (cv w) (cv y)) (ch x3 y w v))
          (λ w, @anbi1d (wceq (cv x3) (cv y)) (wcel (cv w) (cv x3)) (wcel (cv w) (cv y)) (ch x3 y w v)
            (@elequ2 w x3 y))))))


/-- Axiom of Replacement expressed with the fewest number of different variables and without any
restrictions on ` ph ` . (Contributed by NM, 15-Aug-2003.) Remove dependency on ~ ax-13 . (Revised
by BJ, 31-May-2019.) -/
theorem axrep2 {ph : setvar → setvar → setvar → wff}
  (y : setvar) : ⊦ wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))) :=
@eximii (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))) (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z)))))))
  (setvar.forget $ λ w : setvar,
    show ⊦ wex (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))), from
    @chvarfv (λ w y, wex (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z)))))))) (λ w y, wex (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))))
      (λ y, @nfex (λ w x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z)))))))
        (λ x3, @nfim (λ w, wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (λ w, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))
          (@nfe1 (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w)))))
          (@nfv (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z)))))))))
      (λ w y, setvar.forget $ λ z : setvar,
        show ⊦ wi (wceq (cv w) (cv y)) (wb (wex (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z)))))))) (wex (λ x3, wi (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))))), from
        @axreplem_b (λ w y x3 z, wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (λ w y x3 z, wcel (cv z) (cv x3)) (λ w y x3 z, wal (λ y, ph x3 y z)) w y z)
      (λ w y, @axrep1 (λ x3 z, wal (λ y, ph x3 y z)) w) w y)
  (λ x3, @imim1i (wex (λ y, wal (λ z, wi (ph x3 y z) (wceq (cv z) (cv y))))) (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z))))))
    (@sylib (wex (λ y, wal (λ z, wi (ph x3 y z) (wceq (cv z) (cv y))))) (wex (λ y, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y))))) (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w)))))
      (@eximi (λ y, wal (λ z, wi (ph x3 y z) (wceq (cv z) (cv y)))) (λ y, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y))))
        (λ y, @alimi (λ z, wi (ph x3 y z) (wceq (cv z) (cv y))) (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y)))
          (λ z, @imim1i (wal (λ y, ph x3 y z)) (ph x3 y z) (wceq (cv z) (cv y))
            (@sp (λ y, ph x3 y z) y))))
      (setvar.forget $ λ w : setvar,
        setvar.forget $ λ y : setvar,
        show ⊦ wb (wex (λ y, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y))))) (wex (λ w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))), from
        @cbvexv1 (λ y w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y)))) (λ y w, wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w))))
          (λ y, @nfv (wal (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y)))))
          (λ w, @nfal (λ y z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w)))
            (λ z, @nfim (λ y, wal (λ y, ph x3 y z)) (λ y, wceq (cv z) (cv w))
              (@nfa1 (λ y, ph x3 y z))
              (@nfv (wceq (cv z) (cv w)))))
          (λ y w, @albidv (wceq (cv y) (cv w)) (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv y))) (λ z, wi (wal (λ y, ph x3 y z)) (wceq (cv z) (cv w)))
            (λ z, @imbi2d (wceq (cv y) (cv w)) (wceq (cv z) (cv y)) (wceq (cv z) (cv w)) (wal (λ y, ph x3 y z))
              (@equequ2 y w z))) y w)))


/-- Axiom of Replacement slightly strengthened from ~ axrep2 ; ` w ` may occur free in ` ph ` .
(Contributed by NM, 2-Jan-1997.) Remove dependency on ~ ax-13 . (Revised by BJ, 31-May-2019.) -/
theorem axrep3 {ph : setvar → setvar → setvar → setvar → wff}
  (w : setvar) : ⊦ wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))))), from
  @chvarfv (λ y w, wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z w)))))))) (λ y w, wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))))))
    (λ w, @nfex (λ y x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w)))))))
      (λ x3, @nfim (λ y, wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (λ y, wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))))
        (@nfe1 (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y)))))
        (@nfal (λ y z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w)))))
          (λ z, @nfbi (λ y, wcel (cv z) (cv x3)) (λ y, wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))
            (@nfv (wcel (cv z) (cv x3)))
            (@nfex (λ y x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w)))
              (λ x3, @nfan (λ y, wcel (cv x3) (cv w)) (λ y, wal (λ y, ph x3 y z w))
                (@nfv (wcel (cv x3) (cv w)))
                (@nfa1 (λ y, ph x3 y z w))))))))
    (λ y w, setvar.forget $ λ z : setvar,
      show ⊦ wi (wceq (cv y) (cv w)) (wb (wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv y)) (wal (λ y, ph x3 y z w)))))))) (wex (λ x3, wi (wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (wal (λ z, wb (wcel (cv z) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ y, ph x3 y z w))))))))), from
      @axreplem_b (λ y w x3 z, wex (λ y, wal (λ z, wi (ph x3 y z w) (wceq (cv z) (cv y))))) (λ y w x3 z, wcel (cv z) (cv x3)) (λ y w x3 z, wal (λ y, ph x3 y z w)) y w z)
    (λ y w, @axrep2 (λ x3 y z, ph x3 y z w) y) y w


/-- A more traditional version of the Axiom of Replacement. (Contributed by NM, 14-Aug-1994.) -/
theorem axrep4 {ph : setvar → setvar → setvar → setvar → wff}
  (axrep4_1 : ∀ x3 y w, ⊦ wnf (λ z, ph x3 y z w))
  (w : setvar) : ⊦ wi (wal (λ x3, wex (λ z, wal (λ y, wi (ph x3 y z w) (wceq (cv y) (cv z)))))) (wex (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))))) :=
@sylib (wal (λ x3, wex (λ z, wal (λ y, wi (ph x3 y z w) (wceq (cv y) (cv z)))))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))))))) (wex (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w))))))
  (@«19_35i» (λ x3, wex (λ z, wal (λ y, wi (ph x3 y z w) (wceq (cv y) (cv z))))) (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))))))
    (@axrep3 (λ x3 z y w, ph x3 y z w) w))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wb (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))))))) (wex (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))))), from
    @cbvexv1 (λ x3 z, wal (λ y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w)))))) (λ x3 z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))))
      (λ x3, @nfal (λ z y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w)))))
        (λ y, @nfbi (λ z, wcel (cv y) (cv x3)) (λ z, wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))))
          (@nfv (wcel (cv y) (cv x3)))
          (@nfex (λ z x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w)))
            (λ x3, @nfan (λ z, wcel (cv x3) (cv w)) (λ z, wal (λ z, ph x3 y z w))
              (@nfv (wcel (cv x3) (cv w)))
              (@nfa1 (λ z, ph x3 y z w))))))
      (λ z, @nfal (λ x3 y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w))))
        (λ y, @nfbi (λ x3, wcel (cv y) (cv z)) (λ x3, wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))
          (@nfv (wcel (cv y) (cv z)))
          (@nfe1 (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))))
      (λ x3 z, @albidv (wceq (cv x3) (cv z)) (λ y, wb (wcel (cv y) (cv x3)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))))) (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w))))
        (λ y, @bibi12d (wceq (cv x3) (cv z)) (wcel (cv y) (cv x3)) (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w)))) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))
          (@elequ2 y x3 z)
          (@a1i (wb (wex (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w)))) (wex (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w)))) (wceq (cv x3) (cv z))
            (@exbii (λ x3, wa (wcel (cv x3) (cv w)) (wal (λ z, ph x3 y z w))) (λ x3, wa (wcel (cv x3) (cv w)) (ph x3 y z w))
              (λ x3, @anbi2i (wal (λ z, ph x3 y z w)) (ph x3 y z w) (wcel (cv x3) (cv w))
                (@«19_3» (λ z, ph x3 y z w)
                  (axrep4_1 x3 y w) z)))))) x3 z)


/-- A condensed form of ~ ax-rep . (Contributed by SN, 18-Sep-2023.) -/
theorem axrep6 {ph : setvar → setvar → wff} {x3 : setvar} :
  ⊦ wi (wal (λ w, wmo (λ z, ph z w))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wrex (λ w, ph z w) (λ w, cv x3))))) :=
@«3imtr4i» (wal (λ w, wex (λ y, wal (λ z, wi (wal (λ y, ph z w)) (wceq (cv z) (cv y)))))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph z w))))))) (wal (λ w, wmo (λ z, ph z w))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wrex (λ w, ph z w) (λ w, cv x3)))))
  (@ax_rep (λ y z w, ph z w) x3)
  (@albii (λ w, wmo (λ z, ph z w)) (λ w, wex (λ y, wal (λ z, wi (wal (λ y, ph z w)) (wceq (cv z) (cv y)))))
    (λ w, @bitr4i (wmo (λ z, ph z w)) (wex (λ y, wal (λ z, wi (ph z w) (wceq (cv z) (cv y))))) (wex (λ y, wal (λ z, wi (wal (λ y, ph z w)) (wceq (cv z) (cv y)))))
      (@df_mo (λ z, ph z w))
      (@exbii (λ y, wal (λ z, wi (wal (λ y, ph z w)) (wceq (cv z) (cv y)))) (λ y, wal (λ z, wi (ph z w) (wceq (cv z) (cv y))))
        (λ y, @albii (λ z, wi (wal (λ y, ph z w)) (wceq (cv z) (cv y))) (λ z, wi (ph z w) (wceq (cv z) (cv y)))
          (λ z, @imbi1i (wal (λ y, ph z w)) (ph z w) (wceq (cv z) (cv y))
            (@«19_3v» (ph z w)))))))
  (@exbii (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wrex (λ w, ph z w) (λ w, cv x3)))) (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph z w))))))
    (λ y, @albii (λ z, wb (wcel (cv z) (cv y)) (wrex (λ w, ph z w) (λ w, cv x3))) (λ z, wb (wcel (cv z) (cv y)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph z w)))))
      (λ z, @bibi2i (wrex (λ w, ph z w) (λ w, cv x3)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph z w)))) (wcel (cv z) (cv y))
        (@bitr3i (wrex (λ w, ph z w) (λ w, cv x3)) (wrex (λ w, wal (λ y, ph z w)) (λ w, cv x3)) (wex (λ w, wa (wcel (cv w) (cv x3)) (wal (λ y, ph z w))))
          (@rexbii (λ w, wal (λ y, ph z w)) (λ w, ph z w) (λ w, cv x3)
            (λ w, @«19_3v» (ph z w)))
          (@df_rex (λ w, wal (λ y, ph z w)) (λ w, cv x3))))))


/-- A more general version ~ axsepg of the axiom scheme of separation ~ ax-sep derived from the
axiom scheme of replacement ~ ax-rep (and first-order logic). The extra generality consists in the
absence of a disjoint variable condition on ` z , ph ` (that is, variable ` z ` may occur in formula
` ph ` ). See linked statements for more information. (Contributed by NM, 11-Sep-2006.) Remove
dependencies on ~ ax-9 to ~ ax-13 . (Revised by SN, 25-Sep-2023.) Use ~ ax-sep instead (or ~ axsepg
if the extra generality is needed). (New usage is discouraged.) -/
theorem axsepgfromrep {ph : setvar → wff} {z : setvar} :
  ⊦ wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3)))) :=
@mpbi (wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z))))) (wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3)))))
  (setvar.forget $ λ w : setvar,
    show ⊦ wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z)))), from
    @mpg (λ w, wmo (λ x3, wa (wceq (cv w) (cv x3)) (ph x3))) (λ w, wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z)))))
      (λ w, @axrep6 (λ x3 w, wa (wceq (cv w) (cv x3)) (ph x3)) z)
      (λ w, @ax_mp (wmo (λ x3, wceq (cv x3) (cv w))) (wmo (λ x3, wa (wceq (cv w) (cv x3)) (ph x3)))
        (@eumoi (λ x3, wceq (cv x3) (cv w))
          (@euequ w))
        (@moimi (λ x3, wa (wceq (cv w) (cv x3)) (ph x3)) (λ x3, wceq (cv x3) (cv w))
          (λ x3, @adantr (wceq (cv w) (cv x3)) (wceq (cv x3) (cv w)) (ph x3)
            (@equcomi w x3)))) w)
  (@exbii (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z)))) (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3))))
    (λ y, @albii (λ x3, wb (wcel (cv x3) (cv y)) (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z))) (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3)))
      (λ x3, @bibi2i (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z)) (wa (wcel (cv x3) (cv z)) (ph x3)) (wcel (cv x3) (cv y))
        (@«3bitr2i» (wrex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z)) (wex (λ w, wa (wcel (cv w) (cv z)) (wa (wceq (cv w) (cv x3)) (ph x3)))) (wex (λ w, wa (wceq (cv w) (cv x3)) (wa (wcel (cv w) (cv z)) (ph x3)))) (wa (wcel (cv x3) (cv z)) (ph x3))
          (@df_rex (λ w, wa (wceq (cv w) (cv x3)) (ph x3)) (λ w, cv z))
          (@exbii (λ w, wa (wceq (cv w) (cv x3)) (wa (wcel (cv w) (cv z)) (ph x3))) (λ w, wa (wcel (cv w) (cv z)) (wa (wceq (cv w) (cv x3)) (ph x3)))
            (λ w, @an12 (wceq (cv w) (cv x3)) (wcel (cv w) (cv z)) (ph x3)))
          (@equsexvw (λ w x3, wa (wcel (cv w) (cv z)) (ph x3)) (λ x3, wa (wcel (cv x3) (cv z)) (ph x3))
            (λ w x3, @anbi1d (wceq (cv w) (cv x3)) (wcel (cv w) (cv z)) (wcel (cv x3) (cv z)) (ph x3)
              (@elequ1 z w x3)) x3)))))


/-- Axiom scheme of separation ~ ax-sep derived from the axiom scheme of replacement ~ ax-rep . The
statement is identical to that of ~ ax-sep , and therefore shows that ~ ax-sep is redundant when ~
ax-rep is allowed. See ~ ax-sep for more information. (Contributed by NM, 11-Sep-2006.) Use ~ ax-sep
instead. (New usage is discouraged.) -/
theorem ax_sep {ph : setvar → wff} {z : setvar} :
  ⊦ wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3)))) :=
@axsepgfromrep (λ x3, ph x3) z


/-- Separation Scheme (Aussonderung) using a class variable. To derive this from ~ ax-sep , we
invoke the Axiom of Extensionality (indirectly via ~ vtocl ), which is needed for the justification
of class variable notation. If we omit the requirement that ` y ` not occur in ` ph ` , we can
derive a contradiction, as ~ notzfaus shows. (Contributed by NM, 21-Jun-1993.) -/
theorem zfauscl {ph : setvar → wff} {A2 : «class»}
  (zfauscl_1 : ⊦ wcel A2 cvv) :
  ⊦ wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3)))) :=
@vtocl (λ z, wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3))))) (wex (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3))))) A2
  zfauscl_1
  (λ z, @exbidv (wceq (cv z) A2) (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3)))) (λ y, wal (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3))))
    (λ y, @albidv (wceq (cv z) A2) (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) (cv z)) (ph x3))) (λ x3, wb (wcel (cv x3) (cv y)) (wa (wcel (cv x3) A2) (ph x3)))
      (λ x3, @bibi2d (wceq (cv z) A2) (wa (wcel (cv x3) (cv z)) (ph x3)) (wa (wcel (cv x3) A2) (ph x3)) (wcel (cv x3) (cv y))
        (@anbi1d (wceq (cv z) A2) (wcel (cv x3) (cv z)) (wcel (cv x3) A2) (ph x3)
          (@eleq2 (cv z) A2 (cv x3))))))
  (λ z, @ax_sep (λ x3, ph x3) z)


/-- Convert implication to equivalence using the Separation Scheme (Aussonderung) ~ ax-sep . Similar
to Theorem 1.3(ii) of [BellMachover] p. 463. (Contributed by NM, 21-Jun-1993.) -/
theorem bm1_3ii {ph : setvar → wff}
  (bm1_3ii_1 : ⊦ wex (λ x3, wal (λ y, wi (ph y) (wcel (cv y) (cv x3))))) :
  ⊦ wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (ph y))) :=
@exlimiiv (λ z, wa (wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y)))))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (ph y))))
  (λ z, @sylbir (wa (wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y)))))) (wex (λ x3, wa (wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y)))))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (ph y))))
    (@«19_42v» (wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y)))))
    (@eximi (λ x3, wa (wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y))))) (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (ph y)))
      (λ x3, @alanimi (λ y, wi (ph y) (wcel (cv y) (cv z))) (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y))) (λ y, wb (wcel (cv y) (cv x3)) (ph y))
        (λ y, @bimsc1 (ph y) (wcel (cv y) (cv z)) (wcel (cv y) (cv x3))))))
  (@exan (λ z, wal (λ y, wi (ph y) (wcel (cv y) (cv z)))) (λ z, wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) (ph y)))))
    (@mpbi (wex (λ x3, wal (λ y, wi (ph y) (wcel (cv y) (cv x3))))) (wex (λ z, wal (λ y, wi (ph y) (wcel (cv y) (cv z)))))
      bm1_3ii_1
      (@cbvexvw (λ x3, wal (λ y, wi (ph y) (wcel (cv y) (cv x3)))) (λ z, wal (λ y, wi (ph y) (wcel (cv y) (cv z))))
        (λ x3 z, @albidv (wceq (cv x3) (cv z)) (λ y, wi (ph y) (wcel (cv y) (cv x3))) (λ y, wi (ph y) (wcel (cv y) (cv z)))
          (λ y, @imbi2d (wceq (cv x3) (cv z)) (wcel (cv y) (cv x3)) (wcel (cv y) (cv z)) (ph y)
            (@elequ2 y x3 z)))))
    (λ z, @ax_sep (λ y, ph y) z))


/-- The Null Set Axiom of ZF set theory: there exists a set with no elements. Axiom of Empty Set of
[Enderton] p. 18. In some textbooks, this is presented as a separate axiom; here we show it can be
derived from Separation ~ ax-sep . This version of the Null Set Axiom tells us that at least one
empty set exists, but does not tell us that it is unique - we need the Axiom of Extensionality to do
that (see ~ nulmo ). This proof, suggested by Jeff Hoffman, uses only ~ ax-4 and ~ ax-gen from
predicate calculus, which are valid in "free logic" i.e. logic holding in an empty domain (see Axiom
A5 and Rule R2 of [LeBlanc] p. 277). Thus, our ~ ax-sep implies the existence of at least one set.
Note that Kunen's version of ~ ax-sep (Axiom 3 of [Kunen] p. 11) does not imply the existence of a
set because his is universally closed, i.e., prefixed with universal quantifiers to eliminate all
free variables. His existence is provided by a separate axiom stating ` E. x x = x ` (Axiom 0 of
[Kunen] p. 10). See ~ axnulALT for a proof directly from ~ ax-rep . This theorem should not be
referenced by any proof. Instead, use ~ ax-nul below so that the uses of the Null Set Axiom can be
more easily identified. (Contributed by Jeff Hoffman, 3-Feb-2008.) (Revised by NM, 4-Feb-2008.) (New
usage is discouraged.) (Proof modification is discouraged.) -/
theorem ax_nul :
  ⊦ wex (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))) :=
setvar.forget $ λ z : setvar,
  show ⊦ wex (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))), from
  @eximii (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) wfal))) (λ x3, wal (λ y, wn (wcel (cv y) (cv x3))))
    (@ax_sep (λ y, wfal) z)
    (λ x3, @alimi (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) wfal)) (λ y, wn (wcel (cv y) (cv x3)))
      (λ y, @mtbiri (wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) wfal)) (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) wfal)
        (@intnan wfal (wcel (cv y) (cv z))
          fal)
        (@id (wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) (cv z)) wfal)))))


/-- The Null Set Axiom of ZF set theory: the empty set exists. Corollary 5.16 of [TakeutiZaring] p.
20. For the unabbreviated version, see ~ ax-nul . (Contributed by NM, 21-Jun-1993.) (Proof shortened
by Andrew Salmon, 9-Jul-2011.) -/
theorem «0ex» :
  ⊦ wcel c0 cvv :=
@issetri c0
  (@mpbir (wex (λ x3, wceq (cv x3) c0)) (wex (λ x3, wal (λ y, wn (wcel (cv y) (cv x3)))))
    ax_nul
    (@exbii (λ x3, wceq (cv x3) c0) (λ x3, wal (λ y, wn (wcel (cv y) (cv x3))))
      (λ x3, @eq0 (cv x3))))


/-- The existence of proper substitution into a class. (Contributed by NM, 10-Nov-2005.) (Revised by
NM, 17-Aug-2018.) -/
theorem csbexg {A2 B2 W : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wal (λ x3, wcel (B2 x3) (W x3))) (wcel (csb (A2 x3) (λ x3, B2 x3)) cvv) :=
@pm2_61ian (wcel (A2 x3) cvv) (wal (λ x3, wcel (B2 x3) (W x3))) (wcel (csb (A2 x3) (λ x3, B2 x3)) cvv)
  (@eqeltrid (wa (wcel (A2 x3) cvv) (wal (λ x3, wcel (B2 x3) (W x3)))) (csb (A2 x3) (λ x3, B2 x3)) (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) cvv
    (@df_csb (λ x3, A2 x3) (λ x3, B2 x3) x3)
    (@imp (wcel (A2 x3) cvv) (wal (λ x3, wcel (B2 x3) (W x3))) (wcel (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) cvv)
      (@sylibd (wcel (A2 x3) cvv) (wal (λ x3, wcel (B2 x3) (W x3))) (wsbc (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv) (A2 x3)) (wcel (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) cvv)
        (@syl5 (wal (λ x3, wcel (B2 x3) (W x3))) (wal (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv)) (wcel (A2 x3) cvv) (wsbc (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv) (A2 x3))
          (@alimi (λ x3, wcel (B2 x3) (W x3)) (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv)
            (λ x3, @eqeltrid (wcel (B2 x3) (W x3)) (cab (λ y, wcel (cv y) (B2 x3))) (B2 x3) cvv
              (@abid2 (B2 x3))
              (@elex (B2 x3) (W x3))))
          (@spsbc (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv) (λ x3, A2 x3) (λ x3, cvv) x3))
        (setvar.forget $ λ y : setvar,
          show ⊦ wi (wcel (A2 x3) cvv) (wb (wsbc (λ x3, wcel (cab (λ y, wcel (cv y) (B2 x3))) cvv) (A2 x3)) (wcel (cab (λ y, wsbc (λ x3, wcel (cv y) (B2 x3)) (A2 x3))) cvv)), from
          @sbcabel (λ x3 y, wcel (cv y) (B2 x3)) (λ x3, A2 x3) (λ x3 y, cvv) (λ x3 y, cvv)
            (λ y, @nfcv cvv) x3 y))))
  (@adantr (wn (wcel (A2 x3) cvv)) (wcel (csb (A2 x3) (λ x3, B2 x3)) cvv) (wal (λ x3, wcel (B2 x3) (W x3)))
    (@eqeltrdi (wn (wcel (A2 x3) cvv)) (csb (A2 x3) (λ x3, B2 x3)) c0 cvv
      (@csbprc (λ x3, A2 x3) (λ x3, B2 x3) x3)
      «0ex»))


/-- The existence of proper substitution into a class. (Contributed by NM, 7-Aug-2007.) (Proof
shortened by Andrew Salmon, 29-Jun-2011.) (Revised by NM, 17-Aug-2018.) -/
theorem csbex {A2 B2 : setvar → «class»}
  (csbex_1 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (x3 : setvar) : ⊦ wcel (csb (A2 x3) (λ x3, B2 x3)) cvv :=
@mpg (λ x3, wcel (B2 x3) cvv) (λ x3, wcel (csb (A2 x3) (λ x3, B2 x3)) cvv)
  (λ x3, @csbexg (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, cvv) x3)
  (λ x3, csbex_1 x3) x3


/-- No set contains all sets. Theorem 41 of [Suppes] p. 30. (Contributed by NM, 23-Aug-1993.) Remove
use of ~ ax-12 and ~ ax-13 . (Revised by BJ, 31-May-2019.) -/
theorem nalset :
  ⊦ wn (wex (λ x3, wal (λ y, wcel (cv y) (cv x3)))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wn (wex (λ x3, wal (λ y, wcel (cv y) (cv x3)))), from
  @mpgbi (λ x3, wex (λ y, wn (wcel (cv y) (cv x3)))) (λ x3, wn (wex (λ x3, wal (λ y, wcel (cv y) (cv x3)))))
    (λ x3, @alexn (λ x3 y, wcel (cv y) (cv x3)))
    (λ x3, @eximii (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wa (wcel (cv z) (cv x3)) (wn (wcel (cv z) (cv z)))))) (λ y, wn (wcel (cv y) (cv x3)))
      (@ax_sep (λ z, wn (wcel (cv z) (cv z))) x3)
      (λ y, @syl (wal (λ z, wb (wcel (cv z) (cv y)) (wa (wcel (cv z) (cv x3)) (wn (wcel (cv z) (cv z)))))) (wb (wcel (cv y) (cv y)) (wa (wcel (cv y) (cv x3)) (wn (wcel (cv y) (cv y))))) (wn (wcel (cv y) (cv x3)))
        (@spvv (λ z y, wb (wcel (cv z) (cv y)) (wa (wcel (cv z) (cv x3)) (wn (wcel (cv z) (cv z))))) (λ y, wb (wcel (cv y) (cv y)) (wa (wcel (cv y) (cv x3)) (wn (wcel (cv y) (cv y)))))
          (λ z y, @bibi12d (wceq (cv z) (cv y)) (wcel (cv z) (cv y)) (wcel (cv y) (cv y)) (wa (wcel (cv z) (cv x3)) (wn (wcel (cv z) (cv z)))) (wa (wcel (cv y) (cv x3)) (wn (wcel (cv y) (cv y))))
            (@elequ1_b1 z y)
            (@anbi12d (wceq (cv z) (cv y)) (wcel (cv z) (cv x3)) (wcel (cv y) (cv x3)) (wn (wcel (cv z) (cv z))) (wn (wcel (cv y) (cv y)))
              (@elequ1 x3 z y)
              (@notbid (wceq (cv z) (cv y)) (wcel (cv z) (cv z)) (wcel (cv y) (cv y))
                (@bitrd (wceq (cv z) (cv y)) (wcel (cv z) (cv z)) (wcel (cv y) (cv z)) (wcel (cv y) (cv y))
                  (@elequ1_b z y)
                  (@elequ2_b2 z y))))) y)
        (@pclem6 (wcel (cv y) (cv y)) (wcel (cv y) (cv x3))))) x3


/-- The universal class does not exist as a set. (Contributed by NM, 4-Jul-2005.) -/
theorem vnex :
  ⊦ wn (wex (λ x3, wceq (cv x3) cvv)) :=
@mtbi (wex (λ x3, wal (λ y, wcel (cv y) (cv x3)))) (wex (λ x3, wceq (cv x3) cvv))
  nalset
  (@exbii (λ x3, wal (λ y, wcel (cv y) (cv x3))) (λ x3, wceq (cv x3) cvv)
    (λ x3, @bitr4i (wal (λ y, wcel (cv y) (cv x3))) (wal (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) cvv))) (wceq (cv x3) cvv)
      (@albii (λ y, wcel (cv y) (cv x3)) (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) cvv))
        (λ y, @tbt (wcel (cv y) cvv) (wcel (cv y) (cv x3))
          (@vex y)))
      (@dfcleq (cv x3) cvv)))


/-- The universal class is not a member of itself (and thus is not a set). Proposition 5.21 of
[TakeutiZaring] p. 21; our proof, however, does not depend on the Axiom of Regularity. (Contributed
by NM, 23-Aug-1993.) -/
theorem vprc :
  ⊦ wn (wcel cvv cvv) :=
@mtbir (wcel cvv cvv) (wex (λ x3, wceq (cv x3) cvv))
  vnex
  (@isset cvv)


/-- Separation Scheme (Aussonderung) using class notation. Compare Exercise 4 of [TakeutiZaring] p.
22. (Contributed by NM, 21-Jun-1993.) -/
theorem inex1 {A2 B2 : «class»}
  (inex1_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (cin A2 B2) cvv :=
@issetri (cin A2 B2)
  (@mpbir (wex (λ x3, wceq (cv x3) (cin A2 B2))) (wex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) A2) (wcel (cv y) B2)))))
    (@zfauscl (λ y, wcel (cv y) B2) A2
      inex1_1)
    (@exbii (λ x3, wceq (cv x3) (cin A2 B2)) (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) A2) (wcel (cv y) B2))))
      (λ x3, @bitri (wceq (cv x3) (cin A2 B2)) (wal (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) (cin A2 B2)))) (wal (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) A2) (wcel (cv y) B2))))
        (@dfcleq (cv x3) (cin A2 B2))
        (@albii (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) (cin A2 B2))) (λ y, wb (wcel (cv y) (cv x3)) (wa (wcel (cv y) A2) (wcel (cv y) B2)))
          (λ y, @bibi2i (wcel (cv y) (cin A2 B2)) (wa (wcel (cv y) A2) (wcel (cv y) B2)) (wcel (cv y) (cv x3))
            (@elin (cv y) A2 B2))))))


/-- Separation Scheme (Aussonderung) using class notation. (Contributed by NM, 27-Apr-1994.) -/
theorem inex2 {A2 B2 : «class»}
  (inex2_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (cin B2 A2) cvv :=
@eqeltri (cin B2 A2) (cin A2 B2) cvv
  (@incom B2 A2)
  (@inex1 A2 B2
    inex2_1)


/-- Closed-form, generalized Separation Scheme. (Contributed by NM, 7-Apr-1995.) -/
theorem inex1g {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel (cin A2 B2) cvv) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wcel A2 V) (wcel (cin A2 B2) cvv), from
  @vtoclg (λ x3, wcel (cin (cv x3) B2) cvv) (wcel (cin A2 B2) cvv) A2 (λ x3, V)
    (λ x3, @eleq1d (wceq (cv x3) A2) (cin (cv x3) B2) (cin A2 B2) cvv
      (@ineq1 (cv x3) A2 B2))
    (λ x3, @inex1 (cv x3) B2
      (@vex x3)) x3


/-- The subset of a set is also a set. Exercise 3 of [TakeutiZaring] p. 22. This is one way to
express the Axiom of Separation ~ ax-sep (a.k.a. Subset Axiom). (Contributed by NM, 27-Apr-1994.) -/
theorem ssex {A2 B2 : «class»}
  (ssex_1 : ⊦ wcel B2 cvv) :
  ⊦ wi (wss A2 B2) (wcel A2 cvv) :=
@sylbi (wss A2 B2) (wceq (cin A2 B2) A2) (wcel A2 cvv)
  (@df_ss A2 B2)
  (@mpbii (wceq (cin A2 B2) A2) (wcel (cin A2 B2) cvv) (wcel A2 cvv)
    (@inex2 B2 A2
      ssex_1)
    (@eleq1 (cin A2 B2) A2 cvv))


/-- The subset of a set is also a set. (Contributed by NM, 9-Sep-1993.) -/
theorem ssexi {A2 B2 : «class»}
  (ssexi_1 : ⊦ wcel B2 cvv)
  (ssexi_2 : ⊦ wss A2 B2) :
  ⊦ wcel A2 cvv :=
@ax_mp (wss A2 B2) (wcel A2 cvv)
  ssexi_2
  (@ssex A2 B2
    ssexi_1)


/-- The subset of a set is also a set. Exercise 3 of [TakeutiZaring] p. 22 (generalized).
(Contributed by NM, 14-Aug-1994.) -/
theorem ssexg {A2 B2 C : «class»} :
  ⊦ wi (wa (wss A2 B2) (wcel B2 C)) (wcel A2 cvv) :=
@impcom (wcel B2 C) (wss A2 B2) (wcel A2 cvv)
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel B2 C) (wi (wss A2 B2) (wcel A2 cvv)), from
    @vtoclg (λ x3, wi (wss A2 (cv x3)) (wcel A2 cvv)) (wi (wss A2 B2) (wcel A2 cvv)) B2 (λ x3, C)
      (λ x3, @imbi1d (wceq (cv x3) B2) (wss A2 (cv x3)) (wss A2 B2) (wcel A2 cvv)
        (@sseq2 (cv x3) B2 A2))
      (λ x3, @ssex A2 (cv x3)
        (@vex x3)) x3)


/-- A subclass of a set is a set. Deduction form of ~ ssexg . (Contributed by David Moews,
1-May-2017.) -/
theorem ssexd {ph : wff} {A2 B2 C : «class»}
  (ssexd_1 : ⊦ wi ph (wcel B2 C))
  (ssexd_2 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wcel A2 cvv) :=
@syl2anc ph (wss A2 B2) (wcel B2 C) (wcel A2 cvv)
  ssexd_2
  ssexd_1
  (@ssexg A2 B2 C)


/-- Elementhood to a power set. (Contributed by Thierry Arnoux, 18-May-2020.) -/
theorem sselpwd {ph : wff} {A2 B2 V : «class»}
  (sselpwd_1 : ⊦ wi ph (wcel B2 V))
  (sselpwd_2 : ⊦ wi ph (wss A2 B2)) :
  ⊦ wi ph (wcel A2 (cpw B2)) :=
@elpwd ph A2 B2 cvv
  (@ssexd ph A2 B2 V
    sselpwd_1
    sselpwd_2)
  sselpwd_2


/-- Existence of a difference. (Contributed by NM, 26-May-1998.) -/
theorem difexg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel (cdif A2 B2) cvv) :=
@mpan (wss (cdif A2 B2) A2) (wcel A2 V) (wcel (cdif A2 B2) cvv)
  (@difss A2 B2)
  (@ssexg (cdif A2 B2) A2 V)


/-- Existence of a difference, inference version of ~ difexg . (Contributed by Glauco Siliprandi,
3-Mar-2021.) (Revised by AV, 26-Mar-2021.) -/
theorem difexi {A2 B2 : «class»}
  (difexi_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (cdif A2 B2) cvv :=
@ax_mp (wcel A2 cvv) (wcel (cdif A2 B2) cvv)
  difexi_1
  (@difexg A2 B2 cvv)


/-- Existence of a difference. (Contributed by SN, 16-Jul-2024.) -/
theorem difexd {ph : wff} {A2 B2 V : «class»}
  (difexd_1 : ⊦ wi ph (wcel A2 V)) :
  ⊦ wi ph (wcel (cdif A2 B2) cvv) :=
@syl ph (wcel A2 V) (wcel (cdif A2 B2) cvv)
  difexd_1
  (@difexg A2 B2 V)


/-- Separation Scheme in terms of a restricted class abstraction. (Contributed by NM, 23-Oct-1999.)
-/
theorem rabexg {ph : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wcel (crab (λ x3, ph x3) (λ x3, A2)) cvv) :=
@mpan (wss (crab (λ x3, ph x3) (λ x3, A2)) A2) (wcel A2 (V x3)) (wcel (crab (λ x3, ph x3) (λ x3, A2)) cvv)
  (@ssrab2 (λ x3, ph x3) A2)
  (@ssexg (crab (λ x3, ph x3) (λ x3, A2)) A2 (V x3))


/-- Separation Scheme in terms of a restricted class abstraction. (Contributed by NM, 19-Jul-1996.)
-/
theorem rabex {ph : setvar → wff} {A2 : «class»}
  (rabex_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (crab (λ x3, ph x3) (λ x3, A2)) cvv :=
@ax_mp (wcel A2 cvv) (wcel (crab (λ x3, ph x3) (λ x3, A2)) cvv)
  rabex_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wcel (crab (λ x3, ph x3) (λ x3, A2)) cvv), from
    @rabexg (λ x3, ph x3) A2 (λ x3, cvv) x3)


/-- Separation Scheme in terms of a restricted class abstraction, deduction form of ~ rabex2 .
(Contributed by AV, 16-Jul-2019.) -/
theorem rabexd {ph ps : setvar → wff} {A2 : «class»} {B2 V : setvar → «class»}
  (rabexd_1 : ∀ x3, ⊦ wceq (B2 x3) (crab (λ x3, ps x3) (λ x3, A2)))
  (rabexd_2 : ∀ x3, ⊦ wi (ph x3) (wcel A2 (V x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wcel (B2 x3) cvv) :=
@eqeltrid (ph x3) (B2 x3) (crab (λ x3, ps x3) (λ x3, A2)) cvv
  (rabexd_1 x3)
  (@syl (ph x3) (wcel A2 (V x3)) (wcel (crab (λ x3, ps x3) (λ x3, A2)) cvv)
    (rabexd_2 x3)
    (@rabexg (λ x3, ps x3) A2 (λ x3, V x3) x3))


/-- Separation Scheme in terms of a restricted class abstraction. (Contributed by AV, 16-Jul-2019.)
(Revised by AV, 26-Mar-2021.) -/
theorem rabex2 {ps : setvar → wff} {A2 : «class»} {B2 : setvar → «class»}
  (rabex2_1 : ∀ x3, ⊦ wceq (B2 x3) (crab (λ x3, ps x3) (λ x3, A2)))
  (rabex2_2 : ⊦ wcel A2 cvv)
  (x3 : setvar) : ⊦ wcel (B2 x3) cvv :=
@ax_mp (wcel A2 cvv) (wcel (B2 x3) cvv)
  rabex2_2
  (@rabexd (λ x3, wcel A2 cvv) (λ x3, ps x3) A2 (λ x3, B2 x3) (λ x3, cvv)
    (λ x3, rabex2_1 x3)
    (λ x3, @id (wcel A2 cvv)) x3)


/-- The intersection of a nonempty class exists. Exercise 5 of [TakeutiZaring] p. 44 and its
converse. (Contributed by NM, 13-Aug-2002.) -/
theorem intex {A2 : «class»} :
  ⊦ wb (wne A2 c0) (wcel (cint A2) cvv) :=
@impbii (wne A2 c0) (wcel (cint A2) cvv)
  (@sylbi (wne A2 c0) (wex (λ x3, wcel (cv x3) A2)) (wcel (cint A2) cvv)
    (@n0 A2)
    (@exlimiv (λ x3, wcel (cv x3) A2) (wcel (cint A2) cvv)
      (λ x3, @syl (wcel (cv x3) A2) (wss (cint A2) (cv x3)) (wcel (cint A2) cvv)
        (@intss1 (cv x3) A2)
        (@ssex (cint A2) (cv x3)
          (@vex x3)))))
  (@necon2ai (wcel (cint A2) cvv) A2 c0
    (@mtbiri (wceq A2 c0) (wcel (cint A2) cvv) (wcel cvv cvv)
      vprc
      (@eleq1d (wceq A2 c0) (cint A2) cvv cvv
        (@eqtrdi (wceq A2 c0) (cint A2) (cint c0) cvv
          (@inteq A2 c0)
          int0))))


/-- The intersection of a nonempty class abstraction exists. (Contributed by NM, 21-Oct-2003.) -/
theorem intexab {ph : setvar → wff} :
  ⊦ wb (wex (λ x3, ph x3)) (wcel (cint (cab (λ x3, ph x3))) cvv) :=
@bitr3i (wex (λ x3, ph x3)) (wne (cab (λ x3, ph x3)) c0) (wcel (cint (cab (λ x3, ph x3))) cvv)
  (@abn0 (λ x3, ph x3))
  (@intex (cab (λ x3, ph x3)))


/-- The intersection of a nonempty restricted class abstraction exists. (Contributed by NM,
21-Oct-2003.) -/
theorem intexrab {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wcel (cint (crab (λ x3, ph x3) (λ x3, A2 x3))) cvv) :=
@«3bitr4i» (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wcel (cint (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))) cvv) (wrex (λ x3, ph x3) (λ x3, A2 x3)) (wcel (cint (crab (λ x3, ph x3) (λ x3, A2 x3))) cvv)
  (@intexab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
  (@df_rex (λ x3, ph x3) (λ x3, A2 x3))
  (@eleq1i (cint (crab (λ x3, ph x3) (λ x3, A2 x3))) (cint (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))) cvv
    (@inteqi (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
      (@df_rab (λ x3, ph x3) (λ x3, A2 x3))))


/-- Membership in a power class. Theorem 86 of [Suppes] p. 47. (Contributed by NM, 7-Aug-2000.) -/
theorem elpw2g {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wb (wcel A2 (cpw B2)) (wss A2 B2)) :=
@impbid2 (wcel B2 V) (wcel A2 (cpw B2)) (wss A2 B2)
  (@elpwi A2 B2)
  (@expcom (wss A2 B2) (wcel B2 V) (wcel A2 (cpw B2))
    (@syldan (wss A2 B2) (wcel B2 V) (wcel A2 cvv) (wcel A2 (cpw B2))
      (@ssexg A2 B2 V)
      (@biimparc (wcel A2 cvv) (wcel A2 (cpw B2)) (wss A2 B2)
        (@elpwg A2 B2 cvv))))


/-- Membership in a power class. Theorem 86 of [Suppes] p. 47. (Contributed by NM, 11-Oct-2007.) -/
theorem elpw2 {A2 B2 : «class»}
  (elpw2_1 : ⊦ wcel B2 cvv) :
  ⊦ wb (wcel A2 (cpw B2)) (wss A2 B2) :=
@ax_mp (wcel B2 cvv) (wb (wcel A2 (cpw B2)) (wss A2 B2))
  elpw2_1
  (@elpw2g A2 B2 cvv)


/-- Membership in a power class. (Contributed by Glauco Siliprandi, 3-Mar-2021.) (Proof shortened by
Wolf Lammen, 26-May-2024.) -/
theorem elpwi2 {A2 B2 V : «class»}
  (elpwi2_1 : ⊦ wcel B2 V)
  (elpwi2_2 : ⊦ wss A2 B2) :
  ⊦ wcel A2 (cpw B2) :=
@mpbir (wcel A2 (cpw B2)) (wss A2 B2)
  elpwi2_2
  (@elpw2 A2 B2
    (@elexi B2 V
      elpwi2_1))


/-- The power set of a set is never a subset. (Contributed by Stefan O'Rear, 22-Feb-2015.) -/
theorem pwnss {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wn (wss (cpw A2) A2)) :=
@nsyl3 (wss (cpw A2) A2) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (cpw A2)) (wcel A2 V)
  (@mtoi (wss (cpw A2) A2) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (cpw A2)) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2)
    (@rru A2)
    (@ssel (cpw A2) A2 (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2))))
  (@mpbiri (wcel A2 V) (wcel (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) (cpw A2)) (wss (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2)
    (@ssrab2 (λ x3, wn (wcel (cv x3) (cv x3))) A2)
    (@elpw2g (crab (λ x3, wn (wcel (cv x3) (cv x3))) (λ x3, A2)) A2 V))


/-- No set equals its power set. The sethood antecedent is necessary; compare ~ pwv . (Contributed
by NM, 17-Nov-2008.) (Proof shortened by Mario Carneiro, 23-Dec-2016.) -/
theorem pwne {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wne (cpw A2) A2) :=
@syl (wcel A2 V) (wn (wss (cpw A2) A2)) (wne (cpw A2) A2)
  (@pwnss A2 V)
  (@necon3bi (wss (cpw A2) A2) (cpw A2) A2
    (@eqimss (cpw A2) A2))


/-- Every power class contains the empty set. (Contributed by NM, 25-Oct-2007.) -/
theorem «0elpw» {A2 : «class»} :
  ⊦ wcel c0 (cpw A2) :=
@mpbir (wcel c0 (cpw A2)) (wss c0 A2)
  (@«0ss» A2)
  (@elpw c0 A2
    «0ex»)


/-- The empty set and its power set are not equal. (Contributed by NM, 23-Dec-1993.) -/
theorem «0nep0» :
  ⊦ wne c0 (csn c0) :=
@necomi (csn c0) c0
  (@snnz c0
    «0ex»)


/-- Something cannot be equal to both the null set and the power set of the null set. (Contributed
by NM, 21-Jun-1993.) -/
theorem «0inp0» {A2 : «class»} :
  ⊦ wi (wceq A2 c0) (wn (wceq A2 (csn c0))) :=
@neneqd (wceq A2 c0) A2 (csn c0)
  (@mpbiri (wceq A2 c0) (wne A2 (csn c0)) (wne c0 (csn c0))
    «0nep0»
    (@neeq1 A2 c0 (csn c0)))


/-- The removal of the empty set from a class does not affect its union. (Contributed by NM,
22-Mar-2004.) -/
theorem unidif0 {A2 : «class»} :
  ⊦ wceq (cuni (cdif A2 (csn c0))) (cuni A2) :=
@«3eqtri» (cuni (cdif A2 (csn c0))) (cun c0 (cuni A2)) (cun (cuni A2) c0) (cuni A2)
  (@«3eqtri» (cuni (cdif A2 (csn c0))) (cuni (cun (csn c0) A2)) (cun (cuni (csn c0)) (cuni A2)) (cun c0 (cuni A2))
    (@«3eqtr4ri» (cuni (cun (cdif A2 (csn c0)) (csn c0))) (cun (cuni (cdif A2 (csn c0))) (cuni (csn c0))) (cuni (cun (csn c0) A2)) (cuni (cdif A2 (csn c0)))
      (@uniun (cdif A2 (csn c0)) (csn c0))
      (@unieqi (cun (csn c0) A2) (cun (cdif A2 (csn c0)) (csn c0))
        (@eqtr2i (cun (cdif A2 (csn c0)) (csn c0)) (cun A2 (csn c0)) (cun (csn c0) A2)
          (@undif1 A2 (csn c0))
          (@uncom A2 (csn c0))))
      (@eqtr2i (cun (cuni (cdif A2 (csn c0))) (cuni (csn c0))) (cun (cuni (cdif A2 (csn c0))) c0) (cuni (cdif A2 (csn c0)))
        (@uneq2i (cuni (csn c0)) c0 (cuni (cdif A2 (csn c0)))
          (@unisn c0
            «0ex»))
        (@un0 (cuni (cdif A2 (csn c0))))))
    (@uniun (csn c0) A2)
    (@uneq1i (cuni (csn c0)) c0 (cuni A2)
      (@unisn c0
        «0ex»)))
  (@uncom c0 (cuni A2))
  (@un0 (cuni A2))


-- /-- Axiom of Power Sets. An axiom of Zermelo-Fraenkel set theory. It states that a set ` y `
-- exists that includes the power set of a given set ` x ` i.e. contains every subset of ` x ` . The
-- variant ~ axpow2 uses explicit subset notation. A version using class notation is ~ pwex .
-- (Contributed by NM, 21-Jun-1993.) -/
-- axiom ax_pow {x3 : setvar} : ⊦ wex (λ y, wal (λ z, wi (wal (λ w, wi (wcel (cv w) (cv z)) (wcel (cv w) (cv x3)))) (wcel (cv z) (cv y))))


/-- A variant of the Axiom of Power Sets ~ ax-pow using subset notation. Problem in [BellMachover]
p. 466. (Contributed by NM, 4-Jun-2006.) -/
theorem axpow2 {x3 : setvar} :
  ⊦ wex (λ y, wal (λ z, wi (wss (cv z) (cv x3)) (wcel (cv z) (cv y)))) :=
@mpbir (wex (λ y, wal (λ z, wi (wss (cv z) (cv x3)) (wcel (cv z) (cv y))))) (wex (λ y, wal (λ z, wi (wal (λ w, wi (wcel (cv w) (cv z)) (wcel (cv w) (cv x3)))) (wcel (cv z) (cv y)))))
  (@ax_pow x3)
  (@exbii (λ y, wal (λ z, wi (wss (cv z) (cv x3)) (wcel (cv z) (cv y)))) (λ y, wal (λ z, wi (wal (λ w, wi (wcel (cv w) (cv z)) (wcel (cv w) (cv x3)))) (wcel (cv z) (cv y))))
    (λ y, @albii (λ z, wi (wss (cv z) (cv x3)) (wcel (cv z) (cv y))) (λ z, wi (wal (λ w, wi (wcel (cv w) (cv z)) (wcel (cv w) (cv x3)))) (wcel (cv z) (cv y)))
      (λ z, @imbi1i (wss (cv z) (cv x3)) (wal (λ w, wi (wcel (cv w) (cv z)) (wcel (cv w) (cv x3)))) (wcel (cv z) (cv y))
        (@dfss2 (cv z) (cv x3)))))


/-- Power set axiom: the powerclass of a set is a set. Axiom 4 of [TakeutiZaring] p. 17.
(Contributed by NM, 30-Oct-2003.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) Revised to prove
~ pwexg from ~ vpwex . (Revised by BJ, 10-Aug-2022.) -/
theorem vpwex {x3 : setvar} :
  ⊦ wcel (cpw (cv x3)) cvv :=
@eqeltri (cpw (cv x3)) (cab (λ w, wss (cv w) (cv x3))) cvv
  (@df_pw (cv x3))
  (@issetri (cab (λ w, wss (cv w) (cv x3)))
    (@mpbir (wex (λ y, wceq (cv y) (cab (λ w, wss (cv w) (cv x3))))) (wex (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wss (cv z) (cv x3)))))
      (@bm1_3ii (λ z, wss (cv z) (cv x3))
        (@axpow2 x3))
      (@exbii (λ y, wceq (cv y) (cab (λ w, wss (cv w) (cv x3)))) (λ y, wal (λ z, wb (wcel (cv z) (cv y)) (wss (cv z) (cv x3))))
        (λ y, setvar.forget $ λ w : setvar,
          show ⊦ wb (wceq (cv y) (cab (λ w, wss (cv w) (cv x3)))) (wal (λ z, wb (wcel (cv z) (cv y)) (wss (cv z) (cv x3)))), from
          @abeq2w (λ w, wss (cv w) (cv x3)) (λ z, wss (cv z) (cv x3)) (λ w, cv y)
            (λ w z, @sseq1 (cv w) (cv z) (cv x3)) w))))


/-- Power set axiom expressed in class notation, with the sethood requirement as an antecedent.
(Contributed by NM, 30-Oct-2003.) -/
theorem pwexg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel (cpw A2) cvv) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wcel A2 V) (wcel (cpw A2) cvv), from
  @vtoclg (λ x3, wcel (cpw (cv x3)) cvv) (wcel (cpw A2) cvv) A2 (λ x3, V)
    (λ x3, @eleq1d (wceq (cv x3) A2) (cpw (cv x3)) (cpw A2) cvv
      (@pweq (cv x3) A2))
    (λ x3, @vpwex x3) x3


/-- Deduction version of the power set axiom. (Contributed by Glauco Siliprandi, 26-Jun-2021.) -/
theorem pwexd {ph : wff} {A2 V : «class»}
  (pwexd_1 : ⊦ wi ph (wcel A2 V)) :
  ⊦ wi ph (wcel (cpw A2) cvv) :=
@syl ph (wcel A2 V) (wcel (cpw A2) cvv)
  pwexd_1
  (@pwexg A2 V)


/-- Power set axiom expressed in class notation. (Contributed by NM, 21-Jun-1993.) -/
theorem pwex {A2 : «class»}
  (pwex_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (cpw A2) cvv :=
@ax_mp (wcel A2 cvv) (wcel (cpw A2) cvv)
  pwex_1
  (@pwexg A2 cvv)


/-- Existence of a class of subsets. (Contributed by NM, 15-Jul-2006.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem abssexg {ph : setvar → wff} {A2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wcel (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) cvv) :=
@syl (wcel A2 (V x3)) (wcel (cpw A2) cvv) (wcel (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) cvv)
  (@pwexg A2 (V x3))
  (@sylbi (wcel (cpw A2) cvv) (wcel (cab (λ x3, wss (cv x3) A2)) cvv) (wcel (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) cvv)
    (@eleq1i (cpw A2) (cab (λ x3, wss (cv x3) A2)) cvv
      (@df_pw A2))
    (@mpan (wss (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) (cab (λ x3, wss (cv x3) A2))) (wcel (cab (λ x3, wss (cv x3) A2)) cvv) (wcel (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) cvv)
      (@ss2abi (λ x3, wa (wss (cv x3) A2) (ph x3)) (λ x3, wss (cv x3) A2)
        (λ x3, @simpl (wss (cv x3) A2) (ph x3)))
      (@ssexg (cab (λ x3, wa (wss (cv x3) A2) (ph x3))) (cab (λ x3, wss (cv x3) A2)) cvv)))


/-- The power set of the empty set (the ordinal 1) is a set. See also ~ p0exALT . (Contributed by
NM, 23-Dec-1993.) -/
theorem p0ex :
  ⊦ wcel (csn c0) cvv :=
@eqeltrri (cpw c0) (csn c0) cvv
  pw0
  (@pwex c0
    «0ex»)


/-- Transfer universal quantification from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by NM, 15-Aug-2014.) (Proof shortened by Mario Carneiro,
19-Nov-2016.) (Proof shortened by JJ, 7-Aug-2021.) -/
theorem ralxfrd {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»}
  (ralxfrd_1 : ∀ y, ⊦ wi (wa ph (wcel (cv y) (C y))) (wcel (A2 y) B2))
  (ralxfrd_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)))
  (ralxfrd_3 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (A2 y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wral (λ x3, ps x3) (λ x3, B2)) (wral (λ y, ch y) (λ y, C y))) :=
@impbid ph (wral (λ x3, ps x3) (λ x3, B2)) (wral (λ y, ch y) (λ y, C y))
  (@ralrimdva ph (wral (λ x3, ps x3) (λ x3, B2)) (λ y, ch y) (λ y, C y)
    (λ y, @rspcdv (wa ph (wcel (cv y) (C y))) (λ x3, ps x3) (ch y) (A2 y) B2
      (ralxfrd_1 y)
      (λ x3, @adantlr ph (wceq (cv x3) (A2 y)) (wb (ps x3) (ch y)) (wcel (cv y) (C y))
        (ralxfrd_3 x3 y))))
  (@ralrimdva ph (wral (λ y, ch y) (λ y, C y)) (λ x3, ps x3) (λ x3, B2)
    (λ x3, @mpan2d (wa ph (wcel (cv x3) B2)) (wral (λ y, ch y) (λ y, C y)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)) (ps x3)
      (ralxfrd_2 x3)
      (@adantr ph (wi (wa (wral (λ y, ch y) (λ y, C y)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))) (ps x3)) (wcel (cv x3) B2)
        (@syl5 (wa (wral (λ y, ch y) (λ y, C y)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))) (wrex (λ y, wa (ch y) (wceq (cv x3) (A2 y))) (λ y, C y)) ph (ps x3)
          (@r19_29 (λ y, ch y) (λ y, wceq (cv x3) (A2 y)) (λ y, C y))
          (@rexlimdvw ph (λ y, wa (ch y) (wceq (cv x3) (A2 y))) (ps x3) (λ y, C y)
            (λ y, @impcomd ph (wceq (cv x3) (A2 y)) (ch y) (ps x3)
              (@exbiri ph (wceq (cv x3) (A2 y)) (ps x3) (ch y)
                (ralxfrd_3 x3 y))))))))


/-- Transfer universal quantification from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by FL, 10-Apr-2007.) (Revised by Mario Carneiro, 15-Aug-2014.) -/
theorem rexxfrd {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»}
  (ralxfrd_1 : ∀ y, ⊦ wi (wa ph (wcel (cv y) (C y))) (wcel (A2 y) B2))
  (ralxfrd_2 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)))
  (ralxfrd_3 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (A2 y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wrex (λ x3, ps x3) (λ x3, B2)) (wrex (λ y, ch y) (λ y, C y))) :=
@«3bitr4g» ph (wn (wral (λ x3, wn (ps x3)) (λ x3, B2))) (wn (wral (λ y, wn (ch y)) (λ y, C y))) (wrex (λ x3, ps x3) (λ x3, B2)) (wrex (λ y, ch y) (λ y, C y))
  (@notbid ph (wral (λ x3, wn (ps x3)) (λ x3, B2)) (wral (λ y, wn (ch y)) (λ y, C y))
    (@ralxfrd ph (λ x3, wn (ps x3)) (λ y, wn (ch y)) (λ y, A2 y) B2 (λ y, C y)
      (λ y, ralxfrd_1 y)
      (λ x3, ralxfrd_2 x3)
      (λ x3 y, @notbid (wa ph (wceq (cv x3) (A2 y))) (ps x3) (ch y)
        (ralxfrd_3 x3 y))))
  (@dfrex2 (λ x3, ps x3) (λ x3, B2))
  (@dfrex2 (λ y, ch y) (λ y, C y))


/-- Transfer universal quantification from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by Mario Carneiro, 20-Aug-2014.) -/
theorem ralxfr2d {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»} {V : setvar → setvar → «class»}
  (ralxfr2d_1 : ∀ x3 y, ⊦ wi (wa ph (wcel (cv y) (C y))) (wcel (A2 y) (V x3 y)))
  (ralxfr2d_2 : ∀ x3, ⊦ wi ph (wb (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))))
  (ralxfr2d_3 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (A2 y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wral (λ x3, ps x3) (λ x3, B2)) (wral (λ y, ch y) (λ y, C y))) :=
@ralxfrd ph (λ x3, ps x3) (λ y, ch y) (λ y, A2 y) B2 (λ y, C y)
  (λ y, @mpd (wa ph (wcel (cv y) (C y))) (wex (λ x3, wceq (cv x3) (A2 y))) (wcel (A2 y) B2)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wa ph (wcel (cv y) (C y))) (wex (λ x3, wceq (cv x3) (A2 y))), from
      @syl (wa ph (wcel (cv y) (C y))) (wcel (A2 y) (V x3 y)) (wex (λ x3, wceq (cv x3) (A2 y)))
        (ralxfr2d_1 x3 y)
        (@elisset (A2 y) (λ x3, V x3 y) x3))
    (@exlimdv (wa ph (wcel (cv y) (C y))) (λ x3, wceq (cv x3) (A2 y)) (wcel (A2 y) B2)
      (λ x3, @mpbidi (wceq (cv x3) (A2 y)) (wcel (cv x3) B2) (wcel (A2 y) B2) (wa ph (wcel (cv y) (C y)))
        (@r19_21bi (λ y, ph) (λ y, wi (wceq (cv x3) (A2 y)) (wcel (cv x3) B2)) (λ y, C y)
          (λ y, @sylibr ph (wi (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)) (wcel (cv x3) B2)) (wral (λ y, wi (wceq (cv x3) (A2 y)) (wcel (cv x3) B2)) (λ y, C y))
            (@biimprd ph (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))
              (ralxfr2d_2 x3))
            (@r19_23v (λ y, wceq (cv x3) (A2 y)) (wcel (cv x3) B2) (λ y, C y))) y)
        (@eleq1 (cv x3) (A2 y) B2))))
  (λ x3, @biimpa ph (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))
    (ralxfr2d_2 x3))
  (λ x3 y, ralxfr2d_3 x3 y)


/-- Transfer universal quantification from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by Mario Carneiro, 20-Aug-2014.) (Proof shortened by Mario Carneiro,
19-Nov-2016.) -/
theorem rexxfr2d {ph : wff} {ps ch : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»} {V : setvar → setvar → «class»}
  (ralxfr2d_1 : ∀ x3 y, ⊦ wi (wa ph (wcel (cv y) (C y))) (wcel (A2 y) (V x3 y)))
  (ralxfr2d_2 : ∀ x3, ⊦ wi ph (wb (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y))))
  (ralxfr2d_3 : ∀ x3 y, ⊦ wi (wa ph (wceq (cv x3) (A2 y))) (wb (ps x3) (ch y))) :
  ⊦ wi ph (wb (wrex (λ x3, ps x3) (λ x3, B2)) (wrex (λ y, ch y) (λ y, C y))) :=
@«3bitr4g» ph (wn (wral (λ x3, wn (ps x3)) (λ x3, B2))) (wn (wral (λ y, wn (ch y)) (λ y, C y))) (wrex (λ x3, ps x3) (λ x3, B2)) (wrex (λ y, ch y) (λ y, C y))
  (@notbid ph (wral (λ x3, wn (ps x3)) (λ x3, B2)) (wral (λ y, wn (ch y)) (λ y, C y))
    (@ralxfr2d ph (λ x3, wn (ps x3)) (λ y, wn (ch y)) (λ y, A2 y) B2 (λ y, C y) (λ x3 y, V x3 y)
      (λ x3 y, ralxfr2d_1 x3 y)
      (λ x3, ralxfr2d_2 x3)
      (λ x3 y, @notbid (wa ph (wceq (cv x3) (A2 y))) (ps x3) (ch y)
        (ralxfr2d_3 x3 y))))
  (@dfrex2 (λ x3, ps x3) (λ x3, B2))
  (@dfrex2 (λ y, ch y) (λ y, C y))


/-- Transfer universal quantification from a variable ` x ` to another variable ` y ` contained in
expression ` A ` . (Contributed by NM, 10-Jun-2005.) (Revised by Mario Carneiro, 15-Aug-2014.) -/
theorem ralxfr {ph ps : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»}
  (ralxfr_1 : ∀ y, ⊦ wi (wcel (cv y) (C y)) (wcel (A2 y) B2))
  (ralxfr_2 : ∀ x3, ⊦ wi (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)))
  (ralxfr_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, B2)) (wral (λ y, ps y) (λ y, C y)) :=
@mptru (wb (wral (λ x3, ph x3) (λ x3, B2)) (wral (λ y, ps y) (λ y, C y)))
  (@ralxfrd wtru (λ x3, ph x3) (λ y, ps y) (λ y, A2 y) B2 (λ y, C y)
    (λ y, @adantl (wcel (cv y) (C y)) (wcel (A2 y) B2) wtru
      (ralxfr_1 y))
    (λ x3, @adantl (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)) wtru
      (ralxfr_2 x3))
    (λ x3 y, @adantl (wceq (cv x3) (A2 y)) (wb (ph x3) (ps y)) wtru
      (ralxfr_3 x3 y)))


/-- Transfer existence from a variable ` x ` to another variable ` y ` contained in expression ` A `
. (Contributed by NM, 10-Jun-2005.) (Revised by Mario Carneiro, 15-Aug-2014.) -/
theorem rexxfr {ph ps : setvar → wff} {A2 : setvar → «class»} {B2 : «class»} {C : setvar → «class»}
  (ralxfr_1 : ∀ y, ⊦ wi (wcel (cv y) (C y)) (wcel (A2 y) B2))
  (ralxfr_2 : ∀ x3, ⊦ wi (wcel (cv x3) B2) (wrex (λ y, wceq (cv x3) (A2 y)) (λ y, C y)))
  (ralxfr_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) (A2 y)) (wb (ph x3) (ps y))) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, B2)) (wrex (λ y, ps y) (λ y, C y)) :=
@bitr4i (wrex (λ x3, ph x3) (λ x3, B2)) (wn (wral (λ x3, wn (ph x3)) (λ x3, B2))) (wrex (λ y, ps y) (λ y, C y))
  (@dfrex2 (λ x3, ph x3) (λ x3, B2))
  (@xchbinxr (wrex (λ y, ps y) (λ y, C y)) (wral (λ y, wn (ps y)) (λ y, C y)) (wral (λ x3, wn (ph x3)) (λ x3, B2))
    (@dfrex2 (λ y, ps y) (λ y, C y))
    (@ralxfr (λ x3, wn (ph x3)) (λ y, wn (ps y)) (λ y, A2 y) B2 (λ y, C y)
      (λ y, ralxfr_1 y)
      (λ x3, ralxfr_2 x3)
      (λ x3 y, @notbid (wceq (cv x3) (A2 y)) (ph x3) (ps y)
        (ralxfr_3 x3 y))))


/-- A theorem useful for eliminating the restricted existential uniqueness hypotheses in ~ riotaxfrd
. (Contributed by NM, 16-Jan-2012.) -/
theorem reuhypd {ph : setvar → wff} {A2 : setvar → setvar → «class»} {B2 C : setvar → «class»}
  (reuhypd_1 : ∀ x3, ⊦ wi (wa (ph x3) (wcel (cv x3) (C x3))) (wcel (B2 x3) (C x3)))
  (reuhypd_2 : ∀ x3 y, ⊦ wi (w3a (ph x3) (wcel (cv x3) (C x3)) (wcel (cv y) (C x3))) (wb (wceq (cv x3) (A2 x3 y)) (wceq (cv y) (B2 x3))))
  (x3 : setvar) : ⊦ wi (wa (ph x3) (wcel (cv x3) (C x3))) (wreu (λ y, wceq (cv x3) (A2 x3 y)) (λ y, C x3)) :=
@sylibr (wa (ph x3) (wcel (cv x3) (C x3))) (weu (λ y, wa (wcel (cv y) (C x3)) (wceq (cv x3) (A2 x3 y)))) (wreu (λ y, wceq (cv x3) (A2 x3 y)) (λ y, C x3))
  (@mpbid (wa (ph x3) (wcel (cv x3) (C x3))) (weu (λ y, wceq (cv y) (B2 x3))) (weu (λ y, wa (wcel (cv y) (C x3)) (wceq (cv x3) (A2 x3 y))))
    (@sylib (wa (ph x3) (wcel (cv x3) (C x3))) (wcel (B2 x3) cvv) (weu (λ y, wceq (cv y) (B2 x3)))
      (@elexd (wa (ph x3) (wcel (cv x3) (C x3))) (B2 x3) (C x3)
        (reuhypd_1 x3))
      (@eueq (B2 x3)))
    (@eubidv (wa (ph x3) (wcel (cv x3) (C x3))) (λ y, wceq (cv y) (B2 x3)) (λ y, wa (wcel (cv y) (C x3)) (wceq (cv x3) (A2 x3 y)))
      (λ y, @bitr4d (wa (ph x3) (wcel (cv x3) (C x3))) (wceq (cv y) (B2 x3)) (wa (wcel (cv y) (C x3)) (wceq (cv y) (B2 x3))) (wa (wcel (cv y) (C x3)) (wceq (cv x3) (A2 x3 y)))
        (@pm4_71rd (wa (ph x3) (wcel (cv x3) (C x3))) (wceq (cv y) (B2 x3)) (wcel (cv y) (C x3))
          (@syl5ibrcom (wa (ph x3) (wcel (cv x3) (C x3))) (wcel (cv y) (C x3)) (wceq (cv y) (B2 x3)) (wcel (B2 x3) (C x3))
            (reuhypd_1 x3)
            (@eleq1 (cv y) (B2 x3) (C x3))))
        (@pm5_32da (wa (ph x3) (wcel (cv x3) (C x3))) (wcel (cv y) (C x3)) (wceq (cv x3) (A2 x3 y)) (wceq (cv y) (B2 x3))
          (@«3expa» (ph x3) (wcel (cv x3) (C x3)) (wcel (cv y) (C x3)) (wb (wceq (cv x3) (A2 x3 y)) (wceq (cv y) (B2 x3)))
            (reuhypd_2 x3 y))))))
  (@df_reu (λ y, wceq (cv x3) (A2 x3 y)) (λ y, C x3))


/-- A theorem useful for eliminating the restricted existential uniqueness hypotheses in ~ reuxfr1 .
(Contributed by NM, 15-Nov-2004.) -/
theorem reuhyp {A2 : setvar → setvar → «class»} {B2 C : setvar → «class»}
  (reuhyp_1 : ∀ x3, ⊦ wi (wcel (cv x3) (C x3)) (wcel (B2 x3) (C x3)))
  (reuhyp_2 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) (C x3)) (wcel (cv y) (C x3))) (wb (wceq (cv x3) (A2 x3 y)) (wceq (cv y) (B2 x3))))
  (x3 : setvar) : ⊦ wi (wcel (cv x3) (C x3)) (wreu (λ y, wceq (cv x3) (A2 x3 y)) (λ y, C x3)) :=
@mpan wtru (wcel (cv x3) (C x3)) (wreu (λ y, wceq (cv x3) (A2 x3 y)) (λ y, C x3))
  tru
  (@reuhypd (λ x3, wtru) (λ x3 y, A2 x3 y) (λ x3, B2 x3) (λ x3, C x3)
    (λ x3, @adantl (wcel (cv x3) (C x3)) (wcel (B2 x3) (C x3)) wtru
      (reuhyp_1 x3))
    (λ x3 y, @«3adant1» (wcel (cv x3) (C x3)) (wcel (cv y) (C x3)) (wb (wceq (cv x3) (A2 x3 y)) (wceq (cv y) (B2 x3))) wtru
      (reuhyp_2 x3 y)) x3)


/-- Lemma for ~ axpr . There exists a set to which all empty sets belong. (Contributed by Rohan
Ridenour, 10-Aug-2023.) (Revised by BJ, 13-Aug-2023.) -/
theorem axprlem1 :
  ⊦ wex (λ x3, wal (λ y, wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wcel (cv y) (cv x3)))) :=
@exlimiiv (λ w, wal (λ z, wn (wcel (cv z) (cv w)))) (wex (λ x3, wal (λ y, wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wcel (cv y) (cv x3)))))
  (λ w, @mpi (wal (λ z, wn (wcel (cv z) (cv w)))) (wex (λ x3, wal (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))) (wcel (cv y) (cv x3))))) (wex (λ x3, wal (λ y, wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wcel (cv y) (cv x3)))))
    (@ax_pow w)
    (@eximdv (wal (λ z, wn (wcel (cv z) (cv w)))) (λ x3, wal (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))) (wcel (cv y) (cv x3)))) (λ x3, wal (λ y, wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wcel (cv y) (cv x3))))
      (λ x3, @alimdv (wal (λ z, wn (wcel (cv z) (cv w)))) (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))) (wcel (cv y) (cv x3))) (λ y, wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wcel (cv y) (cv x3)))
        (λ y, @imim1d (wal (λ z, wn (wcel (cv z) (cv w)))) (wal (λ z, wn (wcel (cv z) (cv y)))) (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))) (wcel (cv y) (cv x3))
          (@a1i (wi (wal (λ z, wn (wcel (cv z) (cv y)))) (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w))))) (wal (λ z, wn (wcel (cv z) (cv w))))
            (@alimi (λ z, wn (wcel (cv z) (cv y))) (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))
              (λ z, @pm2_21 (wcel (cv z) (cv y)) (wcel (cv z) (cv w)))))))))
  ax_nul


/-- Lemma for ~ axpr . There exists a set to which all sets whose only members are empty sets
belong. (Contributed by Rohan Ridenour, 9-Aug-2023.) (Revised by BJ, 13-Aug-2023.) -/
theorem axprlem2 :
  ⊦ wex (λ x3, wal (λ y, wi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wcel (cv y) (cv x3)))) :=
@exlimiiv (λ v, wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (wex (λ x3, wal (λ y, wi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wcel (cv y) (cv x3)))))
  (λ v, @mpi (wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (wex (λ x3, wal (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v)))) (wcel (cv y) (cv x3))))) (wex (λ x3, wal (λ y, wi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wcel (cv y) (cv x3)))))
    (@ax_pow v)
    (@eximdv (wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (λ x3, wal (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v)))) (wcel (cv y) (cv x3)))) (λ x3, wal (λ y, wi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wcel (cv y) (cv x3))))
      (λ x3, @alimdv (wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (λ y, wi (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v)))) (wcel (cv y) (cv x3))) (λ y, wi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wcel (cv y) (cv x3)))
        (λ y, @imim1d (wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v)))) (wcel (cv y) (cv x3))
          (@syl5bi (wral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y)) (wal (λ z, wi (wcel (cv z) (cv y)) (wal (λ w, wn (wcel (cv w) (cv z)))))) (wal (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)))) (wal (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v))))
            (@df_ral (λ z, wal (λ w, wn (wcel (cv w) (cv z)))) (λ z, cv y))
            (@al2imi (λ z, wi (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v))) (λ z, wi (wcel (cv z) (cv y)) (wal (λ w, wn (wcel (cv w) (cv z))))) (λ z, wi (wcel (cv z) (cv y)) (wcel (cv z) (cv v)))
              (λ z, @imim2 (wal (λ w, wn (wcel (cv w) (cv z)))) (wcel (cv z) (cv v)) (wcel (cv z) (cv y)))))))))
  axprlem1


/-- Lemma for ~ axpr . Eliminate the antecedent of the relevant replacement instance. (Contributed
by Rohan Ridenour, 10-Aug-2023.) -/
theorem axprlem3
  (x3 y p : setvar) : ⊦ wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))) :=
setvar.forget $ λ s : setvar,
  show ⊦ wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))), from
  @mpg (λ s, wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z))))) (λ s, wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))))
    (λ s, @axrep4 (λ s w z p, wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
      (λ s w p, @nfv (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))) p)
    (λ s, @pm2_61i (wex (λ n, wcel (cv n) (cv s))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z)))))
      (@mpi (wex (λ n, wcel (cv n) (cv s))) (wex (λ z, wceq (cv x3) (cv z))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z)))))
        (@ax6evr x3)
        (@eximdv (wex (λ n, wcel (cv n) (cv s))) (λ z, wceq (cv x3) (cv z)) (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z))))
          (λ z, @expcom (wceq (cv x3) (cv z)) (wex (λ n, wcel (cv n) (cv s))) (wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z))))
            (@alrimiv (wa (wceq (cv x3) (cv z)) (wex (λ n, wcel (cv n) (cv s)))) (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z)))
              (λ w, @sylan9r (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv x3)) (wceq (cv x3) (cv z)) (wceq (cv w) (cv z))
                (@biimpd (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv x3))
                  (@ifptru (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
                (@equtrr z x3 w))))))
      (@mpi (wn (wex (λ n, wcel (cv n) (cv s)))) (wex (λ z, wceq (cv y) (cv z))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z)))))
        (@ax6evr y)
        (@eximdv (wn (wex (λ n, wcel (cv n) (cv s)))) (λ z, wceq (cv y) (cv z)) (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z))))
          (λ z, @expcom (wceq (cv y) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s)))) (wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z))))
            (@alrimiv (wa (wceq (cv y) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s))))) (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv z)))
              (λ w, @syl6ci (wa (wceq (cv y) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s))))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv y)) (wceq (cv y) (cv z)) (wceq (cv w) (cv z))
                (@adantl (wn (wex (λ n, wcel (cv n) (cv s)))) (wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv y))) (wceq (cv y) (cv z))
                  (@biimpd (wn (wex (λ n, wcel (cv n) (cv s)))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv y))
                    (@ifpfal (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
                (@simpl (wceq (cv y) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s)))))
                (@equtr z w y))))))) s


/-- Lemma for ~ axpr . Eliminate the antecedent of the relevant replacement instance. (Contributed
by Rohan Ridenour, 10-Aug-2023.) -/
theorem axprlem3_b
  (x3 p : setvar) : ⊦ wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))) :=
setvar.forget $ λ s : setvar,
  show ⊦ wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))), from
  @mpg (λ s, wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z))))) (λ s, wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))))
    (λ s, @axrep4 (λ s w z p, wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
      (λ s w p, @nfv (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))) p)
    (λ s, @pm2_61i (wex (λ n, wcel (cv n) (cv s))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z)))))
      (@mpi (wex (λ n, wcel (cv n) (cv s))) (wex (λ z, wceq (cv x3) (cv z))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z)))))
        (@ax6evr x3)
        (@eximdv (wex (λ n, wcel (cv n) (cv s))) (λ z, wceq (cv x3) (cv z)) (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z))))
          (λ z, @expcom (wceq (cv x3) (cv z)) (wex (λ n, wcel (cv n) (cv s))) (wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z))))
            (@alrimiv (wa (wceq (cv x3) (cv z)) (wex (λ n, wcel (cv n) (cv s)))) (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z)))
              (λ w, @sylan9r (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3)) (wceq (cv x3) (cv z)) (wceq (cv w) (cv z))
                (@biimpd (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3))
                  (@ifptru (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
                (@equtrr z x3 w))))))
      (@mpi (wn (wex (λ n, wcel (cv n) (cv s)))) (wex (λ z, wceq (cv x3) (cv z))) (wex (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z)))))
        (@ax6evr x3)
        (@eximdv (wn (wex (λ n, wcel (cv n) (cv s)))) (λ z, wceq (cv x3) (cv z)) (λ z, wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z))))
          (λ z, @expcom (wceq (cv x3) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s)))) (wal (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z))))
            (@alrimiv (wa (wceq (cv x3) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s))))) (λ w, wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv z)))
              (λ w, @syl6ci (wa (wceq (cv x3) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s))))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3)) (wceq (cv x3) (cv z)) (wceq (cv w) (cv z))
                (@adantl (wn (wex (λ n, wcel (cv n) (cv s)))) (wi (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3))) (wceq (cv x3) (cv z))
                  (@biimpd (wn (wex (λ n, wcel (cv n) (cv s)))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3))
                    (@ifpfal (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
                (@simpl (wceq (cv x3) (cv z)) (wn (wex (λ n, wcel (cv n) (cv s)))))
                (@equtr z w x3))))))) s


/-- Lemma for ~ axpr . The first element of the pair is included in any superset of the set whose
existence is asserted by the axiom of replacement. (Contributed by Rohan Ridenour, 10-Aug-2023.)
(Revised by BJ, 13-Aug-2023.) -/
theorem axprlem4 {x3 y w p : setvar} :
  ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) :=
@mpi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
  (@bm1_3ii (λ n, wal (λ t, wn (wcel (cv t) (cv n))))
    axprlem1)
  (setvar.forget $ λ s : setvar,
    show ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wi (wex (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))), from
    @eximd (λ s, wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
      (@nfan (λ s, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ s, wceq (cv w) (cv x3))
        (@nfa1 (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))))
        (@nfv (wceq (cv w) (cv x3))))
      (λ s, @expcom (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
        (@jca (wa (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
          (@adantrr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wcel (cv s) (cv p)) (wceq (cv w) (cv x3))
            (@mpan9 (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wcel (cv s) (cv p))
              (@sylibr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s))
                (@alimi (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))) (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))
                  (λ n, @biimp (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))
                (@df_ral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)))
              (@sp (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) s)))
          (@syl2an2r (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wex (λ n, wcel (cv n) (cv s))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
            (@mpi (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wex (λ n, wal (λ t, wn (wcel (cv t) (cv n))))) (wex (λ n, wcel (cv n) (cv s)))
              ax_nul
              (setvar.forget $ λ n : setvar,
                show ⊦ wi (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wi (wex (λ n, wal (λ t, wn (wcel (cv t) (cv n))))) (wex (λ n, wcel (cv n) (cv s)))), from
                @eximd (λ n, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, wcel (cv n) (cv s))
                  (@nfa1 (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))
                  (λ n, @biimprd (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))
                    (@sp (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))) n)) n))
            (@simprr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))
            (@biimpar (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv x3))
              (@ifptru (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))) s)


/-- Lemma for ~ axpr . The first element of the pair is included in any superset of the set whose
existence is asserted by the axiom of replacement. (Contributed by Rohan Ridenour, 10-Aug-2023.)
(Revised by BJ, 13-Aug-2023.) -/
theorem axprlem4_b {x3 w p : setvar} :
  ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) :=
@mpi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
  (@bm1_3ii (λ n, wal (λ t, wn (wcel (cv t) (cv n))))
    axprlem1)
  (setvar.forget $ λ s : setvar,
    show ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wi (wex (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))), from
    @eximd (λ s, wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (λ s, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
      (@nfan (λ s, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ s, wceq (cv w) (cv x3))
        (@nfa1 (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))))
        (@nfv (wceq (cv w) (cv x3))))
      (λ s, @expcom (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
        (@jca (wa (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
          (@adantrr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wcel (cv s) (cv p)) (wceq (cv w) (cv x3))
            (@mpan9 (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wcel (cv s) (cv p))
              (@sylibr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s))
                (@alimi (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))) (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))
                  (λ n, @biimp (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))
                (@df_ral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)))
              (@sp (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) s)))
          (@syl2an2r (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wex (λ n, wcel (cv n) (cv s))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
            (@mpi (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wex (λ n, wal (λ t, wn (wcel (cv t) (cv n))))) (wex (λ n, wcel (cv n) (cv s)))
              ax_nul
              (setvar.forget $ λ n : setvar,
                show ⊦ wi (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wi (wex (λ n, wal (λ t, wn (wcel (cv t) (cv n))))) (wex (λ n, wcel (cv n) (cv s)))), from
                @eximd (λ n, wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, wcel (cv n) (cv s))
                  (@nfa1 (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))))
                  (λ n, @biimprd (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))
                    (@sp (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n))))) n)) n))
            (@simprr (wal (λ n, wb (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))
            (@biimpar (wex (λ n, wcel (cv n) (cv s))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3))
              (@ifptru (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))) s)


/-- Lemma for ~ axpr . The second element of the pair is included in any superset of the set whose
existence is asserted by the axiom of replacement. (Contributed by Rohan Ridenour, 10-Aug-2023.)
(Revised by BJ, 13-Aug-2023.) -/
theorem axprlem5 {x3 y w p : setvar} :
  ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) :=
@mpi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))) (wex (λ s, wal (λ n, wn (wcel (cv n) (cv s))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
  ax_nul
  (setvar.forget $ λ s : setvar,
    show ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))) (wi (wex (λ s, wal (λ n, wn (wcel (cv n) (cv s))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))), from
    @eximd (λ s, wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))) (λ s, wal (λ n, wn (wcel (cv n) (cv s)))) (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
      (@nfan (λ s, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ s, wceq (cv w) (cv y))
        (@nfa1 (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))))
        (@nfv (wceq (cv w) (cv y))))
      (λ s, @expcom (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))) (wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
        (@jca (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))) (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
          (@mpd (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))
            (@sylibr (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s))
              (@adantr (wal (λ n, wn (wcel (cv n) (cv s)))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))
                (@alimi (λ n, wn (wcel (cv n) (cv s))) (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))
                  (λ n, @pm2_21 (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))))
              (@df_ral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)))
            (@ad2antrl (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) (wal (λ n, wn (wcel (cv n) (cv s)))) (wceq (cv w) (cv y))
              (@sp (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) s)))
          (@syl2anc (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))) (wn (wex (λ n, wcel (cv n) (cv s)))) (wceq (cv w) (cv y)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
            (@sylib (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))) (wal (λ n, wn (wcel (cv n) (cv s)))) (wn (wex (λ n, wcel (cv n) (cv s))))
              (@simpl (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y))))
              (@alnex (λ n, wcel (cv n) (cv s))))
            (@simprr (wal (λ n, wn (wcel (cv n) (cv s)))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv y)))
            (@biimpar (wn (wex (λ n, wcel (cv n) (cv s)))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wceq (cv w) (cv y))
              (@ifpfal (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))) s)


/-- Lemma for ~ axpr . The second element of the pair is included in any superset of the set whose
existence is asserted by the axiom of replacement. (Contributed by Rohan Ridenour, 10-Aug-2023.)
(Revised by BJ, 13-Aug-2023.) -/
theorem axprlem5_b {x3 w p : setvar} :
  ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) :=
@mpi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wex (λ s, wal (λ n, wn (wcel (cv n) (cv s))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
  ax_nul
  (setvar.forget $ λ s : setvar,
    show ⊦ wi (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wi (wex (λ s, wal (λ n, wn (wcel (cv n) (cv s))))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))), from
    @eximd (λ s, wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (λ s, wal (λ n, wn (wcel (cv n) (cv s)))) (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
      (@nfan (λ s, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ s, wceq (cv w) (cv x3))
        (@nfa1 (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))))
        (@nfv (wceq (cv w) (cv x3))))
      (λ s, @expcom (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))) (wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
        (@jca (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
          (@mpd (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))
            (@sylibr (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s))
              (@adantr (wal (λ n, wn (wcel (cv n) (cv s)))) (wal (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))
                (@alimi (λ n, wn (wcel (cv n) (cv s))) (λ n, wi (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))
                  (λ n, @pm2_21 (wcel (cv n) (cv s)) (wal (λ t, wn (wcel (cv t) (cv n)))))))
              (@df_ral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)))
            (@ad2antrl (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) (wal (λ n, wn (wcel (cv n) (cv s)))) (wceq (cv w) (cv x3))
              (@sp (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p))) s)))
          (@syl2anc (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wn (wex (λ n, wcel (cv n) (cv s)))) (wceq (cv w) (cv x3)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
            (@sylib (wa (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))) (wal (λ n, wn (wcel (cv n) (cv s)))) (wn (wex (λ n, wcel (cv n) (cv s))))
              (@simpl (wal (λ n, wn (wcel (cv n) (cv s)))) (wa (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3))))
              (@alnex (λ n, wcel (cv n) (cv s))))
            (@simprr (wal (λ n, wn (wcel (cv n) (cv s)))) (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)))
            (@biimpar (wn (wex (λ n, wcel (cv n) (cv s)))) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wceq (cv w) (cv x3))
              (@ifpfal (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))) s)


/-- Unabbreviated version of the Axiom of Pairing of ZF set theory, derived as a theorem from the
other axioms. This theorem should not be referenced by any proof. Instead, use ~ ax-pr below so that
the uses of the Axiom of Pairing can be more easily identified. For a shorter proof using ~ ax-ext ,
see ~ axprALT . (Contributed by NM, 14-Nov-2006.) Remove dependency on ~ ax-ext . (Revised by Rohan
Ridenour, 10-Aug-2023.) (Proof shortened by BJ, 13-Aug-2023.) Use ~ ax-pr instead. (New usage is
discouraged.) -/
theorem ax_pr
  (x3 y : setvar) : ⊦ wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z)))) :=
@exlimiiv (λ p, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z)))))
  (λ p, @mpi (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wex (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z))))) (wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z)))))
    (@eximii (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))) (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z))))
      (@axprlem3 x3 y p)
      (λ z, @alimi (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))) (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z)))
        (λ w, @biimpr (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))))
    (@eximdv (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z)))) (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z))))
      (λ z, @alimdv (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z))) (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z)))
        (λ w, @imim1d (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wcel (cv w) (cv z))
          (@ex (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
            (@jaodan (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))) (wceq (cv w) (cv y))
              (@axprlem4 x3 y w p)
              (@axprlem5 x3 y w p)))))))
  axprlem2


/-- Unabbreviated version of the Axiom of Pairing of ZF set theory, derived as a theorem from the
other axioms. This theorem should not be referenced by any proof. Instead, use ~ ax-pr below so that
the uses of the Axiom of Pairing can be more easily identified. For a shorter proof using ~ ax-ext ,
see ~ axprALT . (Contributed by NM, 14-Nov-2006.) Remove dependency on ~ ax-ext . (Revised by Rohan
Ridenour, 10-Aug-2023.) (Proof shortened by BJ, 13-Aug-2023.) Use ~ ax-pr instead. (New usage is
discouraged.) -/
theorem ax_pr_b
  (x3 : setvar) : ⊦ wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z)))) :=
@exlimiiv (λ p, wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z)))))
  (λ p, @mpi (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wex (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z))))) (wex (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z)))))
    (@eximii (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))) (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z))))
      (@axprlem3_b x3 p)
      (λ z, @alimi (λ w, wb (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))) (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z)))
        (λ w, @biimpr (wcel (cv w) (cv z)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))))
    (@eximdv (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ z, wal (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z)))) (λ z, wal (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z))))
      (λ z, @alimdv (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (λ w, wi (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z))) (λ w, wi (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z)))
        (λ w, @imim1d (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wcel (cv w) (cv z))
          (@ex (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
            (@jaodan (wal (λ s, wi (wral (λ n, wal (λ t, wn (wcel (cv t) (cv n)))) (λ n, cv s)) (wcel (cv s) (cv p)))) (wceq (cv w) (cv x3)) (wex (λ s, wa (wcel (cv s) (cv p)) (wif (wex (λ n, wcel (cv n) (cv s))) (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))) (wceq (cv w) (cv x3))
              (@axprlem4_b x3 w p)
              (@axprlem5_b x3 w p)))))))
  axprlem2


/-- Derive the abbreviated version of the Axiom of Pairing from ~ ax-pr . See ~ zfpair for its
derivation from the other axioms. (Contributed by NM, 14-Nov-2006.) -/
theorem zfpair2
  (x3 y : setvar) : ⊦ wcel (cpr (cv x3) (cv y)) cvv :=
@issetri (cpr (cv x3) (cv y))
  (@mpbir (wex (λ z, wceq (cv z) (cpr (cv x3) (cv y)))) (wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))))
    (@bm1_3ii (λ w, wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))
      (@ax_pr x3 y))
    (@exbii (λ z, wceq (cv z) (cpr (cv x3) (cv y))) (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
      (λ z, @bitri (wceq (cv z) (cpr (cv x3) (cv y))) (wal (λ w, wb (wcel (cv w) (cv z)) (wcel (cv w) (cpr (cv x3) (cv y))))) (wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y)))))
        (@dfcleq (cv z) (cpr (cv x3) (cv y)))
        (@albii (λ w, wb (wcel (cv w) (cv z)) (wcel (cv w) (cpr (cv x3) (cv y)))) (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))))
          (λ w, @bibi2i (wcel (cv w) (cpr (cv x3) (cv y))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv y))) (wcel (cv w) (cv z))
            (@elpr (cv w) (cv x3) (cv y)
              (@vex w)))))))


/-- Derive the abbreviated version of the Axiom of Pairing from ~ ax-pr . See ~ zfpair for its
derivation from the other axioms. (Contributed by NM, 14-Nov-2006.) -/
theorem zfpair2_b
  (x3 : setvar) : ⊦ wcel (cpr (cv x3) (cv x3)) cvv :=
@issetri (cpr (cv x3) (cv x3))
  (@mpbir (wex (λ z, wceq (cv z) (cpr (cv x3) (cv x3)))) (wex (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))))
    (@bm1_3ii (λ w, wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))
      (@ax_pr_b x3))
    (@exbii (λ z, wceq (cv z) (cpr (cv x3) (cv x3))) (λ z, wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
      (λ z, @bitri (wceq (cv z) (cpr (cv x3) (cv x3))) (wal (λ w, wb (wcel (cv w) (cv z)) (wcel (cv w) (cpr (cv x3) (cv x3))))) (wal (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3)))))
        (@dfcleq (cv z) (cpr (cv x3) (cv x3)))
        (@albii (λ w, wb (wcel (cv w) (cv z)) (wcel (cv w) (cpr (cv x3) (cv x3)))) (λ w, wb (wcel (cv w) (cv z)) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))))
          (λ w, @bibi2i (wcel (cv w) (cpr (cv x3) (cv x3))) (wo (wceq (cv w) (cv x3)) (wceq (cv w) (cv x3))) (wcel (cv w) (cv z))
            (@elpr (cv w) (cv x3) (cv x3)
              (@vex w)))))))


/-- A singleton is a set. Theorem 7.12 of [Quine] p. 51, proved using Extensionality, Separation,
Null Set, and Pairing. See also ~ snexALT . (Contributed by NM, 7-Aug-1994.) (Revised by Mario
Carneiro, 19-May-2013.) (Proof modification is discouraged.) -/
theorem snex {A2 : «class»} :
  ⊦ wcel (csn A2) cvv :=
@pm2_61i (wcel A2 cvv) (wcel (csn A2) cvv)
  (@eqeltrid (wcel A2 cvv) (csn A2) (cpr A2 A2) cvv
    (@dfsn2 A2)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel A2 cvv) (wcel (cpr A2 A2) cvv), from
      @vtoclg (λ x3, wcel (cpr (cv x3) (cv x3)) cvv) (wcel (cpr A2 A2) cvv) A2 (λ x3, cvv)
        (λ x3, @eleq1d (wceq (cv x3) A2) (cpr (cv x3) (cv x3)) (cpr A2 A2) cvv
          (@anidms (wceq (cv x3) A2) (wceq (cpr (cv x3) (cv x3)) (cpr A2 A2))
            (@preq12 (cv x3) (cv x3) A2 A2)))
        (λ x3, @zfpair2_b x3) x3))
  (@eqeltrdi (wn (wcel A2 cvv)) (csn A2) c0 cvv
    (@biimpi (wn (wcel A2 cvv)) (wceq (csn A2) c0)
      (@snprc A2))
    «0ex»)


/-- The Axiom of Pairing using class variables. Theorem 7.13 of [Quine] p. 51. By virtue of its
definition, an unordered pair remains a set (even though no longer a pair) even when its components
are proper classes (see ~ prprc ), so we can dispense with hypotheses requiring them to be sets.
(Contributed by NM, 15-Jul-1993.) -/
theorem prex {A2 B2 : «class»} :
  ⊦ wcel (cpr A2 B2) cvv :=
@pm2_61nii (wcel A2 cvv) (wcel B2 cvv) (wcel (cpr A2 B2) cvv)
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wi (wcel B2 cvv) (wcel (cpr A2 B2) cvv)), from
    @vtocleg (wi (wcel B2 cvv) (wcel (cpr A2 B2) cvv)) A2 (λ x3, cvv)
      (λ x3, @syl5ib (wcel B2 cvv) (wcel (cpr (cv x3) B2) cvv) (wceq (cv x3) A2) (wcel (cpr A2 B2) cvv)
        (setvar.forget $ λ y : setvar,
          show ⊦ wi (wcel B2 cvv) (wcel (cpr (cv x3) B2) cvv), from
          @vtoclg (λ y, wcel (cpr (cv x3) (cv y)) cvv) (wcel (cpr (cv x3) B2) cvv) B2 (λ y, cvv)
            (λ y, @eleq1d (wceq (cv y) B2) (cpr (cv x3) (cv y)) (cpr (cv x3) B2) cvv
              (@preq2 (cv y) B2 (cv x3)))
            (λ y, @zfpair2 x3 y) y)
        (@eleq1d (wceq (cv x3) A2) (cpr (cv x3) B2) (cpr A2 B2) cvv
          (@preq1 (cv x3) A2 B2))) x3)
  (@eqeltrdi (wn (wcel A2 cvv)) (cpr A2 B2) (csn B2) cvv
    (@prprc1 A2 B2)
    (@snex B2))
  (@eqeltrdi (wn (wcel B2 cvv)) (cpr A2 B2) (csn A2) cvv
    (@prprc2 A2 B2)
    (@snex A2))


/-- Alternate proof of ~ dtru using ~ ax-pr instead of ~ ax-pow . (Contributed by Mario Carneiro,
31-Aug-2015.) (Proof modification is discouraged.) (New usage is discouraged.) -/
theorem dtruALT2 {y : setvar} :
  ⊦ wn (wal (λ x3, wceq (cv x3) (cv y))) :=
@mpbi (wex (λ x3, wn (wceq (cv y) (cv x3)))) (wn (wal (λ x3, wceq (cv x3) (cv y))))
  (@pm2_61i (wceq (cv y) c0) (wex (λ x3, wn (wceq (cv y) (cv x3))))
    (@syl (wceq (cv y) c0) (wn (wceq (cv y) (csn c0))) (wex (λ x3, wn (wceq (cv y) (cv x3))))
      (@«0inp0» (cv y))
      (@spcev (λ x3, wn (wceq (cv y) (cv x3))) (wn (wceq (cv y) (csn c0))) (csn c0)
        (@snex c0)
        (λ x3, @notbid (wceq (cv x3) (csn c0)) (wceq (cv y) (cv x3)) (wceq (cv y) (csn c0))
          (@eqeq2 (cv x3) (csn c0) (cv y)))))
    (@spcev (λ x3, wn (wceq (cv y) (cv x3))) (wn (wceq (cv y) c0)) c0
      «0ex»
      (λ x3, @notbid (wceq (cv x3) c0) (wceq (cv y) (cv x3)) (wceq (cv y) c0)
        (@eqeq2 (cv x3) c0 (cv y)))))
  (@xchbinx (wex (λ x3, wn (wceq (cv y) (cv x3)))) (wal (λ x3, wceq (cv y) (cv x3))) (wal (λ x3, wceq (cv x3) (cv y)))
    (@exnal (λ x3, wceq (cv y) (cv x3)))
    (@albii (λ x3, wceq (cv y) (cv x3)) (λ x3, wceq (cv x3) (cv y))
      (λ x3, @eqcom (cv y) (cv x3))))


/-- A singleton of a set belongs to the power class of a class containing the set. (Contributed by
Alan Sare, 25-Aug-2011.) -/
theorem snelpwi {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wcel (csn A2) (cpw B2)) :=
@sylibr (wcel A2 B2) (wss (csn A2) B2) (wcel (csn A2) (cpw B2))
  (@snssi A2 B2)
  (@elpw (csn A2) B2
    (@snex A2))


/-- A singleton of a set belongs to the power class of a class containing the set. (Contributed by
NM, 1-Apr-1998.) -/
theorem snelpw {A2 B2 : «class»}
  (snelpw_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 B2) (wcel (csn A2) (cpw B2)) :=
@bitr4i (wcel A2 B2) (wss (csn A2) B2) (wcel (csn A2) (cpw B2))
  (@snss A2 B2
    snelpw_1)
  (@elpw (csn A2) B2
    (@snex A2))


/-- A class equals the union of its power class. Exercise 6(a) of [Enderton] p. 38. (Contributed by
NM, 14-Oct-1996.) (Proof shortened by Alan Sare, 28-Dec-2008.) -/
theorem unipw {A2 : «class»} :
  ⊦ wceq (cuni (cpw A2)) A2 :=
@eqriv (cuni (cpw A2)) A2
  (λ x3, @impbii (wcel (cv x3) (cuni (cpw A2))) (wcel (cv x3) A2)
    (@sylbi (wcel (cv x3) (cuni (cpw A2))) (wex (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpw A2)))) (wcel (cv x3) A2)
      (@eluni (cv x3) (cpw A2))
      (@exlimiv (λ y, wa (wcel (cv x3) (cv y)) (wcel (cv y) (cpw A2))) (wcel (cv x3) A2)
        (λ y, @elelpwi (cv x3) (cv y) A2)))
    (@sylancr (wcel (cv x3) A2) (wcel (cv x3) (csn (cv x3))) (wcel (csn (cv x3)) (cpw A2)) (wcel (cv x3) (cuni (cpw A2)))
      (@vsnid x3)
      (@snelpwi (cv x3) A2)
      (@elunii (cv x3) (csn (cv x3)) (cpw A2))))


/-- "At most one" existence implies a class abstraction exists. (Contributed by NM, 30-Dec-1996.) -/
theorem moabex {ph : setvar → wff} :
  ⊦ wi (wmo (λ x3, ph x3)) (wcel (cab (λ x3, ph x3)) cvv) :=
@sylbi (wmo (λ x3, ph x3)) (wex (λ y, wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y))))) (wcel (cab (λ x3, ph x3)) cvv)
  (@df_mo (λ x3, ph x3))
  (@exlimiv (λ y, wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) (wcel (cab (λ x3, ph x3)) cvv)
    (λ y, @sylbir (wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))) (wss (cab (λ x3, ph x3)) (csn (cv y))) (wcel (cab (λ x3, ph x3)) cvv)
      (@bitri (wss (cab (λ x3, ph x3)) (csn (cv y))) (wal (λ x3, wi (ph x3) (wcel (cv x3) (csn (cv y))))) (wal (λ x3, wi (ph x3) (wceq (cv x3) (cv y))))
        (@abss (λ x3, ph x3) (csn (cv y)))
        (@albii (λ x3, wi (ph x3) (wcel (cv x3) (csn (cv y)))) (λ x3, wi (ph x3) (wceq (cv x3) (cv y)))
          (λ x3, @imbi2i (wcel (cv x3) (csn (cv y))) (wceq (cv x3) (cv y)) (ph x3)
            (@velsn (λ x3, cv y) x3))))
      (@ssex (cab (λ x3, ph x3)) (csn (cv y))
        (@snex (cv y)))))


/-- Restricted "at most one" existence implies a restricted class abstraction exists. (Contributed
by NM, 17-Jun-2017.) -/
theorem rmorabex {ph : setvar → wff} {A2 : setvar → «class»} :
  ⊦ wi (wrmo (λ x3, ph x3) (λ x3, A2 x3)) (wcel (crab (λ x3, ph x3) (λ x3, A2 x3)) cvv) :=
@«3imtr4i» (wmo (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) (wcel (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) cvv) (wrmo (λ x3, ph x3) (λ x3, A2 x3)) (wcel (crab (λ x3, ph x3) (λ x3, A2 x3)) cvv)
  (@moabex (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3)))
  (@df_rmo (λ x3, ph x3) (λ x3, A2 x3))
  (@eleq1i (crab (λ x3, ph x3) (λ x3, A2 x3)) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (ph x3))) cvv
    (@df_rab (λ x3, ph x3) (λ x3, A2 x3)))


/-- An ordered pair of classes is a set. Exercise 7 of [TakeutiZaring] p. 16. (Contributed by NM,
18-Aug-1993.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opex {A2 B2 : «class»} :
  ⊦ wcel (cop A2 B2) cvv :=
@eqeltri (cop A2 B2) (cif (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0) cvv
  (@dfopif A2 B2)
  (@ifex (wa (wcel A2 cvv) (wcel B2 cvv)) (cpr (csn A2) (cpr A2 B2)) c0
    (@prex (csn A2) (cpr A2 B2))
    «0ex»)


/-- One of the two elements in an ordered pair. (Contributed by NM, 15-Jul-1993.) (Revised by Mario
Carneiro, 26-Apr-2015.) (Avoid depending on this detail.) -/
theorem opi1 {A2 B2 : «class»}
  (opi1_1 : ⊦ wcel A2 cvv)
  (opi1_2 : ⊦ wcel B2 cvv) :
  ⊦ wcel (csn A2) (cop A2 B2) :=
@eleqtrri (csn A2) (cpr (csn A2) (cpr A2 B2)) (cop A2 B2)
  (@prid1 (csn A2) (cpr A2 B2)
    (@snex A2))
  (@dfop A2 B2
    opi1_1
    opi1_2)


/-- One of the two elements of an ordered pair. (Contributed by NM, 5-Aug-1993.) (Revised by Mario
Carneiro, 26-Apr-2015.) (Avoid depending on this detail.) -/
theorem opi2 {A2 B2 : «class»}
  (opi1_1 : ⊦ wcel A2 cvv)
  (opi1_2 : ⊦ wcel B2 cvv) :
  ⊦ wcel (cpr A2 B2) (cop A2 B2) :=
@eleqtrri (cpr A2 B2) (cpr (csn A2) (cpr A2 B2)) (cop A2 B2)
  (@prid2 (csn A2) (cpr A2 B2)
    (@prex A2 B2))
  (@dfop A2 B2
    opi1_1
    opi1_2)


/-- Extract the first member of an ordered pair. Theorem 73 of [Suppes] p. 42. (See ~ op2ndb to
extract the second member, ~ op1sta for an alternate version, and ~ op1st for the preferred
version.) (Contributed by NM, 25-Nov-2003.) -/
theorem op1stb {A2 B2 : «class»}
  (op1stb_1 : ⊦ wcel A2 cvv)
  (op1stb_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cint (cint (cop A2 B2))) A2 :=
@eqtri (cint (cint (cop A2 B2))) (cint (csn A2)) A2
  (@inteqi (cint (cop A2 B2)) (csn A2)
    (@eqtri (cint (cop A2 B2)) (cint (cpr (csn A2) (cpr A2 B2))) (csn A2)
      (@inteqi (cop A2 B2) (cpr (csn A2) (cpr A2 B2))
        (@dfop A2 B2
          op1stb_1
          op1stb_2))
      (@eqtri (cint (cpr (csn A2) (cpr A2 B2))) (cin (csn A2) (cpr A2 B2)) (csn A2)
        (@intpr (csn A2) (cpr A2 B2)
          (@snex A2)
          (@prex A2 B2))
        (@mpbi (wss (csn A2) (cpr A2 B2)) (wceq (cin (csn A2) (cpr A2 B2)) (csn A2))
          (@snsspr1 A2 B2)
          (@df_ss (csn A2) (cpr A2 B2))))))
  (@intsn A2
    op1stb_1)


/-- An ordered pair is nonempty iff the arguments are sets. (Contributed by NM, 24-Jan-2004.)
(Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opnz {A2 B2 : «class»} :
  ⊦ wb (wne (cop A2 B2) c0) (wa (wcel A2 cvv) (wcel B2 cvv)) :=
@impbii (wne (cop A2 B2) c0) (wa (wcel A2 cvv) (wcel B2 cvv))
  (@necon1ai (wa (wcel A2 cvv) (wcel B2 cvv)) (cop A2 B2) c0
    (@opprc A2 B2))
  (@eqnetrd (wa (wcel A2 cvv) (wcel B2 cvv)) (cop A2 B2) (cpr (csn A2) (cpr A2 B2)) c0
    (@dfopg A2 B2 cvv cvv)
    (@a1i (wne (cpr (csn A2) (cpr A2 B2)) c0) (wa (wcel A2 cvv) (wcel B2 cvv))
      (@prnz (csn A2) (cpr A2 B2)
        (@snex A2))))


/-- An ordered pair is nonempty if the arguments are sets. (Contributed by Mario Carneiro,
26-Apr-2015.) -/
theorem opnzi {A2 B2 : «class»}
  (opth1_1 : ⊦ wcel A2 cvv)
  (opth1_2 : ⊦ wcel B2 cvv) :
  ⊦ wne (cop A2 B2) c0 :=
@mpbir2an (wne (cop A2 B2) c0) (wcel A2 cvv) (wcel B2 cvv)
  opth1_1
  opth1_2
  (@opnz A2 B2)


/-- Equality of the first members of equal ordered pairs. (Contributed by NM, 28-May-2008.) (Revised
by Mario Carneiro, 26-Apr-2015.) -/
theorem opth1 {A2 B2 C D : «class»}
  (opth1_1 : ⊦ wcel A2 cvv)
  (opth1_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wceq (cop A2 B2) (cop C D)) (wceq A2 C) :=
@syl (wceq (cop A2 B2) (cop C D)) (wcel (csn A2) (cop C D)) (wceq A2 C)
  (@eleqtrid (wceq (cop A2 B2) (cop C D)) (csn A2) (cop A2 B2) (cop C D)
    (@opi1 A2 B2
      opth1_1
      opth1_2)
    (@id (wceq (cop A2 B2) (cop C D))))
  (@mpjaod (wcel (csn A2) (cop C D)) (wceq (csn A2) (csn C)) (wceq A2 C) (wceq (csn A2) (cpr C D))
    (@a1i (wi (wceq (csn A2) (csn C)) (wceq A2 C)) (wcel (csn A2) (cop C D))
      (@sneqr A2 C
        opth1_1))
    (@syl6 (wcel (csn A2) (cop C D)) (wceq (csn A2) (cpr C D)) (wcel C (csn A2)) (wceq A2 C)
      (@syl5ibrcom (wcel (csn A2) (cop C D)) (wcel C (csn A2)) (wceq (csn A2) (cpr C D)) (wcel C (cpr C D))
        (@syl (wcel (csn A2) (cop C D)) (wcel C cvv) (wcel C (cpr C D))
          (@simpld (wcel (csn A2) (cop C D)) (wcel C cvv) (wcel D cvv)
            (@oprcl C D (csn A2)))
          (@prid1g C D cvv))
        (@eleq2 (csn A2) (cpr C D) C))
      (@eqcomd (wcel C (csn A2)) C A2
        (@elsni C A2)))
    (@syl (wcel (csn A2) (cop C D)) (wcel (csn A2) (cpr (csn C) (cpr C D))) (wo (wceq (csn A2) (csn C)) (wceq (csn A2) (cpr C D)))
      (@eleqtrd (wcel (csn A2) (cop C D)) (csn A2) (cop C D) (cpr (csn C) (cpr C D))
        (@id (wcel (csn A2) (cop C D)))
        (@syl (wcel (csn A2) (cop C D)) (wa (wcel C cvv) (wcel D cvv)) (wceq (cop C D) (cpr (csn C) (cpr C D)))
          (@oprcl C D (csn A2))
          (@dfopg C D cvv cvv)))
      (@elpri (csn A2) (csn C) (cpr C D))))


/-- The ordered pair theorem. If two ordered pairs are equal, their first elements are equal and
their second elements are equal. Exercise 6 of [TakeutiZaring] p. 16. Note that ` C ` and ` D ` are
not required to be sets due our specific ordered pair definition. (Contributed by NM, 28-May-1995.)
-/
theorem opth {A2 B2 C D : «class»}
  (opth1_1 : ⊦ wcel A2 cvv)
  (opth1_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D)) :=
@impbii (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))
  (@jca (wceq (cop A2 B2) (cop C D)) (wceq A2 C) (wceq B2 D)
    (@opth1 A2 B2 C D
      opth1_1
      opth1_2)
    (@sylc (wceq (cop A2 B2) (cop C D)) (wcel D cvv) (wceq (cpr C B2) (cpr C D)) (wceq B2 D)
      (@simprd (wceq (cop A2 B2) (cop C D)) (wcel C cvv) (wcel D cvv)
        (@syl (wceq (cop A2 B2) (cop C D)) (wcel (csn A2) (cop C D)) (wa (wcel C cvv) (wcel D cvv))
          (@eleqtrid (wceq (cop A2 B2) (cop C D)) (csn A2) (cop A2 B2) (cop C D)
            (@opi1 A2 B2
              opth1_1
              opth1_2)
            (@id (wceq (cop A2 B2) (cop C D))))
          (@oprcl C D (csn A2))))
      (@syl (wceq (cop A2 B2) (cop C D)) (wceq (cpr (csn C) (cpr C B2)) (cpr (csn C) (cpr C D))) (wceq (cpr C B2) (cpr C D))
        (@eqtr3d (wceq (cop A2 B2) (cop C D)) (cop C D) (cpr (csn C) (cpr C B2)) (cpr (csn C) (cpr C D))
          (@eqtr3d (wceq (cop A2 B2) (cop C D)) (cop C B2) (cop C D) (cpr (csn C) (cpr C B2))
            (@eqtr3d (wceq (cop A2 B2) (cop C D)) (cop A2 B2) (cop C B2) (cop C D)
              (@opeq1d (wceq (cop A2 B2) (cop C D)) A2 C B2
                (@opth1 A2 B2 C D
                  opth1_1
                  opth1_2))
              (@id (wceq (cop A2 B2) (cop C D))))
            (@sylancl (wceq (cop A2 B2) (cop C D)) (wcel C cvv) (wcel B2 cvv) (wceq (cop C B2) (cpr (csn C) (cpr C B2)))
              (@simpld (wceq (cop A2 B2) (cop C D)) (wcel C cvv) (wcel D cvv)
                (@syl (wceq (cop A2 B2) (cop C D)) (wcel (csn A2) (cop C D)) (wa (wcel C cvv) (wcel D cvv))
                  (@eleqtrid (wceq (cop A2 B2) (cop C D)) (csn A2) (cop A2 B2) (cop C D)
                    (@opi1 A2 B2
                      opth1_1
                      opth1_2)
                    (@id (wceq (cop A2 B2) (cop C D))))
                  (@oprcl C D (csn A2))))
              opth1_2
              (@dfopg C B2 cvv cvv)))
          (@syl (wceq (cop A2 B2) (cop C D)) (wa (wcel C cvv) (wcel D cvv)) (wceq (cop C D) (cpr (csn C) (cpr C D)))
            (@syl (wceq (cop A2 B2) (cop C D)) (wcel (csn A2) (cop C D)) (wa (wcel C cvv) (wcel D cvv))
              (@eleqtrid (wceq (cop A2 B2) (cop C D)) (csn A2) (cop A2 B2) (cop C D)
                (@opi1 A2 B2
                  opth1_1
                  opth1_2)
                (@id (wceq (cop A2 B2) (cop C D))))
              (@oprcl C D (csn A2)))
            (@dfopg C D cvv cvv)))
        (@preqr2 (cpr C B2) (cpr C D) (csn C)
          (@prex C B2)
          (@prex C D)))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel D cvv) (wi (wceq (cpr C B2) (cpr C D)) (wceq B2 D)), from
        @vtoclg (λ x3, wi (wceq (cpr C B2) (cpr C (cv x3))) (wceq B2 (cv x3))) (wi (wceq (cpr C B2) (cpr C D)) (wceq B2 D)) D (λ x3, cvv)
          (λ x3, @imbi12d (wceq (cv x3) D) (wceq (cpr C B2) (cpr C (cv x3))) (wceq (cpr C B2) (cpr C D)) (wceq B2 (cv x3)) (wceq B2 D)
            (@eqeq2d (wceq (cv x3) D) (cpr C (cv x3)) (cpr C D) (cpr C B2)
              (@preq2 (cv x3) D C))
            (@eqeq2 (cv x3) D B2))
          (λ x3, @preqr2 B2 (cv x3) C
            opth1_2
            (@vex x3)) x3)))
  (@opeq12 A2 B2 C D)


/-- Ordered pair theorem. ` C ` and ` D ` are not required to be sets under our specific ordered
pair definition. (Contributed by NM, 14-Oct-2005.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opthg {A2 B2 C D V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))), from
  @vtocl2g (λ x3 y, wb (wceq (cop (cv x3) (cv y)) (cop C D)) (wa (wceq (cv x3) C) (wceq (cv y) D))) (λ y, wb (wceq (cop A2 (cv y)) (cop C D)) (wa (wceq A2 C) (wceq (cv y) D))) (λ x3, wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))) A2 (λ x3, B2) (λ x3 y, V) (λ x3 y, W)
    (λ x3 y, @bibi12d (wceq (cv x3) A2) (wceq (cop (cv x3) (cv y)) (cop C D)) (wceq (cop A2 (cv y)) (cop C D)) (wa (wceq (cv x3) C) (wceq (cv y) D)) (wa (wceq A2 C) (wceq (cv y) D))
      (@eqeq1d (wceq (cv x3) A2) (cop (cv x3) (cv y)) (cop A2 (cv y)) (cop C D)
        (@opeq1 (cv x3) A2 (cv y)))
      (@anbi1d (wceq (cv x3) A2) (wceq (cv x3) C) (wceq A2 C) (wceq (cv y) D)
        (@eqeq1 (cv x3) A2 C)))
    (λ x3 y, @bibi12d (wceq (cv y) B2) (wceq (cop A2 (cv y)) (cop C D)) (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq (cv y) D)) (wa (wceq A2 C) (wceq B2 D))
      (@eqeq1d (wceq (cv y) B2) (cop A2 (cv y)) (cop A2 B2) (cop C D)
        (@opeq2 (cv y) B2 A2))
      (@anbi2d (wceq (cv y) B2) (wceq (cv y) D) (wceq B2 D) (wceq A2 C)
        (@eqeq1 (cv y) B2 D)))
    (λ x3 y, @opth (cv x3) (cv y) C D
      (@vex x3)
      (@vex y)) x3 y


/-- Ordered pair theorem. (Contributed by NM, 14-Oct-2005.) (Revised by Mario Carneiro,
26-Apr-2015.) -/
theorem opthg2 {A2 B2 C D V W : «class»} :
  ⊦ wi (wa (wcel C V) (wcel D W)) (wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))) :=
@«3bitr4g» (wa (wcel C V) (wcel D W)) (wceq (cop C D) (cop A2 B2)) (wa (wceq C A2) (wceq D B2)) (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D))
  (@opthg C D A2 B2 V W)
  (@eqcom (cop A2 B2) (cop C D))
  (@anbi12i (wceq A2 C) (wceq C A2) (wceq B2 D) (wceq D B2)
    (@eqcom A2 C)
    (@eqcom B2 D))


/-- Ordered pair theorem. (Contributed by NM, 21-Sep-2014.) -/
theorem opth2 {A2 B2 C D : «class»}
  (opth2_1 : ⊦ wcel C cvv)
  (opth2_2 : ⊦ wcel D cvv) :
  ⊦ wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D)) :=
@mp2an (wcel C cvv) (wcel D cvv) (wb (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D)))
  opth2_1
  opth2_2
  (@opthg2 A2 B2 C D cvv cvv)


/-- Ordered triple theorem, with triple expressed with ordered pairs. (Contributed by NM,
1-May-1995.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem otth2 {A2 B2 C D R S : «class»}
  (otth_1 : ⊦ wcel A2 cvv)
  (otth_2 : ⊦ wcel B2 cvv)
  (otth_3 : ⊦ wcel R cvv) :
  ⊦ wb (wceq (cop (cop A2 B2) R) (cop (cop C D) S)) (w3a (wceq A2 C) (wceq B2 D) (wceq R S)) :=
@«3bitr4i» (wa (wceq (cop A2 B2) (cop C D)) (wceq R S)) (wa (wa (wceq A2 C) (wceq B2 D)) (wceq R S)) (wceq (cop (cop A2 B2) R) (cop (cop C D) S)) (w3a (wceq A2 C) (wceq B2 D) (wceq R S))
  (@anbi1i (wceq (cop A2 B2) (cop C D)) (wa (wceq A2 C) (wceq B2 D)) (wceq R S)
    (@opth A2 B2 C D
      otth_1
      otth_2))
  (@opth (cop A2 B2) R (cop C D) S
    (@opex A2 B2)
    otth_3)
  (@df_3an (wceq A2 C) (wceq B2 D) (wceq R S))


/-- A variable introduction law for ordered pairs. Analogue of Lemma 15 of [Monk2] p. 109.
(Contributed by NM, 28-May-1995.) -/
theorem eqvinop {A2 B2 C : «class»}
  (eqvinop_1 : ⊦ wcel B2 cvv)
  (eqvinop_2 : ⊦ wcel C cvv) :
  ⊦ wb (wceq A2 (cop B2 C)) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C))))) :=
@bitr2i (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C))))) (wex (λ x3, wa (wceq (cv x3) B2) (wceq A2 (cop (cv x3) C)))) (wceq A2 (cop B2 C))
  (@exbii (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C)))) (λ x3, wa (wceq (cv x3) B2) (wceq A2 (cop (cv x3) C)))
    (λ x3, @«3bitri» (wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C)))) (wex (λ y, wa (wceq (cv x3) B2) (wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y)))))) (wa (wceq (cv x3) B2) (wex (λ y, wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y)))))) (wa (wceq (cv x3) B2) (wceq A2 (cop (cv x3) C)))
      (@exbii (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C))) (λ y, wa (wceq (cv x3) B2) (wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y)))))
        (λ y, @«3bitri» (wa (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop B2 C))) (wa (wceq A2 (cop (cv x3) (cv y))) (wa (wceq (cv x3) B2) (wceq (cv y) C))) (wa (wa (wceq (cv x3) B2) (wceq (cv y) C)) (wceq A2 (cop (cv x3) (cv y)))) (wa (wceq (cv x3) B2) (wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y)))))
          (@anbi2i (wceq (cop (cv x3) (cv y)) (cop B2 C)) (wa (wceq (cv x3) B2) (wceq (cv y) C)) (wceq A2 (cop (cv x3) (cv y)))
            (@opth2 (cv x3) (cv y) B2 C
              eqvinop_1
              eqvinop_2))
          (@ancom (wceq A2 (cop (cv x3) (cv y))) (wa (wceq (cv x3) B2) (wceq (cv y) C)))
          (@anass (wceq (cv x3) B2) (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y))))))
      (@«19_42v» (wceq (cv x3) B2) (λ y, wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y)))))
      (@anbi2i (wex (λ y, wa (wceq (cv y) C) (wceq A2 (cop (cv x3) (cv y))))) (wceq A2 (cop (cv x3) C)) (wceq (cv x3) B2)
        (@ceqsexv (λ y, wceq A2 (cop (cv x3) (cv y))) (wceq A2 (cop (cv x3) C)) C
          eqvinop_2
          (λ y, @eqeq2d (wceq (cv y) C) (cop (cv x3) (cv y)) (cop (cv x3) C) A2
            (@opeq2 (cv y) C (cv x3)))))))
  (@ceqsexv (λ x3, wceq A2 (cop (cv x3) C)) (wceq A2 (cop B2 C)) B2
    eqvinop_1
    (λ x3, @eqeq2d (wceq (cv x3) B2) (cop (cv x3) C) (cop B2 C) A2
      (@opeq1 (cv x3) B2 C)))


/-- Version of ~ copsexg with a disjoint variable condition, which does not require ~ ax-13 .
(Contributed by Gino Giotto, 26-Jan-2024.) -/
theorem copsexgw {ph : setvar → setvar → wff} {A2 : «class»}
  (x3 y : setvar) : ⊦ wi (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))) :=
@pm2_43i (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))))
  (@sylbi (wceq A2 (cop (cv x3) (cv y))) (wex (λ z, wex (λ w, wa (wceq A2 (cop (cv z) (cv w))) (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y)))))) (wi (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))))
    (@eqvinop A2 (cv x3) (cv y)
      (@vex x3)
      (@vex y))
    (@exlimivv (λ z w, wa (wceq A2 (cop (cv z) (cv w))) (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y)))) (wi (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))))
      (λ z w, @adantr (wceq A2 (cop (cv z) (cv w))) (wi (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))))) (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y)))
        (@mpbiri (wceq A2 (cop (cv z) (cv w))) (wi (wceq A2 (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))))) (wi (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y))))))
          (@impbid (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y))))
            (@ex (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y))))
              (@«19_8ad» (λ x3, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)))
                (λ x3, @«19_8a» (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)) y) x3))
            (@sylbi (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (wi (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)))) (ph x3 y))
              (@opth (cv z) (cv w) (cv x3) (cv y)
                (@vex z)
                (@vex w))
              (@syl5bi (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)))) (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)
                (@«2exbii» (λ x3 y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))
                  (λ x3 y, @anbi1i (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)
                    (@opth (cv z) (cv w) (cv x3) (cv y)
                      (@vex z)
                      (@vex w))))
                (@syl5 (wex (λ x3, wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)
                  (setvar.forget $ λ x3 : setvar,
                    show ⊦ wi (wex (λ x3, wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))), from
                    @exlimi (λ x3, wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))) (λ x3, wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))))
                      (@nfe1 (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))))
                      (λ x3, @pm2_61i (wal (λ y, wceq (cv y) (cv x3))) (wi (wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))))
                        (@syl5ib (wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))) (wex (λ y, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wal (λ y, wceq (cv y) (cv x3))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))))
                          (@eximi (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)) (λ y, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                            (λ y, @anassrs (wceq (cv z) (cv x3)) (wceq (cv w) (cv y)) (ph x3 y) (wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                              (@anim2i (wa (wceq (cv w) (cv y)) (ph x3 y)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))) (wceq (cv z) (cv x3))
                                (@«19_8a» (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)) y))))
                          (setvar.forget $ λ y : setvar,
                            show ⊦ wi (wal (λ y, wceq (cv y) (cv x3))) (wb (wex (λ y, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))))), from
                            @drex1v (λ y x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))) (λ y x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                              (λ y x3, @biidd (wal (λ y, wceq (cv y) (cv x3))) (wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) y x3))
                        (@syl6 (wn (wal (λ y, wceq (cv y) (cv x3)))) (wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))) (wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))))
                          (@syl5bi (wex (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y))) (wex (λ y, wa (wceq (cv z) (cv x3)) (wa (wceq (cv w) (cv y)) (ph x3 y)))) (wn (wal (λ y, wceq (cv y) (cv x3)))) (wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                            (@exbii (λ y, wa (wa (wceq (cv z) (cv x3)) (wceq (cv w) (cv y))) (ph x3 y)) (λ y, wa (wceq (cv z) (cv x3)) (wa (wceq (cv w) (cv y)) (ph x3 y)))
                              (λ y, @anass (wceq (cv z) (cv x3)) (wceq (cv w) (cv y)) (ph x3 y)))
                            (@syl5 (wex (λ y, wa (wceq (cv z) (cv x3)) (wa (wceq (cv w) (cv y)) (ph x3 y)))) (wa (wex (λ y, wceq (cv z) (cv x3))) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))) (wn (wal (λ y, wceq (cv y) (cv x3)))) (wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                              (@«19_40» (λ y, wceq (cv z) (cv x3)) (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))
                              (@anim1d (wn (wal (λ y, wceq (cv y) (cv x3)))) (wex (λ y, wceq (cv z) (cv x3))) (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))
                                (setvar.forget $ λ y : setvar,
                                  show ⊦ wi (wn (wal (λ y, wceq (cv y) (cv x3)))) (wi (wex (λ y, wceq (cv z) (cv x3))) (wceq (cv z) (cv x3))), from
                                  @«19_9d» (λ y, wceq (cv z) (cv x3)) (λ y, wn (wal (λ y, wceq (cv y) (cv x3))))
                                    (λ y, setvar.forget $ λ y : setvar,
                                      show ⊦ wi (wn (wal (λ y, wceq (cv y) (cv x3)))) (wnf (λ y, wceq (cv z) (cv x3))), from
                                      @nfvd (λ y, wn (wal (λ y, wceq (cv y) (cv x3)))) (wceq (cv z) (cv x3)) y) y))))
                          (@«19_8a» (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))) x3))) x3)
                  (@sylan9 (wceq (cv z) (cv x3)) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))) (wceq (cv w) (cv y)) (ph x3 y)
                    (@com12 (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y)))
                      (@mpan (weu (λ x3, wceq (cv z) (cv x3))) (wex (λ x3, wa (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))) (wi (wceq (cv z) (cv x3)) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))))
                        (@mpbi (weu (λ x3, wceq (cv x3) (cv z))) (weu (λ x3, wceq (cv z) (cv x3)))
                          (@euequ z)
                          (@eubii (λ x3, wceq (cv x3) (cv z)) (λ x3, wceq (cv z) (cv x3))
                            (λ x3, @equcom x3 z)))
                        (@eupick (λ x3, wceq (cv z) (cv x3)) (λ x3, wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))) x3)))
                    (@com12 (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))) (wceq (cv w) (cv y)) (ph x3 y)
                      (@mpan (weu (λ y, wceq (cv w) (cv y))) (wex (λ y, wa (wceq (cv w) (cv y)) (ph x3 y))) (wi (wceq (cv w) (cv y)) (ph x3 y))
                        (@mpbi (weu (λ y, wceq (cv y) (cv w))) (weu (λ y, wceq (cv w) (cv y)))
                          (@euequ w)
                          (@eubii (λ y, wceq (cv y) (cv w)) (λ y, wceq (cv w) (cv y))
                            (λ y, @equcom y w)))
                        (@eupick (λ y, wceq (cv w) (cv y)) (λ y, ph x3 y) y))))))))
          (@imbi12d (wceq A2 (cop (cv z) (cv w))) (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))) (wb (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)))))
            (@eqeq1 A2 (cop (cv z) (cv w)) (cop (cv x3) (cv y)))
            (@bibi2d (wceq A2 (cop (cv z) (cv w))) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)))) (ph x3 y)
              (@«2exbidv» (wceq A2 (cop (cv z) (cv w))) (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y))
                (λ x3 y, @anbi1d (wceq A2 (cop (cv z) (cv w))) (wceq A2 (cop (cv x3) (cv y))) (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y)
                  (@eqeq1 A2 (cop (cv z) (cv w)) (cop (cv x3) (cv y)))))))))))


/-- Implicit substitution inference for ordered pairs. (Contributed by NM, 28-May-1995.) Use a
similar proof to ~ copsex4g to reduce axiom usage. (Revised by SN, 1-Sep-2024.) -/
theorem copsex2g {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (copsex2g_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wb (wex (λ x3, wex (λ y, wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (ph x3 y)))) ps) :=
@syl5bb (wex (λ x3, wex (λ y, wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ph x3 y)))) (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) ps
  (@«2exbii» (λ x3 y, wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ph x3 y))
    (λ x3 y, @anbi1i (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (ph x3 y)
      (@bitri (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wa (wceq (cv x3) A2) (wceq (cv y) B2))
        (@eqcom (cop A2 B2) (cop (cv x3) (cv y)))
        (@opth (cv x3) (cv y) A2 B2
          (@vex x3)
          (@vex y)))))
  (@cgsex2g (λ x3 y, ph x3 y) ps (λ x3 y, wa (wceq (cv x3) A2) (wceq (cv y) B2)) A2 B2 (λ x3 y, V x3 y) (λ x3 y, W x3 y)
    (λ x3 y, @id (wa (wceq (cv x3) A2) (wceq (cv y) B2)))
    (λ x3 y, copsex2g_1 x3 y) x3 y)


/-- An implicit substitution inference for 2 ordered pairs. (Contributed by NM, 5-Aug-1995.) -/
theorem copsex4g {ph : setvar → setvar → setvar → setvar → wff} {ps : wff} {A2 B2 C D R S : «class»}
  (copsex4g_1 : ∀ x3 y z w, ⊦ wi (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (wb (ph x3 y z w) ps)) :
  ⊦ wi (wa (wa (wcel A2 R) (wcel B2 S)) (wa (wcel C R) (wcel D S))) (wb (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop C D) (cop (cv z) (cv w)))) (ph x3 y z w)))))) ps) :=
@bitrd (wa (wa (wcel A2 R) (wcel B2 S)) (wa (wcel C R) (wcel D S))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop C D) (cop (cv z) (cv w)))) (ph x3 y z w)))))) (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ph x3 y z w)))))) ps
  (@«4exbidv» (wa (wa (wcel A2 R) (wcel B2 S)) (wa (wcel C R) (wcel D S))) (λ x3 y z w, wa (wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop C D) (cop (cv z) (cv w)))) (ph x3 y z w)) (λ x3 y z w, wa (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ph x3 y z w))
    (λ x3 y z w, @a1i (wb (wa (wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop C D) (cop (cv z) (cv w)))) (ph x3 y z w)) (wa (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ph x3 y z w))) (wa (wa (wcel A2 R) (wcel B2 S)) (wa (wcel C R) (wcel D S)))
      (@anbi1i (wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop C D) (cop (cv z) (cv w)))) (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ph x3 y z w)
        (@anbi12i (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wceq (cop C D) (cop (cv z) (cv w))) (wa (wceq (cv z) C) (wceq (cv w) D))
          (@bitri (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wa (wceq (cv x3) A2) (wceq (cv y) B2))
            (@eqcom (cop A2 B2) (cop (cv x3) (cv y)))
            (@opth (cv x3) (cv y) A2 B2
              (@vex x3)
              (@vex y)))
          (@bitri (wceq (cop C D) (cop (cv z) (cv w))) (wceq (cop (cv z) (cv w)) (cop C D)) (wa (wceq (cv z) C) (wceq (cv w) D))
            (@eqcom (cop C D) (cop (cv z) (cv w)))
            (@opth (cv z) (cv w) C D
              (@vex z)
              (@vex w)))))))
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wa (wa (wcel A2 R) (wcel B2 S)) (wa (wcel C R) (wcel D S))) (wb (wex (λ x3, wex (λ y, wex (λ z, wex (λ w, wa (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) (ph x3 y z w)))))) ps), from
    @cgsex4g (λ x3 y z w, ph x3 y z w) ps (λ x3 y z w, wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))) A2 B2 C D (λ x3 y z w, R) (λ x3 y z w, S)
      (λ x3 y z w, @id (wa (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv z) C) (wceq (cv w) D))))
      (λ x3 y z w, copsex4g_1 x3 y z w) x3 y z w)


/-- "At most one" remains true inside ordered pair quantification. (Contributed by NM, 28-Aug-2007.)
-/
theorem mosubopt {ph : setvar → setvar → setvar → wff} {A2 : «class»} :
  ⊦ wi (wal (λ y, wal (λ z, wmo (λ x3, ph x3 y z)))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))) :=
@pm2_61d1 (wal (λ y, wal (λ z, wmo (λ x3, ph x3 y z)))) (wex (λ y, wex (λ z, wceq A2 (cop (cv y) (cv z))))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wal (λ y, wal (λ z, wmo (λ x3, ph x3 y z)))) (wi (wex (λ y, wex (λ z, wceq A2 (cop (cv y) (cv z))))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))), from
    @exlimd (λ y, wal (λ y, wal (λ z, wmo (λ x3, ph x3 y z)))) (λ y, wex (λ z, wceq A2 (cop (cv y) (cv z)))) (λ y, wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
      (@nfa1 (λ y, wal (λ z, wmo (λ x3, ph x3 y z))))
      (@nfmov (λ y x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))
        (λ x3, @nfe1 (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
      (λ y, @sps (λ y, wal (λ z, wmo (λ x3, ph x3 y z))) (λ y, wi (wex (λ z, wceq A2 (cop (cv y) (cv z)))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))))
        (λ y, setvar.forget $ λ z : setvar,
          show ⊦ wi (wal (λ z, wmo (λ x3, ph x3 y z))) (wi (wex (λ z, wceq A2 (cop (cv y) (cv z)))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))), from
          @exlimd (λ z, wal (λ z, wmo (λ x3, ph x3 y z))) (λ z, wceq A2 (cop (cv y) (cv z))) (λ z, wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
            (@nfa1 (λ z, wmo (λ x3, ph x3 y z)))
            (@nfmov (λ z x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))
              (λ x3, @nfex (λ z y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))
                (λ y, @nfe1 (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
            (λ z, @sps (λ z, wmo (λ x3, ph x3 y z)) (λ z, wi (wceq A2 (cop (cv y) (cv z))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))))
              (λ z, @biimpcd (wceq A2 (cop (cv y) (cv z))) (wmo (λ x3, ph x3 y z)) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
                (@mobidv (wceq A2 (cop (cv y) (cv z))) (λ x3, ph x3 y z) (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))
                  (λ x3, @copsexgw (λ y z, ph x3 y z) A2 y z))) z) z) y) y)
  (@nsyl5 (wex (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))) (wex (λ y, wex (λ z, wceq A2 (cop (cv y) (cv z))))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
    (@exlimiv (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))) (wex (λ y, wex (λ z, wceq A2 (cop (cv y) (cv z)))))
      (λ x3, @«2eximi» (λ y z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)) (λ y z, wceq A2 (cop (cv y) (cv z)))
        (λ y z, @simpl (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))
    (@nexmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z))))))


/-- "At most one" remains true inside ordered pair quantification. (Contributed by NM, 28-May-1995.)
-/
theorem mosubop {ph : setvar → setvar → setvar → wff} {A2 : «class»}
  (mosubop_1 : ∀ y z, ⊦ wmo (λ x3, ph x3 y z)) :
  ⊦ wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))) :=
@ax_mp (wal (λ y, wal (λ z, wmo (λ x3, ph x3 y z)))) (wmo (λ x3, wex (λ y, wex (λ z, wa (wceq A2 (cop (cv y) (cv z))) (ph x3 y z)))))
  (@gen2 (λ y z, wmo (λ x3, ph x3 y z))
    (λ y z, mosubop_1 y z))
  (@mosubopt (λ x3 y z, ph x3 y z) A2)


/-- The union of an ordered pair. Theorem 65 of [Suppes] p. 39. (Contributed by NM, 17-Aug-2004.)
(Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem uniop {A2 B2 : «class»}
  (opthw_1 : ⊦ wcel A2 cvv)
  (opthw_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cuni (cop A2 B2)) (cpr A2 B2) :=
@«3eqtri» (cuni (cop A2 B2)) (cuni (cpr (csn A2) (cpr A2 B2))) (cun (csn A2) (cpr A2 B2)) (cpr A2 B2)
  (@unieqi (cop A2 B2) (cpr (csn A2) (cpr A2 B2))
    (@dfop A2 B2
      opthw_1
      opthw_2))
  (@unipr (csn A2) (cpr A2 B2)
    (@snex A2)
    (@prex A2 B2))
  (@mpbi (wss (csn A2) (cpr A2 B2)) (wceq (cun (csn A2) (cpr A2 B2)) (cpr A2 B2))
    (@snsspr1 A2 B2)
    (@ssequn1 (csn A2) (cpr A2 B2)))


/-- Ordered pair membership is inherited by class union. (Contributed by NM, 13-May-2008.) (Revised
by Mario Carneiro, 26-Apr-2015.) -/
theorem uniopel {A2 B2 C : «class»}
  (opthw_1 : ⊦ wcel A2 cvv)
  (opthw_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wcel (cop A2 B2) C) (wcel (cuni (cop A2 B2)) (cuni C)) :=
@mpi (wcel (cop A2 B2) C) (wcel (cuni (cop A2 B2)) (cop A2 B2)) (wcel (cuni (cop A2 B2)) (cuni C))
  (@eqeltri (cuni (cop A2 B2)) (cpr A2 B2) (cop A2 B2)
    (@uniop A2 B2
      opthw_1
      opthw_2)
    (@opi2 A2 B2
      opthw_1
      opthw_2))
  (@sseld (wcel (cop A2 B2) C) (cop A2 B2) (cuni C) (cuni (cop A2 B2))
    (@elssuni (cop A2 B2) C))


/-- The law of concretion. Special case of Theorem 9.5 of [Quine] p. 61. Version of ~ opabid with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by NM, 14-Apr-1995.)
(Revised by Gino Giotto, 26-Jan-2024.) -/
theorem opabidw {ph : setvar → setvar → wff}
  (x3 y : setvar) : ⊦ wb (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (ph x3 y) :=
setvar.forget $ λ z : setvar,
  show ⊦ wb (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (ph x3 y), from
  @elab2 (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (ph x3 y) (cop (cv x3) (cv y)) (λ z, copab (λ x3 y, ph x3 y))
    (@opex (cv x3) (cv y))
    (λ z, @bicomd (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))
      (@copsexgw (λ x3 y, ph x3 y) (cv z) x3 y))
    (λ z, @df_opab (λ x3 y, ph x3 y)) z


/-- Membership in a class abstraction of ordered pairs. (Contributed by NM, 24-Mar-1998.) -/
theorem elopab {ph : setvar → setvar → wff} {A2 : «class»} :
  ⊦ wb (wcel A2 (copab (λ x3 y, ph x3 y))) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))) :=
@pm5_21nii (wcel A2 (copab (λ x3 y, ph x3 y))) (wcel A2 cvv) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))
  (@elex A2 (copab (λ x3 y, ph x3 y)))
  (@exlimivv (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)) (wcel A2 cvv)
    (λ x3 y, @adantr (wceq A2 (cop (cv x3) (cv y))) (wcel A2 cvv) (ph x3 y)
      (@mpbiri (wceq A2 (cop (cv x3) (cv y))) (wcel A2 cvv) (wcel (cop (cv x3) (cv y)) cvv)
        (@opex (cv x3) (cv y))
        (@eleq1 A2 (cop (cv x3) (cv y)) cvv))))
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (copab (λ x3 y, ph x3 y))) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))))), from
    @elab2gw (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (λ w, wex (λ x3, wex (λ y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)))) (λ z, A2) (λ z w, copab (λ x3 y, ph x3 y)) (λ z w, cvv)
      (λ z w, @«2exbidv» (wceq (cv z) (cv w)) (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y))
        (λ x3 y, @anbi1d (wceq (cv z) (cv w)) (wceq (cv z) (cop (cv x3) (cv y))) (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y)
          (@eqeq1 (cv z) (cv w) (cop (cv x3) (cv y)))))
      (λ z w, @«2exbidv» (wceq (cv w) A2) (λ x3 y, wa (wceq (cv w) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (ph x3 y))
        (λ x3 y, @anbi1d (wceq (cv w) A2) (wceq (cv w) (cop (cv x3) (cv y))) (wceq A2 (cop (cv x3) (cv y))) (ph x3 y)
          (@eqeq1 (cv w) A2 (cop (cv x3) (cv y)))))
      (λ z w, @df_opab (λ x3 y, ph x3 y)) z w)


/-- Membership in a class abstraction of ordered pairs. (Contributed by NM, 24-Mar-1998.) -/
theorem elopab_b {ph : setvar → wff} {A2 : «class»} :
  ⊦ wb (wcel A2 (copab (λ x3 x3, ph x3))) (wex (λ x3, wex (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3)))) :=
@pm5_21nii (wcel A2 (copab (λ x3 x3, ph x3))) (wcel A2 cvv) (wex (λ x3, wex (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3))))
  (@elex A2 (copab (λ x3 x3, ph x3)))
  (@exlimivv_b (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3)) (wcel A2 cvv)
    (λ x3, @adantr (wceq A2 (cop (cv x3) (cv x3))) (wcel A2 cvv) (ph x3)
      (@mpbiri (wceq A2 (cop (cv x3) (cv x3))) (wcel A2 cvv) (wcel (cop (cv x3) (cv x3)) cvv)
        (@opex (cv x3) (cv x3))
        (@eleq1 A2 (cop (cv x3) (cv x3)) cvv))))
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (copab (λ x3 x3, ph x3))) (wex (λ x3, wex (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3))))), from
    @elab2gw (λ z, wex (λ x3, wex (λ x3, wa (wceq (cv z) (cop (cv x3) (cv x3))) (ph x3)))) (λ w, wex (λ x3, wex (λ x3, wa (wceq (cv w) (cop (cv x3) (cv x3))) (ph x3)))) (λ z, wex (λ x3, wex (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3)))) (λ z, A2) (λ z w, copab (λ x3 x3, ph x3)) (λ z w, cvv)
      (λ z w, @«2exbidv_b» (wceq (cv z) (cv w)) (λ x3, wa (wceq (cv z) (cop (cv x3) (cv x3))) (ph x3)) (λ x3, wa (wceq (cv w) (cop (cv x3) (cv x3))) (ph x3))
        (λ x3, @anbi1d (wceq (cv z) (cv w)) (wceq (cv z) (cop (cv x3) (cv x3))) (wceq (cv w) (cop (cv x3) (cv x3))) (ph x3)
          (@eqeq1 (cv z) (cv w) (cop (cv x3) (cv x3)))))
      (λ z w, @«2exbidv_b» (wceq (cv w) A2) (λ x3, wa (wceq (cv w) (cop (cv x3) (cv x3))) (ph x3)) (λ x3, wa (wceq A2 (cop (cv x3) (cv x3))) (ph x3))
        (λ x3, @anbi1d (wceq (cv w) A2) (wceq (cv w) (cop (cv x3) (cv x3))) (wceq A2 (cop (cv x3) (cv x3))) (ph x3)
          (@eqeq1 (cv w) A2 (cop (cv x3) (cv x3)))))
      (λ z w, @df_opab_b (λ x3, ph x3)) z w)


/-- The law of concretion in terms of substitutions. Version of ~ opelopabsb with set variables.
(Contributed by NM, 30-Sep-2002.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) Remove
unnecessary commutation. (Revised by SN, 1-Sep-2024.) -/
theorem vopelopabsb {ph : setvar → setvar → setvar → setvar → wff}
  (z w : setvar) : ⊦ wb (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y z w))) (wsb (λ x3, wsb (λ y, ph x3 y z w) w) z) :=
@«3bitr4i» (wex (λ x3, wex (λ y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y z w)))) (wex (λ x3, wex (λ y, wa (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (ph x3 y z w)))) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y z w))) (wsb (λ x3, wsb (λ y, ph x3 y z w) w) z)
  (@«2exbii» (λ x3 y, wa (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (ph x3 y z w)) (λ x3 y, wa (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (ph x3 y z w))
    (λ x3 y, @anbi1i (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w))) (ph x3 y z w)
      (@bitri (wceq (cop (cv z) (cv w)) (cop (cv x3) (cv y))) (wceq (cop (cv x3) (cv y)) (cop (cv z) (cv w))) (wa (wceq (cv x3) (cv z)) (wceq (cv y) (cv w)))
        (@eqcom (cop (cv z) (cv w)) (cop (cv x3) (cv y)))
        (@opth (cv x3) (cv y) (cv z) (cv w)
          (@vex x3)
          (@vex y)))))
  (@elopab (λ x3 y, ph x3 y z w) (cop (cv z) (cv w)))
  (@«2sb5» (λ x3 y z w, ph x3 y z w) z w)


/-- The law of concretion in terms of substitutions. (Contributed by NM, 30-Sep-2002.) (Revised by
Mario Carneiro, 18-Nov-2016.) -/
theorem opelopabsb {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»} {B2 : setvar → «class»}
  (x3 y : setvar) : ⊦ wb (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y)) :=
@pm5_21nii (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wa (wcel (A2 x3 y) cvv) (wcel (B2 y) cvv)) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y))
  (@sylib (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wne (cop (A2 x3 y) (B2 y)) c0) (wa (wcel (A2 x3 y) cvv) (wcel (B2 y) cvv))
    (@necon2ai (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (cop (A2 x3 y) (B2 y)) c0
      (@mtbiri (wceq (cop (A2 x3 y) (B2 y)) c0) (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wcel c0 (copab (λ x3 y, ph x3 y)))
        (@mtbir (wcel c0 (copab (λ x3 y, ph x3 y))) (wex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y))))
          (@nex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)))
            (λ x3, @nex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y))
              (λ y, @ax_mp (wne (cop (cv x3) (cv y)) c0) (wn (wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)))
                (@opnzi (cv x3) (cv y)
                  (@vex x3)
                  (@vex y))
                (@necon3ai (wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)) (cop (cv x3) (cv y)) c0
                  (@eqcomd (wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)) c0 (cop (cv x3) (cv y))
                    (@simpl (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)))))))
          (@elopab (λ x3 y, ph x3 y) c0))
        (@eleq1 (cop (A2 x3 y) (B2 y)) c0 (copab (λ x3 y, ph x3 y)))))
    (@opnz (A2 x3 y) (B2 y)))
  (@jca (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y)) (wcel (A2 x3 y) cvv) (wcel (B2 y) cvv)
    (@sbcex (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (λ x3, A2 x3 y) x3)
    (@syl (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y)) (wex (λ x3, wsbc (λ y, ph x3 y) (B2 y))) (wcel (B2 y) cvv)
      (@spesbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (λ x3, A2 x3 y) x3)
      (@exlimiv (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (wcel (B2 y) cvv)
        (λ x3, @sbcex (λ y, ph x3 y) (λ y, B2 y) y))))
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wa (wcel (A2 x3 y) cvv) (wcel (B2 y) cvv)) (wb (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y))), from
    @vtocl2g (λ z w, wb (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y))) (wsb (λ x3, wsb (λ y, ph x3 y) w) z)) (λ w, wb (wcel (cop (A2 x3 y) (cv w)) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsb (λ y, ph x3 y) w) (A2 x3 y))) (λ z, wb (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y))) (A2 x3 y) (λ z, B2 y) (λ z w, cvv) (λ z w, cvv)
      (λ z w, @bibi12d (wceq (cv z) (A2 x3 y)) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y))) (wcel (cop (A2 x3 y) (cv w)) (copab (λ x3 y, ph x3 y))) (wsb (λ x3, wsb (λ y, ph x3 y) w) z) (wsbc (λ x3, wsb (λ y, ph x3 y) w) (A2 x3 y))
        (@eleq1d (wceq (cv z) (A2 x3 y)) (cop (cv z) (cv w)) (cop (A2 x3 y) (cv w)) (copab (λ x3 y, ph x3 y))
          (@opeq1 (cv z) (A2 x3 y) (cv w)))
        (@dfsbcq2 (λ x3, wsb (λ y, ph x3 y) w) z (λ x3, A2 x3 y) x3))
      (λ z w, @bibi12d (wceq (cv w) (B2 y)) (wcel (cop (A2 x3 y) (cv w)) (copab (λ x3 y, ph x3 y))) (wcel (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsb (λ y, ph x3 y) w) (A2 x3 y)) (wsbc (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (A2 x3 y))
        (@eleq1d (wceq (cv w) (B2 y)) (cop (A2 x3 y) (cv w)) (cop (A2 x3 y) (B2 y)) (copab (λ x3 y, ph x3 y))
          (@opeq2 (cv w) (B2 y) (A2 x3 y)))
        (@sbcbidv (wceq (cv w) (B2 y)) (λ x3, wsb (λ y, ph x3 y) w) (λ x3, wsbc (λ y, ph x3 y) (B2 y)) (λ x3, A2 x3 y)
          (λ x3, @dfsbcq2 (λ y, ph x3 y) w (λ y, B2 y) y) x3))
      (λ z w, @vopelopabsb (λ x3 y z w, ph x3 y) z w) z w)


/-- The law of concretion. Theorem 9.5 of [Quine] p. 61. (Contributed by Mario Carneiro,
19-Dec-2013.) -/
theorem opelopabga {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (opelopabga_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) ps) :=
@syl5bb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) (wex (λ x3, wex (λ y, wa (wceq (cop A2 B2) (cop (cv x3) (cv y))) (ph x3 y)))) (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) ps
  (@elopab (λ x3 y, ph x3 y) (cop A2 B2))
  (@copsex2g (λ x3 y, ph x3 y) ps A2 B2 (λ x3 y, V x3 y) (λ x3 y, W x3 y)
    (λ x3 y, opelopabga_1 x3 y) x3 y)


/-- The law of concretion for a binary relation. (Contributed by Mario Carneiro, 19-Dec-2013.) -/
theorem brabga {ph : setvar → setvar → wff} {ps : wff} {A2 B2 : «class»} {R V W : setvar → setvar → «class»}
  (opelopabga_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (brabga_2 : ∀ x3 y, ⊦ wceq (R x3 y) (copab (λ x3 y, ph x3 y)))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wb (wbr A2 B2 (R x3 y)) ps) :=
@syl5bb (wbr A2 B2 (R x3 y)) (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) ps
  (@bitri (wbr A2 B2 (R x3 y)) (wcel (cop A2 B2) (R x3 y)) (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y)))
    (@df_br A2 B2 (R x3 y))
    (@eleq2i (R x3 y) (copab (λ x3 y, ph x3 y)) (cop A2 B2)
      (brabga_2 x3 y)))
  (@opelopabga (λ x3 y, ph x3 y) ps A2 B2 (λ x3 y, V x3 y) (λ x3 y, W x3 y)
    (λ x3 y, opelopabga_1 x3 y) x3 y)


/-- Ordered pair membership in an ordered pair class abstraction. (Contributed by Mario Carneiro,
19-Dec-2013.) -/
theorem opelopab2a {ph : setvar → setvar → wff} {ps : wff} {A2 B2 C D : «class»}
  (opelopabga_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps)) :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)))) ps) :=
@bianabs (wa (wcel A2 C) (wcel B2 D)) (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)))) ps
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)))) (wa (wa (wcel A2 C) (wcel B2 D)) ps)), from
    @opelopabga (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)) (wa (wa (wcel A2 C) (wcel B2 D)) ps) A2 B2 (λ x3 y, C) (λ x3 y, D)
      (λ x3 y, @anbi12d (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wcel (cv x3) C) (wcel (cv y) D)) (wa (wcel A2 C) (wcel B2 D)) (ph x3 y) ps
        (@bi2anan9 (wceq (cv x3) A2) (wcel (cv x3) C) (wcel A2 C) (wceq (cv y) B2) (wcel (cv y) D) (wcel B2 D)
          (@eleq1 (cv x3) A2 C)
          (@eleq1 (cv y) B2 D))
        (opelopabga_1 x3 y)) x3 y)


/-- The law of concretion. Theorem 9.5 of [Quine] p. 61. (Contributed by NM, 28-May-1995.) (Revised
by Mario Carneiro, 19-Dec-2013.) -/
theorem opelopabg {ph ps : setvar → setvar → wff} {ch : wff} {A2 B2 : «class»} {V W : setvar → setvar → «class»}
  (opelopabg_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopabg_2 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) ch))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (V x3 y)) (wcel B2 (W x3 y))) (wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) ch) :=
@opelopabga (λ x3 y, ph x3 y) ch A2 B2 (λ x3 y, V x3 y) (λ x3 y, W x3 y)
  (λ x3 y, @sylan9bb (wceq (cv x3) A2) (ph x3 y) (ps x3 y) (wceq (cv y) B2) ch
    (opelopabg_1 x3 y)
    (opelopabg_2 x3 y)) x3 y


/-- The law of concretion for a binary relation. (Contributed by NM, 16-Aug-1999.) (Revised by Mario
Carneiro, 19-Dec-2013.) -/
theorem brabg {ph ps : setvar → setvar → wff} {ch : wff} {A2 B2 : «class»} {C D R : setvar → setvar → «class»}
  (opelopabg_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopabg_2 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) ch))
  (brabg_5 : ∀ x3 y, ⊦ wceq (R x3 y) (copab (λ x3 y, ph x3 y)))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (C x3 y)) (wcel B2 (D x3 y))) (wb (wbr A2 B2 (R x3 y)) ch) :=
@brabga (λ x3 y, ph x3 y) ch A2 B2 (λ x3 y, R x3 y) (λ x3 y, C x3 y) (λ x3 y, D x3 y)
  (λ x3 y, @sylan9bb (wceq (cv x3) A2) (ph x3 y) (ps x3 y) (wceq (cv y) B2) ch
    (opelopabg_1 x3 y)
    (opelopabg_2 x3 y))
  (λ x3 y, brabg_5 x3 y) x3 y


/-- Ordered pair membership in an ordered pair class abstraction. (Contributed by NM, 14-Oct-2007.)
(Revised by Mario Carneiro, 19-Dec-2013.) -/
theorem opelopab2 {ph ps : setvar → setvar → wff} {ch : wff} {A2 B2 C D : «class»}
  (opelopab2_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopab2_2 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) ch)) :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)))) ch) :=
@opelopab2a (λ x3 y, ph x3 y) ch A2 B2 C D
  (λ x3 y, @sylan9bb (wceq (cv x3) A2) (ph x3 y) (ps x3 y) (wceq (cv y) B2) ch
    (opelopab2_1 x3 y)
    (opelopab2_2 x3 y))


/-- The law of concretion. Theorem 9.5 of [Quine] p. 61. (Contributed by NM, 16-May-1995.) -/
theorem opelopab {ph ps : setvar → setvar → wff} {ch : wff} {A2 B2 : «class»}
  (opelopab_1 : ⊦ wcel A2 cvv)
  (opelopab_2 : ⊦ wcel B2 cvv)
  (opelopab_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopab_4 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) ch)) :
  ⊦ wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) ch :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) ch)
  opelopab_1
  opelopab_2
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) ch), from
    @opelopabg (λ x3 y, ph x3 y) (λ x3 y, ps x3 y) ch A2 B2 (λ x3 y, cvv) (λ x3 y, cvv)
      (λ x3 y, opelopab_3 x3 y)
      (λ x3 y, opelopab_4 x3 y) x3 y)


/-- The law of concretion for a binary relation. (Contributed by NM, 16-Aug-1999.) -/
theorem brab {ph ps : setvar → setvar → wff} {ch : wff} {A2 B2 : «class»} {R : setvar → setvar → «class»}
  (opelopab_1 : ⊦ wcel A2 cvv)
  (opelopab_2 : ⊦ wcel B2 cvv)
  (opelopab_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopab_4 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) ch))
  (brab_5 : ∀ x3 y, ⊦ wceq (R x3 y) (copab (λ x3 y, ph x3 y)))
  (x3 y : setvar) : ⊦ wb (wbr A2 B2 (R x3 y)) ch :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wbr A2 B2 (R x3 y)) ch)
  opelopab_1
  opelopab_2
  (@brabg (λ x3 y, ph x3 y) (λ x3 y, ps x3 y) ch A2 B2 (λ x3 y, cvv) (λ x3 y, cvv) (λ x3 y, R x3 y)
    (λ x3 y, opelopab_3 x3 y)
    (λ x3 y, opelopab_4 x3 y)
    (λ x3 y, brab_5 x3 y) x3 y)


/-- The law of concretion. Theorem 9.5 of [Quine] p. 61. This version of ~ opelopab uses
bound-variable hypotheses in place of distinct variable conditions." (Contributed by NM,
19-Dec-2008.) -/
theorem opelopabf {ph ps ch : setvar → setvar → wff} {A2 B2 : «class»}
  (opelopabf_x : ∀ y, ⊦ wnf (λ x3, ps x3 y))
  (opelopabf_y : ∀ x3, ⊦ wnf (λ y, ch x3 y))
  (opelopabf_1 : ⊦ wcel A2 cvv)
  (opelopabf_2 : ⊦ wcel B2 cvv)
  (opelopabf_3 : ∀ x3 y, ⊦ wi (wceq (cv x3) A2) (wb (ph x3 y) (ps x3 y)))
  (opelopabf_4 : ∀ x3 y, ⊦ wi (wceq (cv y) B2) (wb (ps x3 y) (ch x3 y)))
  (x3 y : setvar) : ⊦ wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) (ch x3 y) :=
@«3bitri» (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2) (wsbc (λ y, ps x3 y) B2) (ch x3 y)
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wb (wcel (cop A2 B2) (copab (λ x3 y, ph x3 y))) (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2), from
    @opelopabsb (λ x3 y, ph x3 y) (λ x3 y, A2) (λ y, B2) x3 y)
  (@ax_mp (wcel A2 cvv) (wb (wsbc (λ x3, wsbc (λ y, ph x3 y) B2) A2) (wsbc (λ y, ps x3 y) B2))
    opelopabf_1
    (@sbciegf (λ x3, wsbc (λ y, ph x3 y) B2) (λ x3, wsbc (λ y, ps x3 y) B2) A2 (λ x3, cvv)
      (setvar.forget $ λ y : setvar,
        show ⊦ wnf (λ x3, wsbc (λ y, ps x3 y) B2), from
        @nfsbcw (λ x3 y, ps x3 y) (λ x3 y, B2)
          (λ y, @nfcv B2)
          (λ y, opelopabf_x y) y)
      (λ x3, setvar.forget $ λ y : setvar,
        show ⊦ wi (wceq (cv x3) A2) (wb (wsbc (λ y, ph x3 y) B2) (wsbc (λ y, ps x3 y) B2)), from
        @sbcbidv (wceq (cv x3) A2) (λ y, ph x3 y) (λ y, ps x3 y) (λ y, B2)
          (λ y, opelopabf_3 x3 y) y) x3))
  (@ax_mp (wcel B2 cvv) (wb (wsbc (λ y, ps x3 y) B2) (ch x3 y))
    opelopabf_2
    (@sbciegf (λ y, ps x3 y) (λ y, ch x3 y) B2 (λ y, cvv)
      (opelopabf_y x3)
      (λ y, opelopabf_4 x3 y) y))


/-- Equivalence of ordered pair abstraction subclass and implication. (Contributed by NM,
27-Dec-1996.) (Revised by Mario Carneiro, 19-May-2013.) -/
theorem ssopab2 {ph ps : setvar → setvar → wff} :
  ⊦ wi (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))) (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) :=
@«3sstr4g» (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))) (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))
  (@ss2abdv (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))))
    (λ z, @aleximi (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y))) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y)))
      (λ x3, @aleximi (λ y, wi (ph x3 y) (ps x3 y)) (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ps x3 y))
        (λ y, @anim2d (wi (ph x3 y) (ps x3 y)) (ph x3 y) (ps x3 y) (wceq (cv z) (cop (cv x3) (cv y)))
          (@id (wi (ph x3 y) (ps x3 y)))))))
  (@df_opab (λ x3 y, ph x3 y))
  (@df_opab (λ x3 y, ps x3 y))


/-- Equivalence of ordered pair abstraction subclass and implication. Version of ~ ssopab2b with a
disjoint variable condition, which does not require ~ ax-13 . (Contributed by NM, 27-Dec-1996.)
(Revised by Gino Giotto, 26-Jan-2024.) -/
theorem ssopab2bw {ph ps : setvar → setvar → wff} :
  ⊦ wb (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))) :=
@impbii (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y))))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (wal (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))), from
    @alrimi (λ x3, wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y)))
      (@nfss (λ x3, copab (λ x3 y, ph x3 y)) (λ x3, copab (λ x3 y, ps x3 y))
        (@nfopab1 (λ x3 y, ph x3 y))
        (@nfopab1 (λ x3 y, ps x3 y)))
      (λ x3, setvar.forget $ λ y : setvar,
        show ⊦ wi (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (wal (λ y, wi (ph x3 y) (ps x3 y))), from
        @alrimi (λ y, wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (λ y, wi (ph x3 y) (ps x3 y))
          (@nfss (λ y, copab (λ x3 y, ph x3 y)) (λ y, copab (λ x3 y, ps x3 y))
            (@nfopab2 (λ x3 y, ph x3 y))
            (@nfopab2 (λ x3 y, ps x3 y)))
          (λ y, @«3imtr3g» (wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ps x3 y))) (ph x3 y) (ps x3 y)
            (@ssel (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)) (cop (cv x3) (cv y)))
            (@opabidw (λ x3 y, ph x3 y) x3 y)
            (@opabidw (λ x3 y, ps x3 y) x3 y)) y) x3)
  (@ssopab2 (λ x3 y, ph x3 y) (λ x3 y, ps x3 y))


/-- Inference of ordered pair abstraction subclass from implication. (Contributed by NM,
5-Apr-1995.) -/
theorem ssopab2i {ph ps : setvar → setvar → wff}
  (ssopab2i_1 : ∀ x3 y, ⊦ wi (ph x3 y) (ps x3 y)) :
  ⊦ wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)), from
  @mpg (λ x3, wal (λ y, wi (ph x3 y) (ps x3 y))) (λ x3, wss (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)))
    (λ x3, @ssopab2 (λ x3 y, ph x3 y) (λ x3 y, ps x3 y))
    (λ x3, @ax_gen (λ y, wi (ph x3 y) (ps x3 y))
      (λ y, ssopab2i_1 x3 y)) x3


/-- Inference of ordered pair abstraction subclass from implication. (Contributed by NM,
19-Jan-2014.) (Revised by Mario Carneiro, 24-Jun-2014.) -/
theorem ssopab2dv {ph : wff} {ps ch : setvar → setvar → wff}
  (ssopab2dv_1 : ∀ x3 y, ⊦ wi ph (wi (ps x3 y) (ch x3 y))) :
  ⊦ wi ph (wss (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y))) :=
@syl ph (wal (λ x3, wal (λ y, wi (ps x3 y) (ch x3 y)))) (wss (copab (λ x3 y, ps x3 y)) (copab (λ x3 y, ch x3 y)))
  (@alrimivv ph (λ x3 y, wi (ps x3 y) (ch x3 y))
    (λ x3 y, ssopab2dv_1 x3 y))
  (@ssopab2 (λ x3 y, ps x3 y) (λ x3 y, ch x3 y))


/-- Nonempty ordered pair class abstraction. (Contributed by NM, 10-Oct-2007.) -/
theorem opabn0 {ph : setvar → setvar → wff} :
  ⊦ wb (wne (copab (λ x3 y, ph x3 y)) c0) (wex (λ x3, wex (λ y, ph x3 y))) :=
@bitri (wne (copab (λ x3 y, ph x3 y)) c0) (wex (λ z, wcel (cv z) (copab (λ x3 y, ph x3 y)))) (wex (λ x3, wex (λ y, ph x3 y)))
  (@n0 (copab (λ x3 y, ph x3 y)))
  (@bitri (wex (λ z, wcel (cv z) (copab (λ x3 y, ph x3 y)))) (wex (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (wex (λ x3, wex (λ y, ph x3 y)))
    (@exbii (λ z, wcel (cv z) (copab (λ x3 y, ph x3 y))) (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))
      (λ z, @elopab (λ x3 y, ph x3 y) (cv z)))
    (@bitri (wex (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (wex (λ x3, wex (λ y, wex (λ z, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))) (wex (λ x3, wex (λ y, ph x3 y)))
      (@exrot3 (λ z x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))
      (@«2exbii» (λ x3 y, wex (λ z, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (λ x3 y, ph x3 y)
        (λ x3 y, @mpbiran (wex (λ z, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))) (wex (λ z, wceq (cv z) (cop (cv x3) (cv y)))) (ph x3 y)
          (@isseti (cop (cv x3) (cv y))
            (@opex (cv x3) (cv y)))
          (@«19_41v» (λ z, wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))))


/-- The empty set is never an element in an ordered-pair class abstraction. (Contributed by
Alexander van der Vekens, 5-Nov-2017.) -/
theorem «0nelopab» {ph : setvar → setvar → wff} :
  ⊦ wn (wcel c0 (copab (λ x3 y, ph x3 y))) :=
@pm2_61i (wcel c0 (copab (λ x3 y, ph x3 y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y))))
  (@sylbi (wcel c0 (copab (λ x3 y, ph x3 y))) (wex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)))) (wn (wcel c0 (copab (λ x3 y, ph x3 y))))
    (@elopab (λ x3 y, ph x3 y) c0)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))), from
      @exlimi (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y))) (λ x3, wn (wcel c0 (copab (λ x3 y, ph x3 y))))
        (@nfn (λ x3, wcel c0 (copab (λ x3 y, ph x3 y)))
          (@nfel2 c0 (λ x3, copab (λ x3 y, ph x3 y))
            (@nfopab1 (λ x3 y, ph x3 y))))
        (λ x3, setvar.forget $ λ y : setvar,
          show ⊦ wi (wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))), from
          @exlimi (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (ph x3 y)) (λ y, wn (wcel c0 (copab (λ x3 y, ph x3 y))))
            (@nfn (λ y, wcel c0 (copab (λ x3 y, ph x3 y)))
              (@nfel2 c0 (λ y, copab (λ x3 y, ph x3 y))
                (@nfopab2 (λ x3 y, ph x3 y))))
            (λ y, @adantr (wceq c0 (cop (cv x3) (cv y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))) (ph x3 y)
              (@ax_mp (wne (cop (cv x3) (cv y)) c0) (wi (wceq c0 (cop (cv x3) (cv y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))))
                (@opnzi (cv x3) (cv y)
                  (@vex x3)
                  (@vex y))
                (@sylbi (wne (cop (cv x3) (cv y)) c0) (wn (wceq c0 (cop (cv x3) (cv y)))) (wi (wceq c0 (cop (cv x3) (cv y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))))
                  (@nesym (cop (cv x3) (cv y)) c0)
                  (@pm2_21 (wceq c0 (cop (cv x3) (cv y))) (wn (wcel c0 (copab (λ x3 y, ph x3 y)))))))) y) x3))
  (@id (wn (wcel c0 (copab (λ x3 y, ph x3 y)))))


/-- If two classes are in a relationship given by an ordered-pair class abstraction, the classes are
sets. (Contributed by Alexander van der Vekens, 5-Nov-2017.) -/
theorem brabv {ph : setvar → setvar → wff} {X Y : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wbr (X x3 y) (Y x3 y) (copab (λ x3 y, ph x3 y))) (wa (wcel (X x3 y) cvv) (wcel (Y x3 y) cvv)) :=
@sylbi (wbr (X x3 y) (Y x3 y) (copab (λ x3 y, ph x3 y))) (wcel (cop (X x3 y) (Y x3 y)) (copab (λ x3 y, ph x3 y))) (wa (wcel (X x3 y) cvv) (wcel (Y x3 y) cvv))
  (@df_br (X x3 y) (Y x3 y) (copab (λ x3 y, ph x3 y)))
  (@con4i (wa (wcel (X x3 y) cvv) (wcel (Y x3 y) cvv)) (wcel (cop (X x3 y) (Y x3 y)) (copab (λ x3 y, ph x3 y)))
    (@syl (wn (wa (wcel (X x3 y) cvv) (wcel (Y x3 y) cvv))) (wceq (cop (X x3 y) (Y x3 y)) c0) (wn (wcel (cop (X x3 y) (Y x3 y)) (copab (λ x3 y, ph x3 y))))
      (@opprc (X x3 y) (Y x3 y))
      (@mtbiri (wceq (cop (X x3 y) (Y x3 y)) c0) (wcel (cop (X x3 y) (Y x3 y)) (copab (λ x3 y, ph x3 y))) (wcel c0 (copab (λ x3 y, ph x3 y)))
        (@«0nelopab» (λ x3 y, ph x3 y))
        (@eleq1 (cop (X x3 y) (Y x3 y)) c0 (copab (λ x3 y, ph x3 y))))))


-- /-- Extend the definition of a class to include the identity relation. -/
-- constant cid : «class»


-- /-- Define the identity relation. Definition 9.15 of [Quine] p. 64. For example, ` 5 _I 5 ` and `
-- -. 4 _I 5 ` ( ~ ex-id ). (Contributed by NM, 13-Aug-1995.) -/
-- axiom df_id : ⊦ wceq cid (copab (λ x3 y, wceq (cv x3) (cv y)))


-- /-- Extend class notation to include the membership relation. -/
-- constant cep : «class»


-- /-- Define the membership relation (also called "epsilon relation" since it is sometimes denoted
-- by the lowercase Greek letter "epsilon"). Similar to Definition 6.22 of [TakeutiZaring] p. 30.
-- The membership relation and the membership predicate agree, that is, ` ( A _E B <-> A e. B ) ` ,
-- when ` B ` is a set (see ~ epelg ). Thus, ` |- 5 _E { 1 , 5 } ` ( ~ ex-eprel ). (Contributed by
-- NM, 13-Aug-1995.) -/
-- axiom df_eprel : ⊦ wceq cep (copab (λ x3 y, wcel (cv x3) (cv y)))


/-- The membership relation and the membership predicate agree when the "containing" class is a set.
General version of ~ epel and closed form of ~ epeli . (Contributed by Scott Fenton, 27-Mar-2011.)
(Revised by Mario Carneiro, 28-Apr-2015.) (Proof shortened by BJ, 14-Jul-2023.) -/
theorem epelg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wb (wbr A2 B2 cep) (wcel A2 B2)) :=
@pm5_21ndd (wcel B2 V) (wcel A2 cvv) (wbr A2 B2 cep) (wcel A2 B2)
  (@a1i (wi (wbr A2 B2 cep) (wcel A2 cvv)) (wcel B2 V)
    (@sylbi (wbr A2 B2 cep) (wcel (cop A2 B2) cep) (wcel A2 cvv)
      (@df_br A2 B2 cep)
      (@nsyl2 (wcel (cop A2 B2) cep) (wceq (cop A2 B2) c0) (wcel A2 cvv)
        (@con2i (wceq (cop A2 B2) c0) (wcel (cop A2 B2) cep)
          (@mtbiri (wceq (cop A2 B2) c0) (wcel (cop A2 B2) cep) (wcel c0 cep)
            (@mtbi (wcel c0 (copab (λ x3 y, wcel (cv x3) (cv y)))) (wcel c0 cep)
              (@«0nelopab» (λ x3 y, wcel (cv x3) (cv y)))
              (@eleq2i (copab (λ x3 y, wcel (cv x3) (cv y))) cep c0
                (@eqcomi cep (copab (λ x3 y, wcel (cv x3) (cv y)))
                  df_eprel)))
            (@eleq1 (cop A2 B2) c0 cep)))
        (@opprc1 A2 B2))))
  (@a1i (wi (wcel A2 B2) (wcel A2 cvv)) (wcel B2 V)
    (@elex A2 B2))
  (@expcom (wcel A2 cvv) (wcel B2 V) (wb (wbr A2 B2 cep) (wcel A2 B2))
    (setvar.forget $ λ x3 : setvar,
      setvar.forget $ λ y : setvar,
      show ⊦ wi (wa (wcel A2 cvv) (wcel B2 V)) (wb (wbr A2 B2 cep) (wcel A2 B2)), from
      @brabga (λ x3 y, wcel (cv x3) (cv y)) (wcel A2 B2) A2 B2 (λ x3 y, cep) (λ x3 y, cvv) (λ x3 y, V)
        (λ x3 y, @eleq12 (cv x3) A2 (cv y) B2)
        (λ x3 y, df_eprel) x3 y))


/-- The membership relation and the membership predicate agree when the "containing" class is a set.
Inference associated with ~ epelg . (Contributed by Scott Fenton, 11-Apr-2012.) -/
theorem epeli {A2 B2 : «class»}
  (epeli_1 : ⊦ wcel B2 cvv) :
  ⊦ wb (wbr A2 B2 cep) (wcel A2 B2) :=
@ax_mp (wcel B2 cvv) (wb (wbr A2 B2 cep) (wcel A2 B2))
  epeli_1
  (@epelg A2 B2 cvv)


/-- The membership relation and the membership predicate agree when the "containing" class is a
setvar. (Contributed by NM, 13-Aug-1995.) Replace the first setvar variable with a class variable.
(Revised by BJ, 13-Sep-2022.) -/
theorem epel {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wbr (A2 x3) (cv x3) cep) (wcel (A2 x3) (cv x3)) :=
@epeli (A2 x3) (cv x3)
  (@vex x3)


-- /-- Extend wff notation to include the strict partial ordering predicate. Read: " ` R ` is a
-- partial order on ` A ` ". -/
-- constant wpo : «class» → «class» → wff


-- /-- Extend wff notation to include the strict total ordering predicate. Read: " ` R ` orders ` A
-- ` ". -/
-- constant wor : «class» → «class» → wff


-- /-- Define the strict partial order predicate. Definition of [Enderton] p. 168. The expression `
-- R Po A ` means ` R ` is a partial order on ` A ` . For example, ` < Po RR ` is true, while ` <_
-- Po RR ` is false ( ~ ex-po ). (Contributed by NM, 16-Mar-1997.) -/
-- axiom df_po {A2 R : «class»} : ⊦ wb (wpo A2 R) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2))


-- /-- Define the strict complete (linear) order predicate. The expression ` R Or A ` is true if
-- relationship ` R ` orders ` A ` . For example, ` < Or RR ` is true ( ~ ltso ). Equivalent to
-- Definition 6.19(1) of [TakeutiZaring] p. 29. (Contributed by NM, 21-Jan-1996.) -/
-- axiom df_so {A2 R : «class»} : ⊦ wb (wor A2 R) (wa (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)))


/-- Subset theorem for the partial ordering predicate. (Contributed by NM, 27-Mar-1997.) (Proof
shortened by Mario Carneiro, 18-Nov-2016.) -/
theorem poss {A2 B2 R : «class»} :
  ⊦ wi (wss A2 B2) (wi (wpo B2 R) (wpo A2 R)) :=
@«3imtr4g» (wss A2 B2) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, B2)) (λ y, B2)) (λ x3, B2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wpo B2 R) (wpo A2 R)
  (@syld (wss A2 B2) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, B2)) (λ y, B2)) (λ x3, B2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, B2)) (λ y, B2)) (λ x3, A2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2))
    (@ssralv (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, B2)) (λ y, B2)) A2 B2)
    (@ralimdv (wss A2 B2) (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, B2)) (λ y, B2)) (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)
      (λ x3, @ss2ralv (λ y z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) A2 B2)))
  (@df_po B2 R)
  (@df_po A2 R)


/-- Equality theorem for partial ordering predicate. (Contributed by NM, 27-Mar-1997.) -/
theorem poeq1 {A2 R S : «class»} :
  ⊦ wi (wceq R S) (wb (wpo A2 R) (wpo A2 S)) :=
@«3bitr4g» (wceq R S) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) S)) (wi (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) S))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wpo A2 R) (wpo A2 S)
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wceq R S) (wb (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) S)) (wi (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) S))) (λ z, A2)) (λ y, A2)) (λ x3, A2))), from
    @«2ralbidv» (wceq R S) (λ x3 y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3 y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) S)) (wi (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) S))) (λ z, A2)) (λ x3 y, A2) (λ x3 y, A2)
      (λ x3 y, @ralbidv (wceq R S) (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, wa (wn (wbr (cv x3) (cv x3) S)) (wi (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) S))) (λ z, A2)
        (λ z, @anbi12d (wceq R S) (wn (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) S)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (wi (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) S))
          (@notbid (wceq R S) (wbr (cv x3) (cv x3) R) (wbr (cv x3) (cv x3) S)
            (@breq (cv x3) (cv x3) R S))
          (@imbi12d (wceq R S) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wa (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) S)) (wbr (cv x3) (cv z) R) (wbr (cv x3) (cv z) S)
            (@anbi12d (wceq R S) (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv y) S) (wbr (cv y) (cv z) R) (wbr (cv y) (cv z) S)
              (@breq (cv x3) (cv y) R S)
              (@breq (cv y) (cv z) R S))
            (@breq (cv x3) (cv z) R S)))) y)
  (@df_po A2 R)
  (@df_po A2 S)


/-- Equality theorem for partial ordering predicate. (Contributed by NM, 27-Mar-1997.) -/
theorem poeq2 {A2 B2 R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wpo A2 R) (wpo B2 R)) :=
@impbid (wceq A2 B2) (wpo A2 R) (wpo B2 R)
  (@syl (wceq A2 B2) (wss B2 A2) (wi (wpo A2 R) (wpo B2 R))
    (@eqimss2 B2 A2)
    (@poss B2 A2 R))
  (@syl (wceq A2 B2) (wss A2 B2) (wi (wpo B2 R) (wpo A2 R))
    (@eqimss A2 B2)
    (@poss A2 B2 R))


/-- Properties of partial order relation in class notation. (Contributed by NM, 27-Mar-1997.) -/
theorem pocl {A2 B2 C D R : «class»} :
  ⊦ wi (wpo A2 R) (wi (w3a (wcel B2 A2) (wcel C A2) (wcel D A2)) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)))) :=
@com12 (w3a (wcel B2 A2) (wcel C A2) (wcel D A2)) (wpo A2 R) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (w3a (wcel B2 A2) (wcel C A2) (wcel D A2)) (wi (wpo A2 R) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)))), from
    @vtocl3ga (λ x3 y z, wi (wpo A2 R) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)))) (λ y z, wi (wpo A2 R) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr B2 (cv z) R)))) (λ x3 z, wi (wpo A2 R) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R)))) (λ x3 y, wi (wpo A2 R) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)))) B2 (λ x3, C) (λ x3 y, D) A2 A2 A2
      (λ x3 y z, @imbi2d (wceq (cv x3) B2) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr B2 (cv z) R))) (wpo A2 R)
        (@anbi12d (wceq (cv x3) B2) (wn (wbr (cv x3) (cv x3) R)) (wn (wbr B2 B2 R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (wi (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr B2 (cv z) R))
          (@notbid (wceq (cv x3) B2) (wbr (cv x3) (cv x3) R) (wbr B2 B2 R)
            (@breq12d (wceq (cv x3) B2) (cv x3) B2 (cv x3) B2 R
              (@id (wceq (cv x3) B2))
              (@id (wceq (cv x3) B2))))
          (@imbi12d (wceq (cv x3) B2) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R) (wbr B2 (cv z) R)
            (@anbi1d (wceq (cv x3) B2) (wbr (cv x3) (cv y) R) (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)
              (@breq1 (cv x3) B2 (cv y) R))
            (@breq1 (cv x3) B2 (cv z) R))))
      (λ x3 y z, @imbi2d (wceq (cv y) C) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr B2 (cv z) R))) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R))) (wpo A2 R)
        (@anbi2d (wceq (cv y) C) (wi (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wbr B2 (cv z) R)) (wi (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R)) (wn (wbr B2 B2 R))
          (@imbi1d (wceq (cv y) C) (wa (wbr B2 (cv y) R) (wbr (cv y) (cv z) R)) (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R)
            (@anbi12d (wceq (cv y) C) (wbr B2 (cv y) R) (wbr B2 C R) (wbr (cv y) (cv z) R) (wbr C (cv z) R)
              (@breq2 (cv y) C B2 R)
              (@breq1 (cv y) C (cv z) R)))))
      (λ x3 y z, @imbi2d (wceq (cv z) D) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R))) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R))) (wpo A2 R)
        (@anbi2d (wceq (cv z) D) (wi (wa (wbr B2 C R) (wbr C (cv z) R)) (wbr B2 (cv z) R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)) (wn (wbr B2 B2 R))
          (@imbi12d (wceq (cv z) D) (wa (wbr B2 C R) (wbr C (cv z) R)) (wa (wbr B2 C R) (wbr C D R)) (wbr B2 (cv z) R) (wbr B2 D R)
            (@anbi2d (wceq (cv z) D) (wbr C (cv z) R) (wbr C D R) (wbr B2 C R)
              (@breq2 (cv z) D C R))
            (@breq2 (cv z) D B2 R))))
      (λ x3 y z, @com12 (wpo A2 R) (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)))
        (@«19_21bi» (λ z, wpo A2 R) (λ z, wi (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))))
          (λ z, @«19_21bbi» (λ x3 y, wpo A2 R) (λ x3 y, wal (λ z, wi (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)))))
            (λ x3 y, @sylbb (wpo A2 R) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wal (λ x3, wal (λ y, wal (λ z, wi (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)))))))
              (@df_po A2 R)
              (@r3al (λ x3 y z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ x3, A2) (λ x3 y, A2) (λ x3 y z, A2))) x3 y) z)) x3 y)


/-- Sufficient conditions for a partial order. (Contributed by NM, 9-Jul-2014.) -/
theorem ispod {ph : wff} {A2 R : «class»}
  (ispod_1 : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) A2)) (wn (wbr (cv x3) (cv x3) R)))
  (ispod_2 : ∀ x3 y z, ⊦ wi (wa ph (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2))) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) :
  ⊦ wi ph (wpo A2 R) :=
@sylibr ph (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wpo A2 R)
  (@ralrimivvva ph (λ x3 y z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ x3, A2) (λ x3 y, A2) (λ x3 y z, A2)
    (λ x3 y z, @jca (wa ph (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2))) (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))
      (@«3ad2antr1» ph (wcel (cv y) A2) (wcel (cv x3) A2) (wn (wbr (cv x3) (cv x3) R)) (wcel (cv z) A2)
        (ispod_1 x3))
      (ispod_2 x3 y z)))
  (@df_po A2 R)


/-- A partial order relation is irreflexive. (Contributed by NM, 27-Mar-1997.) -/
theorem poirr {A2 B2 R : «class»} :
  ⊦ wi (wa (wpo A2 R) (wcel B2 A2)) (wn (wbr B2 B2 R)) :=
@sylan2b (wcel B2 A2) (wpo A2 R) (w3a (wcel B2 A2) (wcel B2 A2) (wcel B2 A2)) (wn (wbr B2 B2 R))
  (@«3bitrri» (w3a (wcel B2 A2) (wcel B2 A2) (wcel B2 A2)) (wa (wa (wcel B2 A2) (wcel B2 A2)) (wcel B2 A2)) (wa (wcel B2 A2) (wcel B2 A2)) (wcel B2 A2)
    (@df_3an (wcel B2 A2) (wcel B2 A2) (wcel B2 A2))
    (@anabs1 (wcel B2 A2) (wcel B2 A2))
    (@anidm (wcel B2 A2)))
  (@simpld (wa (wpo A2 R) (w3a (wcel B2 A2) (wcel B2 A2) (wcel B2 A2))) (wn (wbr B2 B2 R)) (wi (wa (wbr B2 B2 R) (wbr B2 B2 R)) (wbr B2 B2 R))
    (@imp (wpo A2 R) (w3a (wcel B2 A2) (wcel B2 A2) (wcel B2 A2)) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 B2 R) (wbr B2 B2 R)) (wbr B2 B2 R)))
      (@pocl A2 B2 B2 B2 R)))


/-- A partial order relation is a transitive relation. (Contributed by NM, 27-Mar-1997.) -/
theorem potr {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wpo A2 R) (w3a (wcel B2 A2) (wcel C A2) (wcel D A2))) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)) :=
@simprd (wa (wpo A2 R) (w3a (wcel B2 A2) (wcel C A2) (wcel D A2))) (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R))
  (@imp (wpo A2 R) (w3a (wcel B2 A2) (wcel C A2) (wcel D A2)) (wa (wn (wbr B2 B2 R)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)))
    (@pocl A2 B2 C D R))


/-- A partial order relation has no 2-cycle loops. (Contributed by NM, 27-Mar-1997.) -/
theorem po2nr {A2 B2 C R : «class»} :
  ⊦ wi (wa (wpo A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wa (wbr B2 C R) (wbr C B2 R))) :=
@mtod (wa (wpo A2 R) (wa (wcel B2 A2) (wcel C A2))) (wa (wbr B2 C R) (wbr C B2 R)) (wbr B2 B2 R)
  (@adantrr (wpo A2 R) (wcel B2 A2) (wn (wbr B2 B2 R)) (wcel C A2)
    (@poirr A2 B2 R))
  (@imp32 (wpo A2 R) (wcel B2 A2) (wcel C A2) (wi (wa (wbr B2 C R) (wbr C B2 R)) (wbr B2 B2 R))
    (@pm2_43d (wpo A2 R) (wcel B2 A2) (wi (wcel C A2) (wi (wa (wbr B2 C R) (wbr C B2 R)) (wbr B2 B2 R)))
      (@com34 (wpo A2 R) (wcel B2 A2) (wcel C A2) (wcel B2 A2) (wi (wa (wbr B2 C R) (wbr C B2 R)) (wbr B2 B2 R))
        (@«3exp2» (wpo A2 R) (wcel B2 A2) (wcel C A2) (wcel B2 A2) (wi (wa (wbr B2 C R) (wbr C B2 R)) (wbr B2 B2 R))
          (@potr A2 B2 C B2 R)))))


/-- Any relation is a partial ordering of the empty set. (Contributed by NM, 28-Mar-1997.) (Proof
shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem po0 {R : «class»} :
  ⊦ wpo c0 R :=
@mpbir (wpo c0 R) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, c0)) (λ y, c0)) (λ x3, c0))
  (@ral0 (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, c0)) (λ y, c0)))
  (@df_po c0 R)


/-- A strict linear order is a strict partial order. (Contributed by NM, 28-Mar-1997.) -/
theorem sopo {A2 R : «class»} :
  ⊦ wi (wor A2 R) (wpo A2 R) :=
@simplbi (wor A2 R) (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))
  (@df_so A2 R)


/-- Subset theorem for the strict ordering predicate. (Contributed by NM, 16-Mar-1997.) (Proof
shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem soss {A2 B2 R : «class»} :
  ⊦ wi (wss A2 B2) (wi (wor B2 R) (wor A2 R)) :=
@«3imtr4g» (wss A2 B2) (wa (wpo B2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))) (wa (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))) (wor B2 R) (wor A2 R)
  (@anim12d (wss A2 B2) (wpo B2 R) (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))
    (@poss A2 B2 R)
    (@ss2ralv (λ x3 y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) A2 B2))
  (@df_so B2 R)
  (@df_so A2 R)


/-- Equality theorem for the strict ordering predicate. (Contributed by NM, 16-Mar-1997.) -/
theorem soeq1 {A2 R S : «class»} :
  ⊦ wi (wceq R S) (wb (wor A2 R) (wor A2 S)) :=
@«3bitr4g» (wceq R S) (wa (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))) (wa (wpo A2 S) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) S) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) S)) (λ y, A2)) (λ x3, A2))) (wor A2 R) (wor A2 S)
  (@anbi12d (wceq R S) (wpo A2 R) (wpo A2 S) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) S) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) S)) (λ y, A2)) (λ x3, A2))
    (@poeq1 A2 R S)
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wceq R S) (wb (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) S) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) S)) (λ y, A2)) (λ x3, A2))), from
      @«2ralbidv» (wceq R S) (λ x3 y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3 y, w3o (wbr (cv x3) (cv y) S) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) S)) (λ x3 y, A2) (λ x3 y, A2)
        (λ x3 y, @«3orbi123d» (wceq R S) (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv y) S) (wceq (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) S)
          (@breq (cv x3) (cv y) R S)
          (@biidd (wceq R S) (wceq (cv x3) (cv y)))
          (@breq (cv y) (cv x3) R S)) y))
  (@df_so A2 R)
  (@df_so A2 S)


/-- Equality theorem for the strict ordering predicate. (Contributed by NM, 16-Mar-1997.) -/
theorem soeq2 {A2 B2 R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wor A2 R) (wor B2 R)) :=
@bicomd (wceq A2 B2) (wor B2 R) (wor A2 R)
  (@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wi (wor B2 R) (wor A2 R)) (wi (wor A2 R) (wor B2 R))) (wceq A2 B2) (wb (wor B2 R) (wor A2 R))
    (@anim12i (wss A2 B2) (wi (wor B2 R) (wor A2 R)) (wss B2 A2) (wi (wor A2 R) (wor B2 R))
      (@soss A2 B2 R)
      (@soss B2 A2 R))
    (@eqss A2 B2)
    (@dfbi2 (wor B2 R) (wor A2 R)))


/-- A strict order relation is irreflexive. (Contributed by NM, 24-Nov-1995.) -/
theorem sonr {A2 B2 R : «class»} :
  ⊦ wi (wa (wor A2 R) (wcel B2 A2)) (wn (wbr B2 B2 R)) :=
@sylan (wor A2 R) (wpo A2 R) (wcel B2 A2) (wn (wbr B2 B2 R))
  (@sopo A2 R)
  (@poirr A2 B2 R)


/-- A strict order relation is a transitive relation. (Contributed by NM, 21-Jan-1996.) -/
theorem sotr {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wor A2 R) (w3a (wcel B2 A2) (wcel C A2) (wcel D A2))) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R)) :=
@sylan (wor A2 R) (wpo A2 R) (w3a (wcel B2 A2) (wcel C A2) (wcel D A2)) (wi (wa (wbr B2 C R) (wbr C D R)) (wbr B2 D R))
  (@sopo A2 R)
  (@potr A2 B2 C D R)


/-- A strict order relation is linear (satisfies trichotomy). (Contributed by NM, 21-Jan-1996.) -/
theorem solin {A2 B2 C R : «class»} :
  ⊦ wi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R)) :=
@impcom (wa (wcel B2 A2) (wcel C A2)) (wor A2 R) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wa (wcel B2 A2) (wcel C A2)) (wi (wor A2 R) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R))), from
    @vtocl2ga (λ x3 y, wi (wor A2 R) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))) (λ y, wi (wor A2 R) (w3o (wbr B2 (cv y) R) (wceq B2 (cv y)) (wbr (cv y) B2 R))) (λ x3, wi (wor A2 R) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R))) B2 (λ x3, C) A2 A2
      (λ x3 y, @imbi2d (wceq (cv x3) B2) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (w3o (wbr B2 (cv y) R) (wceq B2 (cv y)) (wbr (cv y) B2 R)) (wor A2 R)
        (@«3orbi123d» (wceq (cv x3) B2) (wbr (cv x3) (cv y) R) (wbr B2 (cv y) R) (wceq (cv x3) (cv y)) (wceq B2 (cv y)) (wbr (cv y) (cv x3) R) (wbr (cv y) B2 R)
          (@breq1 (cv x3) B2 (cv y) R)
          (@eqeq1 (cv x3) B2 (cv y))
          (@breq2 (cv x3) B2 (cv y) R)))
      (λ x3 y, @imbi2d (wceq (cv y) C) (w3o (wbr B2 (cv y) R) (wceq B2 (cv y)) (wbr (cv y) B2 R)) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R)) (wor A2 R)
        (@«3orbi123d» (wceq (cv y) C) (wbr B2 (cv y) R) (wbr B2 C R) (wceq B2 (cv y)) (wceq B2 C) (wbr (cv y) B2 R) (wbr C B2 R)
          (@breq2 (cv y) C B2 R)
          (@eqeq2 (cv y) C B2)
          (@breq1 (cv y) C B2 R)))
      (λ x3 y, @com12 (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))
        (@simplbiim (wor A2 R) (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wi (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)))
          (@df_so A2 R)
          (@rsp2 (λ x3 y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3 y, A2) (λ x3 y, A2) x3 y))) x3)


/-- A strict order relation has no 2-cycle loops. (Contributed by NM, 21-Jan-1996.) -/
theorem so2nr {A2 B2 C R : «class»} :
  ⊦ wi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wa (wbr B2 C R) (wbr C B2 R))) :=
@sylan (wor A2 R) (wpo A2 R) (wa (wcel B2 A2) (wcel C A2)) (wn (wa (wbr B2 C R) (wbr C B2 R)))
  (@sopo A2 R)
  (@po2nr A2 B2 C R)


/-- A strict order relation satisfies strict trichotomy. (Contributed by NM, 19-Feb-1996.) -/
theorem sotric {A2 B2 C R : «class»} :
  ⊦ wi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wb (wbr B2 C R) (wn (wo (wceq B2 C) (wbr C B2 R)))) :=
@con2bid (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wceq B2 C) (wbr C B2 R)) (wbr B2 C R)
  (@impbid (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wceq B2 C) (wbr C B2 R)) (wn (wbr B2 C R))
    (@jaod (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wceq B2 C) (wn (wbr B2 C R)) (wbr C B2 R)
      (@adantrr (wor A2 R) (wcel B2 A2) (wi (wceq B2 C) (wn (wbr B2 C R))) (wcel C A2)
        (@syl5ibcom (wa (wor A2 R) (wcel B2 A2)) (wn (wbr B2 B2 R)) (wceq B2 C) (wn (wbr B2 C R))
          (@sonr A2 B2 R)
          (@notbid (wceq B2 C) (wbr B2 B2 R) (wbr B2 C R)
            (@breq2 B2 C B2 R))))
      (@con2d (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wbr B2 C R) (wbr C B2 R)
        (@sylibr (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wa (wbr B2 C R) (wbr C B2 R))) (wi (wbr B2 C R) (wn (wbr C B2 R)))
          (@so2nr A2 B2 C R)
          (@imnan (wbr B2 C R) (wbr C B2 R)))))
    (@ord (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wbr B2 C R) (wo (wceq B2 C) (wbr C B2 R))
      (@sylib (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R)) (wo (wbr B2 C R) (wo (wceq B2 C) (wbr C B2 R)))
        (@solin A2 B2 C R)
        (@«3orass» (wbr B2 C R) (wceq B2 C) (wbr C B2 R)))))


/-- Trichotomy law for strict order relation. (Contributed by NM, 9-Apr-1996.) (Proof shortened by
Andrew Salmon, 25-Jul-2011.) -/
theorem sotrieq {A2 B2 C R : «class»} :
  ⊦ wi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wb (wceq B2 C) (wn (wo (wbr B2 C R) (wbr C B2 R)))) :=
@con2bid (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wbr B2 C R) (wbr C B2 R)) (wceq B2 C)
  (@impbid (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wbr B2 C R) (wbr C B2 R)) (wn (wceq B2 C))
    (@con2d (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wceq B2 C) (wo (wbr B2 C R) (wbr C B2 R))
      (@syl5ibcom (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wo (wbr B2 B2 R) (wbr B2 B2 R))) (wceq B2 C) (wn (wo (wbr B2 C R) (wbr C B2 R)))
        (@nsyl (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wbr B2 B2 R) (wo (wbr B2 B2 R) (wbr B2 B2 R))
          (@adantrr (wor A2 R) (wcel B2 A2) (wn (wbr B2 B2 R)) (wcel C A2)
            (@sonr A2 B2 R))
          (@pm1_2 (wbr B2 B2 R)))
        (@notbid (wceq B2 C) (wo (wbr B2 B2 R) (wbr B2 B2 R)) (wo (wbr B2 C R) (wbr C B2 R))
          (@orbi12d (wceq B2 C) (wbr B2 B2 R) (wbr B2 C R) (wbr B2 B2 R) (wbr C B2 R)
            (@breq2 B2 C B2 R)
            (@breq1 B2 C B2 R)))))
    (@ord (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wceq B2 C) (wo (wbr B2 C R) (wbr C B2 R))
      (@sylib (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wbr B2 C R) (wo (wceq B2 C) (wbr C B2 R))) (wo (wceq B2 C) (wo (wbr B2 C R) (wbr C B2 R)))
        (@sylib (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (w3o (wbr B2 C R) (wceq B2 C) (wbr C B2 R)) (wo (wbr B2 C R) (wo (wceq B2 C) (wbr C B2 R)))
          (@solin A2 B2 C R)
          (@«3orass» (wbr B2 C R) (wceq B2 C) (wbr C B2 R)))
        (@or12 (wbr B2 C R) (wceq B2 C) (wbr C B2 R)))))


/-- Trichotomy law for strict order relation. (Contributed by NM, 5-May-1999.) -/
theorem sotrieq2 {A2 B2 C R : «class»} :
  ⊦ wi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wb (wceq B2 C) (wa (wn (wbr B2 C R)) (wn (wbr C B2 R)))) :=
@bitrdi (wa (wor A2 R) (wa (wcel B2 A2) (wcel C A2))) (wceq B2 C) (wn (wo (wbr B2 C R) (wbr C B2 R))) (wa (wn (wbr B2 C R)) (wn (wbr C B2 R)))
  (@sotrieq A2 B2 C R)
  (@ioran (wbr B2 C R) (wbr C B2 R))


/-- An irreflexive, transitive, linear relation is a strict ordering. (Contributed by NM,
21-Jan-1996.) (Revised by Mario Carneiro, 9-Jul-2014.) -/
theorem issod {ph : wff} {A2 R : «class»}
  (issod_1 : ⊦ wi ph (wpo A2 R))
  (issod_2 : ∀ x3 y, ⊦ wi (wa ph (wa (wcel (cv x3) A2) (wcel (cv y) A2))) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))) :
  ⊦ wi ph (wor A2 R) :=
@sylanbrc ph (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wor A2 R)
  issod_1
  (@ralrimivva ph (λ x3 y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3, A2) (λ x3 y, A2)
    (λ x3 y, issod_2 x3 y))
  (@df_so A2 R)


/-- An irreflexive, transitive, linear relation is a strict ordering. (Contributed by NM,
21-Jan-1996.) (Revised by Mario Carneiro, 9-Jul-2014.) -/
theorem issoi {A2 R : «class»}
  (issoi_1 : ∀ x3, ⊦ wi (wcel (cv x3) A2) (wn (wbr (cv x3) (cv x3) R)))
  (issoi_2 : ∀ x3 y z, ⊦ wi (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)))
  (issoi_3 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))) :
  ⊦ wor A2 R :=
@mptru (wor A2 R)
  (@issod wtru A2 R
    (@ispod wtru A2 R
      (λ x3, @adantl (wcel (cv x3) A2) (wn (wbr (cv x3) (cv x3) R)) wtru
        (issoi_1 x3))
      (λ x3 y z, @adantl (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) wtru
        (issoi_2 x3 y z)))
    (λ x3 y, @adantl (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) wtru
      (issoi_3 x3 y)))


/-- Deduce strict ordering from its properties. (Contributed by NM, 29-Jan-1996.) (Revised by Mario
Carneiro, 9-Jul-2014.) -/
theorem isso2i {A2 R : «class»}
  (isso2i_1 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wb (wbr (cv x3) (cv y) R) (wn (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)))))
  (isso2i_2 : ∀ x3 y z, ⊦ wi (w3a (wcel (cv x3) A2) (wcel (cv y) A2) (wcel (cv z) A2)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) :
  ⊦ wor A2 R :=
@issoi A2 R
  (λ x3, @anidms (wcel (cv x3) A2) (wn (wbr (cv x3) (cv x3) R))
    (@mpbii (wa (wcel (cv x3) A2) (wcel (cv x3) A2)) (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) R))
      (@orci (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)
        (@equid x3))
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wa (wcel (cv x3) A2) (wcel (cv x3) A2)) (wb (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) R))), from
        @chvarfv (λ y x3, wi (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wb (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (wn (wbr (cv x3) (cv y) R)))) (λ y x3, wi (wa (wcel (cv x3) A2) (wcel (cv x3) A2)) (wb (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) R))))
          (λ x3, @nfv (wi (wa (wcel (cv x3) A2) (wcel (cv x3) A2)) (wb (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) R)))))
          (λ y x3, @imbi12d (wceq (cv y) (cv x3)) (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wa (wcel (cv x3) A2) (wcel (cv x3) A2)) (wb (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (wn (wbr (cv x3) (cv y) R))) (wb (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) R)))
            (@anbi2d (wceq (cv y) (cv x3)) (wcel (cv y) A2) (wcel (cv x3) A2) (wcel (cv x3) A2)
              (@eleq1w (λ y x3, A2) y x3))
            (@bibi12d (wceq (cv y) (cv x3)) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (wo (wceq (cv x3) (cv x3)) (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv y) R)) (wn (wbr (cv x3) (cv x3) R))
              (@orbi12d (wceq (cv y) (cv x3)) (wceq (cv x3) (cv y)) (wceq (cv x3) (cv x3)) (wbr (cv y) (cv x3) R) (wbr (cv x3) (cv x3) R)
                (@equequ2_b2 y x3)
                (@breq1 (cv y) (cv x3) (cv x3) R))
              (@notbid (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv x3) R)
                (@breq2 (cv y) (cv x3) (cv x3) R))))
          (λ y x3, @con2bid (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wbr (cv x3) (cv y) R) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))
            (isso2i_1 x3 y)) y x3)))
  (λ x3 y z, isso2i_2 x3 y z)
  (λ x3 y, @sylibr (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wo (wbr (cv x3) (cv y) R) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))) (w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))
    (@orrd (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wbr (cv x3) (cv y) R) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))
      (@biimprd (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (wn (wbr (cv x3) (cv y) R))
        (@con2bid (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wbr (cv x3) (cv y) R) (wo (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R))
          (isso2i_1 x3 y))))
    (@«3orass» (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)))


/-- Any relation is a strict ordering of the empty set. (Contributed by NM, 16-Mar-1997.) (Proof
shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem so0 {R : «class»} :
  ⊦ wor c0 R :=
@mpbir2an (wor c0 R) (wpo c0 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, c0)) (λ x3, c0))
  (@po0 R)
  (@ral0 (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, c0)))
  (@df_so c0 R)


/-- A totally ordered set has at most one minimal element. (Contributed by Mario Carneiro,
24-Jun-2015.) (Revised by NM, 16-Jun-2017.) -/
theorem somo {A2 R : «class»} :
  ⊦ wi (wor A2 R) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) :=
@sylibr (wor A2 R) (wral (λ x3, wral (λ z, wi (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2))) (wceq (cv x3) (cv z))) (λ z, A2)) (λ x3, A2)) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))
  (@ralrimivv (wor A2 R) (λ x3 z, wi (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2))) (wceq (cv x3) (cv z))) (λ x3, A2) (λ x3 z, A2)
    (λ x3 z, @pm2_43d (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wi (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2))) (wceq (cv x3) (cv z)))
      (@exp4b (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2))) (wceq (cv x3) (cv z))
        (@syl5 (wa (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2)))) (wa (wn (wbr (cv x3) (cv z) R)) (wn (wbr (cv z) (cv x3) R))) (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2))) (wceq (cv x3) (cv z))
          (@imp (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wa (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2))) (wa (wn (wbr (cv x3) (cv z) R)) (wn (wbr (cv z) (cv x3) R)))
            (@ancomsd (wa (wcel (cv x3) A2) (wcel (cv z) A2)) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2)) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wa (wn (wbr (cv x3) (cv z) R)) (wn (wbr (cv z) (cv x3) R)))
              (@im2anan9 (wcel (cv x3) A2) (wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2)) (wn (wbr (cv x3) (cv z) R)) (wcel (cv z) A2) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (wn (wbr (cv z) (cv x3) R))
                (@rspcv (λ y, wn (wbr (cv y) (cv z) R)) (wn (wbr (cv x3) (cv z) R)) (cv x3) A2
                  (λ y, @notbid (wceq (cv y) (cv x3)) (wbr (cv y) (cv z) R) (wbr (cv x3) (cv z) R)
                    (@breq1 (cv y) (cv x3) (cv z) R)))
                (@rspcv (λ y, wn (wbr (cv y) (cv x3) R)) (wn (wbr (cv z) (cv x3) R)) (cv z) A2
                  (λ y, @notbid (wceq (cv y) (cv z)) (wbr (cv y) (cv x3) R) (wbr (cv z) (cv x3) R)
                    (@breq1 (cv y) (cv z) (cv x3) R))))))
          (@syl5bir (wa (wn (wbr (cv x3) (cv z) R)) (wn (wbr (cv z) (cv x3) R))) (wn (wo (wbr (cv x3) (cv z) R) (wbr (cv z) (cv x3) R))) (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2))) (wceq (cv x3) (cv z))
            (@ioran (wbr (cv x3) (cv z) R) (wbr (cv z) (cv x3) R))
            (@ord (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2))) (wo (wbr (cv x3) (cv z) R) (wbr (cv z) (cv x3) R)) (wceq (cv x3) (cv z))
              (@sylib (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2))) (wo (wo (wbr (cv x3) (cv z) R) (wceq (cv x3) (cv z))) (wbr (cv z) (cv x3) R)) (wo (wo (wbr (cv x3) (cv z) R) (wbr (cv z) (cv x3) R)) (wceq (cv x3) (cv z)))
                (@sylib (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel (cv z) A2))) (w3o (wbr (cv x3) (cv z) R) (wceq (cv x3) (cv z)) (wbr (cv z) (cv x3) R)) (wo (wo (wbr (cv x3) (cv z) R) (wceq (cv x3) (cv z))) (wbr (cv z) (cv x3) R))
                  (@solin A2 (cv x3) (cv z) R)
                  (@df_3or (wbr (cv x3) (cv z) R) (wceq (cv x3) (cv z)) (wbr (cv z) (cv x3) R)))
                (@or32 (wbr (cv x3) (cv z) R) (wceq (cv x3) (cv z)) (wbr (cv z) (cv x3) R)))))))))
  (@rmo4 (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ z, wral (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2)) A2
    (λ x3 z, @ralbidv (wceq (cv x3) (cv z)) (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, wn (wbr (cv y) (cv z) R)) (λ y, A2)
      (λ y, @notbid (wceq (cv x3) (cv z)) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv z) R)
        (@breq2 (cv x3) (cv z) (cv y) R))))


-- /-- Extend wff notation to include the well-founded predicate. Read: " ` R ` is a well-founded
-- relation on ` A ` ". -/
-- constant wfr : «class» → «class» → wff


-- /-- Extend wff notation to include the set-like predicate. Read: " ` R ` is set-like on ` A ` ".
-- -/
-- constant wse : «class» → «class» → wff


-- /-- Extend wff notation to include the well-ordering predicate. Read: " ` R ` well-orders ` A `
-- ". -/
-- constant wwe : «class» → «class» → wff


-- /-- Define the well-founded relation predicate. Definition 6.24(1) of [TakeutiZaring] p. 30. For
-- alternate definitions, see ~ dffr2 and ~ dffr3 . A class is called well-founded when the
-- membership relation ` _E ` (see ~ df-eprel ) is well-founded on it, that is, ` A ` is
-- well-founded if ` _E Fr A ` (some sources request that the membership relation be well-founded on
-- its transitive closure). (Contributed by NM, 3-Apr-1994.) -/
-- axiom df_fr {A2 R : «class»} : ⊦ wb (wfr A2 R) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3))))


-- /-- Define the set-like predicate. (Contributed by Mario Carneiro, 19-Nov-2014.) -/
-- axiom df_se {A2 R : «class»} : ⊦ wb (wse A2 R) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2))


-- /-- Define the well-ordering predicate. For an alternate definition, see ~ dfwe2 . (Contributed
-- by NM, 3-Apr-1994.) -/
-- axiom df_we {A2 R : «class»} : ⊦ wb (wwe A2 R) (wa (wfr A2 R) (wor A2 R))


/-- Property of well-founded relation (one direction of definition). (Contributed by NM,
18-Mar-1997.) -/
theorem fri {A2 B2 : «class»} {C : setvar → setvar → «class»} {R : «class»}
  (x3 y : setvar) : ⊦ wi (wa (wa (wcel B2 (C x3 y)) (wfr A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) :=
@imp31 (wcel B2 (C x3 y)) (wfr A2 R) (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
  (@syl5bi (wfr A2 R) (wal (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)))) (wcel B2 (C x3 y)) (wi (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)))
    (@df_fr A2 R)
    (setvar.forget $ λ z : setvar,
      show ⊦ wi (wcel B2 (C x3 y)) (wi (wal (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)))) (wi (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)))), from
      @spcgv (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z))) (wi (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))) B2 (λ z, C x3 y)
        (λ z, @imbi12d (wceq (cv z) B2) (wa (wss (cv z) A2) (wne (cv z) c0)) (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
          (@anbi12d (wceq (cv z) B2) (wss (cv z) A2) (wss B2 A2) (wne (cv z) c0) (wne B2 c0)
            (@sseq1 (cv z) B2 A2)
            (@neeq1 (cv z) B2 c0))
          (@rexeqbi1dv (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (cv z) B2
            (λ x3, @raleq (λ y, wn (wbr (cv y) (cv x3) R)) (cv z) B2))) z))


/-- The ` R ` -preimage of an element of the base set in a set-like relation is a set. (Contributed
by Mario Carneiro, 19-Nov-2014.) -/
theorem seex {A2 B2 R : «class»} :
  ⊦ wi (wa (wse A2 R) (wcel B2 A2)) (wcel (crab (λ x3, wbr (cv x3) B2 R) (λ x3, A2)) cvv) :=
@sylanb (wse A2 R) (wral (λ y, wcel (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, A2)) cvv) (λ y, A2)) (wcel B2 A2) (wcel (crab (λ x3, wbr (cv x3) B2 R) (λ x3, A2)) cvv)
  (@df_se A2 R)
  (@rspccva (λ y, wcel (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, A2)) cvv) (wcel (crab (λ x3, wbr (cv x3) B2 R) (λ x3, A2)) cvv) B2 A2
    (λ y, @eleq1d (wceq (cv y) B2) (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, A2)) (crab (λ x3, wbr (cv x3) B2 R) (λ x3, A2)) cvv
      (@rabbidv (wceq (cv y) B2) (λ x3, wbr (cv x3) (cv y) R) (λ x3, wbr (cv x3) B2 R) (λ x3, A2)
        (λ x3, @breq2 (cv y) B2 (cv x3) R))))


/-- Any relation on a set is set-like on it. (Contributed by Mario Carneiro, 22-Jun-2015.) -/
theorem exse {A2 R V : «class»} :
  ⊦ wi (wcel A2 V) (wse A2 R) :=
@sylibr (wcel A2 V) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2)) (wse A2 R)
  (@ralrimivw (wcel A2 V) (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2)
    (λ x3, setvar.forget $ λ y : setvar,
      show ⊦ wi (wcel A2 V) (wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv), from
      @rabexg (λ y, wbr (cv y) (cv x3) R) A2 (λ y, V) y))
  (@df_se A2 R)


/-- Alternate definition of well-founded relation. Similar to Definition 6.21 of [TakeutiZaring] p.
30. (Contributed by NM, 17-Feb-2004.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) (Proof
shortened by Mario Carneiro, 23-Jun-2015.) -/
theorem dffr2 {A2 R : «class»} :
  ⊦ wb (wfr A2 R) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)))) :=
@bitr4i (wfr A2 R) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3))))
  (@df_fr A2 R)
  (@albii (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3))) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))
    (λ x3, @imbi2i (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)) (wa (wss (cv x3) A2) (wne (cv x3) c0))
      (@rexbii (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)
        (λ y, @rabeq0 (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)))))


/-- Property of well-founded relation (one direction of definition using class variables).
(Contributed by NM, 17-Feb-2004.) (Revised by Mario Carneiro, 19-Nov-2014.) -/
theorem frc {A2 B2 R : «class»}
  (frc_1 : ⊦ wcel B2 cvv) :
  ⊦ wi (w3a (wfr A2 R) (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wceq (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) c0) (λ x3, B2)) :=
@sylibr (w3a (wfr A2 R) (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ z, wn (wbr (cv z) (cv x3) R)) (λ z, B2)) (λ x3, B2)) (wrex (λ x3, wceq (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) c0) (λ x3, B2))
  (@«3impb» (wfr A2 R) (wss B2 A2) (wne B2 c0) (wrex (λ x3, wral (λ z, wn (wbr (cv z) (cv x3) R)) (λ z, B2)) (λ x3, B2))
    (@mpanl1 (wcel B2 cvv) (wfr A2 R) (wa (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ z, wn (wbr (cv z) (cv x3) R)) (λ z, B2)) (λ x3, B2))
      frc_1
      (setvar.forget $ λ x3 : setvar,
        setvar.forget $ λ z : setvar,
        show ⊦ wi (wa (wa (wcel B2 cvv) (wfr A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wrex (λ x3, wral (λ z, wn (wbr (cv z) (cv x3) R)) (λ z, B2)) (λ x3, B2)), from
        @fri A2 B2 (λ x3 z, cvv) R x3 z)))
  (@rexbii (λ x3, wceq (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) c0) (λ x3, wral (λ z, wn (wbr (cv z) (cv x3) R)) (λ z, B2)) (λ x3, B2)
    (λ x3, @rabeq0w (λ y, wbr (cv y) (cv x3) R) (λ z, wbr (cv z) (cv x3) R) B2
      (λ y z, @breq1 (cv y) (cv z) (cv x3) R)))


/-- Subset theorem for the well-founded predicate. Exercise 1 of [TakeutiZaring] p. 31. (Contributed
by NM, 3-Apr-1994.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem frss {A2 B2 R : «class»} :
  ⊦ wi (wss A2 B2) (wi (wfr B2 R) (wfr A2 R)) :=
@«3imtr4g» (wss A2 B2) (wal (λ x3, wi (wa (wss (cv x3) B2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))) (wfr B2 R) (wfr A2 R)
  (@alimdv (wss A2 B2) (λ x3, wi (wa (wss (cv x3) B2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3))) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))
    (λ x3, @imim1d (wss A2 B2) (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wa (wss (cv x3) B2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3))
      (@anim1d (wss A2 B2) (wss (cv x3) A2) (wss (cv x3) B2) (wne (cv x3) c0)
        (@com12 (wss (cv x3) A2) (wss A2 B2) (wss (cv x3) B2)
          (@sstr2 (cv x3) A2 B2)))))
  (@df_fr B2 R)
  (@df_fr A2 R)


/-- Subset theorem for the set-like predicate. (Contributed by Mario Carneiro, 24-Jun-2015.) -/
theorem sess2 {A2 B2 R : «class»} :
  ⊦ wi (wss A2 B2) (wi (wse B2 R) (wse A2 R)) :=
@«3imtr4g» (wss A2 B2) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (λ x3, B2)) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2)) (wse B2 R) (wse A2 R)
  (@syld (wss A2 B2) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (λ x3, B2)) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (λ x3, A2)) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2))
    (@ssralv (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) A2 B2)
    (@ralimdv (wss A2 B2) (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2)
      (λ x3, @syl (wss A2 B2) (wss (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2))) (wi (wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv))
        (@rabss2 (λ y, wbr (cv y) (cv x3) R) A2 B2)
        (@ex (wss (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2))) (wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv) (wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv)
          (@ssexg (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) (crab (λ y, wbr (cv y) (cv x3) R) (λ y, B2)) cvv)))))
  (@df_se B2 R)
  (@df_se A2 R)


/-- Equality theorem for the well-founded predicate. (Contributed by NM, 9-Mar-1997.) -/
theorem freq1 {A2 R S : «class»} :
  ⊦ wi (wceq R S) (wb (wfr A2 R) (wfr A2 S)) :=
@«3bitr4g» (wceq R S) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)))) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) S)) (λ z, cv x3)) (λ y, cv x3)))) (wfr A2 R) (wfr A2 S)
  (@albidv (wceq R S) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3))) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) S)) (λ z, cv x3)) (λ y, cv x3)))
    (λ x3, @imbi2d (wceq R S) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) S)) (λ z, cv x3)) (λ y, cv x3)) (wa (wss (cv x3) A2) (wne (cv x3) c0))
      (setvar.forget $ λ z : setvar,
        show ⊦ wi (wceq R S) (wb (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, cv x3)) (λ y, cv x3)) (wrex (λ y, wral (λ z, wn (wbr (cv z) (cv y) S)) (λ z, cv x3)) (λ y, cv x3))), from
        @rexralbidv (wceq R S) (λ y z, wn (wbr (cv z) (cv y) R)) (λ y z, wn (wbr (cv z) (cv y) S)) (λ y z, cv x3) (λ y z, cv x3)
          (λ y z, @notbid (wceq R S) (wbr (cv z) (cv y) R) (wbr (cv z) (cv y) S)
            (@breq (cv z) (cv y) R S)) z)))
  (@df_fr A2 R)
  (@df_fr A2 S)


/-- Equality theorem for the well-founded predicate. (Contributed by NM, 3-Apr-1994.) -/
theorem freq2 {A2 B2 R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wfr A2 R) (wfr B2 R)) :=
@impbid (wceq A2 B2) (wfr A2 R) (wfr B2 R)
  (@syl (wceq A2 B2) (wss B2 A2) (wi (wfr A2 R) (wfr B2 R))
    (@eqimss2 B2 A2)
    (@frss B2 A2 R))
  (@syl (wceq A2 B2) (wss A2 B2) (wi (wfr B2 R) (wfr A2 R))
    (@eqimss A2 B2)
    (@frss A2 B2 R))


/-- A well-founded relation is irreflexive. Special case of Proposition 6.23 of [TakeutiZaring] p.
30. (Contributed by NM, 2-Jan-1994.) (Revised by Mario Carneiro, 22-Jun-2015.) -/
theorem frirr {A2 B2 R : «class»} :
  ⊦ wi (wa (wfr A2 R) (wcel B2 A2)) (wn (wbr B2 B2 R)) :=
@mpbid (wa (wfr A2 R) (wcel B2 A2)) (wrex (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (λ y, csn B2)) (wn (wbr B2 B2 R))
  (@syl3anc (wa (wfr A2 R) (wcel B2 A2)) (wfr A2 R) (wss (csn B2) A2) (wne (csn B2) c0) (wrex (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (λ y, csn B2))
    (@simpl (wfr A2 R) (wcel B2 A2))
    (@adantl (wcel B2 A2) (wss (csn B2) A2) (wfr A2 R)
      (@snssi B2 A2))
    (@adantl (wcel B2 A2) (wne (csn B2) c0) (wfr A2 R)
      (@snnzg B2 A2))
    (@frc A2 (csn B2) R
      (@snex B2)))
  (@adantl (wcel B2 A2) (wb (wrex (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (λ y, csn B2)) (wn (wbr B2 B2 R))) (wfr A2 R)
    (@bitrd (wcel B2 A2) (wrex (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (λ y, csn B2)) (wral (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2)) (wn (wbr B2 B2 R))
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wcel B2 A2) (wb (wrex (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (λ y, csn B2)) (wral (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2))), from
        @rexsng (λ y, wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (wral (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2)) B2 (λ y, A2)
          (λ y, @syl5bb (wceq (crab (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn B2)) c0) (wral (λ z, wn (wbr (cv z) (cv y) R)) (λ z, csn B2)) (wceq (cv y) B2) (wral (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2))
            (@rabeq0w (λ x3, wbr (cv x3) (cv y) R) (λ z, wbr (cv z) (cv y) R) (csn B2)
              (λ x3 z, @breq1 (cv x3) (cv z) (cv y) R))
            (@ralbidv (wceq (cv y) B2) (λ z, wn (wbr (cv z) (cv y) R)) (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2)
              (λ z, @notbid (wceq (cv y) B2) (wbr (cv z) (cv y) R) (wbr (cv z) B2 R)
                (@breq2 (cv y) B2 (cv z) R)))) y)
      (setvar.forget $ λ z : setvar,
        show ⊦ wi (wcel B2 A2) (wb (wral (λ z, wn (wbr (cv z) B2 R)) (λ z, csn B2)) (wn (wbr B2 B2 R))), from
        @ralsng (λ z, wn (wbr (cv z) B2 R)) (wn (wbr B2 B2 R)) B2 (λ z, A2)
          (λ z, @notbid (wceq (cv z) B2) (wbr (cv z) B2 R) (wbr B2 B2 R)
            (@breq1 (cv z) B2 B2 R)) z)))


/-- A well-founded relation has no 2-cycle loops. Special case of Proposition 6.23 of
[TakeutiZaring] p. 30. (Contributed by NM, 30-May-1994.) (Revised by Mario Carneiro, 22-Jun-2015.)
-/
theorem fr2nr {A2 B2 C R : «class»} :
  ⊦ wi (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wa (wbr B2 C R) (wbr C B2 R))) :=
@sylibr (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wn (wbr B2 C R)) (wn (wbr C B2 R))) (wn (wa (wbr B2 C R) (wbr C B2 R)))
  (@orcomd (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wn (wbr C B2 R)) (wn (wbr B2 C R))
    (@mpd (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wo (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C))) (wo (wn (wbr C B2 R)) (wn (wbr B2 C R)))
      (@mpbid (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wrex (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (λ y, cpr B2 C)) (wo (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)))
        (@syl22anc (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wcel (cpr B2 C) cvv) (wfr A2 R) (wss (cpr B2 C) A2) (wne (cpr B2 C) c0) (wrex (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (λ y, cpr B2 C))
          (@a1i (wcel (cpr B2 C) cvv) (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2)))
            (@prex B2 C))
          (@simpl (wfr A2 R) (wa (wcel B2 A2) (wcel C A2)))
          (@adantl (wa (wcel B2 A2) (wcel C A2)) (wss (cpr B2 C) A2) (wfr A2 R)
            (@prssi B2 C A2))
          (@ad2antrl (wcel B2 A2) (wne (cpr B2 C) c0) (wfr A2 R) (wcel C A2)
            (@prnzg B2 C A2))
          (setvar.forget $ λ x3 : setvar,
            setvar.forget $ λ y : setvar,
            show ⊦ wi (wa (wa (wcel (cpr B2 C) cvv) (wfr A2 R)) (wa (wss (cpr B2 C) A2) (wne (cpr B2 C) c0))) (wrex (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (λ y, cpr B2 C)), from
            @fri A2 (cpr B2 C) (λ y x3, cvv) R y x3))
        (@adantl (wa (wcel B2 A2) (wcel C A2)) (wb (wrex (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (λ y, cpr B2 C)) (wo (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)))) (wfr A2 R)
          (setvar.forget $ λ y : setvar,
            show ⊦ wi (wa (wcel B2 A2) (wcel C A2)) (wb (wrex (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (λ y, cpr B2 C)) (wo (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)))), from
            @rexprg (λ y, wral (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)) B2 C (λ y, A2) (λ y, A2)
              (λ y, @ralbidv (wceq (cv y) B2) (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)
                (λ x3, @notbid (wceq (cv y) B2) (wbr (cv x3) (cv y) R) (wbr (cv x3) B2 R)
                  (@breq2 (cv y) B2 (cv x3) R)))
              (λ y, @ralbidv (wceq (cv y) C) (λ x3, wn (wbr (cv x3) (cv y) R)) (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)
                (λ x3, @notbid (wceq (cv y) C) (wbr (cv x3) (cv y) R) (wbr (cv x3) C R)
                  (@breq2 (cv y) C (cv x3) R))) y)))
      (@orim12d (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wn (wbr C B2 R)) (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)) (wn (wbr B2 C R))
        (@syl (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wcel C (cpr B2 C)) (wi (wral (λ x3, wn (wbr (cv x3) B2 R)) (λ x3, cpr B2 C)) (wn (wbr C B2 R)))
          (@ad2antll (wcel C A2) (wcel C (cpr B2 C)) (wfr A2 R) (wcel B2 A2)
            (@prid2g B2 C A2))
          (@rspcv (λ x3, wn (wbr (cv x3) B2 R)) (wn (wbr C B2 R)) C (cpr B2 C)
            (λ x3, @notbid (wceq (cv x3) C) (wbr (cv x3) B2 R) (wbr C B2 R)
              (@breq1 (cv x3) C B2 R))))
        (@syl (wa (wfr A2 R) (wa (wcel B2 A2) (wcel C A2))) (wcel B2 (cpr B2 C)) (wi (wral (λ x3, wn (wbr (cv x3) C R)) (λ x3, cpr B2 C)) (wn (wbr B2 C R)))
          (@ad2antrl (wcel B2 A2) (wcel B2 (cpr B2 C)) (wfr A2 R) (wcel C A2)
            (@prid1g B2 C A2))
          (@rspcv (λ x3, wn (wbr (cv x3) C R)) (wn (wbr B2 C R)) B2 (cpr B2 C)
            (λ x3, @notbid (wceq (cv x3) B2) (wbr (cv x3) C R) (wbr B2 C R)
              (@breq1 (cv x3) B2 C R)))))))
  (@ianor (wbr B2 C R) (wbr C B2 R))


/-- Any relation is well-founded on the empty set. (Contributed by NM, 17-Sep-1993.) -/
theorem fr0 {R : «class»} :
  ⊦ wfr c0 R :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wfr c0 R, from
  @mpgbir (λ x3, wfr c0 R) (λ x3, wi (wa (wss (cv x3) c0) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)))
    (λ x3, @dffr2 c0 R)
    (λ x3, @imp (wss (cv x3) c0) (wne (cv x3) c0) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3))
      (@necon1ad (wss (cv x3) c0) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)) (cv x3) c0
        (@a1d (wss (cv x3) c0) (wceq (cv x3) c0) (wn (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)))
          (@ss0 (cv x3))))) x3


/-- A well-founded class does not belong to itself. (Contributed by NM, 18-Apr-1994.) (Revised by
Mario Carneiro, 22-Jun-2015.) -/
theorem efrirr {A2 : «class»} :
  ⊦ wi (wfr A2 cep) (wn (wcel A2 A2)) :=
@pm2_01da (wfr A2 cep) (wcel A2 A2)
  (@mtbid (wa (wfr A2 cep) (wcel A2 A2)) (wbr A2 A2 cep) (wcel A2 A2)
    (@frirr A2 A2 cep)
    (@adantl (wcel A2 A2) (wb (wbr A2 A2 cep) (wcel A2 A2)) (wfr A2 cep)
      (@epelg A2 A2 A2)))


/-- The membership relation is set-like on any class. (This is the origin of the term "set-like": a
set-like relation "acts like" the membership relation of sets and their elements.) (Contributed by
Mario Carneiro, 22-Jun-2015.) -/
theorem epse {A2 : «class»} :
  ⊦ wse A2 cep :=
@mpbir (wse A2 cep) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, A2)) cvv) (λ x3, A2))
  (@rgenw (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, A2)) cvv) (λ x3, A2)
    (λ x3, @ssexi (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, A2)) (cab (λ y, wbr (cv y) (cv x3) cep))
      (@eqeltrri (cv x3) (cab (λ y, wbr (cv y) (cv x3) cep)) cvv
        (@abbi2i (λ y, wbr (cv y) (cv x3) cep) (cv x3)
          (λ y, @bicomi (wbr (cv y) (cv x3) cep) (wcel (cv y) (cv x3))
            (@epel (λ x3, cv y) x3)))
        (@vex x3))
      (@rabssab (λ y, wbr (cv y) (cv x3) cep) (λ y, A2))))
  (@df_se A2 cep)


/-- Similar to Theorem 7.2 of [TakeutiZaring] p. 35, except that the Axiom of Regularity is not
required due to the antecedent ` _E Fr A ` . (Contributed by NM, 4-May-1994.) -/
theorem tz7_2 {A2 B2 : «class»} :
  ⊦ wi (w3a (wtr A2) (wfr A2 cep) (wcel B2 A2)) (wa (wss B2 A2) (wne B2 A2)) :=
@«3impia» (wtr A2) (wfr A2 cep) (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2))
  (@anim12ii (wtr A2) (wcel B2 A2) (wss B2 A2) (wfr A2 cep) (wne B2 A2)
    (@trss A2 B2)
    (@necon2ad (wfr A2 cep) (wcel B2 A2) B2 A2
      (@syl5ibrcom (wfr A2 cep) (wn (wcel B2 A2)) (wceq B2 A2) (wn (wcel A2 A2))
        (@efrirr A2)
        (@notbid (wceq B2 A2) (wcel B2 A2) (wcel A2 A2)
          (@eleq1 B2 A2 A2)))))


/-- An alternate way of saying that the membership relation is well-founded. (Contributed by NM,
17-Feb-2004.) (Revised by Mario Carneiro, 23-Jun-2015.) -/
theorem dfepfr {A2 : «class»} :
  ⊦ wb (wfr A2 cep) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cv y)) c0) (λ y, cv x3)))) :=
@bitri (wfr A2 cep) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) c0) (λ y, cv x3)))) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cv y)) c0) (λ y, cv x3))))
  (@dffr2 A2 cep)
  (@albii (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) c0) (λ y, cv x3))) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cv y)) c0) (λ y, cv x3)))
    (λ x3, @imbi2i (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) c0) (λ y, cv x3)) (wrex (λ y, wceq (cin (cv x3) (cv y)) c0) (λ y, cv x3)) (wa (wss (cv x3) A2) (wne (cv x3) c0))
      (@rexbii (λ y, wceq (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) c0) (λ y, wceq (cin (cv x3) (cv y)) c0) (λ y, cv x3)
        (λ y, @eqeq1i (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) (cin (cv x3) (cv y)) c0
          (@eqtr4i (crab (λ z, wbr (cv z) (cv y) cep) (λ z, cv x3)) (crab (λ z, wcel (cv z) (cv y)) (λ z, cv x3)) (cin (cv x3) (cv y))
            (@rabbii (λ z, wbr (cv z) (cv y) cep) (λ z, wcel (cv z) (cv y)) (λ z, cv x3)
              (λ z, @epel (λ y, cv z) y))
            (@dfin5 (cv x3) (cv y)))))))


/-- A subset of a well-founded class has a minimal element. (Contributed by NM, 17-Feb-2004.)
(Revised by David Abernethy, 22-Feb-2011.) -/
theorem epfrc {A2 B2 : «class»}
  (epfrc_1 : ⊦ wcel B2 cvv) :
  ⊦ wi (w3a (wfr A2 cep) (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)) :=
@sylibr (w3a (wfr A2 cep) (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wceq (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, B2)) c0) (λ x3, B2)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
  (@frc A2 B2 cep
    epfrc_1)
  (@rexbii (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, wceq (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, B2)) c0) (λ x3, B2)
    (λ x3, @eqeq1i (cin B2 (cv x3)) (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, B2)) c0
      (@eqtr4i (cin B2 (cv x3)) (crab (λ y, wcel (cv y) (cv x3)) (λ y, B2)) (crab (λ y, wbr (cv y) (cv x3) cep) (λ y, B2))
        (@dfin5 B2 (cv x3))
        (@rabbii (λ y, wbr (cv y) (cv x3) cep) (λ y, wcel (cv y) (cv x3)) (λ y, B2)
          (λ y, @epel (λ x3, cv y) x3)))))


/-- Subset theorem for the well-ordering predicate. Exercise 4 of [TakeutiZaring] p. 31.
(Contributed by NM, 19-Apr-1994.) -/
theorem wess {A2 B2 R : «class»} :
  ⊦ wi (wss A2 B2) (wi (wwe B2 R) (wwe A2 R)) :=
@«3imtr4g» (wss A2 B2) (wa (wfr B2 R) (wor B2 R)) (wa (wfr A2 R) (wor A2 R)) (wwe B2 R) (wwe A2 R)
  (@anim12d (wss A2 B2) (wfr B2 R) (wfr A2 R) (wor B2 R) (wor A2 R)
    (@frss A2 B2 R)
    (@soss A2 B2 R))
  (@df_we B2 R)
  (@df_we A2 R)


/-- Equality theorem for the well-ordering predicate. (Contributed by NM, 9-Mar-1997.) -/
theorem weeq1 {A2 R S : «class»} :
  ⊦ wi (wceq R S) (wb (wwe A2 R) (wwe A2 S)) :=
@«3bitr4g» (wceq R S) (wa (wfr A2 R) (wor A2 R)) (wa (wfr A2 S) (wor A2 S)) (wwe A2 R) (wwe A2 S)
  (@anbi12d (wceq R S) (wfr A2 R) (wfr A2 S) (wor A2 R) (wor A2 S)
    (@freq1 A2 R S)
    (@soeq1 A2 R S))
  (@df_we A2 R)
  (@df_we A2 S)


/-- Equality theorem for the well-ordering predicate. (Contributed by NM, 3-Apr-1994.) -/
theorem weeq2 {A2 B2 R : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wwe A2 R) (wwe B2 R)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfr A2 R) (wor A2 R)) (wa (wfr B2 R) (wor B2 R)) (wwe A2 R) (wwe B2 R)
  (@anbi12d (wceq A2 B2) (wfr A2 R) (wfr B2 R) (wor A2 R) (wor B2 R)
    (@freq2 A2 B2 R)
    (@soeq2 A2 B2 R))
  (@df_we A2 R)
  (@df_we B2 R)


/-- A well-ordering is well-founded. (Contributed by NM, 22-Apr-1994.) -/
theorem wefr {A2 R : «class»} :
  ⊦ wi (wwe A2 R) (wfr A2 R) :=
@simplbi (wwe A2 R) (wfr A2 R) (wor A2 R)
  (@df_we A2 R)


/-- A well-ordering is a strict ordering. (Contributed by NM, 16-Mar-1997.) -/
theorem weso {A2 R : «class»} :
  ⊦ wi (wwe A2 R) (wor A2 R) :=
@simprbi (wwe A2 R) (wfr A2 R) (wor A2 R)
  (@df_we A2 R)


/-- The elements of a class well-ordered by membership are comparable. (Contributed by NM,
17-May-1994.) -/
theorem wecmpep {A2 : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wa (wwe (A2 x3 y) cep) (wa (wcel (cv x3) (A2 x3 y)) (wcel (cv y) (A2 x3 y)))) (w3o (wcel (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wcel (cv y) (cv x3))) :=
@sylan (wwe (A2 x3 y) cep) (wor (A2 x3 y) cep) (wa (wcel (cv x3) (A2 x3 y)) (wcel (cv y) (A2 x3 y))) (w3o (wcel (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wcel (cv y) (cv x3)))
  (@weso (A2 x3 y) cep)
  (@sylib (wa (wor (A2 x3 y) cep) (wa (wcel (cv x3) (A2 x3 y)) (wcel (cv y) (A2 x3 y)))) (w3o (wbr (cv x3) (cv y) cep) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) cep)) (w3o (wcel (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wcel (cv y) (cv x3)))
    (@solin (A2 x3 y) (cv x3) (cv y) cep)
    (@«3orbi123i» (wbr (cv x3) (cv y) cep) (wcel (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) cep) (wcel (cv y) (cv x3))
      (@epel (λ y, cv x3) y)
      (@biid (wceq (cv x3) (cv y)))
      (@epel (λ x3, cv y) x3)))


/-- On a class well-ordered by membership, the membership predicate is transitive. (Contributed by
NM, 22-Apr-1994.) -/
theorem wetrep {x3 : setvar} {A2 : setvar → setvar → «class»}
  (y z : setvar) : ⊦ wi (wa (wwe (A2 y z) cep) (w3a (wcel (cv x3) (A2 y z)) (wcel (cv y) (A2 y z)) (wcel (cv z) (A2 y z)))) (wi (wa (wcel (cv x3) (cv y)) (wcel (cv y) (cv z))) (wcel (cv x3) (cv z))) :=
@«3imtr3g» (wa (wwe (A2 y z) cep) (w3a (wcel (cv x3) (A2 y z)) (wcel (cv y) (A2 y z)) (wcel (cv z) (A2 y z)))) (wa (wbr (cv x3) (cv y) cep) (wbr (cv y) (cv z) cep)) (wbr (cv x3) (cv z) cep) (wa (wcel (cv x3) (cv y)) (wcel (cv y) (cv z))) (wcel (cv x3) (cv z))
  (@sylan (wwe (A2 y z) cep) (wor (A2 y z) cep) (w3a (wcel (cv x3) (A2 y z)) (wcel (cv y) (A2 y z)) (wcel (cv z) (A2 y z))) (wi (wa (wbr (cv x3) (cv y) cep) (wbr (cv y) (cv z) cep)) (wbr (cv x3) (cv z) cep))
    (@weso (A2 y z) cep)
    (@sotr (A2 y z) (cv x3) (cv y) (cv z) cep))
  (@anbi12i (wbr (cv x3) (cv y) cep) (wcel (cv x3) (cv y)) (wbr (cv y) (cv z) cep) (wcel (cv y) (cv z))
    (@epel (λ y, cv x3) y)
    (@epel (λ z, cv y) z))
  (@epel (λ z, cv x3) z)


/-- A nonempty subclass of a class well-ordered by membership has a minimal element. Special case of
Proposition 6.26 of [TakeutiZaring] p. 31. (Contributed by NM, 17-Feb-2004.) -/
theorem wefrc {A2 : setvar → «class»} {B2 : «class»}
  (x3 : setvar) : ⊦ wi (w3a (wwe (A2 x3) cep) (wss B2 (A2 x3)) (wne B2 c0)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)) :=
@«3imp» (wwe (A2 x3) cep) (wss B2 (A2 x3)) (wne B2 c0) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
  (@syl6com (wss B2 (A2 x3)) (wwe (A2 x3) cep) (wwe B2 cep) (wi (wne B2 c0) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)))
    (@wess B2 (A2 x3) cep)
    (@syl5bi (wne B2 c0) (wex (λ y, wcel (cv y) B2)) (wwe B2 cep) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
      (@n0 B2)
      (@exlimdv (wwe B2 cep) (λ y, wcel (cv y) B2) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
        (λ y, @ex (wwe B2 cep) (wcel (cv y) B2) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
          (@pm2_61dne (wa (wwe B2 cep) (wcel (cv y) B2)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)) (cin B2 (cv y)) c0
            (@adantl (wcel (cv y) B2) (wi (wceq (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))) (wwe B2 cep)
              (@ex (wcel (cv y) B2) (wceq (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
                (@rspcev (λ x3, wceq (cin B2 (cv x3)) c0) (wceq (cin B2 (cv y)) c0) (cv y) B2
                  (λ x3, @eqeq1d (wceq (cv x3) (cv y)) (cin B2 (cv x3)) (cin B2 (cv y)) c0
                    (@ineq2 (cv x3) (cv y) B2)))))
            (@syld (wa (wwe B2 cep) (wcel (cv y) B2)) (wne (cin B2 (cv y)) c0) (wrex (λ x3, wa (wcel (cv x3) (cv y)) (wceq (cin (cin B2 (cv y)) (cv x3)) c0)) (λ x3, B2)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
              (@adantr (wwe B2 cep) (wi (wne (cin B2 (cv y)) c0) (wrex (λ x3, wa (wcel (cv x3) (cv y)) (wceq (cin (cin B2 (cv y)) (cv x3)) c0)) (λ x3, B2))) (wcel (cv y) B2)
                (@syl6ib (wwe B2 cep) (wne (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin (cin B2 (cv y)) (cv x3)) c0) (λ x3, cin B2 (cv y))) (wrex (λ x3, wa (wcel (cv x3) (cv y)) (wceq (cin (cin B2 (cv y)) (cv x3)) c0)) (λ x3, B2))
                  (@mpi (wwe B2 cep) (wss (cin B2 (cv y)) B2) (wi (wne (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin (cin B2 (cv y)) (cv x3)) c0) (λ x3, cin B2 (cv y))))
                    (@inss1 B2 (cv y))
                    (@«3exp» (wwe B2 cep) (wss (cin B2 (cv y)) B2) (wne (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin (cin B2 (cv y)) (cv x3)) c0) (λ x3, cin B2 (cv y)))
                      (@syl3an1 (wwe B2 cep) (wfr B2 cep) (wss (cin B2 (cv y)) B2) (wne (cin B2 (cv y)) c0) (wrex (λ x3, wceq (cin (cin B2 (cv y)) (cv x3)) c0) (λ x3, cin B2 (cv y)))
                        (@wefr B2 cep)
                        (@epfrc B2 (cin B2 (cv y))
                          (@inex2 (cv y) B2
                            (@vex y))))))
                  (@rexin (λ x3, wceq (cin (cin B2 (cv y)) (cv x3)) c0) (λ x3, B2) (λ x3, cv y))))
              (@reximdvai (wa (wwe B2 cep) (wcel (cv y) B2)) (λ x3, wa (wcel (cv x3) (cv y)) (wceq (cin (cin B2 (cv y)) (cv x3)) c0)) (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)
                (λ x3, @imp4a (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv x3) B2) (wcel (cv x3) (cv y)) (wceq (cin (cin B2 (cv y)) (cv x3)) c0) (wceq (cin B2 (cv x3)) c0)
                  (@expd (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv x3) B2) (wcel (cv x3) (cv y)) (wi (wceq (cin (cin B2 (cv y)) (cv x3)) c0) (wceq (cin B2 (cv x3)) c0))
                    (@syl6 (wa (wwe B2 cep) (wcel (cv y) B2)) (wa (wcel (cv x3) B2) (wcel (cv x3) (cv y))) (wss (cin B2 (cv x3)) (cv y)) (wi (wceq (cin (cin B2 (cv y)) (cv x3)) c0) (wceq (cin B2 (cv x3)) c0))
                      (@syl6ibr (wa (wwe B2 cep) (wcel (cv y) B2)) (wa (wcel (cv x3) B2) (wcel (cv x3) (cv y))) (wral (λ z, wcel (cv z) (cv y)) (λ z, cin B2 (cv x3))) (wss (cin B2 (cv x3)) (cv y))
                        (@ralrimdv (wa (wwe B2 cep) (wcel (cv y) B2)) (wa (wcel (cv x3) B2) (wcel (cv x3) (cv y))) (λ z, wcel (cv z) (cv y)) (λ z, cin B2 (cv x3))
                          (λ z, @com23 (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv z) (cin B2 (cv x3))) (wa (wcel (cv x3) B2) (wcel (cv x3) (cv y))) (wcel (cv z) (cv y))
                            (@imp4a (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv z) (cin B2 (cv x3))) (wcel (cv x3) B2) (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))
                              (@syl5bi (wcel (cv z) (cin B2 (cv x3))) (wa (wcel (cv z) B2) (wcel (cv z) (cv x3))) (wa (wwe B2 cep) (wcel (cv y) B2)) (wi (wcel (cv x3) B2) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))))
                                (@elin (cv z) B2 (cv x3))
                                (@impd (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv z) B2) (wcel (cv z) (cv x3)) (wi (wcel (cv x3) B2) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))))
                                  (@com34 (wa (wwe B2 cep) (wcel (cv y) B2)) (wcel (cv z) B2) (wcel (cv x3) B2) (wcel (cv z) (cv x3)) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y)))
                                    (@imp (wwe B2 cep) (wcel (cv y) B2) (wi (wcel (cv z) B2) (wi (wcel (cv x3) B2) (wi (wcel (cv z) (cv x3)) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))))))
                                      (@exp44 (wwe B2 cep) (wcel (cv y) B2) (wcel (cv z) B2) (wcel (cv x3) B2) (wi (wcel (cv z) (cv x3)) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))))
                                        (@sylan2b (wa (wa (wcel (cv y) B2) (wcel (cv z) B2)) (wcel (cv x3) B2)) (wwe B2 cep) (w3a (wcel (cv z) B2) (wcel (cv x3) B2) (wcel (cv y) B2)) (wi (wcel (cv z) (cv x3)) (wi (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))))
                                          (@bitr3i (wa (wa (wcel (cv y) B2) (wcel (cv z) B2)) (wcel (cv x3) B2)) (w3a (wcel (cv y) B2) (wcel (cv z) B2) (wcel (cv x3) B2)) (w3a (wcel (cv z) B2) (wcel (cv x3) B2) (wcel (cv y) B2))
                                            (@df_3an (wcel (cv y) B2) (wcel (cv z) B2) (wcel (cv x3) B2))
                                            (@«3anrot» (wcel (cv y) B2) (wcel (cv z) B2) (wcel (cv x3) B2)))
                                          (@expd (wa (wwe B2 cep) (w3a (wcel (cv z) B2) (wcel (cv x3) B2) (wcel (cv y) B2))) (wcel (cv z) (cv x3)) (wcel (cv x3) (cv y)) (wcel (cv z) (cv y))
                                            (@wetrep z (λ x3 y, B2) x3 y)))))))))))
                        (@dfss3 (cin B2 (cv x3)) (cv y)))
                      (@biimprd (wss (cin B2 (cv x3)) (cv y)) (wceq (cin B2 (cv x3)) c0) (wceq (cin (cin B2 (cv y)) (cv x3)) c0)
                        (@eqeq1d (wss (cin B2 (cv x3)) (cv y)) (cin B2 (cv x3)) (cin (cin B2 (cv y)) (cv x3)) c0
                          (@sylbb (wss (cin B2 (cv x3)) (cv y)) (wceq (cin B2 (cv x3)) (cin (cin B2 (cv x3)) (cv y))) (wceq (cin B2 (cv x3)) (cin (cin B2 (cv y)) (cv x3)))
                            (@dfss (cin B2 (cv x3)) (cv y))
                            (@eqeq2i (cin (cin B2 (cv x3)) (cv y)) (cin (cin B2 (cv y)) (cv x3)) (cin B2 (cv x3))
                              (@in32 B2 (cv x3) (cv y))))))))))))))))


/-- Any relation is a well-ordering of the empty set. (Contributed by NM, 16-Mar-1997.) -/
theorem we0 {R : «class»} :
  ⊦ wwe c0 R :=
@mpbir2an (wwe c0 R) (wfr c0 R) (wor c0 R)
  (@fr0 R)
  (@so0 R)
  (@df_we c0 R)


/-- A subset of a well-ordered set has a unique minimal element. (Contributed by NM, 18-Mar-1997.)
(Revised by Mario Carneiro, 28-Apr-2015.) -/
theorem wereu {A2 B2 R : «class»} {V : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wa (wwe A2 R) (w3a (wcel B2 (V x3 y)) (wss B2 A2) (wne B2 c0))) (wreu (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) :=
@sylanbrc (wa (wwe A2 R) (w3a (wcel B2 (V x3 y)) (wss B2 A2) (wne B2 c0))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wreu (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
  (@sylan (wwe A2 R) (wfr A2 R) (w3a (wcel B2 (V x3 y)) (wss B2 A2) (wne B2 c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
    (@wefr A2 R)
    (@«3imp2» (wfr A2 R) (wcel B2 (V x3 y)) (wss B2 A2) (wne B2 c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
      (@expcom (wcel B2 (V x3 y)) (wfr A2 R) (wi (wss B2 A2) (wi (wne B2 c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))))
        (@exp32 (wa (wcel B2 (V x3 y)) (wfr A2 R)) (wss B2 A2) (wne B2 c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
          (@fri A2 B2 (λ x3 y, V x3 y) R x3 y)))))
  (@«3ad2antr2» (wwe A2 R) (wcel B2 (V x3 y)) (wss B2 A2) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wne B2 c0)
    (@syl (wa (wwe A2 R) (wss B2 A2)) (wor B2 R) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
      (@mpan9 (wwe A2 R) (wor A2 R) (wss B2 A2) (wor B2 R)
        (@weso A2 R)
        (@soss B2 A2 R))
      (@somo B2 R)))
  (@reu5 (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))


/-- All nonempty subclasses of a class having a well-ordered and set-like relation have a minimal
element for that relation. Proposition 6.26 of [TakeutiZaring] p. 31. (Contributed by Scott Fenton,
29-Jan-2011.) (Revised by Mario Carneiro, 24-Jun-2015.) -/
theorem wereu2 {A2 B2 R : «class»} :
  ⊦ wi (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wreu (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) :=
@sylanbrc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (wreu (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
  (@impr (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wne B2 c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
    (@syl5bi (wne B2 c0) (wex (λ z, wcel (cv z) B2)) (wa (wa (wwe A2 R) (wse A2 R)) (wss B2 A2)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
      (@n0 B2)
      (@exlimdv (wa (wa (wwe A2 R) (wse A2 R)) (wss B2 A2)) (λ z, wcel (cv z) B2) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
        (λ z, @expr (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
          (@pm2_61dne (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)) (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0
            (@syl5bi (wceq (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0) (wral (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2)) (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
              (@rabeq0 (λ w, wbr (cv w) (cv z) R) (λ w, B2))
              (@ad2antll (wcel (cv z) B2) (wi (wral (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))) (wa (wwe A2 R) (wse A2 R)) (wss B2 A2)
                (@ex (wcel (cv z) B2) (wral (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
                  (@rspcev (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (wral (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2)) (cv z) B2
                    (λ x3, @syl5bb (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (wral (λ w, wn (wbr (cv w) (cv x3) R)) (λ w, B2)) (wceq (cv x3) (cv z)) (wral (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2))
                      (@cbvralvw (λ y, wn (wbr (cv y) (cv x3) R)) (λ w, wn (wbr (cv w) (cv x3) R)) B2
                        (λ y w, @notbid (wceq (cv y) (cv w)) (wbr (cv y) (cv x3) R) (wbr (cv w) (cv x3) R)
                          (@breq1 (cv y) (cv w) (cv x3) R)))
                      (@ralbidv (wceq (cv x3) (cv z)) (λ w, wn (wbr (cv w) (cv x3) R)) (λ w, wn (wbr (cv w) (cv z) R)) (λ w, B2)
                        (λ w, @notbid (wceq (cv x3) (cv z)) (wbr (cv w) (cv x3) R) (wbr (cv w) (cv z) R)
                          (@breq2 (cv x3) (cv z) (cv w) R))))))))
            (@syld (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wne (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
              (@syl21anc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) cvv) (wfr A2 R) (wss (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) A2) (wi (wne (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))))
                (@syl2anc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wse B2 R) (wcel (cv z) B2) (wcel (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) cvv)
                  (@sylc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wss B2 A2) (wse A2 R) (wse B2 R)
                    (@simprl (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2))
                    (@simplr (wwe A2 R) (wse A2 R) (wa (wss B2 A2) (wcel (cv z) B2)))
                    (@sess2 B2 A2 R))
                  (@simprr (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2))
                  (@seex B2 (cv z) R))
                (@ad2antrr (wwe A2 R) (wfr A2 R) (wse A2 R) (wa (wss B2 A2) (wcel (cv z) B2))
                  (@wefr A2 R))
                (@sstrid (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) B2 A2
                  (@ssrab2 (λ w, wbr (cv w) (cv z) R) B2)
                  (@simprl (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2)))
                (@expr (wa (wcel (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) cvv) (wfr A2 R)) (wss (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) A2) (wne (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)))
                  (setvar.forget $ λ x3 : setvar,
                    setvar.forget $ λ y : setvar,
                    show ⊦ wi (wa (wa (wcel (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) cvv) (wfr A2 R)) (wa (wss (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) A2) (wne (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) c0))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))), from
                    @fri A2 (crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)) (λ x3 y, cvv) R x3 y)))
              (@syl5bi (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wrex (λ x3, wa (wbr (cv x3) (cv z) R) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)))) (λ x3, B2)) (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
                (setvar.forget $ λ w : setvar,
                  show ⊦ wb (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wrex (λ x3, wa (wbr (cv x3) (cv z) R) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)))) (λ x3, B2)), from
                  @rexrab (λ x3 w, wbr (cv w) (cv z) R) (λ x3, wbr (cv x3) (cv z) R) (λ x3 w, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (λ x3, B2)
                    (λ x3 w, @breq1 (cv w) (cv x3) (cv z) R) w)
                (@reximdva (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (λ x3, wa (wbr (cv x3) (cv z) R) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2)))) (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2)
                  (λ x3, @expimpd (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2))
                    (@syl5bi (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wral (λ y, wi (wbr (cv y) (cv z) R) (wn (wbr (cv y) (cv x3) R))) (λ y, B2)) (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R)) (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2))
                      (setvar.forget $ λ w : setvar,
                        show ⊦ wb (wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, crab (λ w, wbr (cv w) (cv z) R) (λ w, B2))) (wral (λ y, wi (wbr (cv y) (cv z) R) (wn (wbr (cv y) (cv x3) R))) (λ y, B2)), from
                        @ralrab (λ y w, wbr (cv w) (cv z) R) (λ y, wbr (cv y) (cv z) R) (λ y w, wn (wbr (cv y) (cv x3) R)) (λ y, B2)
                          (λ y w, @breq1 (cv w) (cv y) (cv z) R) w)
                      (@ralimdva (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R)) (λ y, wi (wbr (cv y) (cv z) R) (wn (wbr (cv y) (cv x3) R))) (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)
                        (λ y, @jad (wa (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R)) (wcel (cv y) B2)) (wbr (cv y) (cv z) R) (wn (wbr (cv y) (cv x3) R)) (wn (wbr (cv y) (cv x3) R))
                          (@con3d (wa (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R)) (wcel (cv y) B2)) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv z) R)
                            (@an32s (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wcel (cv y) B2) (wbr (cv x3) (cv z) R) (wi (wbr (cv y) (cv x3) R) (wbr (cv y) (cv z) R))
                              (@expdimp (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wcel (cv y) B2)) (wbr (cv x3) (cv z) R) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv z) R)
                                (@ancomsd (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wcel (cv y) B2)) (wbr (cv y) (cv x3) R) (wbr (cv x3) (cv z) R) (wbr (cv y) (cv z) R)
                                  (@syl13anc (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wcel (cv y) B2)) (wor B2 R) (wcel (cv y) B2) (wcel (cv x3) B2) (wcel (cv z) B2) (wi (wa (wbr (cv y) (cv x3) R) (wbr (cv x3) (cv z) R)) (wbr (cv y) (cv z) R))
                                    (@ad2antrr (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wor B2 R) (wcel (cv x3) B2) (wcel (cv y) B2)
                                      (@sylc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wss B2 A2) (wor A2 R) (wor B2 R)
                                        (@simprl (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2))
                                        (@ad2antrr (wwe A2 R) (wor A2 R) (wse A2 R) (wa (wss B2 A2) (wcel (cv z) B2))
                                          (@weso A2 R))
                                        (@soss B2 A2 R)))
                                    (@simpr (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wcel (cv y) B2))
                                    (@simplr (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2) (wcel (cv y) B2))
                                    (@ad2antrr (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv z) B2) (wcel (cv x3) B2) (wcel (cv y) B2)
                                      (@simprr (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wcel (cv z) B2)))
                                    (@sotr B2 (cv y) (cv x3) (cv z) R))))))
                          (@idd (wa (wa (wa (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wcel (cv z) B2))) (wcel (cv x3) B2)) (wbr (cv x3) (cv z) R)) (wcel (cv y) B2)) (wn (wbr (cv y) (cv x3) R)))))))))))))))
  (@syl (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wor B2 R) (wrmo (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))
    (@sylc (wa (wa (wwe A2 R) (wse A2 R)) (wa (wss B2 A2) (wne B2 c0))) (wss B2 A2) (wor A2 R) (wor B2 R)
      (@simprl (wa (wwe A2 R) (wse A2 R)) (wss B2 A2) (wne B2 c0))
      (@ad2antrr (wwe A2 R) (wor A2 R) (wse A2 R) (wa (wss B2 A2) (wne B2 c0))
        (@weso A2 R))
      (@soss B2 A2 R))
    (@somo B2 R))
  (@reu5 (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, B2)) (λ x3, B2))


-- /-- Extend the definition of a class to include the Cartesian product. -/
-- constant cxp : «class» → «class» → «class»


-- /-- Extend the definition of a class to include the converse of a class. -/
-- constant ccnv : «class» → «class»


-- /-- Extend the definition of a class to include the domain of a class. -/
-- constant cdm : «class» → «class»


-- /-- Extend the definition of a class to include the range of a class. -/
-- constant crn : «class» → «class»


-- /-- Extend the definition of a class to include the restriction of a class. Read: "the
-- restriction of ` A ` to ` B ` ". -/
-- constant cres : «class» → «class» → «class»


-- /-- Extend the definition of a class to include the image of a class. Read: "the image of ` B `
-- under ` A ` ". -/
-- constant cima : «class» → «class» → «class»


-- /-- Extend the definition of a class to include the composition of two classes. (Read: The
-- composition of ` A ` and ` B ` .) -/
-- constant ccom : «class» → «class» → «class»


-- /-- Extend the definition of a wff to include the relation predicate. Read: " ` A ` is a
-- relation". -/
-- constant wrel : «class» → wff


-- /-- Define the Cartesian product of two classes. This is also sometimes called the "cross
-- product" but that term also has other meanings; we intentionally choose a less ambiguous term.
-- Definition 9.11 of [Quine] p. 64. For example, ` ( { 1 , 5 } X. { 2 , 7 } ) = ` ` ( { <. 1 , 2 >.
-- , <. 1 , 7 >. } u. { <. 5 , 2 >. , <. 5 , 7 >. } ) ` ( ~ ex-xp ). Another example is that the set
-- of rational numbers is defined in ~ df-q using the Cartesian product ` ( ZZ X. NN ) ` ; the left-
-- and right-hand sides of the Cartesian product represent the top (integer) and bottom (natural)
-- numbers of a fraction. (Contributed by NM, 4-Jul-1994.) -/
-- axiom df_xp {A2 B2 : «class»} : ⊦ wceq (cxp A2 B2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2)))


-- /-- Define the relation predicate. Definition 6.4(1) of [TakeutiZaring] p. 23. For alternate
-- definitions, see ~ dfrel2 and ~ dfrel3 . (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_rel {A2 : «class»} : ⊦ wb (wrel A2) (wss A2 (cxp cvv cvv))


-- /-- Define the converse of a class. Definition 9.12 of [Quine] p. 64. The converse of a binary
-- relation swaps its arguments, i.e., if ` A e. _V ` and ` B e. _V ` then ` ( A ``' R B <-> B R A )
-- ` , as proven in ~ brcnv (see ~ df-br and ~ df-rel for more on relations). For example, ` ``' {
-- <. 2 , 6 >. , <. 3 , 9 >. } = { <. 6 , 2 >. , <. 9 , 3 >. } ` ( ~ ex-cnv ). We use Quine's breve
-- accent (smile) notation. Like Quine, we use it as a prefix, which eliminates the need for
-- parentheses. "Converse" is Quine's terminology. Some authors use a "minus one" exponent and call
-- it "inverse", especially when the argument is a function, although this is not in general a
-- genuine inverse. (Contributed by NM, 4-Jul-1994.) -/
-- axiom df_cnv {A2 : «class»} : ⊦ wceq (ccnv A2) (copab (λ x3 y, wbr (cv y) (cv x3) A2))


-- /-- Define the composition of two classes. Definition 6.6(3) of [TakeutiZaring] p. 24. For
-- example, ` ( ( exp o. cos ) `` 0 ) = _e ` ( ~ ex-co ) because ` ( cos `` 0 ) = 1 ` (see ~ cos0 )
-- and ` ( exp `` 1 ) = _e ` (see ~ df-e ). Note that Definition 7 of [Suppes] p. 63 reverses ` A `
-- and ` B ` , uses ` /. ` instead of ` o. ` , and calls the operation "relative product."
-- (Contributed by NM, 4-Jul-1994.) -/
-- axiom df_co {A2 B2 : «class»} : ⊦ wceq (ccom A2 B2) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))))


-- /-- Define the domain of a class. Definition 3 of [Suppes] p. 59. For example, ` F = { <. 2 , 6
-- >. , <. 3 , 9 >. } -> dom F = { 2 , 3 } ` ( ~ ex-dm ). Another example is the domain of the
-- complex arctangent, ` ( A e. dom arctan <-> ( A e. CC /\ A =/= -u _i /\ A =/= _i ) ) ` (for proof
-- see ~ atandm ). Contrast with range (defined in ~ df-rn ). For alternate definitions see ~ dfdm2
-- , ~ dfdm3 , and ~ dfdm4 . The notation " ` dom ` " is used by Enderton; other authors sometimes
-- use script D. (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_dm {A2 : «class»} : ⊦ wceq (cdm A2) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) A2)))


-- /-- Define the range of a class. For example, ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> ran F = { 6
-- , 9 } ` ( ~ ex-rn ). Contrast with domain (defined in ~ df-dm ). For alternate definitions, see ~
-- dfrn2 , ~ dfrn3 , and ~ dfrn4 . The notation " ` ran ` " is used by Enderton. The range of a
-- function is often also called "the image of the function" (see definition in [Lang] p. ix), which
-- can be justified by ~ imadmrn . Not to be confused with "codomain" (see ~ df-f ), which may be a
-- superset/superclass of the range (see ~ frn ). (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_rn {A2 : «class»} : ⊦ wceq (crn A2) (cdm (ccnv A2))


-- /-- Define the restriction of a class. Definition 6.6(1) of [TakeutiZaring] p. 24. For example,
-- the expression ` ( exp |`` RR ) ` (used in ~ reeff1 ) means "the exponential function e to the x,
-- but the exponent x must be in the reals" ( ~ df-ef defines the exponential function, which
-- normally allows the exponent to be a complex number). Another example is ` ( F = { <. 2 , 6 >. ,
-- <. 3 , 9 >. } /\ B = { 1 , 2 } ) -> ` ` ( F |`` B ) = { <. 2 , 6 >. } ` ( ~ ex-res ). We do not
-- introduce a special syntax for the corestriction of a class: it will be expressed either as the
-- intersection ` ( A i^i ( _V X. B ) ) ` or as the converse of the restricted converse (see ~
-- cnvrescnv ). (Contributed by NM, 2-Aug-1994.) -/
-- axiom df_res {A2 B2 : «class»} : ⊦ wceq (cres A2 B2) (cin A2 (cxp B2 cvv))


-- /-- Define the image of a class (as restricted by another class). Definition 6.6(2) of
-- [TakeutiZaring] p. 24. For example, ` ( F = { <. 2 , 6 >. , <. 3 , 9 >. } /\ B = { 1 , 2 } ) ` `
-- -> ( F " B ) = { 6 } ` ( ~ ex-ima ). Contrast with restriction ( ~ df-res ) and range ( ~ df-rn
-- ). For an alternate definition, see ~ dfima2 . (Contributed by NM, 2-Aug-1994.) -/
-- axiom df_ima {A2 B2 : «class»} : ⊦ wceq (cima A2 B2) (crn (cres A2 B2))


/-- Equality theorem for Cartesian product. (Contributed by NM, 4-Jul-1994.) -/
theorem xpeq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cxp A2 C) (cxp B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C))) (cxp A2 C) (cxp B2 C)
  (@opabbidv (wceq A2 B2) (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)) (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C))
    (λ x3 y, @anbi1d (wceq A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv y) C)
      (@eleq2 A2 B2 (cv x3))))
  (@df_xp A2 C)
  (@df_xp B2 C)


/-- Subset theorem for Cartesian product. Generalization of Theorem 101 of [Suppes] p. 52.
(Contributed by NM, 26-Aug-1995.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem xpss12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wss A2 B2) (wss C D)) (wss (cxp A2 C) (cxp B2 D)) :=
@«3sstr4g» (wa (wss A2 B2) (wss C D)) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) D))) (cxp A2 C) (cxp B2 D)
  (@ssopab2dv (wa (wss A2 B2) (wss C D)) (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)) (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) D))
    (λ x3 y, @im2anan9 (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2) (wss C D) (wcel (cv y) C) (wcel (cv y) D)
      (@ssel A2 B2 (cv x3))
      (@ssel C D (cv y))))
  (@df_xp A2 C)
  (@df_xp B2 D)


/-- A Cartesian product is included in the ordered pair universe. Exercise 3 of [TakeutiZaring] p.
25. (Contributed by NM, 2-Aug-1994.) -/
theorem xpss {A2 B2 : «class»} :
  ⊦ wss (cxp A2 B2) (cxp cvv cvv) :=
@mp2an (wss A2 cvv) (wss B2 cvv) (wss (cxp A2 B2) (cxp cvv cvv))
  (@ssv A2)
  (@ssv B2)
  (@xpss12 A2 cvv B2 cvv)


/-- A Cartesian product is a relation. Theorem 3.13(i) of [Monk1] p. 37. (Contributed by NM,
2-Aug-1994.) -/
theorem relxp {A2 B2 : «class»} :
  ⊦ wrel (cxp A2 B2) :=
@mpbir (wrel (cxp A2 B2)) (wss (cxp A2 B2) (cxp cvv cvv))
  (@xpss A2 B2)
  (@df_rel (cxp A2 B2))


/-- Subset relation for Cartesian product. (Contributed by Jeff Hankins, 30-Aug-2009.) -/
theorem xpss1 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cxp A2 C) (cxp B2 C)) :=
@mpan2 (wss A2 B2) (wss C C) (wss (cxp A2 C) (cxp B2 C))
  (@ssid C)
  (@xpss12 A2 B2 C C)


/-- Subset relation for Cartesian product. (Contributed by Jeff Hankins, 30-Aug-2009.) -/
theorem xpss2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cxp C A2) (cxp C B2)) :=
@mpan (wss C C) (wss A2 B2) (wss (cxp C A2) (cxp C B2))
  (@ssid C)
  (@xpss12 C C A2 B2)


/-- Equality theorem for Cartesian product. (Contributed by NM, 5-Jul-1994.) -/
theorem xpeq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cxp C A2) (cxp C B2)) :=
@«3eqtr4g» (wceq A2 B2) (copab (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) A2))) (copab (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) B2))) (cxp C A2) (cxp C B2)
  (@opabbidv (wceq A2 B2) (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) A2)) (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) B2))
    (λ x3 y, @anbi2d (wceq A2 B2) (wcel (cv y) A2) (wcel (cv y) B2) (wcel (cv x3) C)
      (@eleq2 A2 B2 (cv y))))
  (@df_xp C A2)
  (@df_xp C B2)


/-- Membership in a Cartesian product. (Contributed by NM, 4-Jul-1994.) -/
theorem elxp {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cxp B2 C)) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C))))) :=
@bitri (wcel A2 (cxp B2 C)) (wcel A2 (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C)))) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C)))))
  (@eleq2i (cxp B2 C) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C))) A2
    (@df_xp B2 C))
  (@elopab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C)) A2)


/-- Membership in a Cartesian product. (Contributed by NM, 23-Feb-2004.) (Proof shortened by JJ,
13-Aug-2021.) -/
theorem elxp2 {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cxp B2 C)) (wrex (λ x3, wrex (λ y, wceq A2 (cop (cv x3) (cv y))) (λ y, C)) (λ x3, B2)) :=
@«3bitr4i» (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C))))) (wex (λ x3, wex (λ y, wa (wa (wcel (cv x3) B2) (wcel (cv y) C)) (wceq A2 (cop (cv x3) (cv y)))))) (wcel A2 (cxp B2 C)) (wrex (λ x3, wrex (λ y, wceq A2 (cop (cv x3) (cv y))) (λ y, C)) (λ x3, B2))
  (@«2exbii» (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C))) (λ x3 y, wa (wa (wcel (cv x3) B2) (wcel (cv y) C)) (wceq A2 (cop (cv x3) (cv y))))
    (λ x3 y, @ancom (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C))))
  (@elxp A2 B2 C)
  (@r2ex (λ x3 y, wceq A2 (cop (cv x3) (cv y))) (λ x3, B2) (λ x3 y, C))


/-- Equality theorem for Cartesian product. (Contributed by FL, 31-Aug-2009.) -/
theorem xpeq12 {A2 B2 C D : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wceq (cxp A2 C) (cxp B2 D)) :=
@sylan9eq (wceq A2 B2) (wceq C D) (cxp A2 C) (cxp B2 C) (cxp B2 D)
  (@xpeq1 A2 B2 C)
  (@xpeq2 C D B2)


/-- Equality inference for Cartesian product. (Contributed by NM, 21-Dec-2008.) -/
theorem xpeq1i {A2 B2 C : «class»}
  (xpeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cxp A2 C) (cxp B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cxp A2 C) (cxp B2 C))
  xpeq1i_1
  (@xpeq1 A2 B2 C)


/-- Equality inference for Cartesian product. (Contributed by NM, 21-Dec-2008.) -/
theorem xpeq2i {A2 B2 C : «class»}
  (xpeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cxp C A2) (cxp C B2) :=
@ax_mp (wceq A2 B2) (wceq (cxp C A2) (cxp C B2))
  xpeq1i_1
  (@xpeq2 A2 B2 C)


/-- Equality deduction for Cartesian product. (Contributed by Jeff Madsen, 17-Jun-2010.) -/
theorem xpeq1d {ph : wff} {A2 B2 C : «class»}
  (xpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cxp A2 C) (cxp B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cxp A2 C) (cxp B2 C))
  xpeq1d_1
  (@xpeq1 A2 B2 C)


/-- Equality deduction for Cartesian product. (Contributed by Jeff Madsen, 17-Jun-2010.) -/
theorem xpeq2d {ph : wff} {A2 B2 C : «class»}
  (xpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cxp C A2) (cxp C B2)) :=
@syl ph (wceq A2 B2) (wceq (cxp C A2) (cxp C B2))
  xpeq1d_1
  (@xpeq2 A2 B2 C)


/-- Equality deduction for Cartesian product. (Contributed by NM, 8-Dec-2013.) -/
theorem xpeq12d {ph : wff} {A2 B2 C D : «class»}
  (xpeq1d_1 : ⊦ wi ph (wceq A2 B2))
  (xpeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cxp A2 C) (cxp B2 D)) :=
@syl2anc ph (wceq A2 B2) (wceq C D) (wceq (cxp A2 C) (cxp B2 D))
  xpeq1d_1
  xpeq12d_2
  (@xpeq12 A2 B2 C D)


/-- Equality deduction for a Cartesian square, see Wikipedia "Cartesian product", ~
https://en.wikipedia.org/wiki/Cartesian_product#n-ary_Cartesian_power . (Contributed by AV,
13-Jan-2020.) -/
theorem sqxpeqd {ph : wff} {A2 B2 : «class»}
  (xpeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cxp A2 A2) (cxp B2 B2)) :=
@xpeq12d ph A2 B2 A2 B2
  xpeq1d_1
  xpeq1d_1


/-- Bound-variable hypothesis builder for Cartesian product. (Contributed by NM, 15-Sep-2003.)
(Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem nfxp {A2 B2 : setvar → «class»}
  (nfxp_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfxp_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cxp (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cxp (A2 x3) (B2 x3)) (λ x3, copab (λ y z, wa (wcel (cv y) (A2 x3)) (wcel (cv z) (B2 x3))))
  (λ x3, @df_xp (A2 x3) (B2 x3))
  (@nfopab (λ y z x3, wa (wcel (cv y) (A2 x3)) (wcel (cv z) (B2 x3)))
    (λ y z, @nfan (λ x3, wcel (cv y) (A2 x3)) (λ x3, wcel (cv z) (B2 x3))
      (@nfcri (λ x3 y, A2 x3)
        (λ y, nfxp_1) y)
      (@nfcri (λ x3 z, B2 x3)
        (λ z, nfxp_2) z)))


/-- The empty set is not a member of a Cartesian product. (Contributed by NM, 2-May-1996.) (Revised
by Mario Carneiro, 26-Apr-2015.) (Proof shortened by JJ, 13-Aug-2021.) -/
theorem «0nelxp» {A2 B2 : «class»} :
  ⊦ wn (wcel c0 (cxp A2 B2)) :=
@mtbir (wcel c0 (cxp A2 B2)) (wex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (wa (wcel (cv x3) A2) (wcel (cv y) B2)))))
  (@nex (λ x3, wex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (wa (wcel (cv x3) A2) (wcel (cv y) B2))))
    (λ x3, @nex (λ y, wa (wceq c0 (cop (cv x3) (cv y))) (wa (wcel (cv x3) A2) (wcel (cv y) B2)))
      (λ y, @intnanr (wceq c0 (cop (cv x3) (cv y))) (wa (wcel (cv x3) A2) (wcel (cv y) B2))
        (@nesymi (cop (cv x3) (cv y)) c0
          (@opnzi (cv x3) (cv y)
            (@vex x3)
            (@vex y))))))
  (@elxp c0 A2 B2)


/-- Ordered pair membership in a Cartesian product. (Contributed by NM, 15-Nov-1994.) (Proof
shortened by Andrew Salmon, 12-Aug-2011.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opelxp {A2 B2 C D : «class»} :
  ⊦ wb (wcel (cop A2 B2) (cxp C D)) (wa (wcel A2 C) (wcel B2 D)) :=
@bitri (wcel (cop A2 B2) (cxp C D)) (wrex (λ x3, wrex (λ y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (λ y, D)) (λ x3, C)) (wa (wcel A2 C) (wcel B2 D))
  (@elxp2 (cop A2 B2) C D)
  (@impbii (wrex (λ x3, wrex (λ y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (λ y, D)) (λ x3, C)) (wa (wcel A2 C) (wcel B2 D))
    (@rexlimivv (λ x3 y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (wa (wcel A2 C) (wcel B2 D)) (λ x3, C) (λ x3 y, D)
      (λ x3 y, @biimprcd (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wa (wcel A2 C) (wcel B2 D)) (wa (wcel (cv x3) C) (wcel (cv y) D))
        (@sylbi (wceq (cop A2 B2) (cop (cv x3) (cv y))) (wa (wceq A2 (cv x3)) (wceq B2 (cv y))) (wb (wa (wcel A2 C) (wcel B2 D)) (wa (wcel (cv x3) C) (wcel (cv y) D)))
          (@opth2 A2 B2 (cv x3) (cv y)
            (@vex x3)
            (@vex y))
          (@bi2anan9 (wceq A2 (cv x3)) (wcel A2 C) (wcel (cv x3) C) (wceq B2 (cv y)) (wcel B2 D) (wcel (cv y) D)
            (@eleq1 A2 (cv x3) C)
            (@eleq1 B2 (cv y) D)))))
    (@mp3an3 (wcel A2 C) (wcel B2 D) (wceq (cop A2 B2) (cop A2 B2)) (wrex (λ x3, wrex (λ y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (λ y, D)) (λ x3, C))
      (@eqid (cop A2 B2))
      (setvar.forget $ λ x3 : setvar,
        setvar.forget $ λ y : setvar,
        show ⊦ wi (w3a (wcel A2 C) (wcel B2 D) (wceq (cop A2 B2) (cop A2 B2))) (wrex (λ x3, wrex (λ y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (λ y, D)) (λ x3, C)), from
        @rspc2ev (λ x3 y, wceq (cop A2 B2) (cop (cv x3) (cv y))) (λ x3, wceq (cop A2 B2) (cop A2 B2)) (λ y, wceq (cop A2 B2) (cop A2 (cv y))) A2 (λ x3, B2) (λ y, C) D
          (λ x3 y, @eqeq2d (wceq (cv x3) A2) (cop (cv x3) (cv y)) (cop A2 (cv y)) (cop A2 B2)
            (@opeq1 (cv x3) A2 (cv y)))
          (λ x3 y, @eqeq2d (wceq (cv y) B2) (cop A2 (cv y)) (cop A2 B2) (cop A2 B2)
            (@opeq2 (cv y) B2 A2)) x3 y)))


/-- Ordered pair membership in a Cartesian product (implication). (Contributed by NM, 28-May-1995.)
-/
theorem opelxpi {A2 B2 C D : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wcel (cop A2 B2) (cxp C D)) :=
@biimpri (wcel (cop A2 B2) (cxp C D)) (wa (wcel A2 C) (wcel B2 D))
  (@opelxp A2 B2 C D)


/-- Ordered pair membership in a Cartesian product, deduction form. (Contributed by Glauco
Siliprandi, 3-Mar-2021.) -/
theorem opelxpd {ph : wff} {A2 B2 C D : «class»}
  (opelxpd_1 : ⊦ wi ph (wcel A2 C))
  (opelxpd_2 : ⊦ wi ph (wcel B2 D)) :
  ⊦ wi ph (wcel (cop A2 B2) (cxp C D)) :=
@syl2anc ph (wcel A2 C) (wcel B2 D) (wcel (cop A2 B2) (cxp C D))
  opelxpd_1
  opelxpd_2
  (@opelxpi A2 B2 C D)


/-- Ordered pair membership in the universal class of ordered pairs. (Contributed by Mario Carneiro,
3-May-2015.) -/
theorem opelvvg {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wcel (cop A2 B2) (cxp cvv cvv)) :=
@syl2an (wcel A2 V) (wcel A2 cvv) (wcel B2 cvv) (wcel (cop A2 B2) (cxp cvv cvv)) (wcel B2 W)
  (@elex A2 V)
  (@elex B2 W)
  (@opelxpi A2 B2 cvv cvv)


/-- The first member of an ordered pair of classes in a Cartesian product belongs to first Cartesian
product argument. (Contributed by NM, 28-May-2008.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opelxp1 {A2 B2 C D : «class»} :
  ⊦ wi (wcel (cop A2 B2) (cxp C D)) (wcel A2 C) :=
@simplbi (wcel (cop A2 B2) (cxp C D)) (wcel A2 C) (wcel B2 D)
  (@opelxp A2 B2 C D)


/-- Binary relation on a Cartesian product. (Contributed by NM, 22-Apr-2004.) -/
theorem brxp {A2 B2 C D : «class»} :
  ⊦ wb (wbr A2 B2 (cxp C D)) (wa (wcel A2 C) (wcel B2 D)) :=
@bitri (wbr A2 B2 (cxp C D)) (wcel (cop A2 B2) (cxp C D)) (wa (wcel A2 C) (wcel B2 D))
  (@df_br A2 B2 (cxp C D))
  (@opelxp A2 B2 C D)


/-- Two classes related by a binary relation are sets. (Contributed by Mario Carneiro, 26-Apr-2015.)
-/
theorem brrelex12 {A2 B2 R : «class»} :
  ⊦ wi (wa (wrel R) (wbr A2 B2 R)) (wa (wcel A2 cvv) (wcel B2 cvv)) :=
@sylib (wa (wrel R) (wbr A2 B2 R)) (wbr A2 B2 (cxp cvv cvv)) (wa (wcel A2 cvv) (wcel B2 cvv))
  (@imp (wrel R) (wbr A2 B2 R) (wbr A2 B2 (cxp cvv cvv))
    (@ssbrd (wrel R) R (cxp cvv cvv) A2 B2
      (@biimpi (wrel R) (wss R (cxp cvv cvv))
        (@df_rel R))))
  (@brxp A2 B2 cvv cvv)


/-- If two classes are related by a binary relation, then the first class is a set. (Contributed by
NM, 18-May-2004.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem brrelex1 {A2 B2 R : «class»} :
  ⊦ wi (wa (wrel R) (wbr A2 B2 R)) (wcel A2 cvv) :=
@simpld (wa (wrel R) (wbr A2 B2 R)) (wcel A2 cvv) (wcel B2 cvv)
  (@brrelex12 A2 B2 R)


/-- If two classes are related by a binary relation, then the second class is a set. (Contributed by
Mario Carneiro, 26-Apr-2015.) -/
theorem brrelex2 {A2 B2 R : «class»} :
  ⊦ wi (wa (wrel R) (wbr A2 B2 R)) (wcel B2 cvv) :=
@simprd (wa (wrel R) (wbr A2 B2 R)) (wcel A2 cvv) (wcel B2 cvv)
  (@brrelex12 A2 B2 R)


/-- Two classes that are related by a binary relation are sets. Inference form. (Contributed by BJ,
3-Oct-2022.) -/
theorem brrelex12i {A2 B2 R : «class»}
  (brrelexi_1 : ⊦ wrel R) :
  ⊦ wi (wbr A2 B2 R) (wa (wcel A2 cvv) (wcel B2 cvv)) :=
@mpan (wrel R) (wbr A2 B2 R) (wa (wcel A2 cvv) (wcel B2 cvv))
  brrelexi_1
  (@brrelex12 A2 B2 R)


/-- The first argument of a binary relation exists. (An artifact of our ordered pair definition.)
(Contributed by NM, 4-Jun-1998.) -/
theorem brrelex1i {A2 B2 R : «class»}
  (brrelexi_1 : ⊦ wrel R) :
  ⊦ wi (wbr A2 B2 R) (wcel A2 cvv) :=
@mpan (wrel R) (wbr A2 B2 R) (wcel A2 cvv)
  brrelexi_1
  (@brrelex1 A2 B2 R)


/-- The second argument of a binary relation exists. (An artifact of our ordered pair definition.)
(Contributed by Mario Carneiro, 26-Apr-2015.) -/
theorem brrelex2i {A2 B2 R : «class»}
  (brrelexi_1 : ⊦ wrel R) :
  ⊦ wi (wbr A2 B2 R) (wcel B2 cvv) :=
@mpan (wrel R) (wbr A2 B2 R) (wcel B2 cvv)
  brrelexi_1
  (@brrelex2 A2 B2 R)


/-- A binary relation does not contain the empty set. (Contributed by AV, 15-Nov-2021.) (Revised by
BJ, 14-Jul-2023.) -/
theorem «0nelrel0» {R : «class»} :
  ⊦ wi (wrel R) (wn (wcel c0 R)) :=
@ssneldd (wrel R) R (cxp cvv cvv) c0
  (@biimpi (wrel R) (wss R (cxp cvv cvv))
    (@df_rel R))
  (@a1i (wn (wcel c0 (cxp cvv cvv))) (wrel R)
    (@«0nelxp» cvv cvv))


/-- Representation of a constant function using the mapping operation. (Note that ` x ` cannot
appear free in ` B ` .) (Contributed by NM, 12-Oct-1999.) (Revised by Mario Carneiro, 16-Nov-2013.)
-/
theorem fconstmpt {A2 B2 : «class»} :
  ⊦ wceq (cxp A2 (csn B2)) (cmpt (λ x3, A2) (λ x3, B2)) :=
@«3eqtr4i» (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (csn B2)))) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) B2))) (cxp A2 (csn B2)) (cmpt (λ x3, A2) (λ x3, B2))
  (@opabbii (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (csn B2))) (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) B2))
    (λ x3 y, @anbi2i (wcel (cv y) (csn B2)) (wceq (cv y) B2) (wcel (cv x3) A2)
      (@velsn (λ y, B2) y)))
  (@df_xp A2 (csn B2))
  (@df_mpt (λ x3, A2) (λ x3, B2))


/-- Variable to class conversion of transitive relation. (Contributed by NM, 9-Jun-1998.) (Revised
by Mario Carneiro, 26-Apr-2015.) -/
theorem vtoclr {A2 : setvar → «class»} {B2 : setvar → setvar → «class»} {C R : «class»}
  (vtoclr_1 : ⊦ wrel R)
  (vtoclr_2 : ∀ x3 y z, ⊦ wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))
  (x3 z : setvar) : ⊦ wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R) :=
@pm2_43i (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R)
  (@imp (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R) (wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R))
    (@syl2im (wbr (A2 z) (B2 x3 z) R) (wa (wcel (A2 z) cvv) (wcel (B2 x3 z) cvv)) (wbr (B2 x3 z) C R) (wcel C cvv) (wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R))
      (@brrelex12i (A2 z) (B2 x3 z) R
        vtoclr_1)
      (@brrelex2i (B2 x3 z) C R
        vtoclr_1)
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wa (wcel (A2 z) cvv) (wcel (B2 x3 z) cvv)) (wi (wcel C cvv) (wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R))), from
        @vtocl2g (λ x3 y, wi (wcel C cvv) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) C R))) (λ y, wi (wcel C cvv) (wi (wa (wbr (A2 z) (cv y) R) (wbr (cv y) C R)) (wbr (A2 z) C R))) (λ x3, wi (wcel C cvv) (wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R))) (A2 z) (λ x3, B2 x3 z) (λ x3 y, cvv) (λ x3 y, cvv)
          (λ x3 y, @imbi2d (wceq (cv x3) (A2 z)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) C R)) (wi (wa (wbr (A2 z) (cv y) R) (wbr (cv y) C R)) (wbr (A2 z) C R)) (wcel C cvv)
            (@imbi12d (wceq (cv x3) (A2 z)) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wa (wbr (A2 z) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) C R) (wbr (A2 z) C R)
              (@anbi1d (wceq (cv x3) (A2 z)) (wbr (cv x3) (cv y) R) (wbr (A2 z) (cv y) R) (wbr (cv y) C R)
                (@breq1 (cv x3) (A2 z) (cv y) R))
              (@breq1 (cv x3) (A2 z) C R)))
          (λ x3 y, @imbi2d (wceq (cv y) (B2 x3 z)) (wi (wa (wbr (A2 z) (cv y) R) (wbr (cv y) C R)) (wbr (A2 z) C R)) (wi (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R)) (wcel C cvv)
            (@imbi1d (wceq (cv y) (B2 x3 z)) (wa (wbr (A2 z) (cv y) R) (wbr (cv y) C R)) (wa (wbr (A2 z) (B2 x3 z) R) (wbr (B2 x3 z) C R)) (wbr (A2 z) C R)
              (@anbi12d (wceq (cv y) (B2 x3 z)) (wbr (A2 z) (cv y) R) (wbr (A2 z) (B2 x3 z) R) (wbr (cv y) C R) (wbr (B2 x3 z) C R)
                (@breq2 (cv y) (B2 x3 z) (A2 z) R)
                (@breq1 (cv y) (B2 x3 z) C R))))
          (λ x3 y, setvar.forget $ λ z : setvar,
            show ⊦ wi (wcel C cvv) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) C R)), from
            @vtoclg (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) C R)) C (λ z, cvv)
              (λ z, @imbi12d (wceq (cv z) C) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) C R)) (wbr (cv x3) (cv z) R) (wbr (cv x3) C R)
                (@anbi2d (wceq (cv z) C) (wbr (cv y) (cv z) R) (wbr (cv y) C R) (wbr (cv x3) (cv y) R)
                  (@breq2 (cv z) C (cv y) R))
                (@breq2 (cv z) C (cv x3) R))
              (λ z, vtoclr_2 x3 y z) z) x3 y)))


/-- Two things in a binary relation belong to the relation's domain. (Contributed by NM,
17-May-1996.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem brel {A2 B2 C D R : «class»}
  (brel_1 : ⊦ wss R (cxp C D)) :
  ⊦ wi (wbr A2 B2 R) (wa (wcel A2 C) (wcel B2 D)) :=
@sylib (wbr A2 B2 R) (wbr A2 B2 (cxp C D)) (wa (wcel A2 C) (wcel B2 D))
  (@ssbri R (cxp C D) A2 B2
    brel_1)
  (@brxp A2 B2 C D)


/-- Membership in a Cartesian product. (Contributed by NM, 5-Mar-1995.) -/
theorem elxp3 {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cxp B2 C)) (wex (λ x3, wex (λ y, wa (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C))))) :=
@bitr4i (wcel A2 (cxp B2 C)) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C))))) (wex (λ x3, wex (λ y, wa (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C)))))
  (@elxp A2 B2 C)
  (@«2exbii» (λ x3 y, wa (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C))) (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) B2) (wcel (cv y) C)))
    (λ x3 y, @anbi12i (wceq (cop (cv x3) (cv y)) A2) (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) (cxp B2 C)) (wa (wcel (cv x3) B2) (wcel (cv y) C))
      (@eqcom (cop (cv x3) (cv y)) A2)
      (@opelxp (cv x3) (cv y) B2 C)))


/-- Membership in a union of Cartesian products. (Contributed by Mario Carneiro, 29-Dec-2014.)
(Revised by Mario Carneiro, 1-Jan-2017.) -/
theorem opeliunxp {A2 B2 C : setvar → «class»}
  (x3 : setvar) : ⊦ wb (wcel (cop (cv x3) (C x3)) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel (cv x3) (A2 x3)) (wcel (C x3) (B2 x3))) :=
@«3bitri» (wcel (cop (cv x3) (C x3)) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel (cop (cv x3) (C x3)) (cab (λ y, wrex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3)))) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))) (wa (wcel (cv x3) (A2 x3)) (wcel (C x3) (B2 x3)))
  (@eleq2i (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))) (cab (λ y, wrex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3))) (cop (cv x3) (C x3))
    (@df_iun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))
  (@elab (λ y, wrex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3)) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))) (cop (cv x3) (C x3))
    (@opex (cv x3) (C x3))
    (λ y, @syl5bb (wrex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3)) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))) (wceq (cv y) (cop (cv x3) (C x3))) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))))
      (@bitri (wrex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3)) (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (cxp (csn (cv x3)) (B2 x3))))) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))))
        (@df_rex (λ x3, wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3))
        (setvar.forget $ λ x3 : setvar,
          setvar.forget $ λ z : setvar,
          show ⊦ wb (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (cxp (csn (cv x3)) (B2 x3))))) (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))), from
          @cbvexv1 (λ x3 z, wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (cxp (csn (cv x3)) (B2 x3)))) (λ x3 z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))
            (λ x3, @nfv (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (cxp (csn (cv x3)) (B2 x3)))))
            (λ z, @nfan (λ x3, wsb (λ x3, wcel (cv x3) (A2 x3)) z) (λ x3, wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))
              (@nfs1v (λ x3 z, wcel (cv x3) (A2 x3)) z)
              (@nfcri (λ x3 y, cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))
                (λ y, @nfxp (λ x3, csn (cv z)) (λ x3, csb (cv z) (λ x3, B2 x3))
                  (@nfcv (csn (cv z)))
                  (@nfcsb1v (cv z) (λ x3, B2 x3))) y))
            (λ x3 z, @anbi12d (wceq (cv x3) (cv z)) (wcel (cv x3) (A2 x3)) (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv x3)) (B2 x3))) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))
              (@sbequ12 (λ x3 z, wcel (cv x3) (A2 x3)) x3 z)
              (@eleq2d (wceq (cv x3) (cv z)) (cxp (csn (cv x3)) (B2 x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))) (cv y)
                (@xpeq12d (wceq (cv x3) (cv z)) (csn (cv x3)) (csn (cv z)) (B2 x3) (csb (cv z) (λ x3, B2 x3))
                  (@sneq (cv x3) (cv z))
                  (@csbeq1a (λ x3, cv z) (λ x3, B2 x3) x3)))) x3 z))
      (@exbidv (wceq (cv y) (cop (cv x3) (C x3))) (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))) (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))
        (λ z, @anbi2d (wceq (cv y) (cop (cv x3) (C x3))) (wcel (cv y) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))) (wsb (λ x3, wcel (cv x3) (A2 x3)) z)
          (@eleq1 (cv y) (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))))))
  (@bitri (wex (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))))) (wex (λ z, wa (wceq (cv z) (cv x3)) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3)))))) (wa (wcel (cv x3) (A2 x3)) (wcel (C x3) (B2 x3)))
    (@exbii (λ z, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))) (λ z, wa (wceq (cv z) (cv x3)) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3)))))
      (λ z, @«3bitri» (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wa (wcel (cv x3) (csn (cv z))) (wcel (C x3) (csb (cv z) (λ x3, B2 x3))))) (wa (wcel (cv x3) (csn (cv z))) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3))))) (wa (wceq (cv z) (cv x3)) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3)))))
        (@anbi2i (wcel (cop (cv x3) (C x3)) (cxp (csn (cv z)) (csb (cv z) (λ x3, B2 x3)))) (wa (wcel (cv x3) (csn (cv z))) (wcel (C x3) (csb (cv z) (λ x3, B2 x3)))) (wsb (λ x3, wcel (cv x3) (A2 x3)) z)
          (@opelxp (cv x3) (C x3) (csn (cv z)) (csb (cv z) (λ x3, B2 x3))))
        (@an12 (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv x3) (csn (cv z))) (wcel (C x3) (csb (cv z) (λ x3, B2 x3))))
        (@anbi1i (wcel (cv x3) (csn (cv z))) (wceq (cv z) (cv x3)) (wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3))))
          (@bitri (wcel (cv x3) (csn (cv z))) (wceq (cv x3) (cv z)) (wceq (cv z) (cv x3))
            (@velsn (λ x3, cv z) x3)
            (@equcom x3 z)))))
    (@equsexvw (λ z x3, wa (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (C x3) (csb (cv z) (λ x3, B2 x3)))) (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (C x3) (B2 x3)))
      (λ z x3, @anbi12d (wceq (cv z) (cv x3)) (wsb (λ x3, wcel (cv x3) (A2 x3)) z) (wcel (cv x3) (A2 x3)) (wcel (C x3) (csb (cv z) (λ x3, B2 x3))) (wcel (C x3) (B2 x3))
        (@sbequ12r (λ z x3, wcel (cv x3) (A2 x3)) z x3)
        (@eleq2d (wceq (cv z) (cv x3)) (csb (cv z) (λ x3, B2 x3)) (B2 x3) (C x3)
          (@eqcomd (wceq (cv z) (cv x3)) (B2 x3) (csb (cv z) (λ x3, B2 x3))
            (@equcoms (λ x3 z, wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))
              (λ x3 z, @csbeq1a (λ x3, cv z) (λ x3, B2 x3) x3) x3 z)))) x3))


/-- Distributive law for Cartesian product over union. Theorem 103 of [Suppes] p. 52. (Contributed
by NM, 12-Aug-2004.) -/
theorem xpundi {A2 B2 C : «class»} :
  ⊦ wceq (cxp A2 (cun B2 C)) (cun (cxp A2 B2) (cxp A2 C)) :=
@eqtr4i (cxp A2 (cun B2 C)) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (cun B2 C)))) (cun (cxp A2 B2) (cxp A2 C))
  (@df_xp A2 (cun B2 C))
  (@eqtr4i (cun (cxp A2 B2) (cxp A2 C)) (cun (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)))) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (cun B2 C))))
    (@uneq12i (cxp A2 B2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (cxp A2 C) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)))
      (@df_xp A2 B2)
      (@df_xp A2 C))
    (@eqtr4i (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (cun B2 C)))) (copab (λ x3 y, wo (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) A2) (wcel (cv y) C)))) (cun (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))))
      (@opabbii (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) (cun B2 C))) (λ x3 y, wo (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) A2) (wcel (cv y) C)))
        (λ x3 y, @bitri (wa (wcel (cv x3) A2) (wcel (cv y) (cun B2 C))) (wa (wcel (cv x3) A2) (wo (wcel (cv y) B2) (wcel (cv y) C))) (wo (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) A2) (wcel (cv y) C)))
          (@anbi2i (wcel (cv y) (cun B2 C)) (wo (wcel (cv y) B2) (wcel (cv y) C)) (wcel (cv x3) A2)
            (@elun (cv y) B2 C))
          (@andi (wcel (cv x3) A2) (wcel (cv y) B2) (wcel (cv y) C))))
      (@unopab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2)) (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)))))


/-- Distributive law for Cartesian product over union. Similar to Theorem 103 of [Suppes] p. 52.
(Contributed by NM, 30-Sep-2002.) -/
theorem xpundir {A2 B2 C : «class»} :
  ⊦ wceq (cxp (cun A2 B2) C) (cun (cxp A2 C) (cxp B2 C)) :=
@eqtr4i (cxp (cun A2 B2) C) (copab (λ x3 y, wa (wcel (cv x3) (cun A2 B2)) (wcel (cv y) C))) (cun (cxp A2 C) (cxp B2 C))
  (@df_xp (cun A2 B2) C)
  (@eqtr4i (cun (cxp A2 C) (cxp B2 C)) (cun (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C)))) (copab (λ x3 y, wa (wcel (cv x3) (cun A2 B2)) (wcel (cv y) C)))
    (@uneq12i (cxp A2 C) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))) (cxp B2 C) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C)))
      (@df_xp A2 C)
      (@df_xp B2 C))
    (@eqtr4i (copab (λ x3 y, wa (wcel (cv x3) (cun A2 B2)) (wcel (cv y) C))) (copab (λ x3 y, wo (wa (wcel (cv x3) A2) (wcel (cv y) C)) (wa (wcel (cv x3) B2) (wcel (cv y) C)))) (cun (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C))))
      (@opabbii (λ x3 y, wa (wcel (cv x3) (cun A2 B2)) (wcel (cv y) C)) (λ x3 y, wo (wa (wcel (cv x3) A2) (wcel (cv y) C)) (wa (wcel (cv x3) B2) (wcel (cv y) C)))
        (λ x3 y, @bitri (wa (wcel (cv x3) (cun A2 B2)) (wcel (cv y) C)) (wa (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv y) C)) (wo (wa (wcel (cv x3) A2) (wcel (cv y) C)) (wa (wcel (cv x3) B2) (wcel (cv y) C)))
          (@anbi1i (wcel (cv x3) (cun A2 B2)) (wo (wcel (cv x3) A2) (wcel (cv x3) B2)) (wcel (cv y) C)
            (@elun (cv x3) A2 B2))
          (@andir (wcel (cv x3) A2) (wcel (cv x3) B2) (wcel (cv y) C))))
      (@unopab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) C)) (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) C)))))


/-- Distributive law for Cartesian product over indexed union. (Contributed by Mario Carneiro,
27-Apr-2014.) -/
theorem xpiundir {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wceq (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C) (ciun (λ x3, A2 x3) (λ x3, cxp (B2 x3) C)) :=
@eqriv (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C) (ciun (λ x3, A2 x3) (λ x3, cxp (B2 x3) C))
  (λ z, @«3bitr4i» (wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv z) (cxp (B2 x3) C)) (λ x3, A2 x3)) (wcel (cv z) (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C)) (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, cxp (B2 x3) C)))
    (@«3bitr4i» (wex (λ y, wa (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)))) (wrex (λ x3, wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, B2 x3)) (λ x3, A2 x3)) (wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv z) (cxp (B2 x3) C)) (λ x3, A2 x3))
      (@«3bitr4ri» (wrex (λ x3, wex (λ y, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)))) (λ x3, A2 x3)) (wex (λ y, wrex (λ x3, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (λ x3, A2 x3))) (wrex (λ x3, wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, B2 x3)) (λ x3, A2 x3)) (wex (λ y, wa (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))))
        (@rexcom4 (λ x3 y, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (λ x3, A2 x3))
        (@rexbii (λ x3, wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, B2 x3)) (λ x3, wex (λ y, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)))) (λ x3, A2 x3)
          (λ x3, @df_rex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, B2 x3)))
        (@exbii (λ y, wa (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (λ y, wrex (λ x3, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (λ x3, A2 x3))
          (λ y, @bitr4i (wa (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (wa (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (wrex (λ x3, wa (wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))) (λ x3, A2 x3))
            (@anbi1i (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C))
              (@eliun (cv y) (λ x3, A2 x3) (λ x3, B2 x3)))
            (@r19_41v (λ x3, wcel (cv y) (B2 x3)) (wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ x3, A2 x3)))))
      (@df_rex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, ciun (λ x3, A2 x3) (λ x3, B2 x3)))
      (@rexbii (λ x3, wcel (cv z) (cxp (B2 x3) C)) (λ x3, wrex (λ y, wrex (λ w, wceq (cv z) (cop (cv y) (cv w))) (λ w, C)) (λ y, B2 x3)) (λ x3, A2 x3)
        (λ x3, @elxp2 (cv z) (B2 x3) C)))
    (@elxp2 (cv z) (ciun (λ x3, A2 x3) (λ x3, B2 x3)) C)
    (@eliun (cv z) (λ x3, A2 x3) (λ x3, cxp (B2 x3) C)))


/-- Membership in a union of Cartesian products when the second factor is constant. (Contributed by
Mario Carneiro, 29-Dec-2014.) -/
theorem iunxpconst {A2 B2 : «class»} :
  ⊦ wceq (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) B2)) (cxp A2 B2) :=
@eqtr3i (cxp (ciun (λ x3, A2) (λ x3, csn (cv x3))) B2) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) B2)) (cxp A2 B2)
  (@xpiundir (λ x3, A2) (λ x3, csn (cv x3)) B2)
  (@xpeq1i (ciun (λ x3, A2) (λ x3, csn (cv x3))) A2 B2
    (@iunid A2))


/-- Membership in universal class of ordered pairs. (Contributed by NM, 4-Jul-1994.) -/
theorem elvv {A2 : «class»} :
  ⊦ wb (wcel A2 (cxp cvv cvv)) (wex (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y))))) :=
@bitr4i (wcel A2 (cxp cvv cvv)) (wex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv))))) (wex (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y)))))
  (@elxp A2 cvv cvv)
  (@«2exbii» (λ x3 y, wceq A2 (cop (cv x3) (cv y))) (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv)))
    (λ x3 y, @biantru (wa (wcel (cv x3) cvv) (wcel (cv y) cvv)) (wceq A2 (cop (cv x3) (cv y)))
      (@pm3_2i (wcel (cv x3) cvv) (wcel (cv y) cvv)
        (@vex x3)
        (@vex y))))


/-- Intersection of binary relation with Cartesian product. (Contributed by NM, 3-Mar-2007.)
(Revised by Mario Carneiro, 26-Apr-2015.) Group conjuncts and avoid ~ df-3an . (Revised by Peter
Mazsa, 18-Sep-2022.) -/
theorem brinxp2 {A2 B2 C D R : «class»} :
  ⊦ wb (wbr C D (cin R (cxp A2 B2))) (wa (wa (wcel C A2) (wcel D B2)) (wbr C D R)) :=
@«3bitri» (wbr C D (cin R (cxp A2 B2))) (wa (wbr C D R) (wbr C D (cxp A2 B2))) (wa (wbr C D (cxp A2 B2)) (wbr C D R)) (wa (wa (wcel C A2) (wcel D B2)) (wbr C D R))
  (@brin C D R (cxp A2 B2))
  (@ancom (wbr C D R) (wbr C D (cxp A2 B2)))
  (@anbi1i (wbr C D (cxp A2 B2)) (wa (wcel C A2) (wcel D B2)) (wbr C D R)
    (@brxp C D A2 B2))


/-- Intersection of binary relation with Cartesian product. (Contributed by NM, 9-Mar-1997.) -/
theorem brinxp {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wbr A2 B2 R) (wbr A2 B2 (cin R (cxp C D)))) :=
@baibr (wbr A2 B2 (cin R (cxp C D))) (wa (wcel A2 C) (wcel B2 D)) (wbr A2 B2 R)
  (@brinxp2 C D A2 B2 R)


/-- Ordered pair element in an intersection with Cartesian product. (Contributed by Peter Mazsa,
21-Jul-2019.) -/
theorem opelinxp {A2 B2 C D R : «class»} :
  ⊦ wb (wcel (cop C D) (cin R (cxp A2 B2))) (wa (wa (wcel C A2) (wcel D B2)) (wcel (cop C D) R)) :=
@«3bitr3i» (wbr C D (cin R (cxp A2 B2))) (wa (wa (wcel C A2) (wcel D B2)) (wbr C D R)) (wcel (cop C D) (cin R (cxp A2 B2))) (wa (wa (wcel C A2) (wcel D B2)) (wcel (cop C D) R))
  (@brinxp2 A2 B2 C D R)
  (@df_br C D (cin R (cxp A2 B2)))
  (@anbi2i (wbr C D R) (wcel (cop C D) R) (wa (wcel C A2) (wcel D B2))
    (@df_br C D R))


/-- Intersection of partial order with Cartesian product of its field. (Contributed by Mario
Carneiro, 10-Jul-2014.) -/
theorem poinxp {A2 R : «class»} :
  ⊦ wb (wpo A2 R) (wpo A2 (cin R (cxp A2 A2))) :=
@«3bitr4i» (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wi (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) (cin R (cxp A2 A2))))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wpo A2 R) (wpo A2 (cin R (cxp A2 A2)))
  (@ralbiia (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wi (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) (cin R (cxp A2 A2))))) (λ z, A2)) (λ y, A2)) (λ x3, A2)
    (λ x3, @ralbidva (wcel (cv x3) A2) (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wi (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) (cin R (cxp A2 A2))))) (λ z, A2)) (λ y, A2)
      (λ y, @ralbidva (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, wa (wn (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wi (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) (cin R (cxp A2 A2))))) (λ z, A2)
        (λ z, @anbi12d (wa (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wcel (cv z) A2)) (wn (wbr (cv x3) (cv x3) R)) (wn (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (wi (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) (cin R (cxp A2 A2))))
          (@notbid (wa (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wcel (cv z) A2)) (wbr (cv x3) (cv x3) R) (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))
            (@ad2antrr (wcel (cv x3) A2) (wb (wbr (cv x3) (cv x3) R) (wbr (cv x3) (cv x3) (cin R (cxp A2 A2)))) (wcel (cv y) A2) (wcel (cv z) A2)
              (@anidms (wcel (cv x3) A2) (wb (wbr (cv x3) (cv x3) R) (wbr (cv x3) (cv x3) (cin R (cxp A2 A2))))
                (@brinxp (cv x3) (cv x3) A2 A2 R))))
          (@imbi12d (wa (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wcel (cv z) A2)) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wa (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wbr (cv x3) (cv z) R) (wbr (cv x3) (cv z) (cin R (cxp A2 A2)))
            (@anbi12d (wa (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wcel (cv z) A2)) (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wbr (cv y) (cv z) R) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))
              (@adantr (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wb (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv y) (cin R (cxp A2 A2)))) (wcel (cv z) A2)
                (@brinxp (cv x3) (cv y) A2 A2 R))
              (@adantll (wcel (cv y) A2) (wcel (cv z) A2) (wb (wbr (cv y) (cv z) R) (wbr (cv y) (cv z) (cin R (cxp A2 A2)))) (wcel (cv x3) A2)
                (@brinxp (cv y) (cv z) A2 A2 R)))
            (@adantlr (wcel (cv x3) A2) (wcel (cv z) A2) (wb (wbr (cv x3) (cv z) R) (wbr (cv x3) (cv z) (cin R (cxp A2 A2)))) (wcel (cv y) A2)
              (@brinxp (cv x3) (cv z) A2 A2 R)))))))
  (@df_po A2 R)
  (@df_po A2 (cin R (cxp A2 A2)))


/-- Intersection of total order with Cartesian product of its field. (Contributed by Mario Carneiro,
10-Jul-2014.) -/
theorem soinxp {A2 R : «class»} :
  ⊦ wb (wor A2 R) (wor A2 (cin R (cxp A2 A2))) :=
@«3bitr4i» (wa (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))) (wa (wpo A2 (cin R (cxp A2 A2))) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, A2)) (λ x3, A2))) (wor A2 R) (wor A2 (cin R (cxp A2 A2)))
  (@anbi12i (wpo A2 R) (wpo A2 (cin R (cxp A2 A2))) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, A2)) (λ x3, A2))
    (@poinxp A2 R)
    (@ralbiia (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, A2)) (λ x3, A2)
      (λ x3, @ralbidva (wcel (cv x3) A2) (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, w3o (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, A2)
        (λ y, @«3orbi123d» (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wbr (cv x3) (cv y) R) (wbr (cv x3) (cv y) (cin R (cxp A2 A2))) (wceq (cv x3) (cv y)) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))
          (@brinxp (cv x3) (cv y) A2 A2 R)
          (@biidd (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wceq (cv x3) (cv y)))
          (@ancoms (wcel (cv y) A2) (wcel (cv x3) A2) (wb (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2))))
            (@brinxp (cv y) (cv x3) A2 A2 R))))))
  (@df_so A2 R)
  (@df_so A2 (cin R (cxp A2 A2)))


/-- Intersection of well-founded relation with Cartesian product of its field. (Contributed by Mario
Carneiro, 10-Jul-2014.) -/
theorem frinxp {A2 R : «class»} :
  ⊦ wb (wfr A2 R) (wfr A2 (cin R (cxp A2 A2))) :=
@«3bitr4i» (wal (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)))) (wal (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)) (λ x3, cv z)))) (wfr A2 R) (wfr A2 (cin R (cxp A2 A2)))
  (@albii (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z))) (λ z, wi (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)) (λ x3, cv z)))
    (λ z, @pm5_74i (wa (wss (cv z) A2) (wne (cv z) c0)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)) (λ x3, cv z))
      (@adantr (wss (cv z) A2) (wb (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, cv z)) (wrex (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)) (λ x3, cv z))) (wne (cv z) c0)
        (@rexbidva (wss (cv z) A2) (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, cv z)) (λ x3, wral (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)) (λ x3, cv z)
          (λ x3, @ralbidva (wa (wss (cv z) A2) (wcel (cv x3) (cv z))) (λ y, wn (wbr (cv y) (cv x3) R)) (λ y, wn (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))) (λ y, cv z)
            (λ y, @notbid (wa (wa (wss (cv z) A2) (wcel (cv x3) (cv z))) (wcel (cv y) (cv z))) (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2)))
              (@impl (wss (cv z) A2) (wcel (cv x3) (cv z)) (wcel (cv y) (cv z)) (wb (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2))))
                (@syl6 (wss (cv z) A2) (wa (wcel (cv x3) (cv z)) (wcel (cv y) (cv z))) (wa (wcel (cv x3) A2) (wcel (cv y) A2)) (wb (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2))))
                  (@anim12d (wss (cv z) A2) (wcel (cv x3) (cv z)) (wcel (cv x3) A2) (wcel (cv y) (cv z)) (wcel (cv y) A2)
                    (@ssel (cv z) A2 (cv x3))
                    (@ssel (cv z) A2 (cv y)))
                  (@ancoms (wcel (cv y) A2) (wcel (cv x3) A2) (wb (wbr (cv y) (cv x3) R) (wbr (cv y) (cv x3) (cin R (cxp A2 A2))))
                    (@brinxp (cv y) (cv x3) A2 A2 R))))))))))
  (@df_fr A2 R)
  (@df_fr A2 (cin R (cxp A2 A2)))


/-- Intersection of well-ordering with Cartesian product of its field. (Contributed by NM,
9-Mar-1997.) (Revised by Mario Carneiro, 10-Jul-2014.) -/
theorem weinxp {A2 R : «class»} :
  ⊦ wb (wwe A2 R) (wwe A2 (cin R (cxp A2 A2))) :=
@«3bitr4i» (wa (wfr A2 R) (wor A2 R)) (wa (wfr A2 (cin R (cxp A2 A2))) (wor A2 (cin R (cxp A2 A2)))) (wwe A2 R) (wwe A2 (cin R (cxp A2 A2)))
  (@anbi12i (wfr A2 R) (wfr A2 (cin R (cxp A2 A2))) (wor A2 R) (wor A2 (cin R (cxp A2 A2)))
    (@frinxp A2 R)
    (@soinxp A2 R))
  (@df_we A2 R)
  (@df_we A2 (cin R (cxp A2 A2)))


/-- An abstraction relation is a subset of a related Cartesian product. (Contributed by NM,
16-Jul-1995.) -/
theorem opabssxp {ph : setvar → setvar → wff} {A2 B2 : «class»} :
  ⊦ wss (copab (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (ph x3 y))) (cxp A2 B2) :=
@sseqtrri (copab (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (ph x3 y))) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (cxp A2 B2)
  (@ssopab2i (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (ph x3 y)) (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))
    (λ x3 y, @simpl (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (ph x3 y)))
  (@df_xp A2 B2)


/-- The law of concretion for a binary relation. Ordered pair membership in an ordered pair class
abstraction. (Contributed by Mario Carneiro, 28-Apr-2015.) -/
theorem brab2a {ph : setvar → setvar → wff} {ps : wff} {A2 B2 C D : «class»} {R : setvar → setvar → «class»}
  (brab2a_1 : ∀ x3 y, ⊦ wi (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wb (ph x3 y) ps))
  (brab2a_2 : ∀ x3 y, ⊦ wceq (R x3 y) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))))
  (x3 y : setvar) : ⊦ wb (wbr A2 B2 (R x3 y)) (wa (wa (wcel A2 C) (wcel B2 D)) ps) :=
@biadanii (wbr A2 B2 (R x3 y)) (wa (wcel A2 C) (wcel B2 D)) ps
  (@brel A2 B2 C D (R x3 y)
    (@eqsstri (R x3 y) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))) (cxp C D)
      (brab2a_2 x3 y)
      (@opabssxp (λ x3 y, ph x3 y) C D)))
  (@syl5bb (wbr A2 B2 (R x3 y)) (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y)))) (wa (wcel A2 C) (wcel B2 D)) ps
    (@bitri (wbr A2 B2 (R x3 y)) (wcel (cop A2 B2) (R x3 y)) (wcel (cop A2 B2) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))))
      (@df_br A2 B2 (R x3 y))
      (@eleq2i (R x3 y) (copab (λ x3 y, wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (ph x3 y))) (cop A2 B2)
        (brab2a_2 x3 y)))
    (@opelopab2a (λ x3 y, ph x3 y) ps A2 B2 C D
      (λ x3 y, brab2a_1 x3 y)))


/-- Implicit substitution of class for ordered pair. (Contributed by NM, 5-Mar-1995.) -/
theorem optocl {ph : setvar → setvar → wff} {ps : wff} {A2 B2 C : «class»} {D : setvar → setvar → «class»}
  (optocl_1 : ∀ x3 y, ⊦ wceq (D x3 y) (cxp B2 C))
  (optocl_2 : ∀ x3 y, ⊦ wi (wceq (cop (cv x3) (cv y)) A2) (wb (ph x3 y) ps))
  (optocl_3 : ∀ x3 y, ⊦ wi (wa (wcel (cv x3) B2) (wcel (cv y) C)) (ph x3 y))
  (x3 y : setvar) : ⊦ wi (wcel A2 (D x3 y)) ps :=
@eleq2s ps A2 (cxp B2 C) (D x3 y)
  (@sylbi (wcel A2 (cxp B2 C)) (wex (λ x3, wex (λ y, wa (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C))))) ps
    (@elxp3 A2 B2 C)
    (@exlimivv (λ x3 y, wa (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C))) ps
      (λ x3 y, @imp (wceq (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp B2 C)) ps
        (@syl5ib (wcel (cop (cv x3) (cv y)) (cxp B2 C)) (ph x3 y) (wceq (cop (cv x3) (cv y)) A2) ps
          (@sylbi (wcel (cop (cv x3) (cv y)) (cxp B2 C)) (wa (wcel (cv x3) B2) (wcel (cv y) C)) (ph x3 y)
            (@opelxp (cv x3) (cv y) B2 C)
            (optocl_3 x3 y))
          (optocl_2 x3 y)))))
  (optocl_1 x3 y)


/-- Implicit substitution of classes for ordered pairs. (Contributed by NM, 12-Mar-1995.) -/
theorem «2optocl» {ph : setvar → setvar → setvar → setvar → wff} {ps ch : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → setvar → «class»} {C D : «class»} {R : setvar → setvar → «class»}
  («2optocl_1» : ∀ x3 y, ⊦ wceq (R x3 y) (cxp C D))
  («2optocl_2» : ∀ x3 y z w, ⊦ wi (wceq (cop (cv x3) (cv y)) A2) (wb (ph x3 y z w) (ps z w)))
  («2optocl_3» : ∀ x3 y z w, ⊦ wi (wceq (cop (cv z) (cv w)) (B2 x3 y)) (wb (ps z w) (ch x3 y)))
  («2optocl_4» : ∀ x3 y z w, ⊦ wi (wa (wa (wcel (cv x3) C) (wcel (cv y) D)) (wa (wcel (cv z) C) (wcel (cv w) D))) (ph x3 y z w))
  (x3 y : setvar) : ⊦ wi (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (ch x3 y) :=
@impcom (wcel (B2 x3 y) (R x3 y)) (wcel A2 (R x3 y)) (ch x3 y)
  (setvar.forget $ λ w : setvar,
    setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (B2 x3 y) (R x3 y)) (wi (wcel A2 (R x3 y)) (ch x3 y)), from
    @optocl (λ z w, wi (wcel A2 (R x3 y)) (ps z w)) (wi (wcel A2 (R x3 y)) (ch x3 y)) (B2 x3 y) C D (λ z w, R x3 y)
      (λ z w, «2optocl_1» x3 y)
      (λ z w, @imbi2d (wceq (cop (cv z) (cv w)) (B2 x3 y)) (ps z w) (ch x3 y) (wcel A2 (R x3 y))
        («2optocl_3» x3 y z w))
      (λ z w, @com12 (wcel A2 (R x3 y)) (wa (wcel (cv z) C) (wcel (cv w) D)) (ps z w)
        (@optocl (λ x3 y, wi (wa (wcel (cv z) C) (wcel (cv w) D)) (ph x3 y z w)) (wi (wa (wcel (cv z) C) (wcel (cv w) D)) (ps z w)) A2 C D (λ x3 y, R x3 y)
          (λ x3 y, «2optocl_1» x3 y)
          (λ x3 y, @imbi2d (wceq (cop (cv x3) (cv y)) A2) (ph x3 y z w) (ps z w) (wa (wcel (cv z) C) (wcel (cv w) D))
            («2optocl_2» x3 y z w))
          (λ x3 y, @ex (wa (wcel (cv x3) C) (wcel (cv y) D)) (wa (wcel (cv z) C) (wcel (cv w) D)) (ph x3 y z w)
            («2optocl_4» x3 y z w)) x3 y)) z w)


/-- Implicit substitution of classes for ordered pairs. (Contributed by NM, 12-Mar-1995.) -/
theorem «3optocl» {ph : setvar → setvar → setvar → setvar → setvar → setvar → wff} {ps ch th : setvar → setvar → setvar → setvar → wff} {A2 : «class»} {B2 : setvar → setvar → «class»} {C : setvar → setvar → setvar → setvar → «class»} {D : «class»} {R : setvar → setvar → «class»} {F : «class»}
  («3optocl_1» : ∀ x3 y, ⊦ wceq (R x3 y) (cxp D F))
  («3optocl_2» : ∀ x3 y z w v u, ⊦ wi (wceq (cop (cv x3) (cv y)) A2) (wb (ph x3 y z w v u) (ps z w v u)))
  («3optocl_3» : ∀ x3 y z w v u, ⊦ wi (wceq (cop (cv z) (cv w)) (B2 x3 y)) (wb (ps z w v u) (ch x3 y v u)))
  («3optocl_4» : ∀ x3 y z w v u, ⊦ wi (wceq (cop (cv v) (cv u)) (C x3 y z w)) (wb (ch x3 y v u) (th x3 y z w)))
  («3optocl_5» : ∀ x3 y z w v u, ⊦ wi (w3a (wa (wcel (cv x3) D) (wcel (cv y) F)) (wa (wcel (cv z) D) (wcel (cv w) F)) (wa (wcel (cv v) D) (wcel (cv u) F))) (ph x3 y z w v u))
  (x3 y z w : setvar) : ⊦ wi (w3a (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y)) (wcel (C x3 y z w) (R x3 y))) (th x3 y z w) :=
@«3impa» (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y)) (wcel (C x3 y z w) (R x3 y)) (th x3 y z w)
  (@impcom (wcel (C x3 y z w) (R x3 y)) (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (th x3 y z w)
    (setvar.forget $ λ u : setvar,
      setvar.forget $ λ v : setvar,
      show ⊦ wi (wcel (C x3 y z w) (R x3 y)) (wi (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (th x3 y z w)), from
      @optocl (λ v u, wi (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (ch x3 y v u)) (wi (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (th x3 y z w)) (C x3 y z w) D F (λ v u, R x3 y)
        (λ v u, «3optocl_1» x3 y)
        (λ v u, @imbi2d (wceq (cop (cv v) (cv u)) (C x3 y z w)) (ch x3 y v u) (th x3 y z w) (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y)))
          («3optocl_4» x3 y z w v u))
        (λ v u, @com12 (wa (wcel A2 (R x3 y)) (wcel (B2 x3 y) (R x3 y))) (wa (wcel (cv v) D) (wcel (cv u) F)) (ch x3 y v u)
          (@«2optocl» (λ x3 y z w, wi (wa (wcel (cv v) D) (wcel (cv u) F)) (ph x3 y z w v u)) (λ z w, wi (wa (wcel (cv v) D) (wcel (cv u) F)) (ps z w v u)) (λ x3 y, wi (wa (wcel (cv v) D) (wcel (cv u) F)) (ch x3 y v u)) A2 (λ x3 y, B2 x3 y) D F (λ x3 y, R x3 y)
            (λ x3 y, «3optocl_1» x3 y)
            (λ x3 y z w, @imbi2d (wceq (cop (cv x3) (cv y)) A2) (ph x3 y z w v u) (ps z w v u) (wa (wcel (cv v) D) (wcel (cv u) F))
              («3optocl_2» x3 y z w v u))
            (λ x3 y z w, @imbi2d (wceq (cop (cv z) (cv w)) (B2 x3 y)) (ps z w v u) (ch x3 y v u) (wa (wcel (cv v) D) (wcel (cv u) F))
              («3optocl_3» x3 y z w v u))
            (λ x3 y z w, @«3expia» (wa (wcel (cv x3) D) (wcel (cv y) F)) (wa (wcel (cv z) D) (wcel (cv w) F)) (wa (wcel (cv v) D) (wcel (cv u) F)) (ph x3 y z w v u)
              («3optocl_5» x3 y z w v u)) x3 y)) v u))


/-- Ordered pair membership in a relation. Special case. (Contributed by NM, 5-Aug-1995.) -/
theorem opbrop {ph : setvar → setvar → setvar → setvar → wff} {ps : setvar → setvar → wff} {A2 B2 C D : «class»} {R : setvar → setvar → setvar → setvar → setvar → setvar → «class»} {S : «class»}
  (opbrop_1 : ∀ x3 y z w v u, ⊦ wi (wa (wa (wceq (cv z) A2) (wceq (cv w) B2)) (wa (wceq (cv v) C) (wceq (cv u) D))) (wb (ph z w v u) (ps x3 y)))
  (opbrop_2 : ∀ x3 y z w v u, ⊦ wceq (R x3 y z w v u) (copab (λ x3 y, wa (wa (wcel (cv x3) (cxp S S)) (wcel (cv y) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)))))))))
  (x3 y z w v u : setvar) : ⊦ wi (wa (wa (wcel A2 S) (wcel B2 S)) (wa (wcel C S) (wcel D S))) (wb (wbr (cop A2 B2) (cop C D) (R x3 y z w v u)) (ps x3 y)) :=
@mpbirand (wa (wa (wcel A2 S) (wcel B2 S)) (wa (wcel C S) (wcel D S))) (wbr (cop A2 B2) (cop C D) (R x3 y z w v u)) (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S))) (ps x3 y)
  (@anim12i (wa (wcel A2 S) (wcel B2 S)) (wcel (cop A2 B2) (cxp S S)) (wa (wcel C S) (wcel D S)) (wcel (cop C D) (cxp S S))
    (@opelxpi A2 B2 S S)
    (@opelxpi C D S S))
  (@syl5bb (wbr (cop A2 B2) (cop C D) (R x3 y z w v u)) (wa (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u))))))) (wa (wa (wcel A2 S) (wcel B2 S)) (wa (wcel C S) (wcel D S))) (wa (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S))) (ps x3 y))
    (@brab (λ x3 y, wa (wa (wcel (cv x3) (cxp S S)) (wcel (cv y) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u))))))) (λ x3 y, wa (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cv y) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u))))))) (wa (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u))))))) (cop A2 B2) (cop C D) (λ x3 y, R x3 y z w v u)
      (@opex A2 B2)
      (@opex C D)
      (λ x3 y, @anbi12d (wceq (cv x3) (cop A2 B2)) (wa (wcel (cv x3) (cxp S S)) (wcel (cv y) (cxp S S))) (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cv y) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)))))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u))))))
        (@anbi1d (wceq (cv x3) (cop A2 B2)) (wcel (cv x3) (cxp S S)) (wcel (cop A2 B2) (cxp S S)) (wcel (cv y) (cxp S S))
          (@eleq1 (cv x3) (cop A2 B2) (cxp S S)))
        (@«4exbidv» (wceq (cv x3) (cop A2 B2)) (λ z w v u, wa (wa (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)) (λ z w v u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u))
          (λ z w v u, @anbi1d (wceq (cv x3) (cop A2 B2)) (wa (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)
            (@anbi1d (wceq (cv x3) (cop A2 B2)) (wceq (cv x3) (cop (cv z) (cv w))) (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))
              (@eqeq1 (cv x3) (cop A2 B2) (cop (cv z) (cv w)))))))
      (λ x3 y, @anbi12d (wceq (cv y) (cop C D)) (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cv y) (cxp S S))) (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)))))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u))))))
        (@anbi2d (wceq (cv y) (cop C D)) (wcel (cv y) (cxp S S)) (wcel (cop C D) (cxp S S)) (wcel (cop A2 B2) (cxp S S))
          (@eleq1 (cv y) (cop C D) (cxp S S)))
        (@«4exbidv» (wceq (cv y) (cop C D)) (λ z w v u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (ph z w v u)) (λ z w v u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u))
          (λ z w v u, @anbi1d (wceq (cv y) (cop C D)) (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cv y) (cop (cv v) (cv u)))) (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u)
            (@anbi2d (wceq (cv y) (cop C D)) (wceq (cv y) (cop (cv v) (cv u))) (wceq (cop C D) (cop (cv v) (cv u))) (wceq (cop A2 B2) (cop (cv z) (cv w)))
              (@eqeq1 (cv y) (cop C D) (cop (cv v) (cv u)))))))
      (λ x3 y, opbrop_2 x3 y z w v u) x3 y)
    (@anbi2d (wa (wa (wcel A2 S) (wcel B2 S)) (wa (wcel C S) (wcel D S))) (wex (λ z, wex (λ w, wex (λ v, wex (λ u, wa (wa (wceq (cop A2 B2) (cop (cv z) (cv w))) (wceq (cop C D) (cop (cv v) (cv u)))) (ph z w v u)))))) (ps x3 y) (wa (wcel (cop A2 B2) (cxp S S)) (wcel (cop C D) (cxp S S)))
      (@copsex4g (λ z w v u, ph z w v u) (ps x3 y) A2 B2 C D S S
        (λ z w v u, opbrop_1 x3 y z w v u))))


/-- The Cartesian product with the empty set is empty. Part of Theorem 3.13(ii) of [Monk1] p. 37.
(Contributed by NM, 4-Jul-1994.) -/
theorem «0xp» {A2 : «class»} :
  ⊦ wceq (cxp c0 A2) c0 :=
@nel0 (cxp c0 A2)
  (λ z, @mtbir (wcel (cv z) (cxp c0 A2)) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) c0) (wcel (cv y) A2)))))
    (@nex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) c0) (wcel (cv y) A2))))
      (λ x3, @nex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) c0) (wcel (cv y) A2)))
        (λ y, @mto (wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) c0) (wcel (cv y) A2))) (wcel (cv x3) c0)
          (@noel (cv x3))
          (@simprl (wceq (cv z) (cop (cv x3) (cv y))) (wcel (cv x3) c0) (wcel (cv y) A2)))))
    (@elxp (cv z) c0 A2))


/-- Equality theorem for the relation predicate. (Contributed by NM, 1-Aug-1994.) -/
theorem releq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wrel A2) (wrel B2)) :=
@«3bitr4g» (wceq A2 B2) (wss A2 (cxp cvv cvv)) (wss B2 (cxp cvv cvv)) (wrel A2) (wrel B2)
  (@sseq1 A2 B2 (cxp cvv cvv))
  (@df_rel A2)
  (@df_rel B2)


/-- Equality inference for the relation predicate. (Contributed by NM, 8-Dec-2006.) -/
theorem releqi {A2 B2 : «class»}
  (releqi_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wrel A2) (wrel B2) :=
@ax_mp (wceq A2 B2) (wb (wrel A2) (wrel B2))
  releqi_1
  (@releq A2 B2)


/-- Equality deduction for the relation predicate. (Contributed by NM, 8-Mar-2014.) -/
theorem releqd {ph : wff} {A2 B2 : «class»}
  (releqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wrel A2) (wrel B2)) :=
@syl ph (wceq A2 B2) (wb (wrel A2) (wrel B2))
  releqd_1
  (@releq A2 B2)


/-- Bound-variable hypothesis builder for a relation. (Contributed by NM, 31-Jan-2004.) (Revised by
Mario Carneiro, 15-Oct-2016.) -/
theorem nfrel {A2 : setvar → «class»}
  (nfrel_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnf (λ x3, wrel (A2 x3)) :=
@nfxfr (λ x3, wrel (A2 x3)) (λ x3, wss (A2 x3) (cxp cvv cvv))
  (λ x3, @df_rel (A2 x3))
  (@nfss (λ x3, A2 x3) (λ x3, cxp cvv cvv)
    nfrel_1
    (@nfcv (cxp cvv cvv)))


/-- Subclass theorem for relation predicate. Theorem 2 of [Suppes] p. 58. (Contributed by NM,
15-Aug-1994.) -/
theorem relss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wi (wrel B2) (wrel A2)) :=
@«3imtr4g» (wss A2 B2) (wss B2 (cxp cvv cvv)) (wss A2 (cxp cvv cvv)) (wrel B2) (wrel A2)
  (@sstr2 A2 B2 (cxp cvv cvv))
  (@df_rel B2)
  (@df_rel A2)


/-- A subclass relationship depends only on a relation's ordered pairs. Theorem 3.2(i) of [Monk1] p.
33. (Contributed by NM, 2-Aug-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) Remove
dependency on ~ ax-sep , ~ ax-nul , ~ ax-pr . (Revised by KP, 25-Oct-2021.) -/
theorem ssrel {A2 B2 : «class»} :
  ⊦ wi (wrel A2) (wb (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))) :=
@impbid2 (wrel A2) (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))
  (@alrimivv (wss A2 B2) (λ x3 y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
    (λ x3 y, @ssel A2 B2 (cop (cv x3) (cv y))))
  (@com12 (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wrel A2) (wss A2 B2)
    (@syl6ibr (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wrel A2) (wal (λ z, wi (wcel (cv z) A2) (wcel (cv z) B2))) (wss A2 B2)
      (@syl5 (wrel A2) (wal (λ z, wi (wcel (cv z) A2) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))))) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wal (λ z, wi (wcel (cv z) A2) (wcel (cv z) B2)))
        (setvar.forget $ λ z : setvar,
          show ⊦ wi (wrel A2) (wal (λ z, wi (wcel (cv z) A2) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))))), from
          @sylg (λ z, wrel A2) (λ z, wi (wcel (cv z) A2) (wcel (cv z) (cxp cvv cvv))) (λ z, wi (wcel (cv z) A2) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))))
            (λ z, @sylbb (wrel A2) (wss A2 (cxp cvv cvv)) (wal (λ z, wi (wcel (cv z) A2) (wcel (cv z) (cxp cvv cvv))))
              (@df_rel A2)
              (@dfss2 A2 (cxp cvv cvv)))
            (λ z, @imim2i (wcel (cv z) (cxp cvv cvv)) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wcel (cv z) A2)
              (@sylbi (wcel (cv z) (cxp cvv cvv)) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv))))) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y)))))
                (@abeq2i (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv))))) (λ z, cxp cvv cvv)
                  (λ z, @eqtri (cxp cvv cvv) (copab (λ x3 y, wa (wcel (cv x3) cvv) (wcel (cv y) cvv))) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv))))))
                    (@df_xp cvv cvv)
                    (@df_opab (λ x3 y, wa (wcel (cv x3) cvv) (wcel (cv y) cvv)))) z)
                (@«2eximi» (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv))) (λ x3 y, wceq (cv z) (cop (cv x3) (cv y)))
                  (λ x3 y, @simpl (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) cvv) (wcel (cv y) cvv)))))) z)
        (@alimdv (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (λ z, wi (wcel (cv z) A2) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y)))))) (λ z, wi (wcel (cv z) A2) (wcel (cv z) B2))
          (λ z, @a2d (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wcel (cv z) A2) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wcel (cv z) B2)
            (@com23 (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wcel (cv z) A2) (wcel (cv z) B2)
              (@sylib (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wal (λ x3, wal (λ y, wi (wceq (cv z) (cop (cv x3) (cv y))) (wi (wcel (cv z) A2) (wcel (cv z) B2))))) (wi (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wi (wcel (cv z) A2) (wcel (cv z) B2)))
                (@«2alimi» (λ x3 y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)) (λ x3 y, wi (wceq (cv z) (cop (cv x3) (cv y))) (wi (wcel (cv z) A2) (wcel (cv z) B2)))
                  (λ x3 y, @biimprcd (wceq (cv z) (cop (cv x3) (cv y))) (wi (wcel (cv z) A2) (wcel (cv z) B2)) (wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
                    (@imbi12d (wceq (cv z) (cop (cv x3) (cv y))) (wcel (cv z) A2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv z) B2) (wcel (cop (cv x3) (cv y)) B2)
                      (@eleq1 (cv z) (cop (cv x3) (cv y)) A2)
                      (@eleq1 (cv z) (cop (cv x3) (cv y)) B2))))
                (@«19_23vv» (λ x3 y, wceq (cv z) (cop (cv x3) (cv y))) (wi (wcel (cv z) A2) (wcel (cv z) B2))))))))
      (@dfss2 A2 B2)))


/-- Extensionality principle for relations. Theorem 3.2(ii) of [Monk1] p. 33. (Contributed by NM,
2-Aug-1994.) -/
theorem eqrel {A2 B2 : «class»} :
  ⊦ wi (wa (wrel A2) (wrel B2)) (wb (wceq A2 B2) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))) :=
@«3bitr4g» (wa (wrel A2) (wrel B2)) (wa (wss A2 B2) (wss B2 A2)) (wa (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) B2) (wcel (cop (cv x3) (cv y)) A2))))) (wceq A2 B2) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))
  (@bi2anan9 (wrel A2) (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wrel B2) (wss B2 A2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) B2) (wcel (cop (cv x3) (cv y)) A2))))
    (@ssrel A2 B2)
    (@ssrel B2 A2))
  (@eqss A2 B2)
  (@«2albiim» (λ x3 y, wcel (cop (cv x3) (cv y)) A2) (λ x3 y, wcel (cop (cv x3) (cv y)) B2))


/-- Inference from subclass principle for relations. (Contributed by NM, 31-Mar-1998.) -/
theorem relssi {A2 B2 : «class»}
  (relssi_1 : ⊦ wrel A2)
  (relssi_2 : ∀ x3 y, ⊦ wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)) :
  ⊦ wss A2 B2 :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wss A2 B2, from
  @mpgbir (λ x3, wss A2 B2) (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))
    (λ x3, @ax_mp (wrel A2) (wb (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))))
      relssi_1
      (@ssrel A2 B2))
    (λ x3, @ax_gen (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
      (λ y, relssi_2 x3 y)) x3


/-- Deduction from subclass principle for relations. (Contributed by NM, 11-Sep-2004.) -/
theorem relssdv {ph : wff} {A2 B2 : «class»}
  (relssdv_1 : ⊦ wi ph (wrel A2))
  (relssdv_2 : ∀ x3 y, ⊦ wi ph (wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))) :
  ⊦ wi ph (wss A2 B2) :=
@mpbird ph (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))
  (@alrimivv ph (λ x3 y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
    (λ x3 y, relssdv_2 x3 y))
  (@syl ph (wrel A2) (wb (wss A2 B2) (wal (λ x3, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))))
    relssdv_1
    (@ssrel A2 B2))


/-- Inference from extensionality principle for relations. (Contributed by FL, 15-Oct-2012.) -/
theorem eqrelriv {A2 B2 : «class»}
  (eqrelriv_1 : ∀ x3 y, ⊦ wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)) :
  ⊦ wi (wa (wrel A2) (wrel B2)) (wceq A2 B2) :=
@mpbiri (wa (wrel A2) (wrel B2)) (wceq A2 B2) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))
  (@gen2 (λ x3 y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
    (λ x3 y, eqrelriv_1 x3 y))
  (@eqrel A2 B2)


/-- Inference from extensionality principle for relations. (Contributed by NM, 17-Mar-1995.) -/
theorem eqrelriiv {A2 B2 : «class»}
  (eqreliiv_1 : ⊦ wrel A2)
  (eqreliiv_2 : ⊦ wrel B2)
  (eqreliiv_3 : ∀ x3 y, ⊦ wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)) :
  ⊦ wceq A2 B2 :=
@mp2an (wrel A2) (wrel B2) (wceq A2 B2)
  eqreliiv_1
  eqreliiv_2
  (@eqrelriv A2 B2
    (λ x3 y, eqreliiv_3 x3 y))


/-- Inference from extensionality principle for relations. (Contributed by NM, 12-Dec-2006.) -/
theorem eqbrriv {A2 B2 : «class»}
  (eqbrriv_1 : ⊦ wrel A2)
  (eqbrriv_2 : ⊦ wrel B2)
  (eqbrriv_3 : ∀ x3 y, ⊦ wb (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv y) B2)) :
  ⊦ wceq A2 B2 :=
@eqrelriiv A2 B2
  eqbrriv_1
  eqbrriv_2
  (λ x3 y, @«3bitr3i» (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv y) B2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)
    (eqbrriv_3 x3 y)
    (@df_br (cv x3) (cv y) A2)
    (@df_br (cv x3) (cv y) B2))


/-- Deduce equality of relations from equivalence of membership. (Contributed by Rodolfo Medina,
10-Oct-2010.) -/
theorem eqrelrdv {ph : wff} {A2 B2 : «class»}
  (eqrelrdv_1 : ⊦ wrel A2)
  (eqrelrdv_2 : ⊦ wrel B2)
  (eqrelrdv_3 : ∀ x3 y, ⊦ wi ph (wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))) :
  ⊦ wi ph (wceq A2 B2) :=
@sylibr ph (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))) (wceq A2 B2)
  (@alrimivv ph (λ x3 y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
    (λ x3 y, eqrelrdv_3 x3 y))
  (@mp2an (wrel A2) (wrel B2) (wb (wceq A2 B2) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)))))
    eqrelrdv_1
    eqrelrdv_2
    (@eqrel A2 B2))


/-- Deduction from extensionality principle for relations. (Contributed by Rodolfo Medina,
10-Oct-2010.) -/
theorem eqbrrdiv {ph : wff} {A2 B2 : «class»}
  (eqbrrdiv_1 : ⊦ wrel A2)
  (eqbrrdiv_2 : ⊦ wrel B2)
  (eqbrrdiv_3 : ∀ x3 y, ⊦ wi ph (wb (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv y) B2))) :
  ⊦ wi ph (wceq A2 B2) :=
@eqrelrdv ph A2 B2
  eqbrrdiv_1
  eqbrrdiv_2
  (λ x3 y, @«3bitr3g» ph (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv y) B2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2)
    (eqbrrdiv_3 x3 y)
    (@df_br (cv x3) (cv y) A2)
    (@df_br (cv x3) (cv y) B2))


/-- A version of ~ eqrelrdv . (Contributed by Rodolfo Medina, 10-Oct-2010.) -/
theorem eqrelrdv2 {ph : wff} {A2 B2 : «class»}
  (eqrelrdv2_1 : ∀ x3 y, ⊦ wi ph (wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))) :
  ⊦ wi (wa (wa (wrel A2) (wrel B2)) ph) (wceq A2 B2) :=
@imp (wa (wrel A2) (wrel B2)) ph (wceq A2 B2)
  (@syl5ibr ph (wceq A2 B2) (wa (wrel A2) (wrel B2)) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))))
    (@alrimivv ph (λ x3 y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) B2))
      (λ x3 y, eqrelrdv2_1 x3 y))
    (@eqrel A2 B2))


/-- A member of a relation is an ordered pair. (Contributed by NM, 17-Sep-2006.) -/
theorem elrel {A2 : «class»} {R : setvar → setvar → «class»}
  (x3 y : setvar) : ⊦ wi (wa (wrel (R x3 y)) (wcel A2 (R x3 y))) (wex (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y))))) :=
@sylib (wa (wrel (R x3 y)) (wcel A2 (R x3 y))) (wcel A2 (cxp cvv cvv)) (wex (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y)))))
  (@sselda (wrel (R x3 y)) (R x3 y) (cxp cvv cvv) A2
    (@biimpi (wrel (R x3 y)) (wss (R x3 y) (cxp cvv cvv))
      (@df_rel (R x3 y))))
  (@elvv A2)


/-- The empty set is a relation. (Contributed by NM, 26-Apr-1998.) -/
theorem rel0 :
  ⊦ wrel c0 :=
@mpbir (wrel c0) (wss c0 (cxp cvv cvv))
  (@«0ss» (cxp cvv cvv))
  (@df_rel c0)


/-- A singleton is a relation iff it is a singleton on an ordered pair. (Contributed by NM,
24-Sep-2013.) (Revised by BJ, 12-Feb-2022.) -/
theorem relsng {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wrel (csn A2)) (wcel A2 (cxp cvv cvv))) :=
@bitr4id (wcel A2 V) (wrel (csn A2)) (wss (csn A2) (cxp cvv cvv)) (wcel A2 (cxp cvv cvv))
  (@df_rel (csn A2))
  (@snssg A2 (cxp cvv cvv) V)


/-- A singleton of an ordered pair is a relation. (Contributed by NM, 17-May-1998.) (Revised by BJ,
12-Feb-2022.) -/
theorem relsnopg {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wrel (csn (cop A2 B2))) :=
@mpbird (wa (wcel A2 V) (wcel B2 W)) (wrel (csn (cop A2 B2))) (wcel (cop A2 B2) (cxp cvv cvv))
  (@opelvvg A2 B2 V W)
  (@mp1i (wcel (cop A2 B2) cvv) (wb (wrel (csn (cop A2 B2))) (wcel (cop A2 B2) (cxp cvv cvv))) (wa (wcel A2 V) (wcel B2 W))
    (@opex A2 B2)
    (@relsng (cop A2 B2) cvv))


/-- A singleton is a relation iff it is an ordered pair. (Contributed by NM, 24-Sep-2013.) -/
theorem relsn {A2 : «class»}
  (relsn_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wrel (csn A2)) (wcel A2 (cxp cvv cvv)) :=
@ax_mp (wcel A2 cvv) (wb (wrel (csn A2)) (wcel A2 (cxp cvv cvv)))
  relsn_1
  (@relsng A2 cvv)


/-- A singleton of an ordered pair is a relation. (Contributed by NM, 17-May-1998.) (Revised by
Mario Carneiro, 26-Apr-2015.) -/
theorem relsnop {A2 B2 : «class»}
  (relsn_1 : ⊦ wcel A2 cvv)
  (relsnop_2 : ⊦ wcel B2 cvv) :
  ⊦ wrel (csn (cop A2 B2)) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wrel (csn (cop A2 B2)))
  relsn_1
  relsnop_2
  (@relsnopg A2 B2 cvv cvv)


/-- A Cartesian product is included in the power of the power of the union of its arguments.
(Contributed by NM, 13-Sep-2006.) -/
theorem xpsspw {A2 B2 : «class»} :
  ⊦ wss (cxp A2 B2) (cpw (cpw (cun A2 B2))) :=
@relssi (cxp A2 B2) (cpw (cpw (cun A2 B2)))
  (@relxp A2 B2)
  (λ x3 y, @sylbi (wcel (cop (cv x3) (cv y)) (cxp A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) (cpw (cpw (cun A2 B2))))
    (@opelxp (cv x3) (cv y) A2 B2)
    (@sylib (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (csn (cv x3)) (cpw (cun A2 B2))) (wcel (cpr (cv x3) (cv y)) (cpw (cun A2 B2)))) (wcel (cop (cv x3) (cv y)) (cpw (cpw (cun A2 B2))))
      (@jca (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (csn (cv x3)) (cpw (cun A2 B2))) (wcel (cpr (cv x3) (cv y)) (cpw (cun A2 B2)))
        (@adantr (wcel (cv x3) A2) (wcel (csn (cv x3)) (cpw (cun A2 B2))) (wcel (cv y) B2)
          (@sylibr (wcel (cv x3) A2) (wss (csn (cv x3)) (cun A2 B2)) (wcel (csn (cv x3)) (cpw (cun A2 B2)))
            (@syl (wcel (cv x3) A2) (wss (csn (cv x3)) A2) (wss (csn (cv x3)) (cun A2 B2))
              (@snssi (cv x3) A2)
              (@ssun3 (csn (cv x3)) A2 B2))
            (@elpw (csn (cv x3)) (cun A2 B2)
              (@snex (cv x3)))))
        (@sylibr (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wss (cpr (cv x3) (cv y)) (cun A2 B2)) (wcel (cpr (cv x3) (cv y)) (cpw (cun A2 B2)))
          (@eqsstrid (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (cpr (cv x3) (cv y)) (cun (csn (cv x3)) (csn (cv y))) (cun A2 B2)
            (@df_pr (cv x3) (cv y))
            (@sylib (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wss (csn (cv x3)) (cun A2 B2)) (wss (csn (cv y)) (cun A2 B2))) (wss (cun (csn (cv x3)) (csn (cv y))) (cun A2 B2))
              (@anim12i (wcel (cv x3) A2) (wss (csn (cv x3)) (cun A2 B2)) (wcel (cv y) B2) (wss (csn (cv y)) (cun A2 B2))
                (@syl (wcel (cv x3) A2) (wss (csn (cv x3)) A2) (wss (csn (cv x3)) (cun A2 B2))
                  (@snssi (cv x3) A2)
                  (@ssun3 (csn (cv x3)) A2 B2))
                (@syl (wcel (cv y) B2) (wss (csn (cv y)) B2) (wss (csn (cv y)) (cun A2 B2))
                  (@snssi (cv y) B2)
                  (@ssun4 (csn (cv y)) B2 A2)))
              (@unss (csn (cv x3)) (csn (cv y)) (cun A2 B2))))
          (@elpw (cpr (cv x3) (cv y)) (cun A2 B2)
            (@zfpair2 x3 y))))
      (@«3bitr4ri» (wcel (cpr (csn (cv x3)) (cpr (cv x3) (cv y))) (cpw (cpw (cun A2 B2)))) (wss (cpr (csn (cv x3)) (cpr (cv x3) (cv y))) (cpw (cun A2 B2))) (wcel (cop (cv x3) (cv y)) (cpw (cpw (cun A2 B2)))) (wa (wcel (csn (cv x3)) (cpw (cun A2 B2))) (wcel (cpr (cv x3) (cv y)) (cpw (cun A2 B2))))
        (@elpw (cpr (csn (cv x3)) (cpr (cv x3) (cv y))) (cpw (cun A2 B2))
          (@prex (csn (cv x3)) (cpr (cv x3) (cv y))))
        (@eleq1i (cop (cv x3) (cv y)) (cpr (csn (cv x3)) (cpr (cv x3) (cv y))) (cpw (cpw (cun A2 B2)))
          (@dfop (cv x3) (cv y)
            (@vex x3)
            (@vex y)))
        (@prss (csn (cv x3)) (cpr (cv x3) (cv y)) (cpw (cun A2 B2))
          (@snex (cv x3))
          (@zfpair2 x3 y)))))


/-- The union of two relations is a relation. Compare Exercise 5 of [TakeutiZaring] p. 25.
(Contributed by NM, 12-Aug-1994.) -/
theorem relun {A2 B2 : «class»} :
  ⊦ wb (wrel (cun A2 B2)) (wa (wrel A2) (wrel B2)) :=
@«3bitr4ri» (wa (wss A2 (cxp cvv cvv)) (wss B2 (cxp cvv cvv))) (wss (cun A2 B2) (cxp cvv cvv)) (wa (wrel A2) (wrel B2)) (wrel (cun A2 B2))
  (@unss A2 B2 (cxp cvv cvv))
  (@anbi12i (wrel A2) (wss A2 (cxp cvv cvv)) (wrel B2) (wss B2 (cxp cvv cvv))
    (@df_rel A2)
    (@df_rel B2))
  (@df_rel (cun A2 B2))


/-- The intersection with a relation is a relation. (Contributed by NM, 16-Aug-1994.) -/
theorem relin1 {A2 B2 : «class»} :
  ⊦ wi (wrel A2) (wrel (cin A2 B2)) :=
@ax_mp (wss (cin A2 B2) A2) (wi (wrel A2) (wrel (cin A2 B2)))
  (@inss1 A2 B2)
  (@relss (cin A2 B2) A2)


/-- The intersection with a relation is a relation. (Contributed by NM, 17-Jan-2006.) -/
theorem relin2 {A2 B2 : «class»} :
  ⊦ wi (wrel B2) (wrel (cin A2 B2)) :=
@ax_mp (wss (cin A2 B2) B2) (wi (wrel B2) (wrel (cin A2 B2)))
  (@inss2 A2 B2)
  (@relss (cin A2 B2) B2)


/-- Intersection with a Cartesian product is a relation. (Contributed by Peter Mazsa, 4-Mar-2019.)
-/
theorem relinxp {A2 B2 R : «class»} :
  ⊦ wrel (cin R (cxp A2 B2)) :=
@ax_mp (wrel (cxp A2 B2)) (wrel (cin R (cxp A2 B2)))
  (@relxp A2 B2)
  (@relin2 R (cxp A2 B2))


/-- A difference cutting down a relation is a relation. (Contributed by NM, 31-Mar-1998.) -/
theorem reldif {A2 B2 : «class»} :
  ⊦ wi (wrel A2) (wrel (cdif A2 B2)) :=
@ax_mp (wss (cdif A2 B2) A2) (wi (wrel A2) (wrel (cdif A2 B2)))
  (@difss A2 B2)
  (@relss (cdif A2 B2) A2)


/-- An indexed union is a relation iff each member of its indexed family is a relation. (Contributed
by NM, 19-Dec-2008.) -/
theorem reliun {A2 B2 : setvar → «class»} :
  ⊦ wb (wrel (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wral (λ x3, wrel (B2 x3)) (λ x3, A2 x3)) :=
@«3bitri» (wrel (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (wrel (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))) (wss (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) (cxp cvv cvv)) (wral (λ x3, wrel (B2 x3)) (λ x3, A2 x3))
  (@releqi (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)))
    (@df_iun (λ x3, A2 x3) (λ x3, B2 x3)))
  (@df_rel (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))))
  (@bitr4i (wss (cab (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3))) (cxp cvv cvv)) (wal (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cxp cvv cvv)))) (wral (λ x3, wrel (B2 x3)) (λ x3, A2 x3))
    (@abss (λ y, wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (cxp cvv cvv))
    (@«3bitri» (wral (λ x3, wrel (B2 x3)) (λ x3, A2 x3)) (wral (λ x3, wal (λ y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv)))) (λ x3, A2 x3)) (wal (λ y, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv))) (λ x3, A2 x3))) (wal (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cxp cvv cvv))))
      (@ralbii (λ x3, wrel (B2 x3)) (λ x3, wal (λ y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv)))) (λ x3, A2 x3)
        (λ x3, @bitri (wrel (B2 x3)) (wss (B2 x3) (cxp cvv cvv)) (wal (λ y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv))))
          (@df_rel (B2 x3))
          (@dfss2 (B2 x3) (cxp cvv cvv))))
      (@ralcom4 (λ x3 y, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv))) (λ x3, A2 x3))
      (@albii (λ y, wral (λ x3, wi (wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv))) (λ x3, A2 x3)) (λ y, wi (wrex (λ x3, wcel (cv y) (B2 x3)) (λ x3, A2 x3)) (wcel (cv y) (cxp cvv cvv)))
        (λ y, @r19_23v (λ x3, wcel (cv y) (B2 x3)) (wcel (cv y) (cxp cvv cvv)) (λ x3, A2 x3)))))


/-- The union of a class is a relation iff any member is a relation. Exercise 6 of [TakeutiZaring]
p. 25 and its converse. (Contributed by NM, 13-Aug-2004.) -/
theorem reluni {A2 : «class»} :
  ⊦ wb (wrel (cuni A2)) (wral (λ x3, wrel (cv x3)) (λ x3, A2)) :=
@bitri (wrel (cuni A2)) (wrel (ciun (λ x3, A2) (λ x3, cv x3))) (wral (λ x3, wrel (cv x3)) (λ x3, A2))
  (@releqi (cuni A2) (ciun (λ x3, A2) (λ x3, cv x3))
    (@uniiun A2))
  (@reliun (λ x3, A2) (λ x3, cv x3))


/-- A class of ordered pairs is a relation. For a version without a disjoint variable condition, but
a longer proof using ~ ax-11 and ~ ax-12 , see ~ relopabi . (Contributed by BJ, 22-Jul-2023.) -/
theorem relopabiv {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (relopabiv_1 : ∀ x3 y, ⊦ wceq (A2 x3 y) (copab (λ x3 y, ph x3 y)))
  (x3 y : setvar) : ⊦ wrel (A2 x3 y) :=
@mpbir (wrel (A2 x3 y)) (wss (A2 x3 y) (cxp cvv cvv))
  (@«3sstr4i» (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, wa (wcel (cv x3) cvv) (wcel (cv y) cvv))) (A2 x3 y) (cxp cvv cvv)
    (@ssopab2i (λ x3 y, ph x3 y) (λ x3 y, wa (wcel (cv x3) cvv) (wcel (cv y) cvv))
      (λ x3 y, @a1i (wa (wcel (cv x3) cvv) (wcel (cv y) cvv)) (ph x3 y)
        (@pm3_2i (wcel (cv x3) cvv) (wcel (cv y) cvv)
          (@vex x3)
          (@vex y))))
    (relopabiv_1 x3 y)
    (@df_xp cvv cvv))
  (@df_rel (A2 x3 y))


/-- A class of ordered pairs is a relation. For a version without a disjoint variable condition, but
using ~ ax-11 and ~ ax-12 , see ~ relopab . (Contributed by SN, 8-Sep-2024.) -/
theorem relopabv {ph : setvar → setvar → wff} :
  ⊦ wrel (copab (λ x3 y, ph x3 y)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel (copab (λ x3 y, ph x3 y)), from
  @relopabiv (λ x3 y, ph x3 y) (λ x3 y, copab (λ x3 y, ph x3 y))
    (λ x3 y, @eqid (copab (λ x3 y, ph x3 y))) x3 y


/-- A class of ordered pairs is a relation. (Contributed by Mario Carneiro, 21-Dec-2013.) Remove
dependency on ~ ax-sep , ~ ax-nul , ~ ax-pr . (Revised by KP, 25-Oct-2021.) -/
theorem relopabi {ph : setvar → setvar → wff} {A2 : setvar → setvar → «class»}
  (relopabi_1 : ∀ x3 y, ⊦ wceq (A2 x3 y) (copab (λ x3 y, ph x3 y)))
  (x3 y : setvar) : ⊦ wrel (A2 x3 y) :=
@mpbir (wrel (A2 x3 y)) (wss (A2 x3 y) (cxp cvv cvv))
  (@ssriv (A2 x3 y) (cxp cvv cvv)
    (λ z, @syl (wcel (cv z) (A2 x3 y)) (wex (λ y, wcel (cv z) (cxp cvv cvv))) (wcel (cv z) (cxp cvv cvv))
      (@«3syl» (wcel (cv z) (A2 x3 y)) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wex (λ y, wex (λ x3, wex (λ u, wceq (cv z) (cop (cv x3) (cv u)))))) (wex (λ y, wcel (cv z) (cxp cvv cvv)))
        (@sylbi (wcel (cv z) (A2 x3 y)) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y)))))
          (@abeq2i (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))) (λ z, A2 x3 y)
            (λ z, @eqtri (A2 x3 y) (copab (λ x3 y, ph x3 y)) (cab (λ z, wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)))))
              (relopabi_1 x3 y)
              (@df_opab (λ x3 y, ph x3 y))) z)
          (@«2eximi» (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y)) (λ x3 y, wceq (cv z) (cop (cv x3) (cv y)))
            (λ x3 y, @simpl (wceq (cv z) (cop (cv x3) (cv y))) (ph x3 y))))
        (@syl (wex (λ x3, wex (λ y, wceq (cv z) (cop (cv x3) (cv y))))) (wex (λ x3, wex (λ y, wex (λ u, wceq (cv z) (cop (cv x3) (cv u)))))) (wex (λ y, wex (λ x3, wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))))
          (@«2eximi» (λ x3 y, wceq (cv z) (cop (cv x3) (cv y))) (λ x3 y, wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))
            (λ x3 y, @eqcoms (wex (λ u, wceq (cv z) (cop (cv x3) (cv u)))) (cop (cv x3) (cv y)) (cv z)
              (@syl (wceq (cop (cv x3) (cv y)) (cv z)) (wex (λ u, wa (wceq (cv y) (cv u)) (wceq (cop (cv x3) (cv y)) (cv z)))) (wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))
                (@mpi (wceq (cop (cv x3) (cv y)) (cv z)) (wex (λ u, wceq (cv y) (cv u))) (wex (λ u, wa (wceq (cv y) (cv u)) (wceq (cop (cv x3) (cv y)) (cv z))))
                  (@ax6evr y)
                  (@eximdv (wceq (cop (cv x3) (cv y)) (cv z)) (λ u, wceq (cv y) (cv u)) (λ u, wa (wceq (cv y) (cv u)) (wceq (cop (cv x3) (cv y)) (cv z)))
                    (λ u, @pm3_21 (wceq (cop (cv x3) (cv y)) (cv z)) (wceq (cv y) (cv u)))))
                (@eximi (λ u, wa (wceq (cv y) (cv u)) (wceq (cop (cv x3) (cv y)) (cv z))) (λ u, wceq (cv z) (cop (cv x3) (cv u)))
                  (λ u, @sylan (wceq (cv y) (cv u)) (wceq (cop (cv x3) (cv y)) (cop (cv x3) (cv u))) (wceq (cop (cv x3) (cv y)) (cv z)) (wceq (cv z) (cop (cv x3) (cv u)))
                    (@opeq2 (cv y) (cv u) (cv x3))
                    (@eqcomd (wa (wceq (cop (cv x3) (cv y)) (cop (cv x3) (cv u))) (wceq (cop (cv x3) (cv y)) (cv z))) (cop (cv x3) (cv u)) (cv z)
                      (@eqtr2 (cop (cv x3) (cv y)) (cop (cv x3) (cv u)) (cv z))))))))
          (@excomim (λ x3 y, wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))))
        (@eximi (λ y, wex (λ x3, wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))) (λ y, wcel (cv z) (cxp cvv cvv))
          (λ y, @sylibr (wex (λ x3, wex (λ u, wceq (cv z) (cop (cv x3) (cv u))))) (wex (λ x3, wex (λ u, wa (wceq (cv z) (cop (cv x3) (cv u))) (wa (wcel (cv x3) cvv) (wcel (cv u) cvv))))) (wcel (cv z) (cxp cvv cvv))
            (@«2eximi» (λ x3 u, wceq (cv z) (cop (cv x3) (cv u))) (λ x3 u, wa (wceq (cv z) (cop (cv x3) (cv u))) (wa (wcel (cv x3) cvv) (wcel (cv u) cvv)))
              (λ x3 u, @jctr (wceq (cv z) (cop (cv x3) (cv u))) (wa (wcel (cv x3) cvv) (wcel (cv u) cvv))
                (@pm3_2i (wcel (cv x3) cvv) (wcel (cv u) cvv)
                  (@vex x3)
                  (@vex u))))
            (@abeq2i (λ z, wex (λ x3, wex (λ u, wa (wceq (cv z) (cop (cv x3) (cv u))) (wa (wcel (cv x3) cvv) (wcel (cv u) cvv))))) (λ z, cxp cvv cvv)
              (λ z, @eqtri (cxp cvv cvv) (copab (λ x3 u, wa (wcel (cv x3) cvv) (wcel (cv u) cvv))) (cab (λ z, wex (λ x3, wex (λ u, wa (wceq (cv z) (cop (cv x3) (cv u))) (wa (wcel (cv x3) cvv) (wcel (cv u) cvv))))))
                (@df_xp cvv cvv)
                (@df_opab (λ x3 u, wa (wcel (cv x3) cvv) (wcel (cv u) cvv)))) z))))
      (@ax5e (wcel (cv z) (cxp cvv cvv)))))
  (@df_rel (A2 x3 y))


/-- A class of ordered pairs is a relation. (Contributed by NM, 8-Mar-1995.) Remove disjoint
variable conditions. (Revised by Alan Sare, 9-Jul-2013.) (Proof shortened by Mario Carneiro,
21-Dec-2013.) -/
theorem relopab {ph : setvar → setvar → wff} :
  ⊦ wrel (copab (λ x3 y, ph x3 y)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel (copab (λ x3 y, ph x3 y)), from
  @relopabi (λ x3 y, ph x3 y) (λ x3 y, copab (λ x3 y, ph x3 y))
    (λ x3 y, @eqid (copab (λ x3 y, ph x3 y))) x3 y


/-- The maps-to notation always describes a binary relation. (Contributed by Scott Fenton,
16-Apr-2012.) -/
theorem mptrel {A2 B2 : setvar → «class»} :
  ⊦ wrel (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel (cmpt (λ x3, A2 x3) (λ x3, B2 x3)), from
  @relopabiv (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (λ x3 y, cmpt (λ x3, A2 x3) (λ x3, B2 x3))
    (λ x3 y, @df_mpt (λ x3, A2 x3) (λ x3, B2 x3)) x3 y


/-- The identity relation is a relation. Part of Exercise 4.12(p) of [Mendelson] p. 235.
(Contributed by NM, 26-Apr-1998.) (Revised by Mario Carneiro, 21-Dec-2013.) -/
theorem reli :
  ⊦ wrel cid :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel cid, from
  @relopabiv (λ x3 y, wceq (cv x3) (cv y)) (λ x3 y, cid)
    (λ x3 y, df_id) x3 y


/-- A relation expressed as an ordered pair abstraction. (Contributed by NM, 11-Dec-2006.) -/
theorem opabid2 {A2 : «class»} :
  ⊦ wi (wrel A2) (wceq (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) A2) :=
@mpbiri (wrel A2) (wceq (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) A2) (wal (λ z, wal (λ w, wb (wcel (cop (cv z) (cv w)) (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2))) (wcel (cop (cv z) (cv w)) A2))))
  (@gen2 (λ z w, wb (wcel (cop (cv z) (cv w)) (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2))) (wcel (cop (cv z) (cv w)) A2))
    (λ z w, @opelopab (λ x3 y, wcel (cop (cv x3) (cv y)) A2) (λ x3 y, wcel (cop (cv z) (cv y)) A2) (wcel (cop (cv z) (cv w)) A2) (cv z) (cv w)
      (@vex z)
      (@vex w)
      (λ x3 y, @eleq1d (wceq (cv x3) (cv z)) (cop (cv x3) (cv y)) (cop (cv z) (cv y)) A2
        (@opeq1 (cv x3) (cv z) (cv y)))
      (λ x3 y, @eleq1d (wceq (cv y) (cv w)) (cop (cv z) (cv y)) (cop (cv z) (cv w)) A2
        (@opeq2 (cv y) (cv w) (cv z)))))
  (@mpan (wrel (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2))) (wrel A2) (wb (wceq (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) A2) (wal (λ z, wal (λ w, wb (wcel (cop (cv z) (cv w)) (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2))) (wcel (cop (cv z) (cv w)) A2)))))
    (@relopabv (λ x3 y, wcel (cop (cv x3) (cv y)) A2))
    (@eqrel (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) A2))


/-- Intersection of two ordered pair class abstractions. (Contributed by NM, 30-Sep-2002.) -/
theorem inopab {ph ps : setvar → setvar → wff} :
  ⊦ wceq (cin (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (copab (λ x3 y, wa (ph x3 y) (ps x3 y))) :=
@eqrelriiv (cin (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))) (copab (λ x3 y, wa (ph x3 y) (ps x3 y)))
  (@ax_mp (wrel (copab (λ x3 y, ph x3 y))) (wrel (cin (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))))
    (@relopabv (λ x3 y, ph x3 y))
    (@relin1 (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y))))
  (@relopabv (λ x3 y, wa (ph x3 y) (ps x3 y)))
  (λ z w, @«3bitr4i» (wa (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ps x3 y)))) (wsb (λ x3, wsb (λ y, wa (ph x3 y) (ps x3 y)) w) z) (wcel (cop (cv z) (cv w)) (cin (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)))) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, wa (ph x3 y) (ps x3 y))))
    (@«3bitr4ri» (wsb (λ x3, wa (wsb (λ y, ph x3 y) w) (wsb (λ y, ps x3 y) w)) z) (wa (wsb (λ x3, wsb (λ y, ph x3 y) w) z) (wsb (λ x3, wsb (λ y, ps x3 y) w) z)) (wsb (λ x3, wsb (λ y, wa (ph x3 y) (ps x3 y)) w) z) (wa (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ps x3 y))))
      (@sban (λ x3, wsb (λ y, ph x3 y) w) (λ x3, wsb (λ y, ps x3 y) w) z)
      (@sbbii (λ x3, wsb (λ y, wa (ph x3 y) (ps x3 y)) w) (λ x3, wa (wsb (λ y, ph x3 y) w) (wsb (λ y, ps x3 y) w)) z
        (λ x3, @sban (λ y, ph x3 y) (λ y, ps x3 y) w))
      (@anbi12i (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y))) (wsb (λ x3, wsb (λ y, ph x3 y) w) z) (wcel (cop (cv z) (cv w)) (copab (λ x3 y, ps x3 y))) (wsb (λ x3, wsb (λ y, ps x3 y) w) z)
        (@vopelopabsb (λ x3 y z w, ph x3 y) z w)
        (@vopelopabsb (λ x3 y z w, ps x3 y) z w)))
    (@elin (cop (cv z) (cv w)) (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, ps x3 y)))
    (@vopelopabsb (λ x3 y z w, wa (ph x3 y) (ps x3 y)) z w))


/-- Intersection of two Cartesian products. Exercise 9 of [TakeutiZaring] p. 25. (Contributed by NM,
3-Aug-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem inxp {A2 B2 C D : «class»} :
  ⊦ wceq (cin (cxp A2 B2) (cxp C D)) (cxp (cin A2 C) (cin B2 D)) :=
@«3eqtr4i» (cin (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (copab (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) D)))) (copab (λ x3 y, wa (wcel (cv x3) (cin A2 C)) (wcel (cv y) (cin B2 D)))) (cin (cxp A2 B2) (cxp C D)) (cxp (cin A2 C) (cin B2 D))
  (@eqtri (cin (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (copab (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) D)))) (copab (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) C) (wcel (cv y) D)))) (copab (λ x3 y, wa (wcel (cv x3) (cin A2 C)) (wcel (cv y) (cin B2 D))))
    (@inopab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2)) (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) D)))
    (@opabbii (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) C) (wcel (cv y) D))) (λ x3 y, wa (wcel (cv x3) (cin A2 C)) (wcel (cv y) (cin B2 D)))
      (λ x3 y, @bitr4i (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wcel (cv x3) C) (wcel (cv y) D))) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wa (wcel (cv y) B2) (wcel (cv y) D))) (wa (wcel (cv x3) (cin A2 C)) (wcel (cv y) (cin B2 D)))
        (@an4 (wcel (cv x3) A2) (wcel (cv y) B2) (wcel (cv x3) C) (wcel (cv y) D))
        (@anbi12i (wcel (cv x3) (cin A2 C)) (wa (wcel (cv x3) A2) (wcel (cv x3) C)) (wcel (cv y) (cin B2 D)) (wa (wcel (cv y) B2) (wcel (cv y) D))
          (@elin (cv x3) A2 C)
          (@elin (cv y) B2 D)))))
  (@ineq12i (cxp A2 B2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2))) (cxp C D) (copab (λ x3 y, wa (wcel (cv x3) C) (wcel (cv y) D)))
    (@df_xp A2 B2)
    (@df_xp C D))
  (@df_xp (cin A2 C) (cin B2 D))


/-- Distributive law for Cartesian product over intersection. Theorem 102 of [Suppes] p. 52.
(Contributed by NM, 26-Sep-2004.) -/
theorem xpindi {A2 B2 C : «class»} :
  ⊦ wceq (cxp A2 (cin B2 C)) (cin (cxp A2 B2) (cxp A2 C)) :=
@eqtr2i (cin (cxp A2 B2) (cxp A2 C)) (cxp (cin A2 A2) (cin B2 C)) (cxp A2 (cin B2 C))
  (@inxp A2 B2 A2 C)
  (@xpeq1i (cin A2 A2) A2 (cin B2 C)
    (@inidm A2))


/-- Distributive law for Cartesian product over intersection. Similar to Theorem 102 of [Suppes] p.
52. (Contributed by NM, 26-Sep-2004.) -/
theorem xpindir {A2 B2 C : «class»} :
  ⊦ wceq (cxp (cin A2 B2) C) (cin (cxp A2 C) (cxp B2 C)) :=
@eqtr2i (cin (cxp A2 C) (cxp B2 C)) (cxp (cin A2 B2) (cin C C)) (cxp (cin A2 B2) C)
  (@inxp A2 C B2 C)
  (@xpeq2i (cin C C) C (cin A2 B2)
    (@inidm C))


/-- Membership in a union of Cartesian products. Analogue of ~ elxp for nonconstant ` B ( x ) ` .
(Contributed by Mario Carneiro, 29-Dec-2014.) -/
theorem eliunxp {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wb (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wex (λ x3, wex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))))) :=
@«3bitr2i» (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y))))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))) (wex (λ x3, wa (wex (λ y, wceq C (cop (cv x3) (cv y)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))))) (wex (λ x3, wex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))))
  (@pm4_71ri (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y)))))
    (@mpan (wrel (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y)))))
      (@mpbir (wrel (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wral (λ x3, wrel (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3))
        (@rgenw (λ x3, wrel (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2 x3)
          (λ x3, @relxp (csn (cv x3)) (B2 x3)))
        (@reliun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))
      (setvar.forget $ λ x3 : setvar,
        setvar.forget $ λ y : setvar,
        show ⊦ wi (wa (wrel (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y))))), from
        @elrel C (λ x3 y, ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))) x3 y)))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wex (λ x3, wa (wex (λ y, wceq C (cop (cv x3) (cv y)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))))) (wa (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y))))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))), from
    @«19_41» (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y)))) (λ x3, wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))
      (@nfel2 C (λ x3, ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))
        (@nfiu1 (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) x3)
  (@exbii (λ x3, wa (wex (λ y, wceq C (cop (cv x3) (cv y)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))) (λ x3, wex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))))
    (λ x3, @bitr3i (wa (wex (λ y, wceq C (cop (cv x3) (cv y)))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))) (wex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))))) (wex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))))
      (@«19_41v» (λ y, wceq C (cop (cv x3) (cv y))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))))
      (@exbii (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))) (λ y, wa (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3))))
        (λ y, @pm5_32i (wceq C (cop (cv x3) (cv y))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))
          (@bitrdi (wceq C (cop (cv x3) (cv y))) (wcel C (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel (cop (cv x3) (cv y)) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (B2 x3)))
            (@eleq1 C (cop (cv x3) (cv y)) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (B2 x3))))
            (@opeliunxp (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, cv y) x3))))))


/-- Membership in a union of Cartesian products. (Contributed by Mario Carneiro, 14-Feb-2015.) -/
theorem opeliunxp2 {A2 : «class»} {B2 : setvar → «class»} {C D E : «class»}
  (opeliunxp2_1 : ∀ x3, ⊦ wi (wceq (cv x3) C) (wceq (B2 x3) E)) :
  ⊦ wb (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel C A2) (wcel D E)) :=
@pm5_21nii (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel C cvv) (wa (wcel C A2) (wcel D E))
  (@sylbir (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wbr C D (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel C cvv)
    (@df_br C D (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3))))
    (@brrelex1i C D (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))
      (@mpbir (wrel (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wral (λ x3, wrel (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2))
        (@rgenw (λ x3, wrel (cxp (csn (cv x3)) (B2 x3))) (λ x3, A2)
          (λ x3, @relxp (csn (cv x3)) (B2 x3)))
        (@reliun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3))))))
  (@adantr (wcel C A2) (wcel C cvv) (wcel D E)
    (@elex C A2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel C cvv) (wb (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel C A2) (wcel D E))), from
    @vtoclg1f (λ x3, wb (wcel (cop (cv x3) D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel (cv x3) A2) (wcel D (B2 x3)))) (λ x3, wb (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel C A2) (wcel D E))) C (λ x3, cvv)
      (@nfbi (λ x3, wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (λ x3, wa (wcel C A2) (wcel D E))
        (@nfel2 (cop C D) (λ x3, ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))
          (@nfiu1 (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3))))
        (@nfv (wa (wcel C A2) (wcel D E))))
      (λ x3, @bibi12d (wceq (cv x3) C) (wcel (cop (cv x3) D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wcel (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))) (wa (wcel (cv x3) A2) (wcel D (B2 x3))) (wa (wcel C A2) (wcel D E))
        (@eleq1d (wceq (cv x3) C) (cop (cv x3) D) (cop C D) (ciun (λ x3, A2) (λ x3, cxp (csn (cv x3)) (B2 x3)))
          (@opeq1 (cv x3) C D))
        (@anbi12d (wceq (cv x3) C) (wcel (cv x3) A2) (wcel C A2) (wcel D (B2 x3)) (wcel D E)
          (@eleq1 (cv x3) C A2)
          (@eleq2d (wceq (cv x3) C) (B2 x3) E D
            (opeliunxp2_1 x3))))
      (λ x3, @opeliunxp (λ x3, A2) (λ x3, B2 x3) (λ x3, D) x3) x3)


/-- Write a double restricted quantification as one universal quantifier. In this version of ~ ralxp
, ` B ( y ) ` is not assumed to be constant. (Contributed by Mario Carneiro, 29-Dec-2014.) -/
theorem raliunxp {ph : setvar → wff} {ps : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»}
  (ralxp_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cop (cv y) (cv z))) (wb (ph x3) (ps y z))) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wral (λ y, wral (λ z, ps y z) (λ z, B2 y)) (λ y, A2)) :=
@«3bitr4i» (wal (λ x3, wi (wcel (cv x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (ph x3))) (wal (λ y, wal (λ z, wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z)))) (wral (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wral (λ y, wral (λ z, ps y z) (λ z, B2 y)) (λ y, A2))
  (@bitri (wal (λ x3, wi (wcel (cv x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (ph x3))) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))) (wal (λ y, wal (λ z, wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z))))
    (@albii (λ x3, wi (wcel (cv x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (ph x3)) (λ x3, wal (λ y, wal (λ z, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))
      (λ x3, @bitr4i (wi (wcel (cv x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (ph x3)) (wi (wex (λ y, wex (λ z, wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))))) (ph x3)) (wal (λ y, wal (λ z, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))
        (@imbi1i (wcel (cv x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wex (λ y, wex (λ z, wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))))) (ph x3)
          (@eliunxp (λ y, A2) (λ y, B2 y) (cv x3)))
        (@«19_23vv» (λ y z, wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))
    (@bitri (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))) (wal (λ y, wal (λ z, wal (λ x3, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))))) (wal (λ y, wal (λ z, wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z))))
      (@alrot3 (λ x3 y z, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3)))
      (@«2albii» (λ y z, wal (λ x3, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))) (λ y z, wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z))
        (λ y z, @bitri (wal (λ x3, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3))) (wal (λ x3, wi (wceq (cv x3) (cop (cv y) (cv z))) (wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ph x3)))) (wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z))
          (@albii (λ x3, wi (wa (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))) (ph x3)) (λ x3, wi (wceq (cv x3) (cop (cv y) (cv z))) (wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ph x3)))
            (λ x3, @impexp (wceq (cv x3) (cop (cv y) (cv z))) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ph x3)))
          (@ceqsalv (λ x3, wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ph x3)) (wi (wa (wcel (cv y) A2) (wcel (cv z) (B2 y))) (ps y z)) (cop (cv y) (cv z))
            (@opex (cv y) (cv z))
            (λ x3, @imbi2d (wceq (cv x3) (cop (cv y) (cv z))) (ph x3) (ps y z) (wa (wcel (cv y) A2) (wcel (cv z) (B2 y)))
              (ralxp_1 x3 y z)))))))
  (@df_ral (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y))))
  (@r2al (λ y z, ps y z) (λ y, A2) (λ y z, B2 y))


/-- Write a double restricted quantification as one universal quantifier. In this version of ~ rexxp
, ` B ( y ) ` is not assumed to be constant. (Contributed by Mario Carneiro, 14-Feb-2015.) -/
theorem rexiunxp {ph : setvar → wff} {ps : setvar → setvar → wff} {A2 : «class»} {B2 : setvar → «class»}
  (ralxp_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cop (cv y) (cv z))) (wb (ph x3) (ps y z))) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wrex (λ y, wrex (λ z, ps y z) (λ z, B2 y)) (λ y, A2)) :=
@«3bitr4i» (wn (wral (λ x3, wn (ph x3)) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y))))) (wn (wral (λ y, wn (wrex (λ z, ps y z) (λ z, B2 y))) (λ y, A2))) (wrex (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wrex (λ y, wrex (λ z, ps y z) (λ z, B2 y)) (λ y, A2))
  (@notbii (wral (λ x3, wn (ph x3)) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wral (λ y, wn (wrex (λ z, ps y z) (λ z, B2 y))) (λ y, A2))
    (@bitri (wral (λ x3, wn (ph x3)) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y)))) (wral (λ y, wral (λ z, wn (ps y z)) (λ z, B2 y)) (λ y, A2)) (wral (λ y, wn (wrex (λ z, ps y z) (λ z, B2 y))) (λ y, A2))
      (@raliunxp (λ x3, wn (ph x3)) (λ y z, wn (ps y z)) A2 (λ y, B2 y)
        (λ x3 y z, @notbid (wceq (cv x3) (cop (cv y) (cv z))) (ph x3) (ps y z)
          (ralxp_1 x3 y z)))
      (@ralbii (λ y, wral (λ z, wn (ps y z)) (λ z, B2 y)) (λ y, wn (wrex (λ z, ps y z) (λ z, B2 y))) (λ y, A2)
        (λ y, @ralnex (λ z, ps y z) (λ z, B2 y)))))
  (@dfrex2 (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) (B2 y))))
  (@dfrex2 (λ y, wrex (λ z, ps y z) (λ z, B2 y)) (λ y, A2))


/-- Universal quantification restricted to a Cartesian product is equivalent to a double restricted
quantification. The hypothesis specifies an implicit substitution. (Contributed by NM, 7-Feb-2004.)
(Revised by Mario Carneiro, 29-Dec-2014.) -/
theorem ralxp {ph : setvar → wff} {ps : setvar → setvar → wff} {A2 B2 : «class»}
  (ralxp_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cop (cv y) (cv z))) (wb (ph x3) (ps y z))) :
  ⊦ wb (wral (λ x3, ph x3) (λ x3, cxp A2 B2)) (wral (λ y, wral (λ z, ps y z) (λ z, B2)) (λ y, A2)) :=
@bitr3i (wral (λ x3, ph x3) (λ x3, cxp A2 B2)) (wral (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) B2))) (wral (λ y, wral (λ z, ps y z) (λ z, B2)) (λ y, A2))
  (@raleqi (λ x3, ph x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) B2)) (cxp A2 B2)
    (@iunxpconst A2 B2))
  (@raliunxp (λ x3, ph x3) (λ y z, ps y z) A2 (λ y, B2)
    (λ x3 y z, ralxp_1 x3 y z))


/-- Existential quantification restricted to a Cartesian product is equivalent to a double
restricted quantification. (Contributed by NM, 11-Nov-1995.) (Revised by Mario Carneiro,
14-Feb-2015.) -/
theorem rexxp {ph : setvar → wff} {ps : setvar → setvar → wff} {A2 B2 : «class»}
  (ralxp_1 : ∀ x3 y z, ⊦ wi (wceq (cv x3) (cop (cv y) (cv z))) (wb (ph x3) (ps y z))) :
  ⊦ wb (wrex (λ x3, ph x3) (λ x3, cxp A2 B2)) (wrex (λ y, wrex (λ z, ps y z) (λ z, B2)) (λ y, A2)) :=
@bitr3i (wrex (λ x3, ph x3) (λ x3, cxp A2 B2)) (wrex (λ x3, ph x3) (λ x3, ciun (λ y, A2) (λ y, cxp (csn (cv y)) B2))) (wrex (λ y, wrex (λ z, ps y z) (λ z, B2)) (λ y, A2))
  (@rexeqi (λ x3, ph x3) (ciun (λ y, A2) (λ y, cxp (csn (cv y)) B2)) (cxp A2 B2)
    (@iunxpconst A2 B2))
  (@rexiunxp (λ x3, ph x3) (λ y z, ps y z) A2 (λ y, B2)
    (λ x3 y z, ralxp_1 x3 y z))


/-- Deduce equality of a relation and an ordered-pair class abstraction. Compare ~ abbi2dv .
(Contributed by NM, 24-Feb-2014.) -/
theorem opabbi2dv {ph : wff} {ps : setvar → setvar → wff} {A2 : «class»}
  (opabbi2dv_1 : ⊦ wrel A2)
  (opabbi2dv_3 : ∀ x3 y, ⊦ wi ph (wb (wcel (cop (cv x3) (cv y)) A2) (ps x3 y))) :
  ⊦ wi ph (wceq A2 (copab (λ x3 y, ps x3 y))) :=
@eqtr3id ph A2 (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) (copab (λ x3 y, ps x3 y))
  (@ax_mp (wrel A2) (wceq (copab (λ x3 y, wcel (cop (cv x3) (cv y)) A2)) A2)
    opabbi2dv_1
    (@opabid2 A2))
  (@opabbidv ph (λ x3 y, wcel (cop (cv x3) (cv y)) A2) (λ x3 y, ps x3 y)
    (λ x3 y, opabbi2dv_3 x3 y))


/-- For sets, the identity relation is the same as equality. (Contributed by NM, 30-Apr-2004.)
(Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem ideqg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wb (wbr A2 B2 cid) (wceq A2 B2)) :=
@pm5_21nd (wcel B2 V) (wbr A2 B2 cid) (wceq A2 B2) (wa (wcel A2 cvv) (wcel B2 V))
  (@anim12ci (wcel B2 V) (wcel B2 V) (wbr A2 B2 cid) (wcel A2 cvv)
    (@id (wcel B2 V))
    (@brrelex1i A2 B2 cid
      reli))
  (@jca (wa (wcel B2 V) (wceq A2 B2)) (wcel A2 cvv) (wcel B2 V)
    (@elexd (wa (wcel B2 V) (wceq A2 B2)) A2 V
      (@biimparc (wceq A2 B2) (wcel A2 V) (wcel B2 V)
        (@eleq1 A2 B2 V)))
    (@simpl (wcel B2 V) (wceq A2 B2)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 V)) (wb (wbr A2 B2 cid) (wceq A2 B2)), from
    @brabg (λ x3 y, wceq (cv x3) (cv y)) (λ x3 y, wceq A2 (cv y)) (wceq A2 B2) A2 B2 (λ x3 y, cvv) (λ x3 y, V) (λ x3 y, cid)
      (λ x3 y, @eqeq1 (cv x3) A2 (cv y))
      (λ x3 y, @eqeq2 (cv y) B2 A2)
      (λ x3 y, df_id) x3 y)


/-- For sets, the identity relation is the same as equality. (Contributed by NM, 13-Aug-1995.) -/
theorem ideq {A2 B2 : «class»}
  (ideq_1 : ⊦ wcel B2 cvv) :
  ⊦ wb (wbr A2 B2 cid) (wceq A2 B2) :=
@ax_mp (wcel B2 cvv) (wb (wbr A2 B2 cid) (wceq A2 B2))
  ideq_1
  (@ideqg A2 B2 cvv)


/-- A set is identical to itself. (Contributed by NM, 28-May-2008.) (Proof shortened by Andrew
Salmon, 27-Aug-2011.) -/
theorem ididg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wbr A2 A2 cid) :=
@mpbiri (wcel A2 V) (wbr A2 A2 cid) (wceq A2 A2)
  (@eqid A2)
  (@ideqg A2 A2 V)


/-- Subclass theorem for composition. (Contributed by FL, 30-Dec-2010.) -/
theorem coss1 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (ccom A2 C) (ccom B2 C)) :=
@«3sstr4g» (wss A2 B2) (copab (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) A2)))) (copab (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) B2)))) (ccom A2 C) (ccom B2 C)
  (@ssopab2dv (wss A2 B2) (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) A2))) (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) B2)))
    (λ x3 z, @eximdv (wss A2 B2) (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) A2)) (λ y, wa (wbr (cv x3) (cv y) C) (wbr (cv y) (cv z) B2))
      (λ y, @anim2d (wss A2 B2) (wbr (cv y) (cv z) A2) (wbr (cv y) (cv z) B2) (wbr (cv x3) (cv y) C)
        (@ssbr A2 B2 (cv y) (cv z)))))
  (@df_co A2 C)
  (@df_co B2 C)


/-- Subclass theorem for composition. (Contributed by NM, 5-Apr-2013.) -/
theorem coss2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (ccom C A2) (ccom C B2)) :=
@«3sstr4g» (wss A2 B2) (copab (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) A2) (wbr (cv y) (cv z) C)))) (copab (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) C)))) (ccom C A2) (ccom C B2)
  (@ssopab2dv (wss A2 B2) (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) A2) (wbr (cv y) (cv z) C))) (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) C)))
    (λ x3 z, @eximdv (wss A2 B2) (λ y, wa (wbr (cv x3) (cv y) A2) (wbr (cv y) (cv z) C)) (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) C))
      (λ y, @anim1d (wss A2 B2) (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) C)
        (@ssbr A2 B2 (cv x3) (cv y)))))
  (@df_co C A2)
  (@df_co C B2)


/-- Equality theorem for composition of two classes. (Contributed by NM, 3-Jan-1997.) -/
theorem coeq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ccom A2 C) (ccom B2 C)) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wss (ccom A2 C) (ccom B2 C)) (wss (ccom B2 C) (ccom A2 C))) (wceq A2 B2) (wceq (ccom A2 C) (ccom B2 C))
  (@anim12i (wss A2 B2) (wss (ccom A2 C) (ccom B2 C)) (wss B2 A2) (wss (ccom B2 C) (ccom A2 C))
    (@coss1 A2 B2 C)
    (@coss1 B2 A2 C))
  (@eqss A2 B2)
  (@eqss (ccom A2 C) (ccom B2 C))


/-- Equality theorem for composition of two classes. (Contributed by NM, 3-Jan-1997.) -/
theorem coeq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ccom C A2) (ccom C B2)) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wss (ccom C A2) (ccom C B2)) (wss (ccom C B2) (ccom C A2))) (wceq A2 B2) (wceq (ccom C A2) (ccom C B2))
  (@anim12i (wss A2 B2) (wss (ccom C A2) (ccom C B2)) (wss B2 A2) (wss (ccom C B2) (ccom C A2))
    (@coss2 A2 B2 C)
    (@coss2 B2 A2 C))
  (@eqss A2 B2)
  (@eqss (ccom C A2) (ccom C B2))


/-- Equality inference for composition of two classes. (Contributed by NM, 16-Nov-2000.) -/
theorem coeq1i {A2 B2 C : «class»}
  (coeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (ccom A2 C) (ccom B2 C) :=
@ax_mp (wceq A2 B2) (wceq (ccom A2 C) (ccom B2 C))
  coeq1i_1
  (@coeq1 A2 B2 C)


/-- Equality inference for composition of two classes. (Contributed by NM, 16-Nov-2000.) -/
theorem coeq2i {A2 B2 C : «class»}
  (coeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (ccom C A2) (ccom C B2) :=
@ax_mp (wceq A2 B2) (wceq (ccom C A2) (ccom C B2))
  coeq1i_1
  (@coeq2 A2 B2 C)


/-- Equality deduction for composition of two classes. (Contributed by NM, 16-Nov-2000.) -/
theorem coeq1d {ph : wff} {A2 B2 C : «class»}
  (coeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ccom A2 C) (ccom B2 C)) :=
@syl ph (wceq A2 B2) (wceq (ccom A2 C) (ccom B2 C))
  coeq1d_1
  (@coeq1 A2 B2 C)


/-- Equality deduction for composition of two classes. (Contributed by NM, 16-Nov-2000.) -/
theorem coeq2d {ph : wff} {A2 B2 C : «class»}
  (coeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ccom C A2) (ccom C B2)) :=
@syl ph (wceq A2 B2) (wceq (ccom C A2) (ccom C B2))
  coeq1d_1
  (@coeq2 A2 B2 C)


/-- Equality deduction for composition of two classes. (Contributed by FL, 7-Jun-2012.) -/
theorem coeq12d {ph : wff} {A2 B2 C D : «class»}
  (coeq12d_1 : ⊦ wi ph (wceq A2 B2))
  (coeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (ccom A2 C) (ccom B2 D)) :=
@eqtrd ph (ccom A2 C) (ccom B2 C) (ccom B2 D)
  (@coeq1d ph A2 B2 C
    coeq12d_1)
  (@coeq2d ph C D B2
    coeq12d_2)


/-- Bound-variable hypothesis builder for function value. (Contributed by NM, 1-Sep-1999.) -/
theorem nfco {A2 B2 : setvar → «class»}
  (nfco_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfco_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, ccom (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, ccom (A2 x3) (B2 x3)) (λ x3, copab (λ y z, wex (λ w, wa (wbr (cv y) (cv w) (B2 x3)) (wbr (cv w) (cv z) (A2 x3)))))
  (λ x3, @df_co (A2 x3) (B2 x3))
  (@nfopab (λ y z x3, wex (λ w, wa (wbr (cv y) (cv w) (B2 x3)) (wbr (cv w) (cv z) (A2 x3))))
    (λ y z, @nfex (λ x3 w, wa (wbr (cv y) (cv w) (B2 x3)) (wbr (cv w) (cv z) (A2 x3)))
      (λ w, @nfan (λ x3, wbr (cv y) (cv w) (B2 x3)) (λ x3, wbr (cv w) (cv z) (A2 x3))
        (@nfbr (λ x3, cv y) (λ x3, cv w) (λ x3, B2 x3)
          (@nfcv (cv y))
          nfco_2
          (@nfcv (cv w)))
        (@nfbr (λ x3, cv w) (λ x3, cv z) (λ x3, A2 x3)
          (@nfcv (cv w))
          nfco_1
          (@nfcv (cv z))))))


/-- Ordered pair membership in a composition. (Contributed by NM, 24-Feb-2015.) -/
theorem brcog {A2 B2 C D : «class»} {V W : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wb (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C)))) :=
setvar.forget $ λ y : setvar,
  setvar.forget $ λ z : setvar,
  show ⊦ wi (wa (wcel A2 (V x3)) (wcel B2 (W x3))) (wb (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C)))), from
  @brabga (λ y z, wex (λ x3, wa (wbr (cv y) (cv x3) D) (wbr (cv x3) (cv z) C))) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C))) A2 B2 (λ y z, ccom C D) (λ y z, V x3) (λ y z, W x3)
    (λ y z, @exbidv (wa (wceq (cv y) A2) (wceq (cv z) B2)) (λ x3, wa (wbr (cv y) (cv x3) D) (wbr (cv x3) (cv z) C)) (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C))
      (λ x3, @bi2anan9 (wceq (cv y) A2) (wbr (cv y) (cv x3) D) (wbr A2 (cv x3) D) (wceq (cv z) B2) (wbr (cv x3) (cv z) C) (wbr (cv x3) B2 C)
        (@breq1 (cv y) A2 (cv x3) D)
        (@breq2 (cv z) B2 (cv x3) C)))
    (λ y z, @df_co C D) y z


/-- Binary relation on a composition. (Contributed by NM, 21-Sep-2004.) (Revised by Mario Carneiro,
24-Feb-2015.) -/
theorem brco {A2 B2 C D : «class»}
  (opelco_1 : ⊦ wcel A2 cvv)
  (opelco_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C))) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C))))
  opelco_1
  opelco_2
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wb (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C)))), from
    @brcog A2 B2 C D (λ x3, cvv) (λ x3, cvv) x3)


/-- Ordered pair membership in a composition. (Contributed by NM, 27-Dec-1996.) (Revised by Mario
Carneiro, 24-Feb-2015.) -/
theorem opelco {A2 B2 C D : «class»}
  (opelco_1 : ⊦ wcel A2 cvv)
  (opelco_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wcel (cop A2 B2) (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C))) :=
@bitr3i (wcel (cop A2 B2) (ccom C D)) (wbr A2 B2 (ccom C D)) (wex (λ x3, wa (wbr A2 (cv x3) D) (wbr (cv x3) B2 C)))
  (@df_br A2 B2 (ccom C D))
  (@brco A2 B2 C D
    opelco_1
    opelco_2)


/-- Subset theorem for converse. (Contributed by NM, 22-Mar-1998.) (Proof shortened by Kyle Wyonch,
27-Apr-2021.) -/
theorem cnvss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (ccnv A2) (ccnv B2)) :=
@«3sstr4g» (wss A2 B2) (copab (λ x3 y, wbr (cv y) (cv x3) A2)) (copab (λ x3 y, wbr (cv y) (cv x3) B2)) (ccnv A2) (ccnv B2)
  (@ssopab2dv (wss A2 B2) (λ x3 y, wbr (cv y) (cv x3) A2) (λ x3 y, wbr (cv y) (cv x3) B2)
    (λ x3 y, @ssbr A2 B2 (cv y) (cv x3)))
  (@df_cnv A2)
  (@df_cnv B2)


/-- Equality theorem for converse relation. (Contributed by NM, 13-Aug-1995.) -/
theorem cnveq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (ccnv A2) (ccnv B2)) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wss (ccnv A2) (ccnv B2)) (wss (ccnv B2) (ccnv A2))) (wceq A2 B2) (wceq (ccnv A2) (ccnv B2))
  (@anim12i (wss A2 B2) (wss (ccnv A2) (ccnv B2)) (wss B2 A2) (wss (ccnv B2) (ccnv A2))
    (@cnvss A2 B2)
    (@cnvss B2 A2))
  (@eqss A2 B2)
  (@eqss (ccnv A2) (ccnv B2))


/-- Equality inference for converse relation. (Contributed by NM, 23-Dec-2008.) -/
theorem cnveqi {A2 B2 : «class»}
  (cnveqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (ccnv A2) (ccnv B2) :=
@ax_mp (wceq A2 B2) (wceq (ccnv A2) (ccnv B2))
  cnveqi_1
  (@cnveq A2 B2)


/-- Equality deduction for converse relation. (Contributed by NM, 6-Dec-2013.) -/
theorem cnveqd {ph : wff} {A2 B2 : «class»}
  (cnveqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (ccnv A2) (ccnv B2)) :=
@syl ph (wceq A2 B2) (wceq (ccnv A2) (ccnv B2))
  cnveqd_1
  (@cnveq A2 B2)


/-- Bound-variable hypothesis builder for converse relation. (Contributed by NM, 31-Jan-2004.)
(Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem nfcnv {A2 : setvar → «class»}
  (nfcnv_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, ccnv (A2 x3)) :=
@nfcxfr (λ x3, ccnv (A2 x3)) (λ x3, copab (λ y z, wbr (cv z) (cv y) (A2 x3)))
  (λ x3, @df_cnv (A2 x3))
  (@nfopab (λ y z x3, wbr (cv z) (cv y) (A2 x3))
    (λ y z, @nfbr (λ x3, cv z) (λ x3, cv y) (λ x3, A2 x3)
      (@nfcv (cv z))
      nfcnv_1
      (@nfcv (cv y))))


/-- The converse of a binary relation swaps arguments. Theorem 11 of [Suppes] p. 61. (Contributed by
NM, 10-Oct-2005.) -/
theorem brcnvg {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R)), from
  @brabg (λ x3 y, wbr (cv y) (cv x3) R) (λ x3 y, wbr (cv y) A2 R) (wbr B2 A2 R) A2 B2 (λ x3 y, C) (λ x3 y, D) (λ x3 y, ccnv R)
    (λ x3 y, @breq2 (cv x3) A2 (cv y) R)
    (λ x3 y, @breq1 (cv y) B2 A2 R)
    (λ x3 y, @df_cnv R) x3 y


/-- Ordered-pair membership in converse relation. (Contributed by NM, 13-May-1999.) (Proof shortened
by Andrew Salmon, 27-Aug-2011.) -/
theorem opelcnvg {A2 B2 C D R : «class»} :
  ⊦ wi (wa (wcel A2 C) (wcel B2 D)) (wb (wcel (cop A2 B2) (ccnv R)) (wcel (cop B2 A2) R)) :=
@«3bitr3g» (wa (wcel A2 C) (wcel B2 D)) (wbr A2 B2 (ccnv R)) (wbr B2 A2 R) (wcel (cop A2 B2) (ccnv R)) (wcel (cop B2 A2) R)
  (@brcnvg A2 B2 C D R)
  (@df_br A2 B2 (ccnv R))
  (@df_br B2 A2 R)


/-- Ordered-pair membership in converse relation. (Contributed by NM, 13-Aug-1995.) -/
theorem opelcnv {A2 B2 R : «class»}
  (opelcnv_1 : ⊦ wcel A2 cvv)
  (opelcnv_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wcel (cop A2 B2) (ccnv R)) (wcel (cop B2 A2) R) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wcel (cop A2 B2) (ccnv R)) (wcel (cop B2 A2) R))
  opelcnv_1
  opelcnv_2
  (@opelcnvg A2 B2 cvv cvv R)


/-- The converse of a binary relation swaps arguments. Theorem 11 of [Suppes] p. 61. (Contributed by
NM, 13-Aug-1995.) -/
theorem brcnv {A2 B2 R : «class»}
  (opelcnv_1 : ⊦ wcel A2 cvv)
  (opelcnv_2 : ⊦ wcel B2 cvv) :
  ⊦ wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R))
  opelcnv_1
  opelcnv_2
  (@brcnvg A2 B2 cvv cvv R)


/-- Distributive law of converse over class composition. Theorem 26 of [Suppes] p. 64. (Contributed
by NM, 19-Mar-1998.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvco {A2 B2 : «class»} :
  ⊦ wceq (ccnv (ccom A2 B2)) (ccom (ccnv B2) (ccnv A2)) :=
@«3eqtr4i» (copab (λ y x3, wbr (cv x3) (cv y) (ccom A2 B2))) (copab (λ y x3, wex (λ z, wa (wbr (cv y) (cv z) (ccnv A2)) (wbr (cv z) (cv x3) (ccnv B2))))) (ccnv (ccom A2 B2)) (ccom (ccnv B2) (ccnv A2))
  (@opabbii (λ y x3, wbr (cv x3) (cv y) (ccom A2 B2)) (λ y x3, wex (λ z, wa (wbr (cv y) (cv z) (ccnv A2)) (wbr (cv z) (cv x3) (ccnv B2))))
    (λ y x3, @«3bitr4i» (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wex (λ z, wa (wbr (cv z) (cv y) A2) (wbr (cv x3) (cv z) B2))) (wbr (cv x3) (cv y) (ccom A2 B2)) (wex (λ z, wa (wbr (cv y) (cv z) (ccnv A2)) (wbr (cv z) (cv x3) (ccnv B2))))
      (@exancom (λ z, wbr (cv x3) (cv z) B2) (λ z, wbr (cv z) (cv y) A2))
      (@brco (cv x3) (cv y) A2 B2
        (@vex x3)
        (@vex y))
      (@exbii (λ z, wa (wbr (cv y) (cv z) (ccnv A2)) (wbr (cv z) (cv x3) (ccnv B2))) (λ z, wa (wbr (cv z) (cv y) A2) (wbr (cv x3) (cv z) B2))
        (λ z, @anbi12i (wbr (cv y) (cv z) (ccnv A2)) (wbr (cv z) (cv y) A2) (wbr (cv z) (cv x3) (ccnv B2)) (wbr (cv x3) (cv z) B2)
          (@brcnv (cv y) (cv z) A2
            (@vex y)
            (@vex z))
          (@brcnv (cv z) (cv x3) B2
            (@vex z)
            (@vex x3))))))
  (@df_cnv (ccom A2 B2))
  (@df_co (ccnv B2) (ccnv A2))


/-- Alternate definition of range. Definition 4 of [Suppes] p. 60. (Contributed by NM, 27-Dec-1996.)
-/
theorem dfrn2 {A2 : «class»} :
  ⊦ wceq (crn A2) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))) :=
@«3eqtri» (crn A2) (cdm (ccnv A2)) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) (ccnv A2)))) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2)))
  (@df_rn A2)
  (@df_dm (ccnv A2))
  (@abbii (λ y, wex (λ x3, wbr (cv y) (cv x3) (ccnv A2))) (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))
    (λ y, @exbii (λ x3, wbr (cv y) (cv x3) (ccnv A2)) (λ x3, wbr (cv x3) (cv y) A2)
      (λ x3, @brcnv (cv y) (cv x3) A2
        (@vex y)
        (@vex x3))))


/-- Alternate definition of range. Definition 6.5(2) of [TakeutiZaring] p. 24. (Contributed by NM,
28-Dec-1996.) -/
theorem dfrn3 {A2 : «class»} :
  ⊦ wceq (crn A2) (cab (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))) :=
@eqtri (crn A2) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))) (cab (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2)))
  (@dfrn2 A2)
  (@abbii (λ y, wex (λ x3, wbr (cv x3) (cv y) A2)) (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))
    (λ y, @exbii (λ x3, wbr (cv x3) (cv y) A2) (λ x3, wcel (cop (cv x3) (cv y)) A2)
      (λ x3, @df_br (cv x3) (cv y) A2)))


/-- Membership in a range. (Contributed by Scott Fenton, 2-Feb-2011.) -/
theorem elrn2g {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2))) :=
setvar.forget $ λ w : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2))), from
  @elab2gw (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) B2)) (λ w, wex (λ x3, wcel (cop (cv x3) (cv w)) B2)) (λ y, wex (λ x3, wcel (cop (cv x3) A2) B2)) (λ y, A2) (λ y w, crn B2) (λ y w, V x3)
    (λ y w, @exbidv (wceq (cv y) (cv w)) (λ x3, wcel (cop (cv x3) (cv y)) B2) (λ x3, wcel (cop (cv x3) (cv w)) B2)
      (λ x3, @eleq1d (wceq (cv y) (cv w)) (cop (cv x3) (cv y)) (cop (cv x3) (cv w)) B2
        (@opeq2 (cv y) (cv w) (cv x3))))
    (λ y w, @exbidv (wceq (cv w) A2) (λ x3, wcel (cop (cv x3) (cv w)) B2) (λ x3, wcel (cop (cv x3) A2) B2)
      (λ x3, @eleq1d (wceq (cv w) A2) (cop (cv x3) (cv w)) (cop (cv x3) A2) B2
        (@opeq2 (cv w) A2 (cv x3))))
    (λ y w, @dfrn3 B2) y w


/-- Membership in a range. (Contributed by Scott Fenton, 2-Feb-2011.) -/
theorem elrng {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (crn B2)) (wex (λ x3, wbr (cv x3) A2 B2))) :=
@bitr4di (wcel A2 (V x3)) (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2)) (wex (λ x3, wbr (cv x3) A2 B2))
  (@elrn2g A2 B2 (λ x3, V x3) x3)
  (@exbii (λ x3, wbr (cv x3) A2 B2) (λ x3, wcel (cop (cv x3) A2) B2)
    (λ x3, @df_br (cv x3) A2 B2))


/-- Membership in a range. (Contributed by NM, 10-Jul-1994.) -/
theorem elrn2 {A2 B2 : «class»}
  (elrn_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2)))
  elrn_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (crn B2)) (wex (λ x3, wcel (cop (cv x3) A2) B2))), from
    @elrn2g A2 B2 (λ x3, cvv) x3)


/-- Membership in a range. (Contributed by NM, 2-Apr-2004.) -/
theorem elrn {A2 B2 : «class»}
  (elrn_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (crn B2)) (wex (λ x3, wbr (cv x3) A2 B2)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (crn B2)) (wex (λ x3, wbr (cv x3) A2 B2)))
  elrn_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (crn B2)) (wex (λ x3, wbr (cv x3) A2 B2))), from
    @elrng A2 B2 (λ x3, cvv) x3)


/-- Alternate definition of domain. (Contributed by NM, 28-Dec-1996.) -/
theorem dfdm4 {A2 : «class»} :
  ⊦ wceq (cdm A2) (crn (ccnv A2)) :=
@«3eqtr4ri» (cab (λ x3, wex (λ y, wbr (cv y) (cv x3) (ccnv A2)))) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))) (crn (ccnv A2)) (cdm A2)
  (@abbii (λ x3, wex (λ y, wbr (cv y) (cv x3) (ccnv A2))) (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))
    (λ x3, @exbii (λ y, wbr (cv y) (cv x3) (ccnv A2)) (λ y, wbr (cv x3) (cv y) A2)
      (λ y, @brcnv (cv y) (cv x3) A2
        (@vex y)
        (@vex x3))))
  (@dfrn2 (ccnv A2))
  (@df_dm A2)


/-- Definition of domain, using bound-variable hypotheses instead of distinct variable conditions.
(Contributed by NM, 8-Mar-1995.) (Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem dfdmf {A2 : setvar → setvar → «class»}
  (dfdmf_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (dfdmf_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (x3 y : setvar) : ⊦ wceq (cdm (A2 x3 y)) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) (A2 x3 y)))) :=
@«3eqtri» (cdm (A2 x3 y)) (cab (λ w, wex (λ v, wbr (cv w) (cv v) (A2 x3 y)))) (cab (λ w, wex (λ y, wbr (cv w) (cv y) (A2 x3 y)))) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) (A2 x3 y))))
  (@df_dm (A2 x3 y))
  (@abbii (λ w, wex (λ v, wbr (cv w) (cv v) (A2 x3 y))) (λ w, wex (λ y, wbr (cv w) (cv y) (A2 x3 y)))
    (λ w, setvar.forget $ λ v : setvar,
      show ⊦ wb (wex (λ v, wbr (cv w) (cv v) (A2 x3 y))) (wex (λ y, wbr (cv w) (cv y) (A2 x3 y))), from
      @cbvexv1 (λ v y, wbr (cv w) (cv v) (A2 x3 y)) (λ v y, wbr (cv w) (cv y) (A2 x3 y))
        (λ v, @nfbr (λ y, cv w) (λ y, cv v) (λ y, A2 x3 y)
          (@nfcv (cv w))
          (dfdmf_2 x3)
          (@nfcv (cv v)))
        (λ y, @nfv (wbr (cv w) (cv y) (A2 x3 y)))
        (λ v y, @breq2 (cv v) (cv y) (cv w) (A2 x3 y)) v y))
  (setvar.forget $ λ w : setvar,
    show ⊦ wceq (cab (λ w, wex (λ y, wbr (cv w) (cv y) (A2 x3 y)))) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) (A2 x3 y)))), from
    @cbvabw (λ w x3, wex (λ y, wbr (cv w) (cv y) (A2 x3 y))) (λ w x3, wex (λ y, wbr (cv x3) (cv y) (A2 x3 y)))
      (λ w, @nfex (λ x3 y, wbr (cv w) (cv y) (A2 x3 y))
        (λ y, @nfbr (λ x3, cv w) (λ x3, cv y) (λ x3, A2 x3 y)
          (@nfcv (cv w))
          (dfdmf_1 y)
          (@nfcv (cv y))))
      (λ x3, @nfv (wex (λ y, wbr (cv x3) (cv y) (A2 x3 y))))
      (λ w x3, @exbidv (wceq (cv w) (cv x3)) (λ y, wbr (cv w) (cv y) (A2 x3 y)) (λ y, wbr (cv x3) (cv y) (A2 x3 y))
        (λ y, @breq1 (cv w) (cv x3) (cv y) (A2 x3 y))) w x3)


/-- Domain membership. Theorem 4 of [Suppes] p. 59. (Contributed by Mario Carneiro, 9-Jul-2014.) -/
theorem eldmg {A2 B2 : «class»} {V : setvar → «class»}
  (y : setvar) : ⊦ wi (wcel A2 (V y)) (wb (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2))) :=
setvar.forget $ λ w : setvar,
  setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wcel A2 (V y)) (wb (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2))), from
  @elab2gw (λ x3, wex (λ y, wbr (cv x3) (cv y) B2)) (λ w, wex (λ y, wbr (cv w) (cv y) B2)) (λ x3, wex (λ y, wbr A2 (cv y) B2)) (λ x3, A2) (λ x3 w, cdm B2) (λ x3 w, V y)
    (λ x3 w, @exbidv (wceq (cv x3) (cv w)) (λ y, wbr (cv x3) (cv y) B2) (λ y, wbr (cv w) (cv y) B2)
      (λ y, @breq1 (cv x3) (cv w) (cv y) B2))
    (λ x3 w, @exbidv (wceq (cv w) A2) (λ y, wbr (cv w) (cv y) B2) (λ y, wbr A2 (cv y) B2)
      (λ y, @breq1 (cv w) A2 (cv y) B2))
    (λ x3 w, @df_dm B2) x3 w


/-- Domain membership. Theorem 4 of [Suppes] p. 59. (Contributed by NM, 27-Jan-1997.) (Revised by
Mario Carneiro, 9-Jul-2014.) -/
theorem eldm2g {A2 B2 : «class»} {V : setvar → «class»}
  (y : setvar) : ⊦ wi (wcel A2 (V y)) (wb (wcel A2 (cdm B2)) (wex (λ y, wcel (cop A2 (cv y)) B2))) :=
@bitrdi (wcel A2 (V y)) (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2)) (wex (λ y, wcel (cop A2 (cv y)) B2))
  (@eldmg A2 B2 (λ y, V y) y)
  (@exbii (λ y, wbr A2 (cv y) B2) (λ y, wcel (cop A2 (cv y)) B2)
    (λ y, @df_br A2 (cv y) B2))


/-- Membership in a domain. Theorem 4 of [Suppes] p. 59. (Contributed by NM, 2-Apr-2004.) -/
theorem eldm {A2 B2 : «class»}
  (eldm_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2)))
  eldm_1
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cdm B2)) (wex (λ y, wbr A2 (cv y) B2))), from
    @eldmg A2 B2 (λ y, cvv) y)


/-- Membership in a domain. Theorem 4 of [Suppes] p. 59. (Contributed by NM, 1-Aug-1994.) -/
theorem eldm2 {A2 B2 : «class»}
  (eldm_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cdm B2)) (wex (λ y, wcel (cop A2 (cv y)) B2)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cdm B2)) (wex (λ y, wcel (cop A2 (cv y)) B2)))
  eldm_1
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cdm B2)) (wex (λ y, wcel (cop A2 (cv y)) B2))), from
    @eldm2g A2 B2 (λ y, cvv) y)


/-- Subset theorem for domain. (Contributed by NM, 11-Aug-1994.) -/
theorem dmss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (cdm A2) (cdm B2)) :=
@ssrdv (wss A2 B2) (cdm A2) (cdm B2)
  (λ x3, @«3imtr4g» (wss A2 B2) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wex (λ y, wcel (cop (cv x3) (cv y)) B2)) (wcel (cv x3) (cdm A2)) (wcel (cv x3) (cdm B2))
    (@eximdv (wss A2 B2) (λ y, wcel (cop (cv x3) (cv y)) A2) (λ y, wcel (cop (cv x3) (cv y)) B2)
      (λ y, @ssel A2 B2 (cop (cv x3) (cv y))))
    (@eldm2 (cv x3) A2
      (@vex x3))
    (@eldm2 (cv x3) B2
      (@vex x3)))


/-- Equality theorem for domain. (Contributed by NM, 11-Aug-1994.) -/
theorem dmeq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cdm A2) (cdm B2)) :=
@«3imtr4i» (wa (wss A2 B2) (wss B2 A2)) (wa (wss (cdm A2) (cdm B2)) (wss (cdm B2) (cdm A2))) (wceq A2 B2) (wceq (cdm A2) (cdm B2))
  (@anim12i (wss A2 B2) (wss (cdm A2) (cdm B2)) (wss B2 A2) (wss (cdm B2) (cdm A2))
    (@dmss A2 B2)
    (@dmss B2 A2))
  (@eqss A2 B2)
  (@eqss (cdm A2) (cdm B2))


/-- Equality inference for domain. (Contributed by NM, 4-Mar-2004.) -/
theorem dmeqi {A2 B2 : «class»}
  (dmeqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cdm A2) (cdm B2) :=
@ax_mp (wceq A2 B2) (wceq (cdm A2) (cdm B2))
  dmeqi_1
  (@dmeq A2 B2)


/-- Equality deduction for domain. (Contributed by NM, 4-Mar-2004.) -/
theorem dmeqd {ph : wff} {A2 B2 : «class»}
  (dmeqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cdm A2) (cdm B2)) :=
@syl ph (wceq A2 B2) (wceq (cdm A2) (cdm B2))
  dmeqd_1
  (@dmeq A2 B2)


/-- Membership of first of an ordered pair in a domain. (Contributed by NM, 30-Jul-1995.) -/
theorem opeldm {A2 B2 C : «class»}
  (opeldm_1 : ⊦ wcel A2 cvv)
  (opeldm_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wcel (cop A2 B2) C) (wcel A2 (cdm C)) :=
@sylibr (wcel (cop A2 B2) C) (wex (λ y, wcel (cop A2 (cv y)) C)) (wcel A2 (cdm C))
  (@spcev (λ y, wcel (cop A2 (cv y)) C) (wcel (cop A2 B2) C) B2
    opeldm_2
    (λ y, @eleq1d (wceq (cv y) B2) (cop A2 (cv y)) (cop A2 B2) C
      (@opeq2 (cv y) B2 A2)))
  (@eldm2 A2 C
    opeldm_1)


/-- Membership of first of a binary relation in a domain. (Contributed by NM, 30-Jul-1995.) -/
theorem breldm {A2 B2 R : «class»}
  (opeldm_1 : ⊦ wcel A2 cvv)
  (opeldm_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wbr A2 B2 R) (wcel A2 (cdm R)) :=
@sylbi (wbr A2 B2 R) (wcel (cop A2 B2) R) (wcel A2 (cdm R))
  (@df_br A2 B2 R)
  (@opeldm A2 B2 R
    opeldm_1
    opeldm_2)


/-- Membership of first of a binary relation in a domain. (Contributed by NM, 21-Mar-2007.) -/
theorem breldmg {A2 B2 C D R : «class»} :
  ⊦ wi (w3a (wcel A2 C) (wcel B2 D) (wbr A2 B2 R)) (wcel A2 (cdm R)) :=
@«3impib» (wcel A2 C) (wcel B2 D) (wbr A2 B2 R) (wcel A2 (cdm R))
  (@syl5ibr (wa (wcel B2 D) (wbr A2 B2 R)) (wcel A2 (cdm R)) (wcel A2 C) (wex (λ x3, wbr A2 (cv x3) R))
    (@imp (wcel B2 D) (wbr A2 B2 R) (wex (λ x3, wbr A2 (cv x3) R))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel B2 D) (wi (wbr A2 B2 R) (wex (λ x3, wbr A2 (cv x3) R))), from
        @spcegv (λ x3, wbr A2 (cv x3) R) (wbr A2 B2 R) B2 (λ x3, D)
          (λ x3, @breq2 (cv x3) B2 A2 R) x3))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel A2 C) (wb (wcel A2 (cdm R)) (wex (λ x3, wbr A2 (cv x3) R))), from
      @eldmg A2 R (λ x3, C) x3))


/-- The domain of a union is the union of domains. Exercise 56(a) of [Enderton] p. 65. (Contributed
by NM, 12-Aug-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dmun {A2 B2 : «class»} :
  ⊦ wceq (cdm (cun A2 B2)) (cun (cdm A2) (cdm B2)) :=
@«3eqtr4ri» (cun (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) A2))) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) B2)))) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) (cun A2 B2)))) (cun (cdm A2) (cdm B2)) (cdm (cun A2 B2))
  (@eqtri (cun (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) A2))) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) B2)))) (cab (λ y, wo (wex (λ x3, wbr (cv y) (cv x3) A2)) (wex (λ x3, wbr (cv y) (cv x3) B2)))) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) (cun A2 B2))))
    (@unab (λ y, wex (λ x3, wbr (cv y) (cv x3) A2)) (λ y, wex (λ x3, wbr (cv y) (cv x3) B2)))
    (@abbii (λ y, wo (wex (λ x3, wbr (cv y) (cv x3) A2)) (wex (λ x3, wbr (cv y) (cv x3) B2))) (λ y, wex (λ x3, wbr (cv y) (cv x3) (cun A2 B2)))
      (λ y, @bitr2i (wex (λ x3, wbr (cv y) (cv x3) (cun A2 B2))) (wex (λ x3, wo (wbr (cv y) (cv x3) A2) (wbr (cv y) (cv x3) B2))) (wo (wex (λ x3, wbr (cv y) (cv x3) A2)) (wex (λ x3, wbr (cv y) (cv x3) B2)))
        (@exbii (λ x3, wbr (cv y) (cv x3) (cun A2 B2)) (λ x3, wo (wbr (cv y) (cv x3) A2) (wbr (cv y) (cv x3) B2))
          (λ x3, @brun (cv y) (cv x3) A2 B2))
        (@«19_43» (λ x3, wbr (cv y) (cv x3) A2) (λ x3, wbr (cv y) (cv x3) B2)))))
  (@uneq12i (cdm A2) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) A2))) (cdm B2) (cab (λ y, wex (λ x3, wbr (cv y) (cv x3) B2)))
    (@df_dm A2)
    (@df_dm B2))
  (@df_dm (cun A2 B2))


/-- The domain of an indexed union. (Contributed by Mario Carneiro, 26-Apr-2016.) -/
theorem dmiun {A2 B2 : setvar → «class»} :
  ⊦ wceq (cdm (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (ciun (λ x3, A2 x3) (λ x3, cdm (B2 x3))) :=
@eqriv (cdm (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (ciun (λ x3, A2 x3) (λ x3, cdm (B2 x3)))
  (λ y, @«3bitr4i» (wex (λ z, wcel (cop (cv y) (cv z)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)))) (wrex (λ x3, wcel (cv y) (cdm (B2 x3))) (λ x3, A2 x3)) (wcel (cv y) (cdm (ciun (λ x3, A2 x3) (λ x3, B2 x3)))) (wcel (cv y) (ciun (λ x3, A2 x3) (λ x3, cdm (B2 x3))))
    (@«3bitr4ri» (wrex (λ x3, wex (λ z, wcel (cop (cv y) (cv z)) (B2 x3))) (λ x3, A2 x3)) (wex (λ z, wrex (λ x3, wcel (cop (cv y) (cv z)) (B2 x3)) (λ x3, A2 x3))) (wrex (λ x3, wcel (cv y) (cdm (B2 x3))) (λ x3, A2 x3)) (wex (λ z, wcel (cop (cv y) (cv z)) (ciun (λ x3, A2 x3) (λ x3, B2 x3))))
      (@rexcom4 (λ x3 z, wcel (cop (cv y) (cv z)) (B2 x3)) (λ x3, A2 x3))
      (@rexbii (λ x3, wcel (cv y) (cdm (B2 x3))) (λ x3, wex (λ z, wcel (cop (cv y) (cv z)) (B2 x3))) (λ x3, A2 x3)
        (λ x3, @eldm2 (cv y) (B2 x3)
          (@vex y)))
      (@exbii (λ z, wcel (cop (cv y) (cv z)) (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (λ z, wrex (λ x3, wcel (cop (cv y) (cv z)) (B2 x3)) (λ x3, A2 x3))
        (λ z, @eliun (cop (cv y) (cv z)) (λ x3, A2 x3) (λ x3, B2 x3))))
    (@eldm2 (cv y) (ciun (λ x3, A2 x3) (λ x3, B2 x3))
      (@vex y))
    (@eliun (cv y) (λ x3, A2 x3) (λ x3, cdm (B2 x3))))


/-- The domain of a union. Part of Exercise 8 of [Enderton] p. 41. (Contributed by NM, 3-Feb-2004.)
-/
theorem dmuni {A2 : «class»} :
  ⊦ wceq (cdm (cuni A2)) (ciun (λ x3, A2) (λ x3, cdm (cv x3))) :=
@eqriv (cdm (cuni A2)) (ciun (λ x3, A2) (λ x3, cdm (cv x3)))
  (λ y, @«3bitr4i» (wex (λ z, wcel (cop (cv y) (cv z)) (cuni A2))) (wrex (λ x3, wcel (cv y) (cdm (cv x3))) (λ x3, A2)) (wcel (cv y) (cdm (cuni A2))) (wcel (cv y) (ciun (λ x3, A2) (λ x3, cdm (cv x3))))
    (@«3bitr4i» (wex (λ z, wex (λ x3, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2)))) (wex (λ x3, wa (wcel (cv x3) A2) (wcel (cv y) (cdm (cv x3))))) (wex (λ z, wcel (cop (cv y) (cv z)) (cuni A2))) (wrex (λ x3, wcel (cv y) (cdm (cv x3))) (λ x3, A2))
      (@bitri (wex (λ z, wex (λ x3, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2)))) (wex (λ x3, wex (λ z, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2)))) (wex (λ x3, wa (wcel (cv x3) A2) (wcel (cv y) (cdm (cv x3)))))
        (@excom (λ z x3, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2)))
        (@exbii (λ x3, wex (λ z, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2))) (λ x3, wa (wcel (cv x3) A2) (wcel (cv y) (cdm (cv x3))))
          (λ x3, @«3bitr4i» (wa (wex (λ z, wcel (cop (cv y) (cv z)) (cv x3))) (wcel (cv x3) A2)) (wa (wcel (cv x3) A2) (wex (λ z, wcel (cop (cv y) (cv z)) (cv x3)))) (wex (λ z, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2))) (wa (wcel (cv x3) A2) (wcel (cv y) (cdm (cv x3))))
            (@ancom (wex (λ z, wcel (cop (cv y) (cv z)) (cv x3))) (wcel (cv x3) A2))
            (@«19_41v» (λ z, wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2))
            (@anbi2i (wcel (cv y) (cdm (cv x3))) (wex (λ z, wcel (cop (cv y) (cv z)) (cv x3))) (wcel (cv x3) A2)
              (@eldm2 (cv y) (cv x3)
                (@vex y))))))
      (@exbii (λ z, wcel (cop (cv y) (cv z)) (cuni A2)) (λ z, wex (λ x3, wa (wcel (cop (cv y) (cv z)) (cv x3)) (wcel (cv x3) A2)))
        (λ z, @eluni (cop (cv y) (cv z)) A2))
      (@df_rex (λ x3, wcel (cv y) (cdm (cv x3))) (λ x3, A2)))
    (@eldm2 (cv y) (cuni A2)
      (@vex y))
    (@eliun (cv y) (λ x3, A2) (λ x3, cdm (cv x3))))


/-- The domain of a class of ordered pairs. (Contributed by NM, 16-May-1995.) (Revised by Mario
Carneiro, 4-Dec-2016.) -/
theorem dmopab {ph : setvar → setvar → wff} :
  ⊦ wceq (cdm (copab (λ x3 y, ph x3 y))) (cab (λ x3, wex (λ y, ph x3 y))) :=
@eqtri (cdm (copab (λ x3 y, ph x3 y))) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))))) (cab (λ x3, wex (λ y, ph x3 y)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wceq (cdm (copab (λ x3 y, ph x3 y))) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))))), from
    @dfdmf (λ x3 y, copab (λ x3 y, ph x3 y))
      (λ y, @nfopab1 (λ x3 y, ph x3 y))
      (λ x3, @nfopab2 (λ x3 y, ph x3 y)) x3 y)
  (@abbii (λ x3, wex (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))) (λ x3, wex (λ y, ph x3 y))
    (λ x3, @exbii (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (λ y, ph x3 y)
      (λ y, @bitri (wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (ph x3 y)
        (@df_br (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))
        (@opabidw (λ x3 y, ph x3 y) x3 y))))


/-- Upper bound for the domain of a restricted class of ordered pairs. (Contributed by NM,
31-Jan-2004.) -/
theorem dmopabss {ph : setvar → setvar → wff} {A2 : «class»} :
  ⊦ wss (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2 :=
@eqsstri (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (cab (λ x3, wex (λ y, wa (wcel (cv x3) A2) (ph x3 y)))) A2
  (@dmopab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
  (@eqsstri (cab (λ x3, wex (λ y, wa (wcel (cv x3) A2) (ph x3 y)))) (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))) A2
    (@abbii (λ x3, wex (λ y, wa (wcel (cv x3) A2) (ph x3 y))) (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))
      (λ x3, @«19_42v» (wcel (cv x3) A2) (λ y, ph x3 y)))
    (@ssab2 (λ x3, wex (λ y, ph x3 y)) A2))


/-- The domain of a restricted class of ordered pairs. (Contributed by NM, 31-Jan-2004.) -/
theorem dmopab3 {ph : setvar → setvar → wff} {A2 : «class»} :
  ⊦ wb (wral (λ x3, wex (λ y, ph x3 y)) (λ x3, A2)) (wceq (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2) :=
@«3bitri» (wral (λ x3, wex (λ y, ph x3 y)) (λ x3, A2)) (wal (λ x3, wi (wcel (cv x3) A2) (wex (λ y, ph x3 y)))) (wal (λ x3, wb (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wex (λ y, ph x3 y))))) (wceq (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2)
  (@df_ral (λ x3, wex (λ y, ph x3 y)) (λ x3, A2))
  (@albii (λ x3, wi (wcel (cv x3) A2) (wex (λ y, ph x3 y))) (λ x3, wb (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wex (λ y, ph x3 y))))
    (λ x3, @pm4_71 (wcel (cv x3) A2) (wex (λ y, ph x3 y))))
  (@«3bitr2ri» (wceq (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2) (wceq (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))) A2) (wceq A2 (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y))))) (wal (λ x3, wb (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))))
    (@eqeq1i (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))) A2
      (@eqtri (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (cab (λ x3, wex (λ y, wa (wcel (cv x3) A2) (ph x3 y)))) (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y))))
        (@dmopab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
        (@abbii (λ x3, wex (λ y, wa (wcel (cv x3) A2) (ph x3 y))) (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))
          (λ x3, @«19_42v» (wcel (cv x3) A2) (λ y, ph x3 y)))))
    (@eqcom A2 (cab (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y)))))
    (@abeq2 (λ x3, wa (wcel (cv x3) A2) (wex (λ y, ph x3 y))) A2))


/-- The domain of the empty set is empty. Part of Theorem 3.8(v) of [Monk1] p. 36. (Contributed by
NM, 4-Jul-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dm0 :
  ⊦ wceq (cdm c0) c0 :=
@nel0 (cdm c0)
  (λ x3, @mtbir (wcel (cv x3) (cdm c0)) (wex (λ y, wcel (cop (cv x3) (cv y)) c0))
    (@nex (λ y, wcel (cop (cv x3) (cv y)) c0)
      (λ y, @noel (cop (cv x3) (cv y))))
    (@eldm2 (cv x3) c0
      (@vex x3)))


/-- The domain of the identity relation is the universe. (Contributed by NM, 30-Apr-1998.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dmi :
  ⊦ wceq (cdm cid) cvv :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (cdm cid) cvv, from
  @mpgbir (λ x3, wceq (cdm cid) cvv) (λ x3, wcel (cv x3) (cdm cid))
    (λ x3, @eqv (cdm cid))
    (λ x3, @mpbir (wcel (cv x3) (cdm cid)) (wex (λ y, wbr (cv x3) (cv y) cid))
      (@mpbir (wex (λ y, wbr (cv x3) (cv y) cid)) (wex (λ y, wceq (cv y) (cv x3)))
        (@ax6ev x3)
        (@exbii (λ y, wbr (cv x3) (cv y) cid) (λ y, wceq (cv y) (cv x3))
          (λ y, @bitri (wbr (cv x3) (cv y) cid) (wceq (cv x3) (cv y)) (wceq (cv y) (cv x3))
            (@ideq (cv x3) (cv y)
              (@vex y))
            (@equcom x3 y))))
      (@eldm (cv x3) cid
        (@vex x3))) x3


/-- An empty domain is equivalent to an empty range. (Contributed by NM, 21-May-1998.) -/
theorem dm0rn0 {A2 : «class»} :
  ⊦ wb (wceq (cdm A2) c0) (wceq (crn A2) c0) :=
@«3bitr4i» (wceq (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))) c0) (wceq (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))) c0) (wceq (cdm A2) c0) (wceq (crn A2) c0)
  (@«3bitr4i» (wal (λ x3, wb (wex (λ y, wbr (cv x3) (cv y) A2)) (wcel (cv x3) c0))) (wal (λ y, wb (wex (λ x3, wbr (cv x3) (cv y) A2)) (wcel (cv y) c0))) (wceq (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))) c0) (wceq (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))) c0)
    (@«3bitr3i» (wal (λ x3, wn (wex (λ y, wbr (cv x3) (cv y) A2)))) (wal (λ y, wn (wex (λ x3, wbr (cv x3) (cv y) A2)))) (wal (λ x3, wb (wex (λ y, wbr (cv x3) (cv y) A2)) (wcel (cv x3) c0))) (wal (λ y, wb (wex (λ x3, wbr (cv x3) (cv y) A2)) (wcel (cv y) c0)))
      (@bitr4i (wal (λ x3, wn (wex (λ y, wbr (cv x3) (cv y) A2)))) (wn (wex (λ y, wex (λ x3, wbr (cv x3) (cv y) A2)))) (wal (λ y, wn (wex (λ x3, wbr (cv x3) (cv y) A2))))
        (@xchbinx (wal (λ x3, wn (wex (λ y, wbr (cv x3) (cv y) A2)))) (wex (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))) (wex (λ y, wex (λ x3, wbr (cv x3) (cv y) A2)))
          (@alnex (λ x3, wex (λ y, wbr (cv x3) (cv y) A2)))
          (@excom (λ x3 y, wbr (cv x3) (cv y) A2)))
        (@alnex (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))))
      (@albii (λ x3, wn (wex (λ y, wbr (cv x3) (cv y) A2))) (λ x3, wb (wex (λ y, wbr (cv x3) (cv y) A2)) (wcel (cv x3) c0))
        (λ x3, @nbn (wcel (cv x3) c0) (wex (λ y, wbr (cv x3) (cv y) A2))
          (@noel (cv x3))))
      (@albii (λ y, wn (wex (λ x3, wbr (cv x3) (cv y) A2))) (λ y, wb (wex (λ x3, wbr (cv x3) (cv y) A2)) (wcel (cv y) c0))
        (λ y, @nbn (wcel (cv y) c0) (wex (λ x3, wbr (cv x3) (cv y) A2))
          (@noel (cv y)))))
    (@abeq1 (λ x3, wex (λ y, wbr (cv x3) (cv y) A2)) c0)
    (@abeq1 (λ y, wex (λ x3, wbr (cv x3) (cv y) A2)) c0))
  (@eqeq1i (cdm A2) (cab (λ x3, wex (λ y, wbr (cv x3) (cv y) A2))) c0
    (@df_dm A2))
  (@eqeq1i (crn A2) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) A2))) c0
    (@dfrn2 A2))


/-- The range of the empty set is empty. Part of Theorem 3.8(v) of [Monk1] p. 36. (Contributed by
NM, 4-Jul-1994.) -/
theorem rn0 :
  ⊦ wceq (crn c0) c0 :=
@mpbi (wceq (cdm c0) c0) (wceq (crn c0) c0)
  dm0
  (@dm0rn0 c0)


/-- A relation is empty iff its domain is empty. (Contributed by NM, 15-Sep-2004.) -/
theorem reldm0 {A2 : «class»} :
  ⊦ wi (wrel A2) (wb (wceq A2 c0) (wceq (cdm A2) c0)) :=
@bitrdi (wrel A2) (wceq A2 c0) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0)))) (wceq (cdm A2) c0)
  (@mpan2 (wrel A2) (wrel c0) (wb (wceq A2 c0) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0)))))
    rel0
    (@eqrel A2 c0))
  (@bitr2i (wceq (cdm A2) c0) (wal (λ x3, wn (wcel (cv x3) (cdm A2)))) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0))))
    (@eq0 (cdm A2))
    (@albii (λ x3, wn (wcel (cv x3) (cdm A2))) (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0)))
      (λ x3, @bitr3i (wn (wcel (cv x3) (cdm A2))) (wal (λ y, wn (wcel (cop (cv x3) (cv y)) A2))) (wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0)))
        (@xchbinxr (wal (λ y, wn (wcel (cop (cv x3) (cv y)) A2))) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wcel (cv x3) (cdm A2))
          (@alnex (λ y, wcel (cop (cv x3) (cv y)) A2))
          (@eldm2 (cv x3) A2
            (@vex x3)))
        (@albii (λ y, wn (wcel (cop (cv x3) (cv y)) A2)) (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) c0))
          (λ y, @nbn (wcel (cop (cv x3) (cv y)) c0) (wcel (cop (cv x3) (cv y)) A2)
            (@noel (cop (cv x3) (cv y))))))))


/-- The domain of a Cartesian product. Part of Theorem 3.13(x) of [Monk1] p. 37. (Contributed by NM,
28-Jul-1995.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dmxp {A2 B2 : «class»} :
  ⊦ wi (wne B2 c0) (wceq (cdm (cxp A2 B2)) A2) :=
@syl5eq (wne B2 c0) (cdm (cxp A2 B2)) (cdm (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))) A2
  (@dmeqi (cxp A2 B2) (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))
    (@df_xp A2 B2))
  (@sylib (wne B2 c0) (wral (λ y, wex (λ x3, wcel (cv x3) B2)) (λ y, A2)) (wceq (cdm (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))) A2)
    (@ralrimivw (wne B2 c0) (λ y, wex (λ x3, wcel (cv x3) B2)) (λ y, A2)
      (λ y, @biimpi (wne B2 c0) (wex (λ x3, wcel (cv x3) B2))
        (@n0 B2)))
    (@dmopab3 (λ y x3, wcel (cv x3) B2) A2))


/-- The domain of a Cartesian square. (Contributed by NM, 28-Jul-1995.) -/
theorem dmxpid {A2 : «class»} :
  ⊦ wceq (cdm (cxp A2 A2)) A2 :=
@pm2_61ine (wceq (cdm (cxp A2 A2)) A2) A2 c0
  (@«3eqtr4a» (wceq A2 c0) (cdm c0) c0 (cdm (cxp A2 A2)) A2
    dm0
    (@dmeqd (wceq A2 c0) (cxp A2 A2) c0
      (@eqtrdi (wceq A2 c0) (cxp A2 A2) (cxp c0 A2) c0
        (@xpeq1 A2 c0 A2)
        (@«0xp» A2)))
    (@id (wceq A2 c0)))
  (@dmxp A2 A2)


/-- The domain of the double converse of a class is equal to its domain (even when that class in not
a relation, in which case ~ dfrel2 gives another proof). (Contributed by NM, 8-Apr-2007.) -/
theorem dmcnvcnv {A2 : «class»} :
  ⊦ wceq (cdm (ccnv (ccnv A2))) (cdm A2) :=
@eqtr2i (cdm A2) (crn (ccnv A2)) (cdm (ccnv (ccnv A2)))
  (@dfdm4 A2)
  (@df_rn (ccnv A2))


/-- The range of the double converse of a class is equal to its range (even when that class in not a
relation). (Contributed by NM, 8-Apr-2007.) -/
theorem rncnvcnv {A2 : «class»} :
  ⊦ wceq (crn (ccnv (ccnv A2))) (crn A2) :=
@eqtr2i (crn A2) (cdm (ccnv A2)) (crn (ccnv (ccnv A2)))
  (@df_rn A2)
  (@dfdm4 (ccnv A2))


/-- The first member of an ordered pair in a relation belongs to the domain of the relation (see ~
op1stb ). (Contributed by NM, 28-Jul-2004.) -/
theorem elreldm {A2 B2 : «class»} :
  ⊦ wi (wa (wrel A2) (wcel B2 A2)) (wcel (cint (cint B2)) (cdm A2)) :=
@imp (wrel A2) (wcel B2 A2) (wcel (cint (cint B2)) (cdm A2))
  (@syli (wcel B2 A2) (wrel A2) (wex (λ x3, wex (λ y, wceq B2 (cop (cv x3) (cv y))))) (wcel (cint (cint B2)) (cdm A2))
    (@syl6ib (wrel A2) (wcel B2 A2) (wcel B2 (cxp cvv cvv)) (wex (λ x3, wex (λ y, wceq B2 (cop (cv x3) (cv y)))))
      (@sylbi (wrel A2) (wss A2 (cxp cvv cvv)) (wi (wcel B2 A2) (wcel B2 (cxp cvv cvv)))
        (@df_rel A2)
        (@ssel A2 (cxp cvv cvv) B2))
      (@elvv B2))
    (@exlimivv (λ x3 y, wceq B2 (cop (cv x3) (cv y))) (wi (wcel B2 A2) (wcel (cint (cint B2)) (cdm A2)))
      (λ x3 y, @sylibrd (wceq B2 (cop (cv x3) (cv y))) (wcel B2 A2) (wcel (cv x3) (cdm A2)) (wcel (cint (cint B2)) (cdm A2))
        (@syl6bi (wceq B2 (cop (cv x3) (cv y))) (wcel B2 A2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))
          (@eleq1 B2 (cop (cv x3) (cv y)) A2)
          (@opeldm (cv x3) (cv y) A2
            (@vex x3)
            (@vex y)))
        (@eleq1d (wceq B2 (cop (cv x3) (cv y))) (cint (cint B2)) (cv x3) (cdm A2)
          (@eqtrdi (wceq B2 (cop (cv x3) (cv y))) (cint (cint B2)) (cint (cint (cop (cv x3) (cv y)))) (cv x3)
            (@inteqd (wceq B2 (cop (cv x3) (cv y))) (cint B2) (cint (cop (cv x3) (cv y)))
              (@inteq B2 (cop (cv x3) (cv y))))
            (@op1stb (cv x3) (cv y)
              (@vex x3)
              (@vex y)))))))


/-- Equality theorem for range. (Contributed by NM, 29-Dec-1996.) -/
theorem rneq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (crn A2) (crn B2)) :=
@«3eqtr4g» (wceq A2 B2) (cdm (ccnv A2)) (cdm (ccnv B2)) (crn A2) (crn B2)
  (@dmeqd (wceq A2 B2) (ccnv A2) (ccnv B2)
    (@cnveq A2 B2))
  (@df_rn A2)
  (@df_rn B2)


/-- Equality inference for range. (Contributed by NM, 4-Mar-2004.) -/
theorem rneqi {A2 B2 : «class»}
  (rneqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (crn A2) (crn B2) :=
@ax_mp (wceq A2 B2) (wceq (crn A2) (crn B2))
  rneqi_1
  (@rneq A2 B2)


/-- Equality deduction for range. (Contributed by NM, 4-Mar-2004.) -/
theorem rneqd {ph : wff} {A2 B2 : «class»}
  (rneqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (crn A2) (crn B2)) :=
@syl ph (wceq A2 B2) (wceq (crn A2) (crn B2))
  rneqd_1
  (@rneq A2 B2)


/-- Subset theorem for range. (Contributed by NM, 22-Mar-1998.) -/
theorem rnss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wss (crn A2) (crn B2)) :=
@«3sstr4g» (wss A2 B2) (cdm (ccnv A2)) (cdm (ccnv B2)) (crn A2) (crn B2)
  (@syl (wss A2 B2) (wss (ccnv A2) (ccnv B2)) (wss (cdm (ccnv A2)) (cdm (ccnv B2)))
    (@cnvss A2 B2)
    (@dmss (ccnv A2) (ccnv B2)))
  (@df_rn A2)
  (@df_rn B2)


/-- Subclass inference for range. (Contributed by Peter Mazsa, 24-Sep-2022.) -/
theorem rnssi {A2 B2 : «class»}
  (rnssi_1 : ⊦ wss A2 B2) :
  ⊦ wss (crn A2) (crn B2) :=
@ax_mp (wss A2 B2) (wss (crn A2) (crn B2))
  rnssi_1
  (@rnss A2 B2)


/-- The second argument of a binary relation belongs to its range. (Contributed by NM, 29-Jun-2008.)
-/
theorem brelrng {A2 B2 C F G : «class»} :
  ⊦ wi (w3a (wcel A2 F) (wcel B2 G) (wbr A2 B2 C)) (wcel B2 (crn C)) :=
@eleqtrrdi (w3a (wcel A2 F) (wcel B2 G) (wbr A2 B2 C)) B2 (cdm (ccnv C)) (crn C)
  (@syld3an3 (wcel A2 F) (wcel B2 G) (wbr A2 B2 C) (wbr B2 A2 (ccnv C)) (wcel B2 (cdm (ccnv C)))
    (@biimp3ar (wcel A2 F) (wcel B2 G) (wbr B2 A2 (ccnv C)) (wbr A2 B2 C)
      (@ancoms (wcel B2 G) (wcel A2 F) (wb (wbr B2 A2 (ccnv C)) (wbr A2 B2 C))
        (@brcnvg B2 A2 G F C)))
    (@«3com12» (wcel B2 G) (wcel A2 F) (wbr B2 A2 (ccnv C)) (wcel B2 (cdm (ccnv C)))
      (@breldmg B2 A2 G F (ccnv C))))
  (@df_rn C)


/-- The second argument of a binary relation belongs to its range. (Contributed by NM, 13-Aug-2004.)
-/
theorem brelrn {A2 B2 C : «class»}
  (brelrn_1 : ⊦ wcel A2 cvv)
  (brelrn_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wbr A2 B2 C) (wcel B2 (crn C)) :=
@mp3an12 (wcel A2 cvv) (wcel B2 cvv) (wbr A2 B2 C) (wcel B2 (crn C))
  brelrn_1
  brelrn_2
  (@brelrng A2 B2 C cvv cvv)


/-- Membership of second member of an ordered pair in a range. (Contributed by NM, 23-Feb-1997.) -/
theorem opelrn {A2 B2 C : «class»}
  (brelrn_1 : ⊦ wcel A2 cvv)
  (brelrn_2 : ⊦ wcel B2 cvv) :
  ⊦ wi (wcel (cop A2 B2) C) (wcel B2 (crn C)) :=
@sylbir (wcel (cop A2 B2) C) (wbr A2 B2 C) (wcel B2 (crn C))
  (@df_br A2 B2 C)
  (@brelrn A2 B2 C
    brelrn_1
    brelrn_2)


/-- The first argument of a binary relation belongs to its domain. Note that ` A R B ` does not
imply ` Rel R ` : see for example ~ nrelv and ~ brv . (Contributed by NM, 2-Jul-2008.) -/
theorem releldm {A2 B2 R : «class»} :
  ⊦ wi (wa (wrel R) (wbr A2 B2 R)) (wcel A2 (cdm R)) :=
@syl3anc (wa (wrel R) (wbr A2 B2 R)) (wcel A2 cvv) (wcel B2 cvv) (wbr A2 B2 R) (wcel A2 (cdm R))
  (@brrelex1 A2 B2 R)
  (@brrelex2 A2 B2 R)
  (@simpr (wrel R) (wbr A2 B2 R))
  (@breldmg A2 B2 cvv cvv R)


/-- The first argument of a binary relation belongs to its domain. (Contributed by NM, 28-Apr-2015.)
-/
theorem releldmi {A2 B2 R : «class»}
  (releldm_1 : ⊦ wrel R) :
  ⊦ wi (wbr A2 B2 R) (wcel A2 (cdm R)) :=
@mpan (wrel R) (wbr A2 B2 R) (wcel A2 (cdm R))
  releldm_1
  (@releldm A2 B2 R)


/-- Definition of range, using bound-variable hypotheses instead of distinct variable conditions.
(Contributed by NM, 14-Aug-1995.) (Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem dfrnf {A2 : setvar → setvar → «class»}
  (dfrnf_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (dfrnf_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (x3 y : setvar) : ⊦ wceq (crn (A2 x3 y)) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (A2 x3 y)))) :=
@«3eqtri» (crn (A2 x3 y)) (cab (λ w, wex (λ v, wbr (cv v) (cv w) (A2 x3 y)))) (cab (λ w, wex (λ x3, wbr (cv x3) (cv w) (A2 x3 y)))) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (A2 x3 y))))
  (@dfrn2 (A2 x3 y))
  (@abbii (λ w, wex (λ v, wbr (cv v) (cv w) (A2 x3 y))) (λ w, wex (λ x3, wbr (cv x3) (cv w) (A2 x3 y)))
    (λ w, setvar.forget $ λ v : setvar,
      show ⊦ wb (wex (λ v, wbr (cv v) (cv w) (A2 x3 y))) (wex (λ x3, wbr (cv x3) (cv w) (A2 x3 y))), from
      @cbvexv1 (λ v x3, wbr (cv v) (cv w) (A2 x3 y)) (λ v x3, wbr (cv x3) (cv w) (A2 x3 y))
        (λ v, @nfbr (λ x3, cv v) (λ x3, cv w) (λ x3, A2 x3 y)
          (@nfcv (cv v))
          (dfrnf_1 y)
          (@nfcv (cv w)))
        (λ x3, @nfv (wbr (cv x3) (cv w) (A2 x3 y)))
        (λ v x3, @breq1 (cv v) (cv x3) (cv w) (A2 x3 y)) v x3))
  (setvar.forget $ λ w : setvar,
    show ⊦ wceq (cab (λ w, wex (λ x3, wbr (cv x3) (cv w) (A2 x3 y)))) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (A2 x3 y)))), from
    @cbvabw (λ w y, wex (λ x3, wbr (cv x3) (cv w) (A2 x3 y))) (λ w y, wex (λ x3, wbr (cv x3) (cv y) (A2 x3 y)))
      (λ w, @nfex (λ y x3, wbr (cv x3) (cv w) (A2 x3 y))
        (λ x3, @nfbr (λ y, cv x3) (λ y, cv w) (λ y, A2 x3 y)
          (@nfcv (cv x3))
          (dfrnf_2 x3)
          (@nfcv (cv w))))
      (λ y, @nfv (wex (λ x3, wbr (cv x3) (cv y) (A2 x3 y))))
      (λ w y, @exbidv (wceq (cv w) (cv y)) (λ x3, wbr (cv x3) (cv w) (A2 x3 y)) (λ x3, wbr (cv x3) (cv y) (A2 x3 y))
        (λ x3, @breq2 (cv w) (cv y) (cv x3) (A2 x3 y))) w y)


/-- Bound-variable hypothesis builder for domain. (Contributed by NM, 30-Jan-2004.) (Revised by
Mario Carneiro, 15-Oct-2016.) -/
theorem nfdm {A2 : setvar → «class»}
  (nfrn_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, cdm (A2 x3)) :=
@nfcxfr (λ x3, cdm (A2 x3)) (λ x3, cab (λ y, wex (λ z, wbr (cv y) (cv z) (A2 x3))))
  (λ x3, @df_dm (A2 x3))
  (@nfab (λ x3 y, wex (λ z, wbr (cv y) (cv z) (A2 x3)))
    (λ y, @nfex (λ x3 z, wbr (cv y) (cv z) (A2 x3))
      (λ z, @nfbr (λ x3, cv y) (λ x3, cv z) (λ x3, A2 x3)
        (@nfcv (cv y))
        nfrn_1
        (@nfcv (cv z)))))


/-- Bound-variable hypothesis builder for range. (Contributed by NM, 1-Sep-1999.) (Revised by Mario
Carneiro, 15-Oct-2016.) -/
theorem nfrn {A2 : setvar → «class»}
  (nfrn_1 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, crn (A2 x3)) :=
@nfcxfr (λ x3, crn (A2 x3)) (λ x3, cdm (ccnv (A2 x3)))
  (λ x3, @df_rn (A2 x3))
  (@nfdm (λ x3, ccnv (A2 x3))
    (@nfcnv (λ x3, A2 x3)
      nfrn_1))


/-- The range of a class of ordered pairs. (Contributed by NM, 14-Aug-1995.) (Revised by Mario
Carneiro, 4-Dec-2016.) -/
theorem rnopab {ph : setvar → setvar → wff} :
  ⊦ wceq (crn (copab (λ x3 y, ph x3 y))) (cab (λ y, wex (λ x3, ph x3 y))) :=
@eqtri (crn (copab (λ x3 y, ph x3 y))) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))))) (cab (λ y, wex (λ x3, ph x3 y)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wceq (crn (copab (λ x3 y, ph x3 y))) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))))), from
    @dfrnf (λ x3 y, copab (λ x3 y, ph x3 y))
      (λ y, @nfopab1 (λ x3 y, ph x3 y))
      (λ x3, @nfopab2 (λ x3 y, ph x3 y)) x3 y)
  (@abbii (λ y, wex (λ x3, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))) (λ y, wex (λ x3, ph x3 y))
    (λ y, @exbii (λ x3, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (λ x3, ph x3 y)
      (λ x3, @bitri (wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (ph x3 y)
        (@df_br (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))
        (@opabidw (λ x3 y, ph x3 y) x3 y))))


/-- The range of a function in maps-to notation. (Contributed by Scott Fenton, 21-Mar-2011.)
(Revised by Mario Carneiro, 31-Aug-2015.) -/
theorem rnmpt {A2 B2 : setvar → «class»} {F : setvar → setvar → «class»}
  (rnmpt_1 : ∀ x3 y, ⊦ wceq (F x3 y) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 y : setvar) : ⊦ wceq (crn (F x3 y)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) :=
@«3eqtr4i» (crn (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (cab (λ y, wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (crn (F x3 y)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))
  (@rnopab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
  (@rneqi (F x3 y) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
    (@eqtri (F x3 y) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
      (rnmpt_1 x3 y)
      (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3))))
  (@abbii (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (λ y, wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
    (λ y, @df_rex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))


/-- The range of a function in maps-to notation. (Contributed by Mario Carneiro, 20-Feb-2015.) -/
theorem elrnmpt {A2 B2 : setvar → «class»} {C : «class»} {F V : setvar → «class»}
  (rnmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (wcel C (V x3)) (wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel C (V x3)) (wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))), from
  @elab2g (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) C (λ y, crn (F x3)) (λ y, V x3)
    (λ y, @rexbidv (wceq (cv y) C) (λ x3, wceq (cv y) (B2 x3)) (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)
      (λ x3, @eqeq1 (cv y) C (B2 x3)))
    (λ y, setvar.forget $ λ y : setvar,
      show ⊦ wceq (crn (F x3)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))), from
      @rnmpt (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, F x3)
        (λ x3 y, rnmpt_1 x3) x3 y) y


/-- Elementhood in an image set. (Contributed by Mario Carneiro, 12-Sep-2015.) -/
theorem elrnmpt1s {A2 : «class»} {B2 : setvar → «class»} {C D : «class»} {F V : setvar → «class»}
  (rnmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (elrnmpt1s_1 : ∀ x3, ⊦ wi (wceq (cv x3) D) (wceq (B2 x3) C))
  (x3 : setvar) : ⊦ wi (wa (wcel D A2) (wcel C (V x3))) (wcel C (crn (F x3))) :=
@sylan (wcel D A2) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2)) (wcel C (V x3)) (wcel C (crn (F x3)))
  (@mpan2 (wcel D A2) (wceq C C) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2))
    (@eqid C)
    (@rspceeqv D A2 (λ x3, B2 x3) C C
      (λ x3, elrnmpt1s_1 x3)))
  (@biimparc (wcel C (V x3)) (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2))
    (@elrnmpt (λ x3, A2) (λ x3, B2 x3) C (λ x3, F x3) (λ x3, V x3)
      (λ x3, rnmpt_1 x3) x3))


/-- Elementhood in an image set. (Contributed by Mario Carneiro, 31-Aug-2015.) -/
theorem elrnmpt1 {A2 B2 F V : setvar → «class»}
  (rnmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (wa (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (V x3))) (wcel (B2 x3) (crn (F x3))) :=
@impcom (wcel (B2 x3) (V x3)) (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (crn (F x3)))
  (@syl5ibr (wcel (cv x3) (A2 x3)) (wcel (B2 x3) (crn (F x3))) (wcel (B2 x3) (V x3)) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))))
    (@spcev (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))) (wcel (cv x3) (A2 x3)) (cv x3)
      (@vex x3)
      (λ z, @equcoms (λ x3 z, wb (wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))) (wcel (cv x3) (A2 x3)))
        (λ x3 z, @bitr2d (wceq (cv x3) (cv z)) (wcel (cv x3) (A2 x3)) (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3))))
          (@eleq12d (wceq (cv x3) (cv z)) (cv x3) (cv z) (A2 x3) (csb (cv z) (λ x3, A2 x3))
            (@id (wceq (cv x3) (cv z)))
            (@csbeq1a (λ x3, cv z) (λ x3, A2 x3) x3))
          (@biantrud (wceq (cv x3) (cv z)) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3))) (wcel (cv z) (csb (cv z) (λ x3, A2 x3)))
            (@csbeq1a (λ x3, cv z) (λ x3, B2 x3) x3))) x3 z))
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wcel (B2 x3) (V x3)) (wb (wcel (B2 x3) (crn (F x3))) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))))), from
      @elab2g (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3))))) (B2 x3) (λ y, crn (F x3)) (λ y, V x3)
        (λ y, @syl5bb (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (csb (cv z) (λ x3, B2 x3))))) (wceq (cv y) (B2 x3)) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3)))))
          (@bitri (wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (csb (cv z) (λ x3, B2 x3)))))
            (@df_rex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))
            (setvar.forget $ λ x3 : setvar,
              setvar.forget $ λ z : setvar,
              show ⊦ wb (wex (λ x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (wex (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (csb (cv z) (λ x3, B2 x3))))), from
              @cbvexv1 (λ x3 z, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (λ x3 z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (csb (cv z) (λ x3, B2 x3))))
                (λ x3, @nfv (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
                (λ z, @nfan (λ x3, wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (λ x3, wceq (cv y) (csb (cv z) (λ x3, B2 x3)))
                  (@nfcri (λ x3 z, csb (cv z) (λ x3, A2 x3))
                    (λ z, @nfcsb1v (cv z) (λ x3, A2 x3)) z)
                  (@nfeq2 (cv y) (λ x3, csb (cv z) (λ x3, B2 x3))
                    (@nfcsb1v (cv z) (λ x3, B2 x3))))
                (λ x3 z, @anbi12d (wceq (cv x3) (cv z)) (wcel (cv x3) (A2 x3)) (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (B2 x3)) (wceq (cv y) (csb (cv z) (λ x3, B2 x3)))
                  (@eleq12d (wceq (cv x3) (cv z)) (cv x3) (cv z) (A2 x3) (csb (cv z) (λ x3, A2 x3))
                    (@id (wceq (cv x3) (cv z)))
                    (@csbeq1a (λ x3, cv z) (λ x3, A2 x3) x3))
                  (@eqeq2d (wceq (cv x3) (cv z)) (B2 x3) (csb (cv z) (λ x3, B2 x3)) (cv y)
                    (@csbeq1a (λ x3, cv z) (λ x3, B2 x3) x3))) x3 z))
          (@exbidv (wceq (cv y) (B2 x3)) (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (cv y) (csb (cv z) (λ x3, B2 x3)))) (λ z, wa (wcel (cv z) (csb (cv z) (λ x3, A2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3))))
            (λ z, @anbi2d (wceq (cv y) (B2 x3)) (wceq (cv y) (csb (cv z) (λ x3, B2 x3))) (wceq (B2 x3) (csb (cv z) (λ x3, B2 x3))) (wcel (cv z) (csb (cv z) (λ x3, A2 x3)))
              (@eqeq1 (cv y) (B2 x3) (csb (cv z) (λ x3, B2 x3))))))
        (λ y, setvar.forget $ λ y : setvar,
          show ⊦ wceq (crn (F x3)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))), from
          @rnmpt (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, F x3)
            (λ x3 y, rnmpt_1 x3) x3 y) y))


/-- Membership in the range of a function. (Contributed by NM, 27-Aug-2007.) (Revised by Mario
Carneiro, 31-Aug-2015.) -/
theorem elrnmptg {A2 B2 : setvar → «class»} {C : «class»} {F V : setvar → «class»}
  (rnmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2 x3)) (wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))) :=
@syl5bb (wcel C (crn (F x3))) (wcel C (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))
  (@eleq2i (crn (F x3)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))) C
    (setvar.forget $ λ y : setvar,
      show ⊦ wceq (crn (F x3)) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))), from
      @rnmpt (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, F x3)
        (λ x3 y, rnmpt_1 x3) x3 y))
  (@syl (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2 x3)) (wi (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) (wcel C cvv)) (wb (wcel C (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)))
    (@ex (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) (wcel C cvv)
      (@syl (wa (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))) (wrex (λ x3, wa (wcel (B2 x3) (V x3)) (wceq C (B2 x3))) (λ x3, A2 x3)) (wcel C cvv)
        (@r19_29 (λ x3, wcel (B2 x3) (V x3)) (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))
        (@rexlimivw (λ x3, wa (wcel (B2 x3) (V x3)) (wceq C (B2 x3))) (wcel C cvv) (λ x3, A2 x3)
          (λ x3, @elexd (wa (wcel (B2 x3) (V x3)) (wceq C (B2 x3))) C (V x3)
            (@biimparc (wceq C (B2 x3)) (wcel C (V x3)) (wcel (B2 x3) (V x3))
              (@eleq1 C (B2 x3) (V x3)))))))
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wi (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) (wcel C cvv)) (wb (wcel C (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))), from
      @elab3g (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) C (λ y, cvv)
        (λ y, @rexbidv (wceq (cv y) C) (λ x3, wceq (cv y) (B2 x3)) (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)
          (λ x3, @eqeq1 (cv y) C (B2 x3))) y))


/-- Membership in the range of a function. (Contributed by NM, 30-Aug-2004.) (Revised by Mario
Carneiro, 31-Aug-2015.) -/
theorem elrnmpti {A2 B2 : setvar → «class»} {C : «class»} {F : setvar → «class»}
  (rnmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (elrnmpti_2 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (x3 : setvar) : ⊦ wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)) :=
@ax_mp (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3)) (wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)))
  (@rgenw (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3)
    (λ x3, elrnmpti_2 x3))
  (@elrnmptg (λ x3, A2 x3) (λ x3, B2 x3) C (λ x3, F x3) (λ x3, cvv)
    (λ x3, rnmpt_1 x3) x3)


/-- The range of a function in maps-to notation. (Contributed by Glauco Siliprandi, 17-Aug-2020.) -/
theorem elrnmptd {ph : setvar → wff} {A2 B2 : setvar → «class»} {C : «class»} {F V : setvar → «class»}
  (elrnmptd_f : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (elrnmptd_x : ∀ x3, ⊦ wi (ph x3) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)))
  (elrnmptd_c : ∀ x3, ⊦ wi (ph x3) (wcel C (V x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wcel C (crn (F x3))) :=
@mpbird (ph x3) (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3))
  (elrnmptd_x x3)
  (@syl (ph x3) (wcel C (V x3)) (wb (wcel C (crn (F x3))) (wrex (λ x3, wceq C (B2 x3)) (λ x3, A2 x3)))
    (elrnmptd_c x3)
    (@elrnmpt (λ x3, A2 x3) (λ x3, B2 x3) C (λ x3, F x3) (λ x3, V x3)
      (λ x3, elrnmptd_f x3) x3))


/-- Alternate definition of indexed union when ` B ` is a set. (Contributed by Mario Carneiro,
31-Aug-2015.) -/
theorem dfiun3g {A2 B2 C : setvar → «class»} :
  ⊦ wi (wral (λ x3, wcel (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3))))) :=
@eqtr4di (wral (λ x3, wcel (B2 x3) (C x3)) (λ x3, A2 x3)) (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))) (cuni (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3))))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wral (λ x3, wcel (B2 x3) (C x3)) (λ x3, A2 x3)) (wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))))), from
    @dfiun2g (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, C x3) y)
  (@unieqi (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3)))
    (setvar.forget $ λ x3 : setvar,
      setvar.forget $ λ y : setvar,
      show ⊦ wceq (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (cab (λ y, wrex (λ x3, wceq (cv y) (B2 x3)) (λ x3, A2 x3))), from
      @rnmpt (λ x3, A2 x3) (λ x3, B2 x3) (λ x3 y, cmpt (λ x3, A2 x3) (λ x3, B2 x3))
        (λ x3 y, @eqid (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) x3 y))


/-- Alternate definition of indexed union when ` B ` is a set. (Contributed by Mario Carneiro,
31-Aug-2015.) -/
theorem dfiun3 {A2 B2 : setvar → «class»}
  (dfiun3_1 : ∀ x3, ⊦ wcel (B2 x3) cvv) :
  ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))), from
  @mprg (λ x3, wcel (B2 x3) cvv) (λ x3, wceq (ciun (λ x3, A2 x3) (λ x3, B2 x3)) (cuni (crn (cmpt (λ x3, A2 x3) (λ x3, B2 x3))))) (λ x3, A2 x3)
    (λ x3, @dfiun3g (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, cvv))
    (λ x3, @a1i (wcel (B2 x3) cvv) (wcel (cv x3) (A2 x3))
      (dfiun3_1 x3)) x3


/-- A relation is empty iff its range is empty. (Contributed by NM, 15-Sep-2004.) -/
theorem relrn0 {A2 : «class»} :
  ⊦ wi (wrel A2) (wb (wceq A2 c0) (wceq (crn A2) c0)) :=
@bitrdi (wrel A2) (wceq A2 c0) (wceq (cdm A2) c0) (wceq (crn A2) c0)
  (@reldm0 A2)
  (@dm0rn0 A2)


/-- The domain and range of a class are included in its double union. (Contributed by NM,
13-May-2008.) -/
theorem dmrnssfld {A2 : «class»} :
  ⊦ wss (cun (cdm A2) (crn A2)) (cuni (cuni A2)) :=
@unssi (cdm A2) (crn A2) (cuni (cuni A2))
  (@ssriv (cdm A2) (cuni (cuni A2))
    (λ x3, @sylbi (wcel (cv x3) (cdm A2)) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wcel (cv x3) (cuni (cuni A2)))
      (@eldm2 (cv x3) A2
        (@vex x3))
      (@exlimiv (λ y, wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cuni (cuni A2)))
        (λ y, @mpi (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cpr (cv x3) (cv y))) (wcel (cv x3) (cuni (cuni A2)))
          (@prid1 (cv x3) (cv y)
            (@vex x3))
          (@sseld (wcel (cop (cv x3) (cv y)) A2) (cpr (cv x3) (cv y)) (cuni (cuni A2)) (cv x3)
            (@syl (wcel (cop (cv x3) (cv y)) A2) (wcel (cpr (cv x3) (cv y)) (cuni A2)) (wss (cpr (cv x3) (cv y)) (cuni (cuni A2)))
              (@eqeltrrid (wcel (cop (cv x3) (cv y)) A2) (cpr (cv x3) (cv y)) (cuni (cop (cv x3) (cv y))) (cuni A2)
                (@uniop (cv x3) (cv y)
                  (@vex x3)
                  (@vex y))
                (@uniopel (cv x3) (cv y) A2
                  (@vex x3)
                  (@vex y)))
              (@elssuni (cpr (cv x3) (cv y)) (cuni A2))))))))
  (@ssriv (crn A2) (cuni (cuni A2))
    (λ y, @sylbi (wcel (cv y) (crn A2)) (wex (λ x3, wcel (cop (cv x3) (cv y)) A2)) (wcel (cv y) (cuni (cuni A2)))
      (@elrn2 (cv y) A2
        (@vex y))
      (@exlimiv (λ x3, wcel (cop (cv x3) (cv y)) A2) (wcel (cv y) (cuni (cuni A2)))
        (λ x3, @mpi (wcel (cop (cv x3) (cv y)) A2) (wcel (cv y) (cpr (cv x3) (cv y))) (wcel (cv y) (cuni (cuni A2)))
          (@prid2 (cv x3) (cv y)
            (@vex y))
          (@sseld (wcel (cop (cv x3) (cv y)) A2) (cpr (cv x3) (cv y)) (cuni (cuni A2)) (cv y)
            (@syl (wcel (cop (cv x3) (cv y)) A2) (wcel (cpr (cv x3) (cv y)) (cuni A2)) (wss (cpr (cv x3) (cv y)) (cuni (cuni A2)))
              (@eqeltrrid (wcel (cop (cv x3) (cv y)) A2) (cpr (cv x3) (cv y)) (cuni (cop (cv x3) (cv y))) (cuni A2)
                (@uniop (cv x3) (cv y)
                  (@vex x3)
                  (@vex y))
                (@uniopel (cv x3) (cv y) A2
                  (@vex x3)
                  (@vex y)))
              (@elssuni (cpr (cv x3) (cv y)) (cuni A2))))))))


/-- Domain of a composition. Theorem 21 of [Suppes] p. 63. (Contributed by NM, 19-Mar-1998.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dmcoss {A2 B2 : «class»} :
  ⊦ wss (cdm (ccom A2 B2)) (cdm B2) :=
@ssriv (cdm (ccom A2 B2)) (cdm B2)
  (λ x3, @«3imtr4i» (wex (λ y, wcel (cop (cv x3) (cv y)) (ccom A2 B2))) (wex (λ y, wbr (cv x3) (cv y) B2)) (wcel (cv x3) (cdm (ccom A2 B2))) (wcel (cv x3) (cdm B2))
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wex (λ y, wcel (cop (cv x3) (cv y)) (ccom A2 B2))) (wex (λ y, wbr (cv x3) (cv y) B2)), from
      @exlimi (λ y, wcel (cop (cv x3) (cv y)) (ccom A2 B2)) (λ y, wex (λ y, wbr (cv x3) (cv y) B2))
        (@nfe1 (λ y, wbr (cv x3) (cv y) B2))
        (λ y, @«3imtr4i» (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wex (λ z, wbr (cv x3) (cv z) B2)) (wcel (cop (cv x3) (cv y)) (ccom A2 B2)) (wex (λ y, wbr (cv x3) (cv y) B2))
          (@exsimpl (λ z, wbr (cv x3) (cv z) B2) (λ z, wbr (cv z) (cv y) A2))
          (@opelco (cv x3) (cv y) A2 B2
            (@vex x3)
            (@vex y))
          (@cbvexvw (λ y, wbr (cv x3) (cv y) B2) (λ z, wbr (cv x3) (cv z) B2)
            (λ y z, @breq2 (cv y) (cv z) (cv x3) B2))) y)
    (@eldm2 (cv x3) (ccom A2 B2)
      (@vex x3))
    (@eldm (cv x3) B2
      (@vex x3)))


/-- Range of a composition. (Contributed by NM, 19-Mar-1998.) -/
theorem rncoss {A2 B2 : «class»} :
  ⊦ wss (crn (ccom A2 B2)) (crn A2) :=
@«3sstr4i» (cdm (ccom (ccnv B2) (ccnv A2))) (cdm (ccnv A2)) (crn (ccom A2 B2)) (crn A2)
  (@dmcoss (ccnv B2) (ccnv A2))
  (@eqtri (crn (ccom A2 B2)) (cdm (ccnv (ccom A2 B2))) (cdm (ccom (ccnv B2) (ccnv A2)))
    (@df_rn (ccom A2 B2))
    (@dmeqi (ccnv (ccom A2 B2)) (ccom (ccnv B2) (ccnv A2))
      (@cnvco A2 B2)))
  (@df_rn A2)


/-- Domain of a composition. (Contributed by NM, 28-May-1998.) (Proof shortened by Andrew Salmon,
27-Aug-2011.) -/
theorem dmcosseq {A2 B2 : «class»} :
  ⊦ wi (wss (crn B2) (cdm A2)) (wceq (cdm (ccom A2 B2)) (cdm B2)) :=
@eqssd (wss (crn B2) (cdm A2)) (cdm (ccom A2 B2)) (cdm B2)
  (@a1i (wss (cdm (ccom A2 B2)) (cdm B2)) (wss (crn B2) (cdm A2))
    (@dmcoss A2 B2))
  (@ssrdv (wss (crn B2) (cdm A2)) (cdm B2) (cdm (ccom A2 B2))
    (λ x3, @«3imtr4g» (wss (crn B2) (cdm A2)) (wex (λ y, wbr (cv x3) (cv y) B2)) (wex (λ z, wcel (cop (cv x3) (cv z)) (ccom A2 B2))) (wcel (cv x3) (cdm B2)) (wcel (cv x3) (cdm (ccom A2 B2)))
      (@syl6ibr (wss (crn B2) (cdm A2)) (wex (λ y, wbr (cv x3) (cv y) B2)) (wex (λ z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))) (wex (λ z, wcel (cop (cv x3) (cv z)) (ccom A2 B2)))
        (@syl6ibr (wss (crn B2) (cdm A2)) (wex (λ y, wbr (cv x3) (cv y) B2)) (wex (λ y, wex (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))) (wex (λ z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))))
          (@eximdv (wss (crn B2) (cdm A2)) (λ y, wbr (cv x3) (cv y) B2) (λ y, wex (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))
            (λ y, @syl (wss (crn B2) (cdm A2)) (wi (wcel (cv y) (crn B2)) (wcel (cv y) (cdm A2))) (wi (wbr (cv x3) (cv y) B2) (wex (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))))
              (@ssel (crn B2) (cdm A2) (cv y))
              (@sylbi (wi (wcel (cv y) (crn B2)) (wcel (cv y) (cdm A2))) (wi (wex (λ x3, wbr (cv x3) (cv y) B2)) (wex (λ z, wbr (cv y) (cv z) A2))) (wi (wbr (cv x3) (cv y) B2) (wex (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))))
                (@imbi12i (wcel (cv y) (crn B2)) (wex (λ x3, wbr (cv x3) (cv y) B2)) (wcel (cv y) (cdm A2)) (wex (λ z, wbr (cv y) (cv z) A2))
                  (@elrn (cv y) B2
                    (@vex y))
                  (@eldm (cv y) A2
                    (@vex y)))
                (@sylcom (wi (wex (λ x3, wbr (cv x3) (cv y) B2)) (wex (λ z, wbr (cv y) (cv z) A2))) (wbr (cv x3) (cv y) B2) (wex (λ z, wbr (cv y) (cv z) A2)) (wex (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))
                  (@imim1i (wbr (cv x3) (cv y) B2) (wex (λ x3, wbr (cv x3) (cv y) B2)) (wex (λ z, wbr (cv y) (cv z) A2))
                    (@«19_8a» (λ x3, wbr (cv x3) (cv y) B2) x3))
                  (@eximdv (wbr (cv x3) (cv y) B2) (λ z, wbr (cv y) (cv z) A2) (λ z, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))
                    (λ z, @pm3_2 (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))))))
          (@excom (λ z y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))))
        (@exbii (λ z, wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (λ z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)))
          (λ z, @opelco (cv x3) (cv z) A2 B2
            (@vex x3)
            (@vex z))))
      (@eldm (cv x3) B2
        (@vex x3))
      (@eldm2 (cv x3) (ccom A2 B2)
        (@vex x3))))


/-- Domain of a composition. (Contributed by NM, 19-Mar-1998.) -/
theorem dmcoeq {A2 B2 : «class»} :
  ⊦ wi (wceq (cdm A2) (crn B2)) (wceq (cdm (ccom A2 B2)) (cdm B2)) :=
@syl (wceq (cdm A2) (crn B2)) (wss (crn B2) (cdm A2)) (wceq (cdm (ccom A2 B2)) (cdm B2))
  (@eqimss2 (crn B2) (cdm A2))
  (@dmcosseq A2 B2)


/-- Range of a composition. (Contributed by NM, 19-Mar-1998.) -/
theorem rncoeq {A2 B2 : «class»} :
  ⊦ wi (wceq (cdm A2) (crn B2)) (wceq (crn (ccom A2 B2)) (crn A2)) :=
@«3imtr4i» (wceq (cdm (ccnv B2)) (crn (ccnv A2))) (wceq (cdm (ccom (ccnv B2) (ccnv A2))) (cdm (ccnv A2))) (wceq (cdm A2) (crn B2)) (wceq (crn (ccom A2 B2)) (crn A2))
  (@dmcoeq (ccnv B2) (ccnv A2))
  (@bitri (wceq (cdm A2) (crn B2)) (wceq (crn B2) (cdm A2)) (wceq (cdm (ccnv B2)) (crn (ccnv A2)))
    (@eqcom (cdm A2) (crn B2))
    (@eqeq12i (crn B2) (cdm (ccnv B2)) (cdm A2) (crn (ccnv A2))
      (@df_rn B2)
      (@dfdm4 A2)))
  (@eqeq12i (crn (ccom A2 B2)) (cdm (ccom (ccnv B2) (ccnv A2))) (crn A2) (cdm (ccnv A2))
    (@eqtri (crn (ccom A2 B2)) (cdm (ccnv (ccom A2 B2))) (cdm (ccom (ccnv B2) (ccnv A2)))
      (@df_rn (ccom A2 B2))
      (@dmeqi (ccnv (ccom A2 B2)) (ccom (ccnv B2) (ccnv A2))
        (@cnvco A2 B2)))
    (@df_rn A2))


/-- Equality theorem for restrictions. (Contributed by NM, 7-Aug-1994.) -/
theorem reseq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cres A2 C) (cres B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (cin A2 (cxp C cvv)) (cin B2 (cxp C cvv)) (cres A2 C) (cres B2 C)
  (@ineq1 A2 B2 (cxp C cvv))
  (@df_res A2 C)
  (@df_res B2 C)


/-- Equality theorem for restrictions. (Contributed by NM, 8-Aug-1994.) -/
theorem reseq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cres C A2) (cres C B2)) :=
@«3eqtr4g» (wceq A2 B2) (cin C (cxp A2 cvv)) (cin C (cxp B2 cvv)) (cres C A2) (cres C B2)
  (@ineq2d (wceq A2 B2) (cxp A2 cvv) (cxp B2 cvv) C
    (@xpeq1 A2 B2 cvv))
  (@df_res C A2)
  (@df_res C B2)


/-- Equality inference for restrictions. (Contributed by NM, 21-Oct-2014.) -/
theorem reseq1i {A2 B2 C : «class»}
  (reseqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cres A2 C) (cres B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cres A2 C) (cres B2 C))
  reseqi_1
  (@reseq1 A2 B2 C)


/-- Equality inference for restrictions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem reseq2i {A2 B2 C : «class»}
  (reseqi_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cres C A2) (cres C B2) :=
@ax_mp (wceq A2 B2) (wceq (cres C A2) (cres C B2))
  reseqi_1
  (@reseq2 A2 B2 C)


/-- Equality inference for restrictions. (Contributed by NM, 21-Oct-2014.) -/
theorem reseq12i {A2 B2 C D : «class»}
  (reseqi_1 : ⊦ wceq A2 B2)
  (reseqi_2 : ⊦ wceq C D) :
  ⊦ wceq (cres A2 C) (cres B2 D) :=
@eqtri (cres A2 C) (cres B2 C) (cres B2 D)
  (@reseq1i A2 B2 C
    reseqi_1)
  (@reseq2i C D B2
    reseqi_2)


/-- Equality deduction for restrictions. (Contributed by NM, 21-Oct-2014.) -/
theorem reseq1d {ph : wff} {A2 B2 C : «class»}
  (reseqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cres A2 C) (cres B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cres A2 C) (cres B2 C))
  reseqd_1
  (@reseq1 A2 B2 C)


/-- Equality deduction for restrictions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem reseq2d {ph : wff} {A2 B2 C : «class»}
  (reseqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cres C A2) (cres C B2)) :=
@syl ph (wceq A2 B2) (wceq (cres C A2) (cres C B2))
  reseqd_1
  (@reseq2 A2 B2 C)


/-- Equality deduction for restrictions. (Contributed by NM, 21-Oct-2014.) -/
theorem reseq12d {ph : wff} {A2 B2 C D : «class»}
  (reseqd_1 : ⊦ wi ph (wceq A2 B2))
  (reseqd_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cres A2 C) (cres B2 D)) :=
@eqtrd ph (cres A2 C) (cres B2 C) (cres B2 D)
  (@reseq1d ph A2 B2 C
    reseqd_1)
  (@reseq2d ph C D B2
    reseqd_2)


/-- Bound-variable hypothesis builder for restriction. (Contributed by NM, 15-Sep-2003.) (Revised by
David Abernethy, 19-Jun-2012.) -/
theorem nfres {A2 B2 : setvar → «class»}
  (nfres_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfres_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cres (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cres (A2 x3) (B2 x3)) (λ x3, cin (A2 x3) (cxp (B2 x3) cvv))
  (λ x3, @df_res (A2 x3) (B2 x3))
  (@nfin (λ x3, A2 x3) (λ x3, cxp (B2 x3) cvv)
    nfres_1
    (@nfxp (λ x3, B2 x3) (λ x3, cvv)
      nfres_2
      (@nfcv cvv)))


/-- A restriction to the empty set is empty. (Contributed by NM, 12-Nov-1994.) -/
theorem res0 {A2 : «class»} :
  ⊦ wceq (cres A2 c0) c0 :=
@«3eqtri» (cres A2 c0) (cin A2 (cxp c0 cvv)) (cin A2 c0) c0
  (@df_res A2 c0)
  (@ineq2i (cxp c0 cvv) c0 A2
    (@«0xp» cvv))
  (@in0 A2)


/-- Ordered pair elementhood in a restriction. Exercise 13 of [TakeutiZaring] p. 25. (Contributed by
NM, 13-Nov-1995.) (Revised by BJ, 18-Feb-2022.) Commute the consequent. (Revised by Peter Mazsa,
24-Sep-2022.) -/
theorem opelres {A2 B2 C R V : «class»} :
  ⊦ wi (wcel C V) (wb (wcel (cop B2 C) (cres R A2)) (wa (wcel B2 A2) (wcel (cop B2 C) R))) :=
@syl5bb (wcel (cop B2 C) (cres R A2)) (wa (wcel (cop B2 C) R) (wcel (cop B2 C) (cxp A2 cvv))) (wcel C V) (wa (wcel B2 A2) (wcel (cop B2 C) R))
  (@elin2 (cop B2 C) R (cxp A2 cvv) (cres R A2)
    (@df_res R A2))
  (@anbi1cd (wcel C V) (wcel (cop B2 C) (cxp A2 cvv)) (wcel B2 A2) (wcel (cop B2 C) R)
    (@bitr4id (wcel C V) (wcel (cop B2 C) (cxp A2 cvv)) (wa (wcel B2 A2) (wcel C cvv)) (wcel B2 A2)
      (@opelxp B2 C A2 cvv)
      (@biantrud (wcel C V) (wcel C cvv) (wcel B2 A2)
        (@elex C V))))


/-- Binary relation on a restriction. (Contributed by Mario Carneiro, 4-Nov-2015.) Commute the
consequent. (Revised by Peter Mazsa, 24-Sep-2022.) -/
theorem brres {A2 B2 C R V : «class»} :
  ⊦ wi (wcel C V) (wb (wbr B2 C (cres R A2)) (wa (wcel B2 A2) (wbr B2 C R))) :=
@«3bitr4g» (wcel C V) (wcel (cop B2 C) (cres R A2)) (wa (wcel B2 A2) (wcel (cop B2 C) R)) (wbr B2 C (cres R A2)) (wa (wcel B2 A2) (wbr B2 C R))
  (@opelres A2 B2 C R V)
  (@df_br B2 C (cres R A2))
  (@anbi2i (wbr B2 C R) (wcel (cop B2 C) R) (wcel B2 A2)
    (@df_br B2 C R))


/-- Ordered pair membership in a restriction. Exercise 13 of [TakeutiZaring] p. 25. (Contributed by
NM, 13-Nov-1995.) -/
theorem opelresi {A2 B2 C R : «class»}
  (opelresi_1 : ⊦ wcel C cvv) :
  ⊦ wb (wcel (cop B2 C) (cres R A2)) (wa (wcel B2 A2) (wcel (cop B2 C) R)) :=
@ax_mp (wcel C cvv) (wb (wcel (cop B2 C) (cres R A2)) (wa (wcel B2 A2) (wcel (cop B2 C) R)))
  opelresi_1
  (@opelres A2 B2 C R cvv)


/-- Binary relation on a restriction. (Contributed by NM, 12-Dec-2006.) -/
theorem brresi {A2 B2 C R : «class»}
  (opelresi_1 : ⊦ wcel C cvv) :
  ⊦ wb (wbr B2 C (cres R A2)) (wa (wcel B2 A2) (wbr B2 C R)) :=
@ax_mp (wcel C cvv) (wb (wbr B2 C (cres R A2)) (wa (wcel B2 A2) (wbr B2 C R)))
  opelresi_1
  (@brres A2 B2 C R cvv)


/-- The restriction of a restriction. (Contributed by NM, 27-Mar-2008.) -/
theorem resres {A2 B2 C : «class»} :
  ⊦ wceq (cres (cres A2 B2) C) (cres A2 (cin B2 C)) :=
@«3eqtri» (cres (cres A2 B2) C) (cin (cres A2 B2) (cxp C cvv)) (cin (cin A2 (cxp B2 cvv)) (cxp C cvv)) (cres A2 (cin B2 C))
  (@df_res (cres A2 B2) C)
  (@ineq1i (cres A2 B2) (cin A2 (cxp B2 cvv)) (cxp C cvv)
    (@df_res A2 B2))
  (@«3eqtr4ri» (cin A2 (cxp (cin B2 C) cvv)) (cin A2 (cin (cxp B2 cvv) (cxp C cvv))) (cres A2 (cin B2 C)) (cin (cin A2 (cxp B2 cvv)) (cxp C cvv))
    (@ineq2i (cxp (cin B2 C) cvv) (cin (cxp B2 cvv) (cxp C cvv)) A2
      (@xpindir B2 C cvv))
    (@df_res A2 (cin B2 C))
    (@inass A2 (cxp B2 cvv) (cxp C cvv)))


/-- Distributive law for restriction over union. Theorem 31 of [Suppes] p. 65. (Contributed by NM,
30-Sep-2002.) -/
theorem resundi {A2 B2 C : «class»} :
  ⊦ wceq (cres A2 (cun B2 C)) (cun (cres A2 B2) (cres A2 C)) :=
@«3eqtr4i» (cin A2 (cxp (cun B2 C) cvv)) (cun (cin A2 (cxp B2 cvv)) (cin A2 (cxp C cvv))) (cres A2 (cun B2 C)) (cun (cres A2 B2) (cres A2 C))
  (@eqtri (cin A2 (cxp (cun B2 C) cvv)) (cin A2 (cun (cxp B2 cvv) (cxp C cvv))) (cun (cin A2 (cxp B2 cvv)) (cin A2 (cxp C cvv)))
    (@ineq2i (cxp (cun B2 C) cvv) (cun (cxp B2 cvv) (cxp C cvv)) A2
      (@xpundir B2 C cvv))
    (@indi A2 (cxp B2 cvv) (cxp C cvv)))
  (@df_res A2 (cun B2 C))
  (@uneq12i (cres A2 B2) (cin A2 (cxp B2 cvv)) (cres A2 C) (cin A2 (cxp C cvv))
    (@df_res A2 B2)
    (@df_res A2 C))


/-- Distributive law for restriction over union. (Contributed by NM, 23-Sep-2004.) -/
theorem resundir {A2 B2 C : «class»} :
  ⊦ wceq (cres (cun A2 B2) C) (cun (cres A2 C) (cres B2 C)) :=
@«3eqtr4i» (cin (cun A2 B2) (cxp C cvv)) (cun (cin A2 (cxp C cvv)) (cin B2 (cxp C cvv))) (cres (cun A2 B2) C) (cun (cres A2 C) (cres B2 C))
  (@indir A2 B2 (cxp C cvv))
  (@df_res (cun A2 B2) C)
  (@uneq12i (cres A2 C) (cin A2 (cxp C cvv)) (cres B2 C) (cin B2 (cxp C cvv))
    (@df_res A2 C)
    (@df_res B2 C))


/-- Distribution of restriction over indexed union. (Contributed by Mario Carneiro, 29-May-2015.) -/
theorem resiun2 {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wceq (cres C (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (ciun (λ x3, A2 x3) (λ x3, cres C (B2 x3))) :=
@eqtr4i (cres C (ciun (λ x3, A2 x3) (λ x3, B2 x3))) (cin C (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) cvv)) (ciun (λ x3, A2 x3) (λ x3, cres C (B2 x3)))
  (@df_res C (ciun (λ x3, A2 x3) (λ x3, B2 x3)))
  (@eqtr4i (ciun (λ x3, A2 x3) (λ x3, cres C (B2 x3))) (ciun (λ x3, A2 x3) (λ x3, cin C (cxp (B2 x3) cvv))) (cin C (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) cvv))
    (@iuneq2i (λ x3, A2 x3) (λ x3, cres C (B2 x3)) (λ x3, cin C (cxp (B2 x3) cvv))
      (λ x3, @a1i (wceq (cres C (B2 x3)) (cin C (cxp (B2 x3) cvv))) (wcel (cv x3) (A2 x3))
        (@df_res C (B2 x3))))
    (@eqtr4i (cin C (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) cvv)) (cin C (ciun (λ x3, A2 x3) (λ x3, cxp (B2 x3) cvv))) (ciun (λ x3, A2 x3) (λ x3, cin C (cxp (B2 x3) cvv)))
      (@ineq2i (cxp (ciun (λ x3, A2 x3) (λ x3, B2 x3)) cvv) (ciun (λ x3, A2 x3) (λ x3, cxp (B2 x3) cvv)) C
        (@xpiundir (λ x3, A2 x3) (λ x3, B2 x3) cvv))
      (@iunin2 (λ x3, A2 x3) C (λ x3, cxp (B2 x3) cvv))))


/-- The domain of a restriction. Exercise 14 of [TakeutiZaring] p. 25. (Contributed by NM,
1-Aug-1994.) -/
theorem dmres {A2 B2 : «class»} :
  ⊦ wceq (cdm (cres A2 B2)) (cin B2 (cdm A2)) :=
@eqcomi (cin B2 (cdm A2)) (cdm (cres A2 B2))
  (@ineqri B2 (cdm A2) (cdm (cres A2 B2))
    (λ x3, @bitr2i (wcel (cv x3) (cdm (cres A2 B2))) (wex (λ y, wcel (cop (cv x3) (cv y)) (cres A2 B2))) (wa (wcel (cv x3) B2) (wcel (cv x3) (cdm A2)))
      (@eldm2 (cv x3) (cres A2 B2)
        (@vex x3))
      (@«3bitr4i» (wex (λ y, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2))) (wa (wcel (cv x3) B2) (wex (λ y, wcel (cop (cv x3) (cv y)) A2))) (wex (λ y, wcel (cop (cv x3) (cv y)) (cres A2 B2))) (wa (wcel (cv x3) B2) (wcel (cv x3) (cdm A2)))
        (@«19_42v» (wcel (cv x3) B2) (λ y, wcel (cop (cv x3) (cv y)) A2))
        (@exbii (λ y, wcel (cop (cv x3) (cv y)) (cres A2 B2)) (λ y, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2))
          (λ y, @opelresi B2 (cv x3) (cv y) A2
            (@vex y)))
        (@anbi2i (wcel (cv x3) (cdm A2)) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wcel (cv x3) B2)
          (@eldm2 (cv x3) A2
            (@vex x3))))))


/-- A domain restricted to a subclass equals the subclass. (Contributed by NM, 2-Mar-1997.) -/
theorem ssdmres {A2 B2 : «class»} :
  ⊦ wb (wss A2 (cdm B2)) (wceq (cdm (cres B2 A2)) A2) :=
@bitr4i (wss A2 (cdm B2)) (wceq (cin A2 (cdm B2)) A2) (wceq (cdm (cres B2 A2)) A2)
  (@df_ss A2 (cdm B2))
  (@eqeq1i (cdm (cres B2 A2)) (cin A2 (cdm B2)) A2
    (@dmres B2 A2))


/-- The domain of a restriction to a set exists. (Contributed by NM, 7-Apr-1995.) -/
theorem dmresexg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wcel (cdm (cres A2 B2)) cvv) :=
@eqeltrid (wcel B2 V) (cdm (cres A2 B2)) (cin B2 (cdm A2)) cvv
  (@dmres A2 B2)
  (@inex1g B2 (cdm A2) V)


/-- A class includes its restriction. Exercise 15 of [TakeutiZaring] p. 25. (Contributed by NM,
2-Aug-1994.) -/
theorem resss {A2 B2 : «class»} :
  ⊦ wss (cres A2 B2) A2 :=
@eqsstri (cres A2 B2) (cin A2 (cxp B2 cvv)) A2
  (@df_res A2 B2)
  (@inss1 A2 (cxp B2 cvv))


/-- Commutative law for restriction. (Contributed by NM, 27-Mar-1998.) -/
theorem rescom {A2 B2 C : «class»} :
  ⊦ wceq (cres (cres A2 B2) C) (cres (cres A2 C) B2) :=
@«3eqtr4i» (cres A2 (cin B2 C)) (cres A2 (cin C B2)) (cres (cres A2 B2) C) (cres (cres A2 C) B2)
  (@reseq2i (cin B2 C) (cin C B2) A2
    (@incom B2 C))
  (@resres A2 B2 C)
  (@resres A2 C B2)


/-- Subclass theorem for restriction. (Contributed by NM, 16-Aug-1994.) -/
theorem ssres {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cres A2 C) (cres B2 C)) :=
@«3sstr4g» (wss A2 B2) (cin A2 (cxp C cvv)) (cin B2 (cxp C cvv)) (cres A2 C) (cres B2 C)
  (@ssrin A2 B2 (cxp C cvv))
  (@df_res A2 C)
  (@df_res B2 C)


/-- Subclass theorem for restriction. (Contributed by NM, 22-Mar-1998.) (Proof shortened by Andrew
Salmon, 27-Aug-2011.) -/
theorem ssres2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cres C A2) (cres C B2)) :=
@«3sstr4g» (wss A2 B2) (cin C (cxp A2 cvv)) (cin C (cxp B2 cvv)) (cres C A2) (cres C B2)
  (@syl (wss A2 B2) (wss (cxp A2 cvv) (cxp B2 cvv)) (wss (cin C (cxp A2 cvv)) (cin C (cxp B2 cvv)))
    (@xpss1 A2 B2 cvv)
    (@sslin (cxp A2 cvv) (cxp B2 cvv) C))
  (@df_res C A2)
  (@df_res C B2)


/-- A restriction is a relation. Exercise 12 of [TakeutiZaring] p. 25. (Contributed by NM,
2-Aug-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem relres {A2 B2 : «class»} :
  ⊦ wrel (cres A2 B2) :=
@mp2 (wss (cres A2 B2) (cxp B2 cvv)) (wrel (cxp B2 cvv)) (wrel (cres A2 B2))
  (@eqsstri (cres A2 B2) (cin A2 (cxp B2 cvv)) (cxp B2 cvv)
    (@df_res A2 B2)
    (@inss2 A2 (cxp B2 cvv)))
  (@relxp B2 cvv)
  (@relss (cres A2 B2) (cxp B2 cvv))


/-- Absorption law for restriction. Exercise 17 of [TakeutiZaring] p. 25. (Contributed by NM,
9-Aug-1994.) -/
theorem resabs1 {A2 B2 C : «class»} :
  ⊦ wi (wss B2 C) (wceq (cres (cres A2 C) B2) (cres A2 B2)) :=
@syl5eq (wss B2 C) (cres (cres A2 C) B2) (cres A2 (cin C B2)) (cres A2 B2)
  (@resres A2 C B2)
  (@sylbi (wss B2 C) (wceq (cin C B2) B2) (wceq (cres A2 (cin C B2)) (cres A2 B2))
    (@sseqin2 B2 C)
    (@reseq2 (cin C B2) B2 A2))


/-- Absorption law for restriction, deduction form. (Contributed by Glauco Siliprandi, 11-Dec-2019.)
-/
theorem resabs1d {ph : wff} {A2 B2 C : «class»}
  (resabs1d_b : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wceq (cres (cres A2 C) B2) (cres A2 B2)) :=
@syl ph (wss B2 C) (wceq (cres (cres A2 C) B2) (cres A2 B2))
  resabs1d_b
  (@resabs1 A2 B2 C)


/-- Absorption law for restriction. (Contributed by NM, 27-Mar-1998.) -/
theorem resabs2 {A2 B2 C : «class»} :
  ⊦ wi (wss B2 C) (wceq (cres (cres A2 B2) C) (cres A2 B2)) :=
@syl5eq (wss B2 C) (cres (cres A2 B2) C) (cres (cres A2 C) B2) (cres A2 B2)
  (@rescom A2 B2 C)
  (@resabs1 A2 B2 C)


/-- Idempotent law for restriction. (Contributed by NM, 27-Mar-1998.) -/
theorem residm {A2 B2 : «class»} :
  ⊦ wceq (cres (cres A2 B2) B2) (cres A2 B2) :=
@ax_mp (wss B2 B2) (wceq (cres (cres A2 B2) B2) (cres A2 B2))
  (@ssid B2)
  (@resabs2 A2 B2 B2)


/-- A restriction to an image. (Contributed by NM, 29-Sep-2004.) -/
theorem resima {A2 B2 : «class»} :
  ⊦ wceq (cima (cres A2 B2) B2) (cima A2 B2) :=
@«3eqtr4i» (crn (cres (cres A2 B2) B2)) (crn (cres A2 B2)) (cima (cres A2 B2) B2) (cima A2 B2)
  (@rneqi (cres (cres A2 B2) B2) (cres A2 B2)
    (@residm A2 B2))
  (@df_ima (cres A2 B2) B2)
  (@df_ima A2 B2)


/-- Image under a restricted class. (Contributed by FL, 31-Aug-2009.) (Proof shortened by JJ,
25-Aug-2021.) -/
theorem resima2 {A2 B2 C : «class»} :
  ⊦ wi (wss B2 C) (wceq (cima (cres A2 C) B2) (cima A2 B2)) :=
@«3eqtr4g» (wss B2 C) (crn (cres A2 (cin C B2))) (crn (cres A2 B2)) (cima (cres A2 C) B2) (cima A2 B2)
  (@rneqd (wss B2 C) (cres A2 (cin C B2)) (cres A2 B2)
    (@sylbi (wss B2 C) (wceq (cin C B2) B2) (wceq (cres A2 (cin C B2)) (cres A2 B2))
      (@sseqin2 B2 C)
      (@reseq2 (cin C B2) B2 A2)))
  (@eqtri (cima (cres A2 C) B2) (crn (cres (cres A2 C) B2)) (crn (cres A2 (cin C B2)))
    (@df_ima (cres A2 C) B2)
    (@rneqi (cres (cres A2 C) B2) (cres A2 (cin C B2))
      (@resres A2 C B2)))
  (@df_ima A2 B2)


/-- Restriction of a constant function (or other Cartesian product). (Contributed by Stefan O'Rear,
24-Jan-2015.) -/
theorem xpssres {A2 B2 C : «class»} :
  ⊦ wi (wss C A2) (wceq (cres (cxp A2 B2) C) (cxp C B2)) :=
@syl5eq (wss C A2) (cres (cxp A2 B2) C) (cxp (cin A2 C) B2) (cxp C B2)
  (@«3eqtri» (cres (cxp A2 B2) C) (cin (cxp A2 B2) (cxp C cvv)) (cxp (cin A2 C) (cin B2 cvv)) (cxp (cin A2 C) B2)
    (@df_res (cxp A2 B2) C)
    (@inxp A2 B2 C cvv)
    (@xpeq2i (cin B2 cvv) B2 (cin A2 C)
      (@inv1 B2)))
  (@xpeq1d (wss C A2) (cin A2 C) C B2
    (@biimpi (wss C A2) (wceq (cin A2 C) C)
      (@sseqin2 C A2)))


/-- Membership in an intersection with a Cartesian product. (Contributed by Peter Mazsa,
9-Sep-2022.) -/
theorem elinxp {A2 B2 C R : «class»} :
  ⊦ wb (wcel C (cin R (cxp A2 B2))) (wrex (λ x3, wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)) (λ y, B2)) (λ x3, A2)) :=
@impbii (wcel C (cin R (cxp A2 B2))) (wrex (λ x3, wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)) (λ y, B2)) (λ x3, A2))
  (@sylibr (wcel C (cin R (cxp A2 B2))) (wex (λ x3, wex (λ y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R))))) (wrex (λ x3, wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)) (λ y, B2)) (λ x3, A2))
    (@mpd (wcel C (cin R (cxp A2 B2))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y))))) (wex (λ x3, wex (λ y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)))))
      (@mpan (wrel (cin R (cxp A2 B2))) (wcel C (cin R (cxp A2 B2))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y)))))
        (@relinxp A2 B2 R)
        (setvar.forget $ λ x3 : setvar,
          setvar.forget $ λ y : setvar,
          show ⊦ wi (wa (wrel (cin R (cxp A2 B2))) (wcel C (cin R (cxp A2 B2)))) (wex (λ x3, wex (λ y, wceq C (cop (cv x3) (cv y))))), from
          @elrel C (λ x3 y, cin R (cxp A2 B2)) x3 y))
      (@«2eximdv» (wcel C (cin R (cxp A2 B2))) (λ x3 y, wceq C (cop (cv x3) (cv y))) (λ x3 y, wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)))
        (λ x3 y, @syl6ib (wcel C (cin R (cxp A2 B2))) (wceq C (cop (cv x3) (cv y))) (wa (wceq C (cop (cv x3) (cv y))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)))
          (@ancld (wcel C (cin R (cxp A2 B2))) (wceq C (cop (cv x3) (cv y))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R))
            (@syl6com (wceq C (cop (cv x3) (cv y))) (wcel C (cin R (cxp A2 B2))) (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R))
              (@biimpd (wceq C (cop (cv x3) (cv y))) (wcel C (cin R (cxp A2 B2))) (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2)))
                (@eleq1 C (cop (cv x3) (cv y)) (cin R (cxp A2 B2))))
              (@biimpi (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2))) (wa (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R))
                (@opelinxp A2 B2 (cv x3) (cv y) R))))
          (@an12 (wceq C (cop (cv x3) (cv y))) (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R)))))
    (@r2ex (λ x3 y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)) (λ x3, A2) (λ x3 y, B2)))
  (@rexlimivv (λ x3 y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R)) (wcel C (cin R (cxp A2 B2))) (λ x3, A2) (λ x3 y, B2)
    (λ x3 y, @impd (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) R) (wcel C (cin R (cxp A2 B2)))
      (@syl9 (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R) (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2))) (wceq C (cop (cv x3) (cv y))) (wcel C (cin R (cxp A2 B2)))
        (@simplbi2 (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2))) (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wcel (cop (cv x3) (cv y)) R)
          (@opelinxp A2 B2 (cv x3) (cv y) R))
        (@biimprd (wceq C (cop (cv x3) (cv y))) (wcel C (cin R (cxp A2 B2))) (wcel (cop (cv x3) (cv y)) (cin R (cxp A2 B2)))
          (@eleq1 C (cop (cv x3) (cv y)) (cin R (cxp A2 B2)))))))


/-- Membership in a restriction. (Contributed by Scott Fenton, 17-Mar-2011.) (Proof shortened by
Peter Mazsa, 9-Sep-2022.) -/
theorem elres {A2 B2 C : «class»} :
  ⊦ wb (wcel A2 (cres B2 C)) (wrex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2))) (λ x3, C)) :=
@«3bitri» (wcel A2 (cres B2 C)) (wcel A2 (cin B2 (cxp C cvv))) (wrex (λ x3, wrex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (λ y, cvv)) (λ x3, C)) (wrex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2))) (λ x3, C))
  (@eleq2i (cres B2 C) (cin B2 (cxp C cvv)) A2
    (@df_res B2 C))
  (@elinxp C cvv A2 B2)
  (@rexbii (λ x3, wrex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (λ y, cvv)) (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2))) (λ x3, C)
    (λ x3, @rexv (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2))))


/-- Membership in restriction to a singleton. (Contributed by Scott Fenton, 17-Mar-2011.) -/
theorem elsnres {A2 B2 C : «class»}
  (elsnres_1 : ⊦ wcel C cvv) :
  ⊦ wb (wcel A2 (cres B2 (csn C))) (wex (λ y, wa (wceq A2 (cop C (cv y))) (wcel (cop C (cv y)) B2))) :=
@«3bitri» (wcel A2 (cres B2 (csn C))) (wrex (λ x3, wex (λ y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2))) (λ x3, csn C)) (wex (λ y, wrex (λ x3, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (λ x3, csn C))) (wex (λ y, wa (wceq A2 (cop C (cv y))) (wcel (cop C (cv y)) B2)))
  (@elres A2 B2 (csn C))
  (@rexcom4 (λ x3 y, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (λ x3, csn C))
  (@exbii (λ y, wrex (λ x3, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (λ x3, csn C)) (λ y, wa (wceq A2 (cop C (cv y))) (wcel (cop C (cv y)) B2))
    (λ y, @rexsn (λ x3, wa (wceq A2 (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) B2)) (wa (wceq A2 (cop C (cv y))) (wcel (cop C (cv y)) B2)) C
      elsnres_1
      (λ x3, @anbi12d (wceq (cv x3) C) (wceq A2 (cop (cv x3) (cv y))) (wceq A2 (cop C (cv y))) (wcel (cop (cv x3) (cv y)) B2) (wcel (cop C (cv y)) B2)
        (@eqeq2d (wceq (cv x3) C) (cop (cv x3) (cv y)) (cop C (cv y)) A2
          (@opeq1 (cv x3) C (cv y)))
        (@eleq1d (wceq (cv x3) C) (cop (cv x3) (cv y)) (cop C (cv y)) B2
          (@opeq1 (cv x3) C (cv y))))))


/-- Simplification law for restriction. (Contributed by NM, 16-Aug-1994.) -/
theorem relssres {A2 B2 : «class»} :
  ⊦ wi (wa (wrel A2) (wss (cdm A2) B2)) (wceq (cres A2 B2) A2) :=
@sylibr (wa (wrel A2) (wss (cdm A2) B2)) (wa (wss (cres A2 B2) A2) (wss A2 (cres A2 B2))) (wceq (cres A2 B2) A2)
  (@jctil (wa (wrel A2) (wss (cdm A2) B2)) (wss A2 (cres A2 B2)) (wss (cres A2 B2) A2)
    (@relssdv (wa (wrel A2) (wss (cdm A2) B2)) A2 (cres A2 B2)
      (@simpl (wrel A2) (wss (cdm A2) B2))
      (λ x3 y, @adantl (wss (cdm A2) B2) (wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cres A2 B2))) (wrel A2)
        (@syl6ibr (wss (cdm A2) B2) (wcel (cop (cv x3) (cv y)) A2) (wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2)) (wcel (cop (cv x3) (cv y)) (cres A2 B2))
          (@ancrd (wss (cdm A2) B2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) B2)
            (@syl5 (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2)) (wss (cdm A2) B2) (wcel (cv x3) B2)
              (@opeldm (cv x3) (cv y) A2
                (@vex x3)
                (@vex y))
              (@ssel (cdm A2) B2 (cv x3))))
          (@opelresi B2 (cv x3) (cv y) A2
            (@vex y)))))
    (@resss A2 B2))
  (@eqss (cres A2 B2) A2)


/-- A relation restricted to its domain equals itself. (Contributed by NM, 12-Dec-2006.) -/
theorem resdm {A2 : «class»} :
  ⊦ wi (wrel A2) (wceq (cres A2 (cdm A2)) A2) :=
@mpan2 (wrel A2) (wss (cdm A2) (cdm A2)) (wceq (cres A2 (cdm A2)) A2)
  (@ssid (cdm A2))
  (@relssres A2 (cdm A2))


/-- The restriction of a set is a set. (Contributed by NM, 28-Mar-1998.) (Proof shortened by Andrew
Salmon, 27-Aug-2011.) -/
theorem resexg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel (cres A2 B2) cvv) :=
@mpan (wss (cres A2 B2) A2) (wcel A2 V) (wcel (cres A2 B2) cvv)
  (@resss A2 B2)
  (@ssexg (cres A2 B2) A2 V)


/-- The restriction of a set is a set. (Contributed by Jeff Madsen, 19-Jun-2011.) -/
theorem resex {A2 B2 : «class»}
  (resex_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel (cres A2 B2) cvv :=
@ax_mp (wcel A2 cvv) (wcel (cres A2 B2) cvv)
  resex_1
  (@resexg A2 B2 cvv)


/-- Restriction of a class abstraction of ordered pairs. (Contributed by NM, 5-Nov-2002.) -/
theorem resopab {ph : setvar → setvar → wff} {A2 : «class»} :
  ⊦ wceq (cres (copab (λ x3 y, ph x3 y)) A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))) :=
@eqtri (cres (copab (λ x3 y, ph x3 y)) A2) (cin (copab (λ x3 y, ph x3 y)) (cxp A2 cvv)) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
  (@df_res (copab (λ x3 y, ph x3 y)) A2)
  (@eqtri (cin (copab (λ x3 y, ph x3 y)) (cxp A2 cvv)) (cin (copab (λ x3 y, wcel (cv x3) A2)) (copab (λ x3 y, ph x3 y))) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
    (@eqtri (cin (copab (λ x3 y, ph x3 y)) (cxp A2 cvv)) (cin (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, wcel (cv x3) A2))) (cin (copab (λ x3 y, wcel (cv x3) A2)) (copab (λ x3 y, ph x3 y)))
      (@ineq2i (cxp A2 cvv) (copab (λ x3 y, wcel (cv x3) A2)) (copab (λ x3 y, ph x3 y))
        (@eqtr4i (cxp A2 cvv) (copab (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) cvv))) (copab (λ x3 y, wcel (cv x3) A2))
          (@df_xp A2 cvv)
          (@opabbii (λ x3 y, wcel (cv x3) A2) (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) cvv))
            (λ x3 y, @biantru (wcel (cv y) cvv) (wcel (cv x3) A2)
              (@vex y)))))
      (@incom (copab (λ x3 y, ph x3 y)) (copab (λ x3 y, wcel (cv x3) A2))))
    (@inopab (λ x3 y, wcel (cv x3) A2) (λ x3 y, ph x3 y)))


/-- A subclass of the identity function is the identity function restricted to its domain.
(Contributed by NM, 13-Dec-2003.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem iss {A2 : «class»} :
  ⊦ wb (wss A2 cid) (wceq A2 (cres cid (cdm A2))) :=
@impbii (wss A2 cid) (wceq A2 (cres cid (cdm A2)))
  (@mpbird (wss A2 cid) (wceq A2 (cres cid (cdm A2))) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cres cid (cdm A2))))))
    (@alrimivv (wss A2 cid) (λ x3 y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cres cid (cdm A2))))
      (λ x3 y, @bitr4di (wss A2 cid) (wcel (cop (cv x3) (cv y)) A2) (wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) cid)) (wcel (cop (cv x3) (cv y)) (cres cid (cdm A2)))
        (@impbid (wss A2 cid) (wcel (cop (cv x3) (cv y)) A2) (wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) cid))
          (@jcad (wss A2 cid) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) cid)
            (@a1i (wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))) (wss A2 cid)
              (@opeldm (cv x3) (cv y) A2
                (@vex x3)
                (@vex y)))
            (@ssel A2 cid (cop (cv x3) (cv y))))
          (@impcomd (wss A2 cid) (wcel (cop (cv x3) (cv y)) cid) (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2)
            (@syl5bi (wcel (cop (cv x3) (cv y)) cid) (wceq (cv x3) (cv y)) (wss A2 cid) (wi (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2))
              (@bitr3i (wcel (cop (cv x3) (cv y)) cid) (wbr (cv x3) (cv y) cid) (wceq (cv x3) (cv y))
                (@df_br (cv x3) (cv y) cid)
                (@ideq (cv x3) (cv y)
                  (@vex y)))
              (@syl5ibcom (wss A2 cid) (wi (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv x3)) A2)) (wceq (cv x3) (cv y)) (wi (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2))
                (@syl5bi (wcel (cv x3) (cdm A2)) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wss A2 cid) (wcel (cop (cv x3) (cv x3)) A2)
                  (@eldm2 (cv x3) A2
                    (@vex x3))
                  (@exlimdv (wss A2 cid) (λ y, wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv x3)) A2)
                    (λ y, @sylcom (wss A2 cid) (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) cid) (wcel (cop (cv x3) (cv x3)) A2)
                      (@ssel A2 cid (cop (cv x3) (cv y)))
                      (@syl5bi (wcel (cop (cv x3) (cv y)) cid) (wceq (cv x3) (cv y)) (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv x3)) A2)
                        (@bitr3i (wcel (cop (cv x3) (cv y)) cid) (wbr (cv x3) (cv y) cid) (wceq (cv x3) (cv y))
                          (@df_br (cv x3) (cv y) cid)
                          (@ideq (cv x3) (cv y)
                            (@vex y)))
                        (@biimprcd (wceq (cv x3) (cv y)) (wcel (cop (cv x3) (cv x3)) A2) (wcel (cop (cv x3) (cv y)) A2)
                          (@eleq1d (wceq (cv x3) (cv y)) (cop (cv x3) (cv x3)) (cop (cv x3) (cv y)) A2
                            (@opeq2 (cv x3) (cv y) (cv x3))))))))
                (@imbi2d (wceq (cv x3) (cv y)) (wcel (cop (cv x3) (cv x3)) A2) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))
                  (@eleq1d (wceq (cv x3) (cv y)) (cop (cv x3) (cv x3)) (cop (cv x3) (cv y)) A2
                    (@opeq2 (cv x3) (cv y) (cv x3))))))))
        (@opelresi (cdm A2) (cv x3) (cv y) cid
          (@vex y))))
    (@sylancl (wss A2 cid) (wrel A2) (wrel (cres cid (cdm A2))) (wb (wceq A2 (cres cid (cdm A2))) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cres cid (cdm A2)))))))
      (@mpi (wss A2 cid) (wrel cid) (wrel A2)
        reli
        (@relss A2 cid))
      (@relres cid (cdm A2))
      (@eqrel A2 (cres cid (cdm A2)))))
  (@mpbiri (wceq A2 (cres cid (cdm A2))) (wss A2 cid) (wss (cres cid (cdm A2)) cid)
    (@resss cid (cdm A2))
    (@sseq1 A2 (cres cid (cdm A2)) cid))


/-- Restriction of a class abstraction of ordered pairs. (Contributed by NM, 24-Aug-2007.) -/
theorem resopab2 {ph : setvar → setvar → wff} {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wceq (cres (copab (λ x3 y, wa (wcel (cv x3) B2) (ph x3 y))) A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) :=
@syl5eq (wss A2 B2) (cres (copab (λ x3 y, wa (wcel (cv x3) B2) (ph x3 y))) A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3 y)))) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
  (@resopab (λ x3 y, wa (wcel (cv x3) B2) (ph x3 y)) A2)
  (@opabbidv (wss A2 B2) (λ x3 y, wa (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3 y))) (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))
    (λ x3 y, @bitr2di (wss A2 B2) (wa (wcel (cv x3) A2) (ph x3 y)) (wa (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (ph x3 y)) (wa (wcel (cv x3) A2) (wa (wcel (cv x3) B2) (ph x3 y)))
      (@anbi1d (wss A2 B2) (wcel (cv x3) A2) (wa (wcel (cv x3) A2) (wcel (cv x3) B2)) (ph x3 y)
        (@pm4_71d (wss A2 B2) (wcel (cv x3) A2) (wcel (cv x3) B2)
          (@ssel A2 B2 (cv x3))))
      (@anass (wcel (cv x3) A2) (wcel (cv x3) B2) (ph x3 y))))


/-- Restriction of the mapping operation. (Contributed by Mario Carneiro, 15-Jul-2013.) -/
theorem resmpt {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wi (wss B2 A2) (wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, B2) (λ x3, C x3))) :=
@«3eqtr4g» (wss B2 A2) (cres (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (C x3)))) B2) (copab (λ x3 y, wa (wcel (cv x3) B2) (wceq (cv y) (C x3)))) (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, B2) (λ x3, C x3))
  (@resopab2 (λ x3 y, wceq (cv y) (C x3)) B2 A2)
  (@reseq1i (cmpt (λ x3, A2) (λ x3, C x3)) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (C x3)))) B2
    (@df_mpt (λ x3, A2) (λ x3, C x3)))
  (@df_mpt (λ x3, B2) (λ x3, C x3))


/-- Unconditional restriction of the mapping operation. (Contributed by Stefan O'Rear, 24-Jan-2015.)
(Proof shortened by Mario Carneiro, 22-Mar-2015.) -/
theorem resmpt3 {A2 B2 : «class»} {C : setvar → «class»} :
  ⊦ wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, cin A2 B2) (λ x3, C x3)) :=
@«3eqtr3i» (cres (cres (cmpt (λ x3, A2) (λ x3, C x3)) A2) B2) (cres (cmpt (λ x3, A2) (λ x3, C x3)) (cin A2 B2)) (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, cin A2 B2) (λ x3, C x3))
  (@resres (cmpt (λ x3, A2) (λ x3, C x3)) A2 B2)
  (@reseq1i (cres (cmpt (λ x3, A2) (λ x3, C x3)) A2) (cmpt (λ x3, A2) (λ x3, C x3)) B2
    (@ax_mp (wss A2 A2) (wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) A2) (cmpt (λ x3, A2) (λ x3, C x3)))
      (@ssid A2)
      (@resmpt A2 A2 (λ x3, C x3))))
  (@ax_mp (wss (cin A2 B2) A2) (wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) (cin A2 B2)) (cmpt (λ x3, cin A2 B2) (λ x3, C x3)))
    (@inss1 A2 B2)
    (@resmpt A2 (cin A2 B2) (λ x3, C x3)))


/-- Restriction of the mapping operation, deduction form. (Contributed by Glauco Siliprandi,
11-Dec-2019.) -/
theorem resmptd {ph : setvar → wff} {A2 B2 : «class»} {C : setvar → «class»}
  (resmptd_b : ∀ x3, ⊦ wi (ph x3) (wss B2 A2))
  (x3 : setvar) : ⊦ wi (ph x3) (wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, B2) (λ x3, C x3))) :=
@syl (ph x3) (wss B2 A2) (wceq (cres (cmpt (λ x3, A2) (λ x3, C x3)) B2) (cmpt (λ x3, B2) (λ x3, C x3)))
  (resmptd_b x3)
  (@resmpt A2 B2 (λ x3, C x3))


/-- Alternate definition of the restriction operation. (Contributed by Mario Carneiro, 5-Nov-2013.)
-/
theorem dfres2 {A2 R : «class»} :
  ⊦ wceq (cres R A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) R))) :=
@eqrelriiv (cres R A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) R)))
  (@relres R A2)
  (@relopabv (λ x3 y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) R)))
  (λ z w, @«3bitr2ri» (wcel (cop (cv z) (cv w)) (copab (λ x3 y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) R)))) (wa (wcel (cv z) A2) (wbr (cv z) (cv w) R)) (wbr (cv z) (cv w) (cres R A2)) (wcel (cop (cv z) (cv w)) (cres R A2))
    (@opelopab (λ x3 y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) R)) (λ x3 y, wa (wcel (cv z) A2) (wbr (cv z) (cv y) R)) (wa (wcel (cv z) A2) (wbr (cv z) (cv w) R)) (cv z) (cv w)
      (@vex z)
      (@vex w)
      (λ x3 y, @anbi12d (wceq (cv x3) (cv z)) (wcel (cv x3) A2) (wcel (cv z) A2) (wbr (cv x3) (cv y) R) (wbr (cv z) (cv y) R)
        (@eleq1w (λ x3 z, A2) x3 z)
        (@breq1 (cv x3) (cv z) (cv y) R))
      (λ x3 y, @anbi2d (wceq (cv y) (cv w)) (wbr (cv z) (cv y) R) (wbr (cv z) (cv w) R) (wcel (cv z) A2)
        (@breq2 (cv y) (cv w) (cv z) R)))
    (@brresi A2 (cv z) (cv w) R
      (@vex w))
    (@df_br (cv z) (cv w) (cres R A2)))


/-- Characterization of the elements of the intersection of the identity relation with a Cartesian
product. (Contributed by Peter Mazsa, 9-Sep-2022.) -/
theorem elidinxp {A2 B2 C : «class»} :
  ⊦ wb (wcel C (cin cid (cxp A2 B2))) (wrex (λ x3, wceq C (cop (cv x3) (cv x3))) (λ x3, cin A2 B2)) :=
@«3bitr4ri» (wrex (λ x3, wa (wcel (cv x3) B2) (wceq C (cop (cv x3) (cv x3)))) (λ x3, A2)) (wrex (λ x3, wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) cid)) (λ y, B2)) (λ x3, A2)) (wrex (λ x3, wceq C (cop (cv x3) (cv x3))) (λ x3, cin A2 B2)) (wcel C (cin cid (cxp A2 B2)))
  (@rexbii (λ x3, wa (wcel (cv x3) B2) (wceq C (cop (cv x3) (cv x3)))) (λ x3, wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) cid)) (λ y, B2)) (λ x3, A2)
    (λ x3, @«3bitr2i» (wa (wcel (cv x3) B2) (wceq C (cop (cv x3) (cv x3)))) (wa (wceq C (cop (cv x3) (cv x3))) (wrex (λ y, wceq (cv y) (cv x3)) (λ y, B2))) (wrex (λ y, wa (wceq C (cop (cv x3) (cv x3))) (wceq (cv y) (cv x3))) (λ y, B2)) (wrex (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) cid)) (λ y, B2))
      (@anbi2ci (wcel (cv x3) B2) (wrex (λ y, wceq (cv y) (cv x3)) (λ y, B2)) (wceq C (cop (cv x3) (cv x3)))
        (@risset (cv x3) B2))
      (@r19_42v (wceq C (cop (cv x3) (cv x3))) (λ y, wceq (cv y) (cv x3)) (λ y, B2))
      (@rexbii (λ y, wa (wceq C (cop (cv x3) (cv x3))) (wceq (cv y) (cv x3))) (λ y, wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) cid)) (λ y, B2)
        (λ y, @bitr4i (wa (wceq C (cop (cv x3) (cv x3))) (wceq (cv y) (cv x3))) (wa (wceq C (cop (cv x3) (cv y))) (wceq (cv y) (cv x3))) (wa (wceq C (cop (cv x3) (cv y))) (wcel (cop (cv x3) (cv y)) cid))
          (@pm5_32ri (wceq (cv y) (cv x3)) (wceq C (cop (cv x3) (cv x3))) (wceq C (cop (cv x3) (cv y)))
            (@eqeq2d (wceq (cv y) (cv x3)) (cop (cv x3) (cv x3)) (cop (cv x3) (cv y)) C
              (@equcoms (λ x3 y, wceq (cop (cv x3) (cv x3)) (cop (cv x3) (cv y)))
                (λ x3 y, @opeq2 (cv x3) (cv y) (cv x3)) x3 y)))
          (@anbi2i (wcel (cop (cv x3) (cv y)) cid) (wceq (cv y) (cv x3)) (wceq C (cop (cv x3) (cv y)))
            (@«3bitr3i» (wbr (cv x3) (cv y) cid) (wceq (cv x3) (cv y)) (wcel (cop (cv x3) (cv y)) cid) (wceq (cv y) (cv x3))
              (@ideq (cv x3) (cv y)
                (@vex y))
              (@df_br (cv x3) (cv y) cid)
              (@equcom x3 y)))))))
  (@rexin (λ x3, wceq C (cop (cv x3) (cv x3))) (λ x3, A2) (λ x3, B2))
  (@elinxp A2 B2 C cid)


/-- Characterization of the elements of a restricted identity relation. (Contributed by BJ,
28-Aug-2022.) (Proof shortened by Peter Mazsa, 9-Sep-2022.) -/
theorem elrid {A2 X : «class»} :
  ⊦ wb (wcel A2 (cres cid X)) (wrex (λ x3, wceq A2 (cop (cv x3) (cv x3))) (λ x3, X)) :=
@«3bitri» (wcel A2 (cres cid X)) (wcel A2 (cin cid (cxp X cvv))) (wrex (λ x3, wceq A2 (cop (cv x3) (cv x3))) (λ x3, cin X cvv)) (wrex (λ x3, wceq A2 (cop (cv x3) (cv x3))) (λ x3, X))
  (@eleq2i (cres cid X) (cin cid (cxp X cvv)) A2
    (@df_res cid X))
  (@elidinxp X cvv A2)
  (@rexeqi (λ x3, wceq A2 (cop (cv x3) (cv x3))) (cin X cvv) X
    (@inv1 X))


/-- The intersection of the identity relation with a cartesian product is the restriction of the
identity relation to the intersection of the factors. (Contributed by FL, 2-Aug-2009.) (Proof
shortened by Peter Mazsa, 9-Sep-2022.) Generalize statement from cartesian square (now ~ idinxpresid
) to cartesian product. (Revised by BJ, 23-Dec-2023.) -/
theorem idinxpres {A2 B2 : «class»} :
  ⊦ wceq (cin cid (cxp A2 B2)) (cres cid (cin A2 B2)) :=
@eqriv (cin cid (cxp A2 B2)) (cres cid (cin A2 B2))
  (λ x3, @bitr4i (wcel (cv x3) (cin cid (cxp A2 B2))) (wrex (λ y, wceq (cv x3) (cop (cv y) (cv y))) (λ y, cin A2 B2)) (wcel (cv x3) (cres cid (cin A2 B2)))
    (@elidinxp A2 B2 (cv x3))
    (@elrid (cv x3) (cin A2 B2)))


/-- The intersection of the identity relation with the cartesian square of a class is the
restriction of the identity relation to that class. (Contributed by FL, 2-Aug-2009.) (Proof
shortened by Peter Mazsa, 9-Sep-2022.) (Proof shortened by BJ, 23-Dec-2023.) -/
theorem idinxpresid {A2 : «class»} :
  ⊦ wceq (cin cid (cxp A2 A2)) (cres cid A2) :=
@eqtri (cin cid (cxp A2 A2)) (cres cid (cin A2 A2)) (cres cid A2)
  (@idinxpres A2 A2)
  (@reseq2i (cin A2 A2) A2 cid
    (@inidm A2))


/-- A diagonal set as a subset of a Cartesian square. (Contributed by Thierry Arnoux, 29-Dec-2019.)
(Proof shortened by BJ, 9-Sep-2022.) -/
theorem idssxp {A2 : «class»} :
  ⊦ wss (cres cid A2) (cxp A2 A2) :=
@eqsstrri (cres cid A2) (cin cid (cxp A2 A2)) (cxp A2 A2)
  (@idinxpresid A2)
  (@inss2 cid (cxp A2 A2))


/-- The restricted identity relation expressed as an ordered-pair class abstraction. (Contributed by
FL, 25-Apr-2012.) -/
theorem opabresid {A2 : «class»} :
  ⊦ wceq (cres cid A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (cv x3)))) :=
@eqtri (cres cid A2) (cres (copab (λ x3 y, wceq (cv y) (cv x3))) A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (cv x3))))
  (@reseq1i cid (copab (λ x3 y, wceq (cv y) (cv x3))) A2
    (@eqtri cid (copab (λ x3 y, wceq (cv x3) (cv y))) (copab (λ x3 y, wceq (cv y) (cv x3)))
      df_id
      (@opabbii (λ x3 y, wceq (cv x3) (cv y)) (λ x3 y, wceq (cv y) (cv x3))
        (λ x3 y, @equcom x3 y))))
  (@resopab (λ x3 y, wceq (cv y) (cv x3)) A2)


/-- The restricted identity relation expressed in maps-to notation. (Contributed by FL,
25-Apr-2012.) -/
theorem mptresid {A2 : «class»} :
  ⊦ wceq (cres cid A2) (cmpt (λ x3, A2) (λ x3, cv x3)) :=
@eqtr4i (cres cid A2) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (cv x3)))) (cmpt (λ x3, A2) (λ x3, cv x3))
  (@opabresid A2)
  (@df_mpt (λ x3, A2) (λ x3, cv x3))


/-- Equality theorem for image. (Contributed by NM, 14-Aug-1994.) -/
theorem imaeq1 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cima A2 C) (cima B2 C)) :=
@«3eqtr4g» (wceq A2 B2) (crn (cres A2 C)) (crn (cres B2 C)) (cima A2 C) (cima B2 C)
  (@rneqd (wceq A2 B2) (cres A2 C) (cres B2 C)
    (@reseq1 A2 B2 C))
  (@df_ima A2 C)
  (@df_ima B2 C)


/-- Equality theorem for image. (Contributed by NM, 14-Aug-1994.) -/
theorem imaeq2 {A2 B2 C : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cima C A2) (cima C B2)) :=
@«3eqtr4g» (wceq A2 B2) (crn (cres C A2)) (crn (cres C B2)) (cima C A2) (cima C B2)
  (@rneqd (wceq A2 B2) (cres C A2) (cres C B2)
    (@reseq2 A2 B2 C))
  (@df_ima C A2)
  (@df_ima C B2)


/-- Equality theorem for image. (Contributed by NM, 21-Dec-2008.) -/
theorem imaeq1i {A2 B2 C : «class»}
  (imaeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cima A2 C) (cima B2 C) :=
@ax_mp (wceq A2 B2) (wceq (cima A2 C) (cima B2 C))
  imaeq1i_1
  (@imaeq1 A2 B2 C)


/-- Equality theorem for image. (Contributed by NM, 21-Dec-2008.) -/
theorem imaeq2i {A2 B2 C : «class»}
  (imaeq1i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cima C A2) (cima C B2) :=
@ax_mp (wceq A2 B2) (wceq (cima C A2) (cima C B2))
  imaeq1i_1
  (@imaeq2 A2 B2 C)


/-- Equality theorem for image. (Contributed by FL, 15-Dec-2006.) -/
theorem imaeq1d {ph : wff} {A2 B2 C : «class»}
  (imaeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cima A2 C) (cima B2 C)) :=
@syl ph (wceq A2 B2) (wceq (cima A2 C) (cima B2 C))
  imaeq1d_1
  (@imaeq1 A2 B2 C)


/-- Equality theorem for image. (Contributed by FL, 15-Dec-2006.) -/
theorem imaeq2d {ph : wff} {A2 B2 C : «class»}
  (imaeq1d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cima C A2) (cima C B2)) :=
@syl ph (wceq A2 B2) (wceq (cima C A2) (cima C B2))
  imaeq1d_1
  (@imaeq2 A2 B2 C)


/-- Equality theorem for image. (Contributed by Mario Carneiro, 4-Dec-2016.) -/
theorem imaeq12d {ph : wff} {A2 B2 C D : «class»}
  (imaeq1d_1 : ⊦ wi ph (wceq A2 B2))
  (imaeq12d_2 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wceq (cima A2 C) (cima B2 D)) :=
@eqtrd ph (cima A2 C) (cima B2 C) (cima B2 D)
  (@imaeq1d ph A2 B2 C
    imaeq1d_1)
  (@imaeq2d ph C D B2
    imaeq12d_2)


/-- Alternate definition of image. Compare definition (d) of [Enderton] p. 44. (Contributed by NM,
19-Apr-2004.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) (Proof shortened by Peter Mazsa,
2-Oct-2022.) -/
theorem dfima2 {A2 B2 : «class»} :
  ⊦ wceq (cima A2 B2) (cab (λ y, wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2))) :=
@«3eqtri» (cima A2 B2) (crn (cres A2 B2)) (cab (λ y, wex (λ x3, wbr (cv x3) (cv y) (cres A2 B2)))) (cab (λ y, wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2)))
  (@df_ima A2 B2)
  (@dfrn2 (cres A2 B2))
  (@abbii (λ y, wex (λ x3, wbr (cv x3) (cv y) (cres A2 B2))) (λ y, wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2))
    (λ y, @bitr4i (wex (λ x3, wbr (cv x3) (cv y) (cres A2 B2))) (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) A2))) (wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2))
      (@exbii (λ x3, wbr (cv x3) (cv y) (cres A2 B2)) (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) A2))
        (λ x3, @elv (λ y, wb (wbr (cv x3) (cv y) (cres A2 B2)) (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) A2)))
          (λ y, @brres B2 (cv x3) (cv y) A2 cvv) y))
      (@df_rex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2))))


/-- Alternate definition of image. Compare definition (d) of [Enderton] p. 44. (Contributed by NM,
14-Aug-1994.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dfima3 {A2 B2 : «class»} :
  ⊦ wceq (cima A2 B2) (cab (λ y, wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2)))) :=
@eqtri (cima A2 B2) (cab (λ y, wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2))) (cab (λ y, wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2))))
  (@dfima2 A2 B2)
  (@abbii (λ y, wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2)) (λ y, wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2)))
    (λ y, @bitri (wrex (λ x3, wbr (cv x3) (cv y) A2) (λ x3, B2)) (wrex (λ x3, wcel (cop (cv x3) (cv y)) A2) (λ x3, B2)) (wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2)))
      (@rexbii (λ x3, wbr (cv x3) (cv y) A2) (λ x3, wcel (cop (cv x3) (cv y)) A2) (λ x3, B2)
        (λ x3, @df_br (cv x3) (cv y) A2))
      (@df_rex (λ x3, wcel (cop (cv x3) (cv y)) A2) (λ x3, B2))))


/-- Membership in an image. Theorem 34 of [Suppes] p. 65. (Contributed by NM, 20-Jan-2007.) -/
theorem elimag {A2 B2 C : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C))) :=
setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 (V x3)) (wb (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C))), from
  @elab2g (λ y, wrex (λ x3, wbr (cv x3) (cv y) B2) (λ x3, C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C)) A2 (λ y, cima B2 C) (λ y, V x3)
    (λ y, @rexbidv (wceq (cv y) A2) (λ x3, wbr (cv x3) (cv y) B2) (λ x3, wbr (cv x3) A2 B2) (λ x3, C)
      (λ x3, @breq2 (cv y) A2 (cv x3) B2))
    (λ y, @dfima2 B2 C) y


/-- Membership in an image. Theorem 34 of [Suppes] p. 65. (Contributed by NM, 19-Apr-2004.) -/
theorem elima {A2 B2 C : «class»}
  (elima_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C)))
  elima_1
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel A2 cvv) (wb (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C))), from
    @elimag A2 B2 C (λ x3, cvv) x3)


/-- Membership in an image. Theorem 34 of [Suppes] p. 65. (Contributed by NM, 11-Aug-2004.) -/
theorem elima2 {A2 B2 C : «class»}
  (elima_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cima B2 C)) (wex (λ x3, wa (wcel (cv x3) C) (wbr (cv x3) A2 B2))) :=
@bitri (wcel A2 (cima B2 C)) (wrex (λ x3, wbr (cv x3) A2 B2) (λ x3, C)) (wex (λ x3, wa (wcel (cv x3) C) (wbr (cv x3) A2 B2)))
  (@elima A2 B2 C
    elima_1)
  (@df_rex (λ x3, wbr (cv x3) A2 B2) (λ x3, C))


/-- Membership in an image. Theorem 34 of [Suppes] p. 65. (Contributed by NM, 14-Aug-1994.) -/
theorem elima3 {A2 B2 C : «class»}
  (elima_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (cima B2 C)) (wex (λ x3, wa (wcel (cv x3) C) (wcel (cop (cv x3) A2) B2))) :=
@bitri (wcel A2 (cima B2 C)) (wex (λ x3, wa (wcel (cv x3) C) (wbr (cv x3) A2 B2))) (wex (λ x3, wa (wcel (cv x3) C) (wcel (cop (cv x3) A2) B2)))
  (@elima2 A2 B2 C
    elima_1)
  (@exbii (λ x3, wa (wcel (cv x3) C) (wbr (cv x3) A2 B2)) (λ x3, wa (wcel (cv x3) C) (wcel (cop (cv x3) A2) B2))
    (λ x3, @anbi2i (wbr (cv x3) A2 B2) (wcel (cop (cv x3) A2) B2) (wcel (cv x3) C)
      (@df_br (cv x3) A2 B2)))


/-- Bound-variable hypothesis builder for image. (Contributed by NM, 30-Dec-1996.) (Proof shortened
by Andrew Salmon, 27-Aug-2011.) -/
theorem nfima {A2 B2 : setvar → «class»}
  (nfima_1 : ⊦ wnfc (λ x3, A2 x3))
  (nfima_2 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnfc (λ x3, cima (A2 x3) (B2 x3)) :=
@nfcxfr (λ x3, cima (A2 x3) (B2 x3)) (λ x3, crn (cres (A2 x3) (B2 x3)))
  (λ x3, @df_ima (A2 x3) (B2 x3))
  (@nfrn (λ x3, cres (A2 x3) (B2 x3))
    (@nfres (λ x3, A2 x3) (λ x3, B2 x3)
      nfima_1
      nfima_2))


/-- The image of the domain of a class is the range of the class. (Contributed by NM, 14-Aug-1994.)
-/
theorem imadmrn {A2 : «class»} :
  ⊦ wceq (cima A2 (cdm A2)) (crn A2) :=
@«3eqtr4i» (cab (λ y, wex (λ x3, wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2)))) (cab (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))) (cima A2 (cdm A2)) (crn A2)
  (@abbii (λ y, wex (λ x3, wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2))) (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))
    (λ y, @exbii (λ x3, wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2)) (λ x3, wcel (cop (cv x3) (cv y)) A2)
      (λ x3, @bitr2i (wcel (cop (cv x3) (cv y)) A2) (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))) (wa (wcel (cv x3) (cdm A2)) (wcel (cop (cv x3) (cv y)) A2))
        (@pm4_71i (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))
          (@opeldm (cv x3) (cv y) A2
            (@vex x3)
            (@vex y)))
        (@ancom (wcel (cop (cv x3) (cv y)) A2) (wcel (cv x3) (cdm A2))))))
  (@dfima3 A2 (cdm A2))
  (@dfrn3 A2)


/-- The image of a class is a subset of its range. Theorem 3.16(xi) of [Monk1] p. 39. (Contributed
by NM, 31-Mar-1995.) -/
theorem imassrn {A2 B2 : «class»} :
  ⊦ wss (cima A2 B2) (crn A2) :=
@«3sstr4i» (cab (λ y, wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2)))) (cab (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))) (cima A2 B2) (crn A2)
  (@ss2abi (λ y, wex (λ x3, wa (wcel (cv x3) B2) (wcel (cop (cv x3) (cv y)) A2))) (λ y, wex (λ x3, wcel (cop (cv x3) (cv y)) A2))
    (λ y, @exsimpr (λ x3, wcel (cv x3) B2) (λ x3, wcel (cop (cv x3) (cv y)) A2)))
  (@dfima3 A2 B2)
  (@dfrn3 A2)


/-- Image under the identity relation. Theorem 3.16(viii) of [Monk1] p. 38. (Contributed by NM,
30-Apr-1998.) -/
theorem imai {A2 : «class»} :
  ⊦ wceq (cima cid A2) A2 :=
@«3eqtri» (cima cid A2) (cab (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wcel (cop (cv x3) (cv y)) cid)))) (cab (λ y, wcel (cv y) A2)) A2
  (@dfima3 cid A2)
  (@abbii (λ y, wex (λ x3, wa (wcel (cv x3) A2) (wcel (cop (cv x3) (cv y)) cid))) (λ y, wcel (cv y) A2)
    (λ y, @bitri (wex (λ x3, wa (wcel (cv x3) A2) (wcel (cop (cv x3) (cv y)) cid))) (wex (λ x3, wa (wceq (cv x3) (cv y)) (wcel (cv x3) A2))) (wcel (cv y) A2)
      (@exbii (λ x3, wa (wcel (cv x3) A2) (wcel (cop (cv x3) (cv y)) cid)) (λ x3, wa (wceq (cv x3) (cv y)) (wcel (cv x3) A2))
        (λ x3, @anbi1ci (wcel (cop (cv x3) (cv y)) cid) (wceq (cv x3) (cv y)) (wcel (cv x3) A2)
          (@bitr3i (wcel (cop (cv x3) (cv y)) cid) (wbr (cv x3) (cv y) cid) (wceq (cv x3) (cv y))
            (@df_br (cv x3) (cv y) cid)
            (@ideq (cv x3) (cv y)
              (@vex y)))))
      (@equsexvw (λ x3 y, wcel (cv x3) A2) (λ y, wcel (cv y) A2)
        (λ x3 y, @eleq1w (λ x3 y, A2) x3 y) y)))
  (@abid2 A2)


/-- The range of the restricted identity function. (Contributed by NM, 27-Aug-2004.) -/
theorem rnresi {A2 : «class»} :
  ⊦ wceq (crn (cres cid A2)) A2 :=
@eqtr3i (cima cid A2) (crn (cres cid A2)) A2
  (@df_ima cid A2)
  (@imai A2)


/-- The image of a restriction of the identity function. (Contributed by FL, 31-Dec-2006.) -/
theorem resiima {A2 B2 : «class»} :
  ⊦ wi (wss B2 A2) (wceq (cima (cres cid A2) B2) B2) :=
@«3eqtrd» (wss B2 A2) (cima (cres cid A2) B2) (crn (cres (cres cid A2) B2)) (crn (cres cid B2)) B2
  (@a1i (wceq (cima (cres cid A2) B2) (crn (cres (cres cid A2) B2))) (wss B2 A2)
    (@df_ima (cres cid A2) B2))
  (@rneqd (wss B2 A2) (cres (cres cid A2) B2) (cres cid B2)
    (@resabs1 cid B2 A2))
  (@a1i (wceq (crn (cres cid B2)) B2) (wss B2 A2)
    (@rnresi B2))


/-- Image of the empty set. Theorem 3.16(ii) of [Monk1] p. 38. (Contributed by NM, 20-May-1998.) -/
theorem ima0 {A2 : «class»} :
  ⊦ wceq (cima A2 c0) c0 :=
@«3eqtri» (cima A2 c0) (crn (cres A2 c0)) (crn c0) c0
  (@df_ima A2 c0)
  (@rneqi (cres A2 c0) c0
    (@res0 A2))
  rn0


/-- A class whose image under another is empty is disjoint with the other's domain. (Contributed by
FL, 24-Jan-2007.) -/
theorem imadisj {A2 B2 : «class»} :
  ⊦ wb (wceq (cima A2 B2) c0) (wceq (cin (cdm A2) B2) c0) :=
@«3bitr2i» (wceq (cima A2 B2) c0) (wceq (crn (cres A2 B2)) c0) (wceq (cdm (cres A2 B2)) c0) (wceq (cin (cdm A2) B2) c0)
  (@eqeq1i (cima A2 B2) (crn (cres A2 B2)) c0
    (@df_ima A2 B2))
  (@dm0rn0 (cres A2 B2))
  (@eqeq1i (cdm (cres A2 B2)) (cin (cdm A2) B2) c0
    (@eqtri (cdm (cres A2 B2)) (cin B2 (cdm A2)) (cin (cdm A2) B2)
      (@dmres A2 B2)
      (@incom B2 (cdm A2))))


/-- A preimage under any class is included in the domain of the class. (Contributed by FL,
29-Jan-2007.) -/
theorem cnvimass {A2 B2 : «class»} :
  ⊦ wss (cima (ccnv A2) B2) (cdm A2) :=
@sseqtrri (cima (ccnv A2) B2) (crn (ccnv A2)) (cdm A2)
  (@imassrn (ccnv A2) B2)
  (@dfdm4 A2)


/-- The preimage of the range of a class is the domain of the class. (Contributed by Jeff Hankins,
15-Jul-2009.) -/
theorem cnvimarndm {A2 : «class»} :
  ⊦ wceq (cima (ccnv A2) (crn A2)) (cdm A2) :=
@«3eqtr4i» (cima (ccnv A2) (cdm (ccnv A2))) (crn (ccnv A2)) (cima (ccnv A2) (crn A2)) (cdm A2)
  (@imadmrn (ccnv A2))
  (@imaeq2i (crn A2) (cdm (ccnv A2)) (ccnv A2)
    (@df_rn A2))
  (@dfdm4 A2)


/-- The image of a singleton. (Contributed by NM, 8-May-2005.) -/
theorem imasng {A2 : «class»} {B2 : setvar → «class»} {R : «class»}
  (y : setvar) : ⊦ wi (wcel A2 (B2 y)) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R))) :=
@syl (wcel A2 (B2 y)) (wcel A2 cvv) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R)))
  (@elex A2 (B2 y))
  (@syl5eq (wcel A2 cvv) (cima R (csn A2)) (cab (λ y, wrex (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn A2))) (cab (λ y, wbr A2 (cv y) R))
    (@dfima2 R (csn A2))
    (@abbidv (wcel A2 cvv) (λ y, wrex (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn A2)) (λ y, wbr A2 (cv y) R)
      (λ y, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel A2 cvv) (wb (wrex (λ x3, wbr (cv x3) (cv y) R) (λ x3, csn A2)) (wbr A2 (cv y) R)), from
        @rexsng (λ x3, wbr (cv x3) (cv y) R) (wbr A2 (cv y) R) A2 (λ x3, cvv)
          (λ x3, @breq1 (cv x3) A2 (cv y) R) x3)))


/-- The image of a singleton. (Contributed by NM, 20-May-1998.) -/
theorem relimasn {A2 R : «class»} :
  ⊦ wi (wrel R) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R))) :=
@pm2_61d2 (wrel R) (wcel A2 cvv) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R)))
  (@ex (wrel R) (wn (wcel A2 cvv)) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R)))
    (@eqtr4d (wa (wrel R) (wn (wcel A2 cvv))) (cima R (csn A2)) c0 (cab (λ y, wbr A2 (cv y) R))
      (@adantl (wn (wcel A2 cvv)) (wceq (cima R (csn A2)) c0) (wrel R)
        (@eqtrdi (wn (wcel A2 cvv)) (cima R (csn A2)) (cima R c0) c0
          (@sylbi (wn (wcel A2 cvv)) (wceq (csn A2) c0) (wceq (cima R (csn A2)) (cima R c0))
            (@snprc A2)
            (@imaeq2 (csn A2) c0 R))
          (@ima0 R)))
      (@sylib (wa (wrel R) (wn (wcel A2 cvv))) (wn (wex (λ y, wbr A2 (cv y) R))) (wceq (cab (λ y, wbr A2 (cv y) R)) c0)
        (@nexdv (wa (wrel R) (wn (wcel A2 cvv))) (λ y, wbr A2 (cv y) R)
          (λ y, @stoic1a (wrel R) (wbr A2 (cv y) R) (wcel A2 cvv)
            (@brrelex1 A2 (cv y) R)))
        (@necon1bbii (wex (λ y, wbr A2 (cv y) R)) (cab (λ y, wbr A2 (cv y) R)) c0
          (@abn0 (λ y, wbr A2 (cv y) R))))))
  (setvar.forget $ λ y : setvar,
    show ⊦ wi (wcel A2 cvv) (wceq (cima R (csn A2)) (cab (λ y, wbr A2 (cv y) R))), from
    @imasng A2 (λ y, cvv) R y)


/-- Elementhood in the image of a singleton. (Contributed by Mario Carneiro, 3-Nov-2015.) -/
theorem elrelimasn {A2 B2 R : «class»} :
  ⊦ wi (wrel R) (wb (wcel B2 (cima R (csn A2))) (wbr A2 B2 R)) :=
@bitrd (wrel R) (wcel B2 (cima R (csn A2))) (wcel B2 (cab (λ x3, wbr A2 (cv x3) R))) (wbr A2 B2 R)
  (@eleq2d (wrel R) (cima R (csn A2)) (cab (λ x3, wbr A2 (cv x3) R)) B2
    (@relimasn A2 R))
  (@syl (wrel R) (wi (wbr A2 B2 R) (wcel B2 cvv)) (wb (wcel B2 (cab (λ x3, wbr A2 (cv x3) R))) (wbr A2 B2 R))
    (@ex (wrel R) (wbr A2 B2 R) (wcel B2 cvv)
      (@brrelex2 A2 B2 R))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wi (wbr A2 B2 R) (wcel B2 cvv)) (wb (wcel B2 (cab (λ x3, wbr A2 (cv x3) R))) (wbr A2 B2 R)), from
      @elab3g (λ x3, wbr A2 (cv x3) R) (wbr A2 B2 R) B2 (λ x3, cvv)
        (λ x3, @breq2 (cv x3) B2 A2 R) x3))


/-- Membership in an image of a singleton. (Contributed by NM, 15-Mar-2004.) (Proof shortened by
Andrew Salmon, 27-Aug-2011.) -/
theorem elimasn {A2 B2 C : «class»}
  (elimasn_1 : ⊦ wcel B2 cvv)
  (elimasn_2 : ⊦ wcel C cvv) :
  ⊦ wb (wcel C (cima A2 (csn B2))) (wcel (cop B2 C) A2) :=
@bitri (wcel C (cima A2 (csn B2))) (wbr B2 C A2) (wcel (cop B2 C) A2)
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wcel C (cima A2 (csn B2))) (wbr B2 C A2), from
    @elab2 (λ x3, wbr B2 (cv x3) A2) (wbr B2 C A2) C (λ x3, cima A2 (csn B2))
      elimasn_2
      (λ x3, @breq2 (cv x3) C B2 A2)
      (λ x3, @ax_mp (wcel B2 cvv) (wceq (cima A2 (csn B2)) (cab (λ x3, wbr B2 (cv x3) A2)))
        elimasn_1
        (setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wcel B2 cvv) (wceq (cima A2 (csn B2)) (cab (λ x3, wbr B2 (cv x3) A2))), from
          @imasng B2 (λ x3, cvv) A2 x3)) x3)
  (@df_br B2 C A2)


/-- Membership in an image of a singleton. (Contributed by Raph Levien, 21-Oct-2006.) -/
theorem elimasng {A2 B2 C V W : «class»} :
  ⊦ wi (wa (wcel B2 V) (wcel C W)) (wb (wcel C (cima A2 (csn B2))) (wcel (cop B2 C) A2)) :=
setvar.forget $ λ y : setvar,
  setvar.forget $ λ z : setvar,
  show ⊦ wi (wa (wcel B2 V) (wcel C W)) (wb (wcel C (cima A2 (csn B2))) (wcel (cop B2 C) A2)), from
  @vtocl2g (λ y z, wb (wcel (cv z) (cima A2 (csn (cv y)))) (wcel (cop (cv y) (cv z)) A2)) (λ z, wb (wcel (cv z) (cima A2 (csn B2))) (wcel (cop B2 (cv z)) A2)) (λ y, wb (wcel C (cima A2 (csn B2))) (wcel (cop B2 C) A2)) B2 (λ y, C) (λ y z, V) (λ y z, W)
    (λ y z, @bibi12d (wceq (cv y) B2) (wcel (cv z) (cima A2 (csn (cv y)))) (wcel (cv z) (cima A2 (csn B2))) (wcel (cop (cv y) (cv z)) A2) (wcel (cop B2 (cv z)) A2)
      (@eleq2d (wceq (cv y) B2) (cima A2 (csn (cv y))) (cima A2 (csn B2)) (cv z)
        (@imaeq2d (wceq (cv y) B2) (csn (cv y)) (csn B2) A2
          (@sneq (cv y) B2)))
      (@eleq1d (wceq (cv y) B2) (cop (cv y) (cv z)) (cop B2 (cv z)) A2
        (@opeq1 (cv y) B2 (cv z))))
    (λ y z, @bibi12d (wceq (cv z) C) (wcel (cv z) (cima A2 (csn B2))) (wcel C (cima A2 (csn B2))) (wcel (cop B2 (cv z)) A2) (wcel (cop B2 C) A2)
      (@eleq1 (cv z) C (cima A2 (csn B2)))
      (@eleq1d (wceq (cv z) C) (cop B2 (cv z)) (cop B2 C) A2
        (@opeq2 (cv z) C B2)))
    (λ y z, @elimasn A2 (cv y) (cv z)
      (@vex y)
      (@vex z)) y z


/-- Membership in an initial segment. The idiom ` ( ``' A " { B } ) ` , meaning ` { x | x A B } ` ,
is used to specify an initial segment in (for example) Definition 6.21 of [TakeutiZaring] p. 30.
(Contributed by NM, 28-Apr-2004.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem eliniseg {A2 B2 C V : «class»}
  (eliniseg_1 : ⊦ wcel C cvv) :
  ⊦ wi (wcel B2 V) (wb (wcel C (cima (ccnv A2) (csn B2))) (wbr C B2 A2)) :=
@mpan2 (wcel B2 V) (wcel C cvv) (wb (wcel C (cima (ccnv A2) (csn B2))) (wbr C B2 A2))
  eliniseg_1
  (@bitrd (wa (wcel B2 V) (wcel C cvv)) (wcel C (cima (ccnv A2) (csn B2))) (wbr B2 C (ccnv A2)) (wbr C B2 A2)
    (@bitr4di (wa (wcel B2 V) (wcel C cvv)) (wcel C (cima (ccnv A2) (csn B2))) (wcel (cop B2 C) (ccnv A2)) (wbr B2 C (ccnv A2))
      (@elimasng (ccnv A2) B2 C V cvv)
      (@df_br B2 C (ccnv A2)))
    (@brcnvg B2 C V cvv A2))


/-- Any set is equal to its preimage under the converse membership relation. (Contributed by Mario
Carneiro, 9-Mar-2013.) -/
theorem epini {A2 : «class»}
  (epini_1 : ⊦ wcel A2 cvv) :
  ⊦ wceq (cima (ccnv cep) (csn A2)) A2 :=
@eqriv (cima (ccnv cep) (csn A2)) A2
  (λ x3, @bitri (wcel (cv x3) (cima (ccnv cep) (csn A2))) (wbr (cv x3) A2 cep) (wcel (cv x3) A2)
    (@ax_mp (wcel A2 cvv) (wb (wcel (cv x3) (cima (ccnv cep) (csn A2))) (wbr (cv x3) A2 cep))
      epini_1
      (@eliniseg cep A2 (cv x3) cvv
        (@vex x3)))
    (@epeli (cv x3) A2
      epini_1))


/-- An idiom that signifies an initial segment of an ordering, used, for example, in Definition 6.21
of [TakeutiZaring] p. 30. (Contributed by NM, 28-Apr-2004.) -/
theorem iniseg {A2 B2 : «class»} {V : setvar → «class»}
  (x3 : setvar) : ⊦ wi (wcel B2 (V x3)) (wceq (cima (ccnv A2) (csn B2)) (cab (λ x3, wbr (cv x3) B2 A2))) :=
@syl (wcel B2 (V x3)) (wcel B2 cvv) (wceq (cima (ccnv A2) (csn B2)) (cab (λ x3, wbr (cv x3) B2 A2)))
  (@elex B2 (V x3))
  (@abbi2dv (wcel B2 cvv) (λ x3, wbr (cv x3) B2 A2) (cima (ccnv A2) (csn B2))
    (λ x3, @eliniseg A2 B2 (cv x3) cvv
      (@vex x3)))


/-- Alternate definition of well-founded relation. Definition 6.21 of [TakeutiZaring] p. 30.
(Contributed by NM, 23-Apr-2004.) (Revised by Mario Carneiro, 23-Jun-2015.) -/
theorem dffr3 {A2 R : «class»} :
  ⊦ wb (wfr A2 R) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cima (ccnv R) (csn (cv y)))) c0) (λ y, cv x3)))) :=
@bitr4i (wfr A2 R) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)))) (wal (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cima (ccnv R) (csn (cv y)))) c0) (λ y, cv x3))))
  (@dffr2 A2 R)
  (@albii (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (cin (cv x3) (cima (ccnv R) (csn (cv y)))) c0) (λ y, cv x3))) (λ x3, wi (wa (wss (cv x3) A2) (wne (cv x3) c0)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)))
    (λ x3, @imbi2i (wrex (λ y, wceq (cin (cv x3) (cima (ccnv R) (csn (cv y)))) c0) (λ y, cv x3)) (wrex (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)) (wa (wss (cv x3) A2) (wne (cv x3) c0))
      (@rexbii (λ y, wceq (cin (cv x3) (cima (ccnv R) (csn (cv y)))) c0) (λ y, wceq (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0) (λ y, cv x3)
        (λ y, @eqeq1i (cin (cv x3) (cima (ccnv R) (csn (cv y)))) (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3)) c0
          (@eqtr4i (cin (cv x3) (cima (ccnv R) (csn (cv y)))) (cin (cv x3) (cab (λ z, wbr (cv z) (cv y) R))) (crab (λ z, wbr (cv z) (cv y) R) (λ z, cv x3))
            (@ineq2i (cima (ccnv R) (csn (cv y))) (cab (λ z, wbr (cv z) (cv y) R)) (cv x3)
              (@elv (λ y, wceq (cima (ccnv R) (csn (cv y))) (cab (λ z, wbr (cv z) (cv y) R)))
                (λ y, setvar.forget $ λ z : setvar,
                  show ⊦ wi (wcel (cv y) cvv) (wceq (cima (ccnv R) (csn (cv y))) (cab (λ z, wbr (cv z) (cv y) R))), from
                  @iniseg R (cv y) (λ z, cvv) z) y))
            (@dfrab3 (λ z, wbr (cv z) (cv y) R) (cv x3)))))))


/-- Alternate definition of set-like relation. (Contributed by Mario Carneiro, 23-Jun-2015.) -/
theorem dfse2 {A2 R : «class»} :
  ⊦ wb (wse A2 R) (wral (λ x3, wcel (cin A2 (cima (ccnv R) (csn (cv x3)))) cvv) (λ x3, A2)) :=
@bitri (wse A2 R) (wral (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, A2)) (wral (λ x3, wcel (cin A2 (cima (ccnv R) (csn (cv x3)))) cvv) (λ x3, A2))
  (@df_se A2 R)
  (@ralbii (λ x3, wcel (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) cvv) (λ x3, wcel (cin A2 (cima (ccnv R) (csn (cv x3)))) cvv) (λ x3, A2)
    (λ x3, @eleq1i (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) (cin A2 (cima (ccnv R) (csn (cv x3)))) cvv
      (@eqtr4i (crab (λ y, wbr (cv y) (cv x3) R) (λ y, A2)) (cin A2 (cab (λ y, wbr (cv y) (cv x3) R))) (cin A2 (cima (ccnv R) (csn (cv x3))))
        (@dfrab3 (λ y, wbr (cv y) (cv x3) R) A2)
        (@ineq2i (cima (ccnv R) (csn (cv x3))) (cab (λ y, wbr (cv y) (cv x3) R)) A2
          (@elv (λ x3, wceq (cima (ccnv R) (csn (cv x3))) (cab (λ y, wbr (cv y) (cv x3) R)))
            (λ x3, setvar.forget $ λ y : setvar,
              show ⊦ wi (wcel (cv x3) cvv) (wceq (cima (ccnv R) (csn (cv x3))) (cab (λ y, wbr (cv y) (cv x3) R))), from
              @iniseg R (cv x3) (λ y, cvv) y) x3)))))


/-- Subset theorem for image. (Contributed by NM, 16-Mar-2004.) -/
theorem imass1 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cima A2 C) (cima B2 C)) :=
@«3sstr4g» (wss A2 B2) (crn (cres A2 C)) (crn (cres B2 C)) (cima A2 C) (cima B2 C)
  (@syl (wss A2 B2) (wss (cres A2 C) (cres B2 C)) (wss (crn (cres A2 C)) (crn (cres B2 C)))
    (@ssres A2 B2 C)
    (@rnss (cres A2 C) (cres B2 C)))
  (@df_ima A2 C)
  (@df_ima B2 C)


/-- Subset theorem for image. Exercise 22(a) of [Enderton] p. 53. (Contributed by NM, 22-Mar-1998.)
-/
theorem imass2 {A2 B2 C : «class»} :
  ⊦ wi (wss A2 B2) (wss (cima C A2) (cima C B2)) :=
@«3sstr4g» (wss A2 B2) (crn (cres C A2)) (crn (cres C B2)) (cima C A2) (cima C B2)
  (@syl (wss A2 B2) (wss (cres C A2) (cres C B2)) (wss (crn (cres C A2)) (crn (cres C B2)))
    (@ssres2 A2 B2 C)
    (@rnss (cres C A2) (cres C B2)))
  (@df_ima C A2)
  (@df_ima C B2)


/-- The image of a singleton outside the domain is empty. (Contributed by NM, 22-May-1998.) (Proof
shortened by OpenAI, 3-Jul-2020.) -/
theorem ndmima {A2 B2 : «class»} :
  ⊦ wi (wn (wcel A2 (cdm B2))) (wceq (cima B2 (csn A2)) c0) :=
@sylbbr (wceq (cima B2 (csn A2)) c0) (wceq (cin (cdm B2) (csn A2)) c0) (wn (wcel A2 (cdm B2)))
  (@imadisj B2 (csn A2))
  (@disjsn (cdm B2) A2)


/-- A converse is a relation. Theorem 12 of [Suppes] p. 62. (Contributed by NM, 29-Oct-1996.) -/
theorem relcnv {A2 : «class»} :
  ⊦ wrel (ccnv A2) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel (ccnv A2), from
  @relopabiv (λ x3 y, wbr (cv y) (cv x3) A2) (λ x3 y, ccnv A2)
    (λ x3 y, @df_cnv A2) x3 y


/-- When ` R ` is a relation, the sethood assumptions on ~ brcnv can be omitted. (Contributed by
Mario Carneiro, 28-Apr-2015.) -/
theorem relbrcnvg {A2 B2 R : «class»} :
  ⊦ wi (wrel R) (wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R)) :=
@pm5_21ndd (wrel R) (wa (wcel A2 cvv) (wcel B2 cvv)) (wbr A2 B2 (ccnv R)) (wbr B2 A2 R)
  (@a1i (wi (wbr A2 B2 (ccnv R)) (wa (wcel A2 cvv) (wcel B2 cvv))) (wrel R)
    (@brrelex12i A2 B2 (ccnv R)
      (@relcnv R)))
  (@ex (wrel R) (wbr B2 A2 R) (wa (wcel A2 cvv) (wcel B2 cvv))
    (@ancomd (wa (wrel R) (wbr B2 A2 R)) (wcel B2 cvv) (wcel A2 cvv)
      (@brrelex12 B2 A2 R)))
  (@a1i (wi (wa (wcel A2 cvv) (wcel B2 cvv)) (wb (wbr A2 B2 (ccnv R)) (wbr B2 A2 R))) (wrel R)
    (@brcnvg A2 B2 cvv cvv R))


/-- Eliminate the class existence constraint in ~ eliniseg . (Contributed by Mario Carneiro,
5-Dec-2014.) (Revised by Mario Carneiro, 17-Nov-2015.) -/
theorem eliniseg2 {A2 B2 C : «class»} :
  ⊦ wi (wrel A2) (wb (wcel C (cima (ccnv A2) (csn B2))) (wbr C B2 A2)) :=
@syl5bb (wcel C (cima (ccnv A2) (csn B2))) (wbr B2 C (ccnv A2)) (wrel A2) (wbr C B2 A2)
  (@ax_mp (wrel (ccnv A2)) (wb (wcel C (cima (ccnv A2) (csn B2))) (wbr B2 C (ccnv A2)))
    (@relcnv A2)
    (@elrelimasn B2 C (ccnv A2)))
  (@relbrcnvg B2 C A2)


/-- Two ways of saying that the composition of two relations is included in a third relation. See
its special instance ~ cotr for the main application. (Contributed by NM, 27-Dec-1996.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) Generalized from its special instance ~ cotr . (Revised by
Richard Penner, 24-Dec-2019.) -/
theorem cotrg {A2 B2 C : «class»} :
  ⊦ wb (wss (ccom A2 B2) C) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C))))) :=
@bitri (wss (ccom A2 B2) C) (wal (λ x3, wal (λ z, wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C)))) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C)))))
  (@ax_mp (wrel (ccom A2 B2)) (wb (wss (ccom A2 B2) C) (wal (λ x3, wal (λ z, wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C)))))
    (setvar.forget $ λ x3 : setvar,
      setvar.forget $ λ z : setvar,
      show ⊦ wrel (ccom A2 B2), from
      @relopabiv (λ x3 z, wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))) (λ x3 z, ccom A2 B2)
        (λ x3 z, @df_co A2 B2) x3 z)
    (@ssrel (ccom A2 B2) C))
  (@albii (λ x3, wal (λ z, wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C))) (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C))))
    (λ x3, @bitri (wal (λ z, wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C))) (wal (λ z, wal (λ y, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C)))) (wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C))))
      (@albii (λ z, wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C)) (λ z, wal (λ y, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C)))
        (λ z, @bitr4i (wi (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wcel (cop (cv x3) (cv z)) C)) (wi (wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))) (wbr (cv x3) (cv z) C)) (wal (λ y, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C)))
          (@imbi12i (wcel (cop (cv x3) (cv z)) (ccom A2 B2)) (wex (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2))) (wcel (cop (cv x3) (cv z)) C) (wbr (cv x3) (cv z) C)
            (@opelco (cv x3) (cv z) A2 B2
              (@vex x3)
              (@vex z))
            (@bicomi (wbr (cv x3) (cv z) C) (wcel (cop (cv x3) (cv z)) C)
              (@df_br (cv x3) (cv z) C)))
          (@«19_23v» (λ y, wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C))))
      (@alcom (λ z y, wi (wa (wbr (cv x3) (cv y) B2) (wbr (cv y) (cv z) A2)) (wbr (cv x3) (cv z) C)))))


/-- Two ways of saying a relation is transitive. Definition of transitivity in [Schechter] p. 51.
Special instance of ~ cotrg . (Contributed by NM, 27-Dec-1996.) -/
theorem cotr {R : «class»} :
  ⊦ wb (wss (ccom R R) R) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))))) :=
@cotrg R R R


/-- Two ways of saying a relation is symmetric. Similar to definition of symmetry in [Schechter] p.
51. (Contributed by NM, 28-Dec-1996.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvsym {R : «class»} :
  ⊦ wb (wss (ccnv R) R) (wal (λ x3, wal (λ y, wi (wbr (cv x3) (cv y) R) (wbr (cv y) (cv x3) R)))) :=
@«3bitr4i» (wal (λ y, wal (λ x3, wi (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv y) (cv x3)) R)))) (wal (λ x3, wal (λ y, wi (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv y) (cv x3)) R)))) (wss (ccnv R) R) (wal (λ x3, wal (λ y, wi (wbr (cv x3) (cv y) R) (wbr (cv y) (cv x3) R))))
  (@alcom (λ y x3, wi (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv y) (cv x3)) R)))
  (@ax_mp (wrel (ccnv R)) (wb (wss (ccnv R) R) (wal (λ y, wal (λ x3, wi (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv y) (cv x3)) R)))))
    (@relcnv R)
    (@ssrel (ccnv R) R))
  (@«2albii» (λ x3 y, wi (wbr (cv x3) (cv y) R) (wbr (cv y) (cv x3) R)) (λ x3 y, wi (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv y) (cv x3)) R))
    (λ x3 y, @imbi12i (wbr (cv x3) (cv y) R) (wcel (cop (cv y) (cv x3)) (ccnv R)) (wbr (cv y) (cv x3) R) (wcel (cop (cv y) (cv x3)) R)
      (@bitr3i (wbr (cv x3) (cv y) R) (wbr (cv y) (cv x3) (ccnv R)) (wcel (cop (cv y) (cv x3)) (ccnv R))
        (@brcnv (cv y) (cv x3) R
          (@vex y)
          (@vex x3))
        (@df_br (cv y) (cv x3) (ccnv R)))
      (@df_br (cv y) (cv x3) R)))


/-- A strict order relation is irreflexive. (Contributed by NM, 10-Feb-1996.) (Revised by Mario
Carneiro, 10-May-2013.) -/
theorem soirri {A2 R S : «class»}
  (soi_1 : ⊦ wor S R)
  (soi_2 : ⊦ wss R (cxp S S)) :
  ⊦ wn (wbr A2 A2 R) :=
@pm2_61i (wa (wcel A2 S) (wcel A2 S)) (wn (wbr A2 A2 R))
  (@adantl (wcel A2 S) (wn (wbr A2 A2 R)) (wcel A2 S)
    (@mpan (wor S R) (wcel A2 S) (wn (wbr A2 A2 R))
      soi_1
      (@sonr S A2 R)))
  (@con3i (wbr A2 A2 R) (wa (wcel A2 S) (wcel A2 S))
    (@brel A2 A2 S S R
      soi_2))


/-- A strict order relation is a transitive relation. (Contributed by NM, 10-Feb-1996.) (Revised by
Mario Carneiro, 10-May-2013.) -/
theorem sotri {A2 B2 C R S : «class»}
  (soi_1 : ⊦ wor S R)
  (soi_2 : ⊦ wss R (cxp S S)) :
  ⊦ wi (wa (wbr A2 B2 R) (wbr B2 C R)) (wbr A2 C R) :=
@mpcom (wa (wcel A2 S) (wa (wcel B2 S) (wcel C S))) (wa (wbr A2 B2 R) (wbr B2 C R)) (wbr A2 C R)
  (@anim12i (wbr A2 B2 R) (wcel A2 S) (wbr B2 C R) (wa (wcel B2 S) (wcel C S))
    (@simpld (wbr A2 B2 R) (wcel A2 S) (wcel B2 S)
      (@brel A2 B2 S S R
        soi_2))
    (@brel B2 C S S R
      soi_2))
  (@«3expb» (wcel A2 S) (wcel B2 S) (wcel C S) (wi (wa (wbr A2 B2 R) (wbr B2 C R)) (wbr A2 C R))
    (@mpan (wor S R) (w3a (wcel A2 S) (wcel B2 S) (wcel C S)) (wi (wa (wbr A2 B2 R) (wbr B2 C R)) (wbr A2 C R))
      soi_1
      (@sotr S A2 B2 C R)))


/-- A transitivity relation. (Read ` A <_ B ` and ` B < C ` implies ` A < C ` .) (Contributed by
Mario Carneiro, 10-May-2013.) -/
theorem sotri2 {A2 B2 C R S : «class»}
  (soi_1 : ⊦ wor S R)
  (soi_2 : ⊦ wss R (cxp S S)) :
  ⊦ wi (w3a (wcel A2 S) (wn (wbr B2 A2 R)) (wbr B2 C R)) (wbr A2 C R) :=
@«3imp231» (wbr B2 C R) (wcel A2 S) (wn (wbr B2 A2 R)) (wbr A2 C R)
  (@mpand (wbr B2 C R) (wcel B2 S) (wcel A2 S) (wi (wn (wbr B2 A2 R)) (wbr A2 C R))
    (@simpld (wbr B2 C R) (wcel B2 S) (wcel C S)
      (@brel B2 C S S R
        soi_2))
    (@com3r (wa (wcel B2 S) (wcel A2 S)) (wn (wbr B2 A2 R)) (wbr B2 C R) (wbr A2 C R)
      (@syl6bir (wa (wcel B2 S) (wcel A2 S)) (wn (wbr B2 A2 R)) (wo (wceq B2 A2) (wbr A2 B2 R)) (wi (wbr B2 C R) (wbr A2 C R))
        (@con2bid (wa (wcel B2 S) (wcel A2 S)) (wbr B2 A2 R) (wo (wceq B2 A2) (wbr A2 B2 R))
          (@mpan (wor S R) (wa (wcel B2 S) (wcel A2 S)) (wb (wbr B2 A2 R) (wn (wo (wceq B2 A2) (wbr A2 B2 R))))
            soi_1
            (@sotric S B2 A2 R)))
        (@jaoi (wceq B2 A2) (wi (wbr B2 C R) (wbr A2 C R)) (wbr A2 B2 R)
          (@biimpd (wceq B2 A2) (wbr B2 C R) (wbr A2 C R)
            (@breq1 B2 A2 C R))
          (@ex (wbr A2 B2 R) (wbr B2 C R) (wbr A2 C R)
            (@sotri A2 B2 C R S
              soi_1
              soi_2))))))


/-- A transitivity relation. (Read ` A < B ` and ` B <_ C ` implies ` A < C ` .) (Contributed by
Mario Carneiro, 10-May-2013.) -/
theorem sotri3 {A2 B2 C R S : «class»}
  (soi_1 : ⊦ wor S R)
  (soi_2 : ⊦ wss R (cxp S S)) :
  ⊦ wi (w3a (wcel C S) (wbr A2 B2 R) (wn (wbr C B2 R))) (wbr A2 C R) :=
@«3imp21» (wbr A2 B2 R) (wcel C S) (wn (wbr C B2 R)) (wbr A2 C R)
  (@mpan2d (wbr A2 B2 R) (wcel C S) (wcel B2 S) (wi (wn (wbr C B2 R)) (wbr A2 C R))
    (@simprd (wbr A2 B2 R) (wcel A2 S) (wcel B2 S)
      (@brel A2 B2 S S R
        soi_2))
    (@com3r (wa (wcel C S) (wcel B2 S)) (wn (wbr C B2 R)) (wbr A2 B2 R) (wbr A2 C R)
      (@syl6bir (wa (wcel C S) (wcel B2 S)) (wn (wbr C B2 R)) (wo (wceq C B2) (wbr B2 C R)) (wi (wbr A2 B2 R) (wbr A2 C R))
        (@con2bid (wa (wcel C S) (wcel B2 S)) (wbr C B2 R) (wo (wceq C B2) (wbr B2 C R))
          (@mpan (wor S R) (wa (wcel C S) (wcel B2 S)) (wb (wbr C B2 R) (wn (wo (wceq C B2) (wbr B2 C R))))
            soi_1
            (@sotric S C B2 R)))
        (@jaoi (wceq C B2) (wi (wbr A2 B2 R) (wbr A2 C R)) (wbr B2 C R)
          (@biimprd (wceq C B2) (wbr A2 C R) (wbr A2 B2 R)
            (@breq2 C B2 A2 R))
          (@expcom (wbr A2 B2 R) (wbr B2 C R) (wbr A2 C R)
            (@sotri A2 B2 C R S
              soi_1
              soi_2))))))


/-- The converse of a class abstraction of ordered pairs. (Contributed by NM, 11-Dec-2003.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvopab {ph : setvar → setvar → wff} :
  ⊦ wceq (ccnv (copab (λ x3 y, ph x3 y))) (copab (λ y x3, ph x3 y)) :=
@eqrelriiv (ccnv (copab (λ x3 y, ph x3 y))) (copab (λ y x3, ph x3 y))
  (@relcnv (copab (λ x3 y, ph x3 y)))
  (@relopabv (λ y x3, ph x3 y))
  (λ z w, @«3bitr4i» (wcel (cop (cv w) (cv z)) (copab (λ x3 y, ph x3 y))) (wsb (λ y, wsb (λ x3, ph x3 y) w) z) (wcel (cop (cv z) (cv w)) (ccnv (copab (λ x3 y, ph x3 y)))) (wcel (cop (cv z) (cv w)) (copab (λ y x3, ph x3 y)))
    (@bitri (wcel (cop (cv w) (cv z)) (copab (λ x3 y, ph x3 y))) (wsb (λ x3, wsb (λ y, ph x3 y) z) w) (wsb (λ y, wsb (λ x3, ph x3 y) w) z)
      (@vopelopabsb (λ x3 y w z, ph x3 y) w z)
      (@sbcom2 (λ y z x3 w, ph x3 y) z w))
    (@opelcnv (cv z) (cv w) (copab (λ x3 y, ph x3 y))
      (@vex z)
      (@vex w))
    (@vopelopabsb (λ y x3 z w, ph x3 y) z w))


/-- The converse of a mapping function. (Contributed by Thierry Arnoux, 16-Jan-2017.) -/
theorem mptcnv {ph : wff} {A2 B2 C D : setvar → «class»}
  (mptcnv_1 : ∀ x3 y, ⊦ wi ph (wb (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (wa (wcel (cv y) (C y)) (wceq (cv x3) (D y))))) :
  ⊦ wi ph (wceq (ccnv (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (cmpt (λ y, C y) (λ y, D y))) :=
@«3eqtr4g» ph (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (copab (λ y x3, wa (wcel (cv y) (C y)) (wceq (cv x3) (D y)))) (ccnv (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (cmpt (λ y, C y) (λ y, D y))
  (@opabbidv ph (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (λ y x3, wa (wcel (cv y) (C y)) (wceq (cv x3) (D y)))
    (λ y x3, mptcnv_1 x3 y))
  (@eqtri (ccnv (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (ccnv (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
    (@cnveqi (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
      (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3)))
    (@cnvopab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))
  (@df_mpt (λ y, C y) (λ y, D y))


/-- The converse of the empty set. (Contributed by NM, 6-Apr-1998.) Remove dependency on ~ ax-sep ,
~ ax-nul , ~ ax-pr . (Revised by KP, 25-Oct-2021.) -/
theorem cnv0 :
  ⊦ wceq (ccnv c0) c0 :=
@nel0 (ccnv c0)
  (λ x3, @mtbir (wcel (cv x3) (ccnv c0)) (wex (λ z, wex (λ y, wa (wceq (cv x3) (cop (cv z) (cv y))) (wbr (cv y) (cv z) c0))))
    (@nex (λ z, wex (λ y, wa (wceq (cv x3) (cop (cv z) (cv y))) (wbr (cv y) (cv z) c0)))
      (λ z, @nex (λ y, wa (wceq (cv x3) (cop (cv z) (cv y))) (wbr (cv y) (cv z) c0))
        (λ y, @intnan (wbr (cv y) (cv z) c0) (wceq (cv x3) (cop (cv z) (cv y)))
          (@br0 (cv y) (cv z)))))
    (@abeq2i (λ x3, wex (λ z, wex (λ y, wa (wceq (cv x3) (cop (cv z) (cv y))) (wbr (cv y) (cv z) c0)))) (λ x3, ccnv c0)
      (λ x3, @eqtri (ccnv c0) (copab (λ z y, wbr (cv y) (cv z) c0)) (cab (λ x3, wex (λ z, wex (λ y, wa (wceq (cv x3) (cop (cv z) (cv y))) (wbr (cv y) (cv z) c0)))))
        (@df_cnv c0)
        (@df_opab (λ z y, wbr (cv y) (cv z) c0))) x3))


/-- The converse of the identity relation. Theorem 3.7(ii) of [Monk1] p. 36. (Contributed by NM,
26-Apr-1998.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvi :
  ⊦ wceq (ccnv cid) cid :=
@«3eqtr4i» (copab (λ x3 y, wbr (cv y) (cv x3) cid)) (copab (λ x3 y, wceq (cv x3) (cv y))) (ccnv cid) cid
  (@opabbii (λ x3 y, wbr (cv y) (cv x3) cid) (λ x3 y, wceq (cv x3) (cv y))
    (λ x3 y, @bitri (wbr (cv y) (cv x3) cid) (wceq (cv y) (cv x3)) (wceq (cv x3) (cv y))
      (@ideq (cv y) (cv x3)
        (@vex x3))
      (@equcom y x3)))
  (@df_cnv cid)
  df_id


/-- The converse of a union is the union of converses. Theorem 16 of [Suppes] p. 62. (Contributed by
NM, 25-Mar-1998.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvun {A2 B2 : «class»} :
  ⊦ wceq (ccnv (cun A2 B2)) (cun (ccnv A2) (ccnv B2)) :=
@eqtr4i (ccnv (cun A2 B2)) (cun (copab (λ x3 y, wbr (cv y) (cv x3) A2)) (copab (λ x3 y, wbr (cv y) (cv x3) B2))) (cun (ccnv A2) (ccnv B2))
  (@eqtr4i (ccnv (cun A2 B2)) (copab (λ x3 y, wbr (cv y) (cv x3) (cun A2 B2))) (cun (copab (λ x3 y, wbr (cv y) (cv x3) A2)) (copab (λ x3 y, wbr (cv y) (cv x3) B2)))
    (@df_cnv (cun A2 B2))
    (@eqtr4i (cun (copab (λ x3 y, wbr (cv y) (cv x3) A2)) (copab (λ x3 y, wbr (cv y) (cv x3) B2))) (copab (λ x3 y, wo (wbr (cv y) (cv x3) A2) (wbr (cv y) (cv x3) B2))) (copab (λ x3 y, wbr (cv y) (cv x3) (cun A2 B2)))
      (@unopab (λ x3 y, wbr (cv y) (cv x3) A2) (λ x3 y, wbr (cv y) (cv x3) B2))
      (@opabbii (λ x3 y, wbr (cv y) (cv x3) (cun A2 B2)) (λ x3 y, wo (wbr (cv y) (cv x3) A2) (wbr (cv y) (cv x3) B2))
        (λ x3 y, @brun (cv y) (cv x3) A2 B2))))
  (@uneq12i (ccnv A2) (copab (λ x3 y, wbr (cv y) (cv x3) A2)) (ccnv B2) (copab (λ x3 y, wbr (cv y) (cv x3) B2))
    (@df_cnv A2)
    (@df_cnv B2))


/-- Distributive law for converse over class difference. (Contributed by Mario Carneiro,
26-Jun-2014.) -/
theorem cnvdif {A2 B2 : «class»} :
  ⊦ wceq (ccnv (cdif A2 B2)) (cdif (ccnv A2) (ccnv B2)) :=
@eqrelriiv (ccnv (cdif A2 B2)) (cdif (ccnv A2) (ccnv B2))
  (@relcnv (cdif A2 B2))
  (@mp2 (wss (cdif (ccnv A2) (ccnv B2)) (ccnv A2)) (wrel (ccnv A2)) (wrel (cdif (ccnv A2) (ccnv B2)))
    (@difss (ccnv A2) (ccnv B2))
    (@relcnv A2)
    (@relss (cdif (ccnv A2) (ccnv B2)) (ccnv A2)))
  (λ x3 y, @«3bitr4i» (wcel (cop (cv y) (cv x3)) (cdif A2 B2)) (wa (wcel (cop (cv y) (cv x3)) A2) (wn (wcel (cop (cv y) (cv x3)) B2))) (wcel (cop (cv x3) (cv y)) (ccnv (cdif A2 B2))) (wcel (cop (cv x3) (cv y)) (cdif (ccnv A2) (ccnv B2)))
    (@eldif (cop (cv y) (cv x3)) A2 B2)
    (@opelcnv (cv x3) (cv y) (cdif A2 B2)
      (@vex x3)
      (@vex y))
    (@bitri (wcel (cop (cv x3) (cv y)) (cdif (ccnv A2) (ccnv B2))) (wa (wcel (cop (cv x3) (cv y)) (ccnv A2)) (wn (wcel (cop (cv x3) (cv y)) (ccnv B2)))) (wa (wcel (cop (cv y) (cv x3)) A2) (wn (wcel (cop (cv y) (cv x3)) B2)))
      (@eldif (cop (cv x3) (cv y)) (ccnv A2) (ccnv B2))
      (@anbi12i (wcel (cop (cv x3) (cv y)) (ccnv A2)) (wcel (cop (cv y) (cv x3)) A2) (wn (wcel (cop (cv x3) (cv y)) (ccnv B2))) (wn (wcel (cop (cv y) (cv x3)) B2))
        (@opelcnv (cv x3) (cv y) A2
          (@vex x3)
          (@vex y))
        (@notbii (wcel (cop (cv x3) (cv y)) (ccnv B2)) (wcel (cop (cv y) (cv x3)) B2)
          (@opelcnv (cv x3) (cv y) B2
            (@vex x3)
            (@vex y))))))


/-- Distributive law for converse over intersection. Theorem 15 of [Suppes] p. 62. (Contributed by
NM, 25-Mar-1998.) (Revised by Mario Carneiro, 26-Jun-2014.) -/
theorem cnvin {A2 B2 : «class»} :
  ⊦ wceq (ccnv (cin A2 B2)) (cin (ccnv A2) (ccnv B2)) :=
@«3eqtr4i» (ccnv (cdif A2 (cdif A2 B2))) (cdif (ccnv A2) (cdif (ccnv A2) (ccnv B2))) (ccnv (cin A2 B2)) (cin (ccnv A2) (ccnv B2))
  (@eqtri (ccnv (cdif A2 (cdif A2 B2))) (cdif (ccnv A2) (ccnv (cdif A2 B2))) (cdif (ccnv A2) (cdif (ccnv A2) (ccnv B2)))
    (@cnvdif A2 (cdif A2 B2))
    (@difeq2i (ccnv (cdif A2 B2)) (cdif (ccnv A2) (ccnv B2)) (ccnv A2)
      (@cnvdif A2 B2)))
  (@cnveqi (cin A2 B2) (cdif A2 (cdif A2 B2))
    (@dfin4 A2 B2))
  (@dfin4 (ccnv A2) (ccnv B2))


/-- Distributive law for range over union. Theorem 8 of [Suppes] p. 60. (Contributed by NM,
24-Mar-1998.) -/
theorem rnun {A2 B2 : «class»} :
  ⊦ wceq (crn (cun A2 B2)) (cun (crn A2) (crn B2)) :=
@«3eqtr4i» (cdm (ccnv (cun A2 B2))) (cun (cdm (ccnv A2)) (cdm (ccnv B2))) (crn (cun A2 B2)) (cun (crn A2) (crn B2))
  (@eqtri (cdm (ccnv (cun A2 B2))) (cdm (cun (ccnv A2) (ccnv B2))) (cun (cdm (ccnv A2)) (cdm (ccnv B2)))
    (@dmeqi (ccnv (cun A2 B2)) (cun (ccnv A2) (ccnv B2))
      (@cnvun A2 B2))
    (@dmun (ccnv A2) (ccnv B2)))
  (@df_rn (cun A2 B2))
  (@uneq12i (crn A2) (cdm (ccnv A2)) (crn B2) (cdm (ccnv B2))
    (@df_rn A2)
    (@df_rn B2))


/-- Distributive law for image over union. Theorem 35 of [Suppes] p. 65. (Contributed by NM,
30-Sep-2002.) -/
theorem imaundi {A2 B2 C : «class»} :
  ⊦ wceq (cima A2 (cun B2 C)) (cun (cima A2 B2) (cima A2 C)) :=
@«3eqtr4i» (crn (cres A2 (cun B2 C))) (cun (crn (cres A2 B2)) (crn (cres A2 C))) (cima A2 (cun B2 C)) (cun (cima A2 B2) (cima A2 C))
  (@eqtri (crn (cres A2 (cun B2 C))) (crn (cun (cres A2 B2) (cres A2 C))) (cun (crn (cres A2 B2)) (crn (cres A2 C)))
    (@rneqi (cres A2 (cun B2 C)) (cun (cres A2 B2) (cres A2 C))
      (@resundi A2 B2 C))
    (@rnun (cres A2 B2) (cres A2 C)))
  (@df_ima A2 (cun B2 C))
  (@uneq12i (cima A2 B2) (crn (cres A2 B2)) (cima A2 C) (crn (cres A2 C))
    (@df_ima A2 B2)
    (@df_ima A2 C))


/-- The image of a union. (Contributed by Jeff Hoffman, 17-Feb-2008.) -/
theorem imaundir {A2 B2 C : «class»} :
  ⊦ wceq (cima (cun A2 B2) C) (cun (cima A2 C) (cima B2 C)) :=
@eqtr4i (cima (cun A2 B2) C) (cun (crn (cres A2 C)) (crn (cres B2 C))) (cun (cima A2 C) (cima B2 C))
  (@«3eqtri» (cima (cun A2 B2) C) (crn (cres (cun A2 B2) C)) (crn (cun (cres A2 C) (cres B2 C))) (cun (crn (cres A2 C)) (crn (cres B2 C)))
    (@df_ima (cun A2 B2) C)
    (@rneqi (cres (cun A2 B2) C) (cun (cres A2 C) (cres B2 C))
      (@resundir A2 B2 C))
    (@rnun (cres A2 C) (cres B2 C)))
  (@uneq12i (cima A2 C) (crn (cres A2 C)) (cima B2 C) (crn (cres B2 C))
    (@df_ima A2 C)
    (@df_ima B2 C))


/-- The preimage of a superset of the range of a class is the domain of the class. Generalization of
~ cnvimarndm for subsets. (Contributed by AV, 18-Sep-2024.) -/
theorem cnvimassrndm {A2 F : «class»} :
  ⊦ wi (wss (crn F) A2) (wceq (cima (ccnv F) A2) (cdm F)) :=
@sylbi (wss (crn F) A2) (wceq (cun (crn F) A2) A2) (wceq (cima (ccnv F) A2) (cdm F))
  (@ssequn1 (crn F) A2)
  (@eqcoms (wceq (cima (ccnv F) A2) (cdm F)) A2 (cun (crn F) A2)
    (@eqtrdi (wceq A2 (cun (crn F) A2)) (cima (ccnv F) A2) (cun (cima (ccnv F) (crn F)) (cima (ccnv F) A2)) (cdm F)
      (@eqtrdi (wceq A2 (cun (crn F) A2)) (cima (ccnv F) A2) (cima (ccnv F) (cun (crn F) A2)) (cun (cima (ccnv F) (crn F)) (cima (ccnv F) A2))
        (@imaeq2 A2 (cun (crn F) A2) (ccnv F))
        (@imaundi (ccnv F) (crn F) A2))
      (@eqtri (cun (cima (ccnv F) (crn F)) (cima (ccnv F) A2)) (cun (cdm F) (cima (ccnv F) A2)) (cdm F)
        (@uneq1i (cima (ccnv F) (crn F)) (cdm F) (cima (ccnv F) A2)
          (@cnvimarndm F))
        (@mpbi (wss (cima (ccnv F) A2) (cdm F)) (wceq (cun (cdm F) (cima (ccnv F) A2)) (cdm F))
          (@cnvimass F A2)
          (@ssequn2 (cima (ccnv F) A2) (cdm F))))))


/-- The converse of a Cartesian product. Exercise 11 of [Suppes] p. 67. (Contributed by NM,
14-Aug-1999.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cnvxp {A2 B2 : «class»} :
  ⊦ wceq (ccnv (cxp A2 B2)) (cxp B2 A2) :=
@«3eqtr4i» (ccnv (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) A2))) (ccnv (cxp A2 B2)) (cxp B2 A2)
  (@eqtri (ccnv (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))) (copab (λ x3 y, wa (wcel (cv y) A2) (wcel (cv x3) B2))) (copab (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) A2)))
    (@cnvopab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))
    (@opabbii (λ x3 y, wa (wcel (cv y) A2) (wcel (cv x3) B2)) (λ x3 y, wa (wcel (cv x3) B2) (wcel (cv y) A2))
      (λ x3 y, @ancom (wcel (cv y) A2) (wcel (cv x3) B2))))
  (@cnveqi (cxp A2 B2) (copab (λ y x3, wa (wcel (cv y) A2) (wcel (cv x3) B2)))
    (@df_xp A2 B2))
  (@df_xp B2 A2)


/-- The Cartesian product with the empty set is empty. Part of Theorem 3.13(ii) of [Monk1] p. 37.
(Contributed by NM, 12-Apr-2004.) -/
theorem xp0 {A2 : «class»} :
  ⊦ wceq (cxp A2 c0) c0 :=
@«3eqtr3i» (ccnv (cxp c0 A2)) (ccnv c0) (cxp A2 c0) c0
  (@cnveqi (cxp c0 A2) c0
    (@«0xp» A2))
  (@cnvxp c0 A2)
  cnv0


/-- The Cartesian product of nonempty classes is nonempty. (Variation of a theorem contributed by
Raph Levien, 30-Jun-2006.) (Contributed by NM, 30-Jun-2006.) -/
theorem xpnz {A2 B2 : «class»} :
  ⊦ wb (wa (wne A2 c0) (wne B2 c0)) (wne (cxp A2 B2) c0) :=
@impbii (wa (wne A2 c0) (wne B2 c0)) (wne (cxp A2 B2) c0)
  (@sylbi (wa (wne A2 c0) (wne B2 c0)) (wex (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wcel (cv y) B2)))) (wne (cxp A2 B2) c0)
    (@bitr4i (wa (wne A2 c0) (wne B2 c0)) (wa (wex (λ x3, wcel (cv x3) A2)) (wex (λ y, wcel (cv y) B2))) (wex (λ x3, wex (λ y, wa (wcel (cv x3) A2) (wcel (cv y) B2))))
      (@anbi12i (wne A2 c0) (wex (λ x3, wcel (cv x3) A2)) (wne B2 c0) (wex (λ y, wcel (cv y) B2))
        (@n0 A2)
        (@n0 B2))
      (@exdistrv (λ x3, wcel (cv x3) A2) (λ y, wcel (cv y) B2)))
    (@exlimivv (λ x3 y, wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wne (cxp A2 B2) c0)
      (λ x3 y, @sylibr (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (wex (λ z, wcel (cv z) (cxp A2 B2))) (wne (cxp A2 B2) c0)
        (@spcev (λ z, wcel (cv z) (cxp A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv y) B2)) (cop (cv x3) (cv y))
          (@opex (cv x3) (cv y))
          (λ z, @bitrdi (wceq (cv z) (cop (cv x3) (cv y))) (wcel (cv z) (cxp A2 B2)) (wcel (cop (cv x3) (cv y)) (cxp A2 B2)) (wa (wcel (cv x3) A2) (wcel (cv y) B2))
            (@eleq1 (cv z) (cop (cv x3) (cv y)) (cxp A2 B2))
            (@opelxp (cv x3) (cv y) A2 B2)))
        (@n0 (cxp A2 B2)))))
  (@jca (wne (cxp A2 B2) c0) (wne A2 c0) (wne B2 c0)
    (@necon3i A2 c0 (cxp A2 B2) c0
      (@eqtrdi (wceq A2 c0) (cxp A2 B2) (cxp c0 B2) c0
        (@xpeq1 A2 c0 B2)
        (@«0xp» B2)))
    (@necon3i B2 c0 (cxp A2 B2) c0
      (@eqtrdi (wceq B2 c0) (cxp A2 B2) (cxp A2 c0) c0
        (@xpeq2 B2 c0 A2)
        (@xp0 A2))))


/-- At least one member of an empty Cartesian product is empty. (Contributed by NM, 27-Aug-2006.) -/
theorem xpeq0 {A2 B2 : «class»} :
  ⊦ wb (wceq (cxp A2 B2) c0) (wo (wceq A2 c0) (wceq B2 c0)) :=
@«3bitri» (wceq (cxp A2 B2) c0) (wn (wa (wne A2 c0) (wne B2 c0))) (wo (wn (wne A2 c0)) (wn (wne B2 c0))) (wo (wceq A2 c0) (wceq B2 c0))
  (@necon2bbii (wa (wne A2 c0) (wne B2 c0)) (cxp A2 B2) c0
    (@xpnz A2 B2))
  (@ianor (wne A2 c0) (wne B2 c0))
  (@orbi12i (wn (wne A2 c0)) (wceq A2 c0) (wn (wne B2 c0)) (wceq B2 c0)
    (@nne A2 c0)
    (@nne B2 c0))


/-- Cartesian products with disjoint sets are disjoint. (Contributed by NM, 13-Sep-2004.) -/
theorem xpdisj1 {A2 B2 C D : «class»} :
  ⊦ wi (wceq (cin A2 B2) c0) (wceq (cin (cxp A2 C) (cxp B2 D)) c0) :=
@«3eqtr4g» (wceq (cin A2 B2) c0) (cxp (cin A2 B2) (cin C D)) (cxp c0 (cin C D)) (cin (cxp A2 C) (cxp B2 D)) c0
  (@xpeq1 (cin A2 B2) c0 (cin C D))
  (@inxp A2 C B2 D)
  (@eqcomi (cxp c0 (cin C D)) c0
    (@«0xp» (cin C D)))


/-- A double restriction to disjoint classes is the empty set. (Contributed by NM, 7-Oct-2004.)
(Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem resdisj {A2 B2 C : «class»} :
  ⊦ wi (wceq (cin A2 B2) c0) (wceq (cres (cres C A2) B2) c0) :=
@«3eqtr4g» (wceq (cin A2 B2) c0) (cres C (cin A2 B2)) (cres C c0) (cres (cres C A2) B2) c0
  (@reseq2 (cin A2 B2) c0 C)
  (@resres C A2 B2)
  (@eqcomi (cres C c0) c0
    (@res0 C))


/-- The range of a Cartesian product. Part of Theorem 3.13(x) of [Monk1] p. 37. (Contributed by NM,
12-Apr-2004.) -/
theorem rnxp {A2 B2 : «class»} :
  ⊦ wi (wne A2 c0) (wceq (crn (cxp A2 B2)) B2) :=
@syl5eq (wne A2 c0) (crn (cxp A2 B2)) (cdm (cxp B2 A2)) B2
  (@eqtri (crn (cxp A2 B2)) (cdm (ccnv (cxp A2 B2))) (cdm (cxp B2 A2))
    (@df_rn (cxp A2 B2))
    (@dmeqi (ccnv (cxp A2 B2)) (cxp B2 A2)
      (@cnvxp A2 B2)))
  (@dmxp B2 A2)


/-- The domain of a Cartesian product is included in its first factor. (Contributed by NM,
19-Mar-2007.) -/
theorem dmxpss {A2 B2 : «class»} :
  ⊦ wss (cdm (cxp A2 B2)) A2 :=
@pm2_61ine (wss (cdm (cxp A2 B2)) A2) B2 c0
  (@eqsstrdi (wceq B2 c0) (cdm (cxp A2 B2)) c0 A2
    (@eqtrdi (wceq B2 c0) (cdm (cxp A2 B2)) (cdm c0) c0
      (@dmeqd (wceq B2 c0) (cxp A2 B2) c0
        (@eqtrdi (wceq B2 c0) (cxp A2 B2) (cxp A2 c0) c0
          (@xpeq2 B2 c0 A2)
          (@xp0 A2)))
      dm0)
    (@«0ss» A2))
  (@syl (wne B2 c0) (wceq (cdm (cxp A2 B2)) A2) (wss (cdm (cxp A2 B2)) A2)
    (@dmxp A2 B2)
    (@eqimss (cdm (cxp A2 B2)) A2))


/-- The range of a Cartesian product is included in its second factor. (Contributed by NM,
16-Jan-2006.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem rnxpss {A2 B2 : «class»} :
  ⊦ wss (crn (cxp A2 B2)) B2 :=
@eqsstri (crn (cxp A2 B2)) (cdm (ccnv (cxp A2 B2))) B2
  (@df_rn (cxp A2 B2))
  (@eqsstri (cdm (ccnv (cxp A2 B2))) (cdm (cxp B2 A2)) B2
    (@dmeqi (ccnv (cxp A2 B2)) (cxp B2 A2)
      (@cnvxp A2 B2))
    (@dmxpss B2 A2))


/-- The base set of a strict order is contained in the field of the relation, except possibly for
one element (note that ` (/) Or { B } ` ). (Contributed by Mario Carneiro, 27-Apr-2015.) -/
theorem sossfld {A2 B2 R : «class»} :
  ⊦ wi (wa (wor A2 R) (wcel B2 A2)) (wss (cdif A2 (csn B2)) (cun (cdm R) (crn R))) :=
@ssrdv (wa (wor A2 R) (wcel B2 A2)) (cdif A2 (csn B2)) (cun (cdm R) (crn R))
  (λ x3, @syl5bi (wcel (cv x3) (cdif A2 (csn B2))) (wa (wcel (cv x3) A2) (wne (cv x3) B2)) (wa (wor A2 R) (wcel B2 A2)) (wcel (cv x3) (cun (cdm R) (crn R)))
    (@eldifsn (cv x3) A2 B2)
    (@expimpd (wa (wor A2 R) (wcel B2 A2)) (wcel (cv x3) A2) (wne (cv x3) B2) (wcel (cv x3) (cun (cdm R) (crn R)))
      (@sylbird (wa (wa (wor A2 R) (wcel B2 A2)) (wcel (cv x3) A2)) (wne (cv x3) B2) (wo (wbr (cv x3) B2 R) (wbr B2 (cv x3) R)) (wcel (cv x3) (cun (cdm R) (crn R)))
        (@anass1rs (wor A2 R) (wcel (cv x3) A2) (wcel B2 A2) (wb (wo (wbr (cv x3) B2 R) (wbr B2 (cv x3) R)) (wne (cv x3) B2))
          (@necon2abid (wa (wor A2 R) (wa (wcel (cv x3) A2) (wcel B2 A2))) (wo (wbr (cv x3) B2 R) (wbr B2 (cv x3) R)) (cv x3) B2
            (@sotrieq A2 (cv x3) B2 R)))
        (@adantll (wcel B2 A2) (wcel (cv x3) A2) (wi (wo (wbr (cv x3) B2 R) (wbr B2 (cv x3) R)) (wcel (cv x3) (cun (cdm R) (crn R)))) (wor A2 R)
          (@syl6ibr (wa (wcel B2 A2) (wcel (cv x3) A2)) (wo (wbr (cv x3) B2 R) (wbr B2 (cv x3) R)) (wo (wcel (cv x3) (cdm R)) (wcel (cv x3) (crn R))) (wcel (cv x3) (cun (cdm R) (crn R)))
            (@orim12d (wa (wcel B2 A2) (wcel (cv x3) A2)) (wbr (cv x3) B2 R) (wcel (cv x3) (cdm R)) (wbr B2 (cv x3) R) (wcel (cv x3) (crn R))
              (@ancoms (wcel (cv x3) A2) (wcel B2 A2) (wi (wbr (cv x3) B2 R) (wcel (cv x3) (cdm R)))
                (@«3expia» (wcel (cv x3) A2) (wcel B2 A2) (wbr (cv x3) B2 R) (wcel (cv x3) (cdm R))
                  (@breldmg (cv x3) B2 A2 A2 R)))
              (@«3expia» (wcel B2 A2) (wcel (cv x3) A2) (wbr B2 (cv x3) R) (wcel (cv x3) (crn R))
                (@brelrng B2 (cv x3) R A2 A2)))
            (@elun (cv x3) (cdm R) (crn R)))))))


/-- The set of all ordered pairs in a class is the same as the double converse. (Contributed by
Mario Carneiro, 16-Aug-2015.) -/
theorem cnvcnv3 {R : «class»} :
  ⊦ wceq (ccnv (ccnv R)) (copab (λ x3 y, wbr (cv x3) (cv y) R)) :=
@eqtri (ccnv (ccnv R)) (copab (λ x3 y, wbr (cv y) (cv x3) (ccnv R))) (copab (λ x3 y, wbr (cv x3) (cv y) R))
  (@df_cnv (ccnv R))
  (@opabbii (λ x3 y, wbr (cv y) (cv x3) (ccnv R)) (λ x3 y, wbr (cv x3) (cv y) R)
    (λ x3 y, @brcnv (cv y) (cv x3) R
      (@vex y)
      (@vex x3)))


/-- Alternate definition of relation. Exercise 2 of [TakeutiZaring] p. 25. (Contributed by NM,
29-Dec-1996.) -/
theorem dfrel2 {R : «class»} :
  ⊦ wb (wrel R) (wceq (ccnv (ccnv R)) R) :=
@impbii (wrel R) (wceq (ccnv (ccnv R)) R)
  (@mpan (wrel (ccnv (ccnv R))) (wrel R) (wceq (ccnv (ccnv R)) R)
    (@relcnv (ccnv R))
    (@eqrelriv (ccnv (ccnv R)) R
      (λ x3 y, @bitri (wcel (cop (cv x3) (cv y)) (ccnv (ccnv R))) (wcel (cop (cv y) (cv x3)) (ccnv R)) (wcel (cop (cv x3) (cv y)) R)
        (@opelcnv (cv x3) (cv y) (ccnv R)
          (@vex x3)
          (@vex y))
        (@opelcnv (cv y) (cv x3) R
          (@vex y)
          (@vex x3)))))
  (@mpbii (wceq (ccnv (ccnv R)) R) (wrel (ccnv (ccnv R))) (wrel R)
    (@relcnv (ccnv R))
    (@releq (ccnv (ccnv R)) R))


/-- A relation can be expressed as the set of ordered pairs in it. An analogue of ~ dffn5 for
relations. (Contributed by Mario Carneiro, 16-Aug-2015.) -/
theorem dfrel4v {R : «class»} :
  ⊦ wb (wrel R) (wceq R (copab (λ x3 y, wbr (cv x3) (cv y) R))) :=
@«3bitri» (wrel R) (wceq (ccnv (ccnv R)) R) (wceq R (ccnv (ccnv R))) (wceq R (copab (λ x3 y, wbr (cv x3) (cv y) R)))
  (@dfrel2 R)
  (@eqcom (ccnv (ccnv R)) R)
  (@eqeq2i (ccnv (ccnv R)) (copab (λ x3 y, wbr (cv x3) (cv y) R)) R
    (@cnvcnv3 R))


/-- The double converse of a class strips out all elements that are not ordered pairs. (Contributed
by NM, 8-Dec-2003.) (Proof shortened by BJ, 26-Nov-2021.) -/
theorem cnvcnv {A2 : «class»} :
  ⊦ wceq (ccnv (ccnv A2)) (cin A2 (cxp cvv cvv)) :=
@eqtri (ccnv (ccnv A2)) (ccnv (ccnv (cin A2 (cxp cvv cvv)))) (cin A2 (cxp cvv cvv))
  (@«3eqtr4ri» (ccnv (cin (ccnv A2) (ccnv (cxp cvv cvv)))) (cin (ccnv (ccnv A2)) (ccnv (ccnv (cxp cvv cvv)))) (ccnv (ccnv (cin A2 (cxp cvv cvv)))) (ccnv (ccnv A2))
    (@cnvin (ccnv A2) (ccnv (cxp cvv cvv)))
    (@cnveqi (ccnv (cin A2 (cxp cvv cvv))) (cin (ccnv A2) (ccnv (cxp cvv cvv)))
      (@cnvin A2 (cxp cvv cvv)))
    (@mpbi (wss (ccnv (ccnv A2)) (ccnv (ccnv (cxp cvv cvv)))) (wceq (ccnv (ccnv A2)) (cin (ccnv (ccnv A2)) (ccnv (ccnv (cxp cvv cvv)))))
      (@sseqtrri (ccnv (ccnv A2)) (cxp cvv cvv) (ccnv (ccnv (cxp cvv cvv)))
        (@mpbi (wrel (ccnv (ccnv A2))) (wss (ccnv (ccnv A2)) (cxp cvv cvv))
          (@relcnv (ccnv A2))
          (@df_rel (ccnv (ccnv A2))))
        (@mpbi (wrel (cxp cvv cvv)) (wceq (ccnv (ccnv (cxp cvv cvv))) (cxp cvv cvv))
          (@relxp cvv cvv)
          (@dfrel2 (cxp cvv cvv))))
      (@dfss (ccnv (ccnv A2)) (ccnv (ccnv (cxp cvv cvv))))))
  (@mpbi (wrel (cin A2 (cxp cvv cvv))) (wceq (ccnv (ccnv (cin A2 (cxp cvv cvv)))) (cin A2 (cxp cvv cvv)))
    (@relinxp cvv cvv A2)
    (@dfrel2 (cin A2 (cxp cvv cvv))))


/-- The double converse of a class equals its restriction to the universe. (Contributed by NM,
8-Oct-2007.) -/
theorem cnvcnv2 {A2 : «class»} :
  ⊦ wceq (ccnv (ccnv A2)) (cres A2 cvv) :=
@eqtr4i (ccnv (ccnv A2)) (cin A2 (cxp cvv cvv)) (cres A2 cvv)
  (@cnvcnv A2)
  (@df_res A2 cvv)


/-- The double converse of a class is a subclass. Exercise 2 of [TakeutiZaring] p. 25. (Contributed
by NM, 23-Jul-2004.) -/
theorem cnvcnvss {A2 : «class»} :
  ⊦ wss (ccnv (ccnv A2)) A2 :=
@eqsstri (ccnv (ccnv A2)) (cin A2 (cxp cvv cvv)) A2
  (@cnvcnv A2)
  (@inss1 A2 (cxp cvv cvv))


/-- The domain of a universal restriction. (Contributed by NM, 14-May-2008.) -/
theorem dmresv {A2 : «class»} :
  ⊦ wceq (cdm (cres A2 cvv)) (cdm A2) :=
@«3eqtri» (cdm (cres A2 cvv)) (cin cvv (cdm A2)) (cin (cdm A2) cvv) (cdm A2)
  (@dmres A2 cvv)
  (@incom cvv (cdm A2))
  (@inv1 (cdm A2))


/-- The range of a universal restriction. (Contributed by NM, 14-May-2008.) -/
theorem rnresv {A2 : «class»} :
  ⊦ wceq (crn (cres A2 cvv)) (crn A2) :=
@eqtr3i (crn (ccnv (ccnv A2))) (crn (cres A2 cvv)) (crn A2)
  (@rneqi (ccnv (ccnv A2)) (cres A2 cvv)
    (@cnvcnv2 A2))
  (@rncnvcnv A2)


/-- Range defined in terms of image. (Contributed by NM, 14-May-2008.) -/
theorem dfrn4 {A2 : «class»} :
  ⊦ wceq (crn A2) (cima A2 cvv) :=
@eqtr2i (cima A2 cvv) (crn (cres A2 cvv)) (crn A2)
  (@df_ima A2 cvv)
  (@rnresv A2)


/-- The restriction of the double converse of a class. (Contributed by NM, 8-Apr-2007.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem rescnvcnv {A2 B2 : «class»} :
  ⊦ wceq (cres (ccnv (ccnv A2)) B2) (cres A2 B2) :=
@«3eqtri» (cres (ccnv (ccnv A2)) B2) (cres (cres A2 cvv) B2) (cres A2 (cin cvv B2)) (cres A2 B2)
  (@reseq1i (ccnv (ccnv A2)) (cres A2 cvv) B2
    (@cnvcnv2 A2))
  (@resres A2 cvv B2)
  (@reseq2i (cin cvv B2) B2 A2
    (@mpbi (wss B2 cvv) (wceq (cin cvv B2) B2)
      (@ssv B2)
      (@sseqin2 B2 cvv)))


/-- The image of the double converse of a class. (Contributed by NM, 8-Apr-2007.) -/
theorem imacnvcnv {A2 B2 : «class»} :
  ⊦ wceq (cima (ccnv (ccnv A2)) B2) (cima A2 B2) :=
@«3eqtr4i» (crn (cres (ccnv (ccnv A2)) B2)) (crn (cres A2 B2)) (cima (ccnv (ccnv A2)) B2) (cima A2 B2)
  (@rneqi (cres (ccnv (ccnv A2)) B2) (cres A2 B2)
    (@rescnvcnv A2 B2))
  (@df_ima (ccnv (ccnv A2)) B2)
  (@df_ima A2 B2)


/-- The domain of a singleton is nonzero iff the singleton argument is an ordered pair. (Contributed
by NM, 14-Dec-2008.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem dmsnn0 {A2 : «class»} :
  ⊦ wb (wcel A2 (cxp cvv cvv)) (wne (cdm (csn A2)) c0) :=
@«3bitr4i» (wex (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y))))) (wex (λ x3, wcel (cv x3) (cdm (csn A2)))) (wcel A2 (cxp cvv cvv)) (wne (cdm (csn A2)) c0)
  (@exbii (λ x3, wex (λ y, wceq A2 (cop (cv x3) (cv y)))) (λ x3, wcel (cv x3) (cdm (csn A2)))
    (λ x3, @bitr2i (wcel (cv x3) (cdm (csn A2))) (wex (λ y, wbr (cv x3) (cv y) (csn A2))) (wex (λ y, wceq A2 (cop (cv x3) (cv y))))
      (@eldm (cv x3) (csn A2)
        (@vex x3))
      (@exbii (λ y, wbr (cv x3) (cv y) (csn A2)) (λ y, wceq A2 (cop (cv x3) (cv y)))
        (λ y, @«3bitri» (wbr (cv x3) (cv y) (csn A2)) (wcel (cop (cv x3) (cv y)) (csn A2)) (wceq (cop (cv x3) (cv y)) A2) (wceq A2 (cop (cv x3) (cv y)))
          (@df_br (cv x3) (cv y) (csn A2))
          (@elsn (cop (cv x3) (cv y)) A2
            (@opex (cv x3) (cv y)))
          (@eqcom (cop (cv x3) (cv y)) A2)))))
  (@elvv A2)
  (@n0 (cdm (csn A2)))


/-- The domain of the singleton of the empty set is empty. (Contributed by NM, 30-Jan-2004.) -/
theorem dmsn0 :
  ⊦ wceq (cdm (csn c0)) c0 :=
@mpbir (wceq (cdm (csn c0)) c0) (wn (wcel c0 (cxp cvv cvv)))
  (@«0nelxp» cvv cvv)
  (@necon2bbii (wcel c0 (cxp cvv cvv)) (cdm (csn c0)) c0
    (@dmsnn0 c0))


/-- The converse of the singleton of the empty set is empty. (Contributed by Mario Carneiro,
30-Aug-2015.) -/
theorem cnvsn0 :
  ⊦ wceq (ccnv (csn c0)) c0 :=
@mpbir (wceq (ccnv (csn c0)) c0) (wceq (crn (ccnv (csn c0))) c0)
  (@eqtr3i (cdm (csn c0)) (crn (ccnv (csn c0))) c0
    (@dfdm4 (csn c0))
    dmsn0)
  (@ax_mp (wrel (ccnv (csn c0))) (wb (wceq (ccnv (csn c0)) c0) (wceq (crn (ccnv (csn c0))) c0))
    (@relcnv (csn c0))
    (@relrn0 (ccnv (csn c0))))


/-- The domain of a singleton of an ordered pair is the singleton of the first member. (Contributed
by Mario Carneiro, 26-Apr-2015.) -/
theorem dmsnopg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wceq (cdm (csn (cop A2 B2))) (csn A2)) :=
@eqrdv (wcel B2 V) (cdm (csn (cop A2 B2))) (csn A2)
  (λ x3, @«3bitr4g» (wcel B2 V) (wex (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2))) (wceq (cv x3) A2) (wcel (cv x3) (cdm (csn (cop A2 B2)))) (wcel (cv x3) (csn A2))
    (@impbid2 (wcel B2 V) (wex (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2))) (wceq (cv x3) A2)
      (@exlimiv (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wceq (cv x3) A2)
        (λ y, @opth1 (cv x3) (cv y) A2 B2
          (@vex x3)
          (@vex y)))
      (@syl5 (wceq (cv x3) A2) (wceq (cop (cv x3) B2) (cop A2 B2)) (wcel B2 V) (wex (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2)))
        (@opeq1 (cv x3) A2 B2)
        (setvar.forget $ λ y : setvar,
          show ⊦ wi (wcel B2 V) (wi (wceq (cop (cv x3) B2) (cop A2 B2)) (wex (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2)))), from
          @spcegv (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wceq (cop (cv x3) B2) (cop A2 B2)) B2 (λ y, V)
            (λ y, @eqeq1d (wceq (cv y) B2) (cop (cv x3) (cv y)) (cop (cv x3) B2) (cop A2 B2)
              (@opeq2 (cv y) B2 (cv x3))) y)))
    (@bitri (wcel (cv x3) (cdm (csn (cop A2 B2)))) (wex (λ y, wcel (cop (cv x3) (cv y)) (csn (cop A2 B2)))) (wex (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2)))
      (@eldm2 (cv x3) (csn (cop A2 B2))
        (@vex x3))
      (@exbii (λ y, wcel (cop (cv x3) (cv y)) (csn (cop A2 B2))) (λ y, wceq (cop (cv x3) (cv y)) (cop A2 B2))
        (λ y, @elsn (cop (cv x3) (cv y)) (cop A2 B2)
          (@opex (cv x3) (cv y)))))
    (@velsn (λ x3, A2) x3))


/-- The domain of a singleton of an ordered pair is a subset of the singleton of the first member
(with no sethood assumptions on ` B ` ). (Contributed by Mario Carneiro, 30-Apr-2015.) -/
theorem dmsnopss {A2 B2 : «class»} :
  ⊦ wss (cdm (csn (cop A2 B2))) (csn A2) :=
@pm2_61i (wcel B2 cvv) (wss (cdm (csn (cop A2 B2))) (csn A2))
  (@syl (wcel B2 cvv) (wceq (cdm (csn (cop A2 B2))) (csn A2)) (wss (cdm (csn (cop A2 B2))) (csn A2))
    (@dmsnopg A2 B2 cvv)
    (@eqimss (cdm (csn (cop A2 B2))) (csn A2)))
  (@eqsstrdi (wn (wcel B2 cvv)) (cdm (csn (cop A2 B2))) c0 (csn A2)
    (@eqtrdi (wn (wcel B2 cvv)) (cdm (csn (cop A2 B2))) (cdm (csn c0)) c0
      (@dmeqd (wn (wcel B2 cvv)) (csn (cop A2 B2)) (csn c0)
        (@sneqd (wn (wcel B2 cvv)) (cop A2 B2) c0
          (@opprc2 A2 B2)))
      dmsn0)
    (@«0ss» (csn A2)))


/-- The domain of an unordered pair of ordered pairs. (Contributed by Mario Carneiro, 26-Apr-2015.)
-/
theorem dmpropg {A2 B2 C D V W : «class»} :
  ⊦ wi (wa (wcel B2 V) (wcel D W)) (wceq (cdm (cpr (cop A2 B2) (cop C D))) (cpr A2 C)) :=
@«3eqtr4g» (wa (wcel B2 V) (wcel D W)) (cun (cdm (csn (cop A2 B2))) (cdm (csn (cop C D)))) (cun (csn A2) (csn C)) (cdm (cpr (cop A2 B2) (cop C D))) (cpr A2 C)
  (@syl2an (wcel B2 V) (wceq (cdm (csn (cop A2 B2))) (csn A2)) (wceq (cdm (csn (cop C D))) (csn C)) (wceq (cun (cdm (csn (cop A2 B2))) (cdm (csn (cop C D)))) (cun (csn A2) (csn C))) (wcel D W)
    (@dmsnopg A2 B2 V)
    (@dmsnopg C D W)
    (@uneq12 (cdm (csn (cop A2 B2))) (csn A2) (cdm (csn (cop C D))) (csn C)))
  (@eqtri (cdm (cpr (cop A2 B2) (cop C D))) (cdm (cun (csn (cop A2 B2)) (csn (cop C D)))) (cun (cdm (csn (cop A2 B2))) (cdm (csn (cop C D))))
    (@dmeqi (cpr (cop A2 B2) (cop C D)) (cun (csn (cop A2 B2)) (csn (cop C D)))
      (@df_pr (cop A2 B2) (cop C D)))
    (@dmun (csn (cop A2 B2)) (csn (cop C D))))
  (@df_pr A2 C)


/-- The domain of a singleton of an ordered pair is the singleton of the first member. (Contributed
by NM, 30-Jan-2004.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) (Revised by Mario Carneiro,
26-Apr-2015.) -/
theorem dmsnop {A2 B2 : «class»}
  (dmsnop_1 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cdm (csn (cop A2 B2))) (csn A2) :=
@ax_mp (wcel B2 cvv) (wceq (cdm (csn (cop A2 B2))) (csn A2))
  dmsnop_1
  (@dmsnopg A2 B2 cvv)


/-- Double converse of a singleton of an ordered pair. (Unlike ~ cnvsn , this does not need any
sethood assumptions on ` A ` and ` B ` .) (Contributed by Mario Carneiro, 26-Apr-2015.) -/
theorem cnvcnvsn {A2 B2 : «class»} :
  ⊦ wceq (ccnv (ccnv (csn (cop A2 B2)))) (ccnv (csn (cop B2 A2))) :=
@eqrelriiv (ccnv (ccnv (csn (cop A2 B2)))) (ccnv (csn (cop B2 A2)))
  (@relcnv (ccnv (csn (cop A2 B2))))
  (@relcnv (csn (cop B2 A2)))
  (λ x3 y, @bitri (wcel (cop (cv x3) (cv y)) (ccnv (ccnv (csn (cop A2 B2))))) (wcel (cop (cv y) (cv x3)) (ccnv (csn (cop A2 B2)))) (wcel (cop (cv x3) (cv y)) (ccnv (csn (cop B2 A2))))
    (@opelcnv (cv x3) (cv y) (ccnv (csn (cop A2 B2)))
      (@vex x3)
      (@vex y))
    (@«3bitr4i» (wcel (cop (cv x3) (cv y)) (csn (cop A2 B2))) (wcel (cop (cv y) (cv x3)) (csn (cop B2 A2))) (wcel (cop (cv y) (cv x3)) (ccnv (csn (cop A2 B2)))) (wcel (cop (cv x3) (cv y)) (ccnv (csn (cop B2 A2))))
      (@«3bitr4i» (wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wceq (cop (cv y) (cv x3)) (cop B2 A2)) (wcel (cop (cv x3) (cv y)) (csn (cop A2 B2))) (wcel (cop (cv y) (cv x3)) (csn (cop B2 A2)))
        (@«3bitr4i» (wa (wceq (cv x3) A2) (wceq (cv y) B2)) (wa (wceq (cv y) B2) (wceq (cv x3) A2)) (wceq (cop (cv x3) (cv y)) (cop A2 B2)) (wceq (cop (cv y) (cv x3)) (cop B2 A2))
          (@ancom (wceq (cv x3) A2) (wceq (cv y) B2))
          (@opth (cv x3) (cv y) A2 B2
            (@vex x3)
            (@vex y))
          (@opth (cv y) (cv x3) B2 A2
            (@vex y)
            (@vex x3)))
        (@elsn (cop (cv x3) (cv y)) (cop A2 B2)
          (@opex (cv x3) (cv y)))
        (@elsn (cop (cv y) (cv x3)) (cop B2 A2)
          (@opex (cv y) (cv x3))))
      (@opelcnv (cv y) (cv x3) (csn (cop A2 B2))
        (@vex y)
        (@vex x3))
      (@opelcnv (cv x3) (cv y) (csn (cop B2 A2))
        (@vex x3)
        (@vex y))))


/-- The range of a singleton of an ordered pair is the singleton of the second member. (Contributed
by NM, 24-Jul-2004.) (Revised by Mario Carneiro, 30-Apr-2015.) -/
theorem rnsnopg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wceq (crn (csn (cop A2 B2))) (csn B2)) :=
@syl5eq (wcel A2 V) (crn (csn (cop A2 B2))) (cdm (csn (cop B2 A2))) (csn B2)
  (@eqtr4i (crn (csn (cop A2 B2))) (cdm (ccnv (csn (cop A2 B2)))) (cdm (csn (cop B2 A2)))
    (@df_rn (csn (cop A2 B2)))
    (@«3eqtri» (cdm (csn (cop B2 A2))) (crn (ccnv (csn (cop B2 A2)))) (cdm (ccnv (ccnv (csn (cop B2 A2))))) (cdm (ccnv (csn (cop A2 B2))))
      (@dfdm4 (csn (cop B2 A2)))
      (@df_rn (ccnv (csn (cop B2 A2))))
      (@dmeqi (ccnv (ccnv (csn (cop B2 A2)))) (ccnv (csn (cop A2 B2)))
        (@cnvcnvsn B2 A2))))
  (@dmsnopg B2 A2 V)


/-- Converse of a singleton of an ordered pair. (Contributed by NM, 23-Jan-2015.) (Proof shortened
by BJ, 12-Feb-2022.) -/
theorem cnvsng {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wceq (ccnv (csn (cop A2 B2))) (csn (cop B2 A2))) :=
@eqtr3id (wa (wcel A2 V) (wcel B2 W)) (ccnv (csn (cop A2 B2))) (ccnv (ccnv (csn (cop B2 A2)))) (csn (cop B2 A2))
  (@cnvcnvsn B2 A2)
  (@sylib (wa (wcel A2 V) (wcel B2 W)) (wrel (csn (cop B2 A2))) (wceq (ccnv (ccnv (csn (cop B2 A2)))) (csn (cop B2 A2)))
    (@ancoms (wcel B2 W) (wcel A2 V) (wrel (csn (cop B2 A2)))
      (@relsnopg B2 A2 W V))
    (@dfrel2 (csn (cop B2 A2))))


/-- The range of a singleton of an ordered pair is the singleton of the second member. (Contributed
by NM, 24-Jul-2004.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem rnsnop {A2 B2 : «class»}
  (cnvsn_1 : ⊦ wcel A2 cvv) :
  ⊦ wceq (crn (csn (cop A2 B2))) (csn B2) :=
@ax_mp (wcel A2 cvv) (wceq (crn (csn (cop A2 B2))) (csn B2))
  cnvsn_1
  (@rnsnopg A2 B2 cvv)


/-- Extract the first member of an ordered pair. (See ~ op2nda to extract the second member, ~
op1stb for an alternate version, and ~ op1st for the preferred version.) (Contributed by Raph
Levien, 4-Dec-2003.) -/
theorem op1sta {A2 B2 : «class»}
  (cnvsn_1 : ⊦ wcel A2 cvv)
  (cnvsn_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cuni (cdm (csn (cop A2 B2)))) A2 :=
@eqtri (cuni (cdm (csn (cop A2 B2)))) (cuni (csn A2)) A2
  (@unieqi (cdm (csn (cop A2 B2))) (csn A2)
    (@dmsnop A2 B2
      cnvsn_2))
  (@unisn A2
    cnvsn_1)


/-- Converse of a singleton of an ordered pair. (Contributed by NM, 11-May-1998.) (Revised by Mario
Carneiro, 26-Apr-2015.) (Proof shortened by BJ, 12-Feb-2022.) -/
theorem cnvsn {A2 B2 : «class»}
  (cnvsn_1 : ⊦ wcel A2 cvv)
  (cnvsn_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (ccnv (csn (cop A2 B2))) (csn (cop B2 A2)) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wceq (ccnv (csn (cop A2 B2))) (csn (cop B2 A2)))
  cnvsn_1
  cnvsn_2
  (@cnvsng A2 B2 cvv cvv)


/-- Extract the second member of an ordered pair. (See ~ op1sta to extract the first member, ~
op2ndb for an alternate version, and ~ op2nd for the preferred version.) (Contributed by NM,
17-Feb-2004.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem op2nda {A2 B2 : «class»}
  (cnvsn_1 : ⊦ wcel A2 cvv)
  (cnvsn_2 : ⊦ wcel B2 cvv) :
  ⊦ wceq (cuni (crn (csn (cop A2 B2)))) B2 :=
@eqtri (cuni (crn (csn (cop A2 B2)))) (cuni (csn B2)) B2
  (@unieqi (crn (csn (cop A2 B2))) (csn B2)
    (@rnsnop A2 B2
      cnvsn_1))
  (@unisn B2
    cnvsn_2)


/-- Swap the members of an ordered pair. (Contributed by NM, 14-Dec-2008.) (Revised by Mario
Carneiro, 30-Aug-2015.) -/
theorem opswap {A2 B2 : «class»} :
  ⊦ wceq (cuni (ccnv (csn (cop A2 B2)))) (cop B2 A2) :=
@pm2_61i (wa (wcel A2 cvv) (wcel B2 cvv)) (wceq (cuni (ccnv (csn (cop A2 B2)))) (cop B2 A2))
  (@eqtrdi (wa (wcel A2 cvv) (wcel B2 cvv)) (cuni (ccnv (csn (cop A2 B2)))) (cuni (csn (cop B2 A2))) (cop B2 A2)
    (@unieqd (wa (wcel A2 cvv) (wcel B2 cvv)) (ccnv (csn (cop A2 B2))) (csn (cop B2 A2))
      (@cnvsng A2 B2 cvv cvv))
    (@unisn (cop B2 A2)
      (@opex B2 A2)))
  (@«3eqtr4a» (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (cuni c0) c0 (cuni (ccnv (csn (cop A2 B2)))) (cop B2 A2)
    uni0
    (@unieqd (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (ccnv (csn (cop A2 B2))) c0
      (@eqtrdi (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (ccnv (csn (cop A2 B2))) (ccnv (csn c0)) c0
        (@cnveqd (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (csn (cop A2 B2)) (csn c0)
          (@sneqd (wn (wa (wcel A2 cvv) (wcel B2 cvv))) (cop A2 B2) c0
            (@opprc A2 B2)))
        cnvsn0))
    (@sylnbi (wa (wcel A2 cvv) (wcel B2 cvv)) (wa (wcel B2 cvv) (wcel A2 cvv)) (wceq (cop B2 A2) c0)
      (@ancom (wcel A2 cvv) (wcel B2 cvv))
      (@opprc B2 A2)))


/-- An image under the converse of a restriction. (Contributed by Jeff Hankins, 12-Jul-2009.) -/
theorem cnvresima {A2 B2 F : «class»} :
  ⊦ wceq (cima (ccnv (cres F A2)) B2) (cin (cima (ccnv F) B2) A2) :=
@eqriv (cima (ccnv (cres F A2)) B2) (cin (cima (ccnv F) B2) A2)
  (λ t, @«3bitr4i» (wex (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv (cres F A2))))) (wa (wcel (cv t) (cima (ccnv F) B2)) (wcel (cv t) A2)) (wcel (cv t) (cima (ccnv (cres F A2)) B2)) (wcel (cv t) (cin (cima (ccnv F) B2) A2))
    (@«3bitr4i» (wex (λ s, wa (wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv F))) (wcel (cv t) A2))) (wa (wex (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv F)))) (wcel (cv t) A2)) (wex (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv (cres F A2))))) (wa (wcel (cv t) (cima (ccnv F) B2)) (wcel (cv t) A2))
      (@«19_41v» (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv F))) (wcel (cv t) A2))
      (@exbii (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv (cres F A2)))) (λ s, wa (wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv F))) (wcel (cv t) A2))
        (λ s, @bianass (wcel (cop (cv s) (cv t)) (ccnv (cres F A2))) (wcel (cop (cv s) (cv t)) (ccnv F)) (wcel (cv t) A2) (wcel (cv s) B2)
          (@«3bitr4i» (wcel (cop (cv t) (cv s)) (cres F A2)) (wa (wcel (cv t) A2) (wcel (cop (cv t) (cv s)) F)) (wcel (cop (cv s) (cv t)) (ccnv (cres F A2))) (wa (wcel (cop (cv s) (cv t)) (ccnv F)) (wcel (cv t) A2))
            (@opelresi A2 (cv t) (cv s) F
              (@vex s))
            (@opelcnv (cv s) (cv t) (cres F A2)
              (@vex s)
              (@vex t))
            (@anbi2ci (wcel (cop (cv s) (cv t)) (ccnv F)) (wcel (cop (cv t) (cv s)) F) (wcel (cv t) A2)
              (@opelcnv (cv s) (cv t) F
                (@vex s)
                (@vex t))))))
      (@anbi1i (wcel (cv t) (cima (ccnv F) B2)) (wex (λ s, wa (wcel (cv s) B2) (wcel (cop (cv s) (cv t)) (ccnv F)))) (wcel (cv t) A2)
        (@elima3 (cv t) (ccnv F) B2
          (@vex t))))
    (@elima3 (cv t) (ccnv (cres F A2)) B2
      (@vex t))
    (@elin (cv t) (cima (ccnv F) B2) A2))


/-- A class restricted to its domain equals its double converse. (Contributed by NM, 8-Apr-2007.) -/
theorem resdm2 {A2 : «class»} :
  ⊦ wceq (cres A2 (cdm A2)) (ccnv (ccnv A2)) :=
@«3eqtr3ri» (cres (ccnv (ccnv A2)) (cdm (ccnv (ccnv A2)))) (cres A2 (cdm (ccnv (ccnv A2)))) (ccnv (ccnv A2)) (cres A2 (cdm A2))
  (@rescnvcnv A2 (cdm (ccnv (ccnv A2))))
  (@ax_mp (wrel (ccnv (ccnv A2))) (wceq (cres (ccnv (ccnv A2)) (cdm (ccnv (ccnv A2)))) (ccnv (ccnv A2)))
    (@relcnv (ccnv A2))
    (@resdm (ccnv (ccnv A2))))
  (@reseq2i (cdm (ccnv (ccnv A2))) (cdm A2) A2
    (@dmcnvcnv A2))


/-- Restriction to the domain of a restriction. (Contributed by NM, 8-Apr-2007.) -/
theorem resdmres {A2 B2 : «class»} :
  ⊦ wceq (cres A2 (cdm (cres A2 B2))) (cres A2 B2) :=
@eqtri (cres A2 (cdm (cres A2 B2))) (cres (ccnv (ccnv A2)) B2) (cres A2 B2)
  (@«3eqtr4i» (cin A2 (cin (cxp B2 cvv) (cxp (cdm A2) cvv))) (cin (ccnv (ccnv A2)) (cxp B2 cvv)) (cres A2 (cdm (cres A2 B2))) (cres (ccnv (ccnv A2)) B2)
    (@«3eqtri» (cin A2 (cin (cxp B2 cvv) (cxp (cdm A2) cvv))) (cin (cxp B2 cvv) (cin A2 (cxp (cdm A2) cvv))) (cin (cxp B2 cvv) (ccnv (ccnv A2))) (cin (ccnv (ccnv A2)) (cxp B2 cvv))
      (@in12 A2 (cxp B2 cvv) (cxp (cdm A2) cvv))
      (@ineq2i (cin A2 (cxp (cdm A2) cvv)) (ccnv (ccnv A2)) (cxp B2 cvv)
        (@eqtr3i (cres A2 (cdm A2)) (cin A2 (cxp (cdm A2) cvv)) (ccnv (ccnv A2))
          (@df_res A2 (cdm A2))
          (@resdm2 A2)))
      (@incom (cxp B2 cvv) (ccnv (ccnv A2))))
    (@eqtri (cres A2 (cdm (cres A2 B2))) (cin A2 (cxp (cdm (cres A2 B2)) cvv)) (cin A2 (cin (cxp B2 cvv) (cxp (cdm A2) cvv)))
      (@df_res A2 (cdm (cres A2 B2)))
      (@ineq2i (cxp (cdm (cres A2 B2)) cvv) (cin (cxp B2 cvv) (cxp (cdm A2) cvv)) A2
        (@eqtri (cxp (cdm (cres A2 B2)) cvv) (cxp (cin B2 (cdm A2)) cvv) (cin (cxp B2 cvv) (cxp (cdm A2) cvv))
          (@xpeq1i (cdm (cres A2 B2)) (cin B2 (cdm A2)) cvv
            (@dmres A2 B2))
          (@xpindir B2 (cdm A2) cvv))))
    (@df_res (ccnv (ccnv A2)) B2))
  (@rescnvcnv A2 B2)


/-- The image of the domain of a restriction. (Contributed by NM, 8-Apr-2007.) -/
theorem imadmres {A2 B2 : «class»} :
  ⊦ wceq (cima A2 (cdm (cres A2 B2))) (cima A2 B2) :=
@«3eqtr4i» (crn (cres A2 (cdm (cres A2 B2)))) (crn (cres A2 B2)) (cima A2 (cdm (cres A2 B2))) (cima A2 B2)
  (@rneqi (cres A2 (cdm (cres A2 B2))) (cres A2 B2)
    (@resdmres A2 B2))
  (@df_ima A2 (cdm (cres A2 B2)))
  (@df_ima A2 B2)


/-- The preimage of a function in maps-to notation. (Contributed by Stefan O'Rear, 25-Jan-2015.) -/
theorem mptpreima {A2 B2 : setvar → «class»} {C : «class»} {F : setvar → «class»}
  (dmmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wceq (cima (ccnv (F x3)) C) (crab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3)) :=
@eqtri (cima (ccnv (F x3)) C) (cima (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C) (crab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3))
  (@imaeq1i (ccnv (F x3)) (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C
    (@eqtri (ccnv (F x3)) (ccnv (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
      (@cnveqi (F x3) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
        (@eqtri (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
          (dmmpt_1 x3)
          (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3))))
      (@cnvopab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))))
  (@eqtri (cima (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C) (crn (cres (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C)) (crab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3))
    (@df_ima (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C)
    (@eqtri (crn (cres (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C)) (crn (copab (λ y x3, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))) (crab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3))
      (@rneqi (cres (copab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) C) (copab (λ y x3, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))
        (@resopab (λ y x3, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) C))
      (@«3eqtr4i» (cab (λ x3, wex (λ y, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))) (cab (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (B2 x3) C))) (crn (copab (λ y x3, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))) (crab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3))
        (@abbii (λ x3, wex (λ y, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (λ x3, wa (wcel (cv x3) (A2 x3)) (wcel (B2 x3) C))
          (λ x3, @bitri (wex (λ y, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))) (wex (λ y, wa (wcel (cv x3) (A2 x3)) (wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))) (wa (wcel (cv x3) (A2 x3)) (wcel (B2 x3) C))
            (@exbii (λ y, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (λ y, wa (wcel (cv x3) (A2 x3)) (wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))
              (λ y, @bitri (wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (wa (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (wcel (cv y) C)) (wa (wcel (cv x3) (A2 x3)) (wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))
                (@ancom (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
                (@anass (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)) (wcel (cv y) C))))
            (@bitri (wex (λ y, wa (wcel (cv x3) (A2 x3)) (wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))) (wa (wcel (cv x3) (A2 x3)) (wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))) (wa (wcel (cv x3) (A2 x3)) (wcel (B2 x3) C))
              (@«19_42v» (wcel (cv x3) (A2 x3)) (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))
              (@anbi2i (wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv y) C))) (wcel (B2 x3) C) (wcel (cv x3) (A2 x3))
                (@bicomi (wcel (B2 x3) C) (wex (λ y, wa (wceq (cv y) (B2 x3)) (wcel (cv y) C)))
                  (@dfclel (B2 x3) C))))))
        (@rnopab (λ y x3, wa (wcel (cv y) C) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))
        (@df_rab (λ x3, wcel (B2 x3) C) (λ x3, A2 x3)))))


/-- Converse singleton image of a function defined by maps-to. (Contributed by Stefan O'Rear,
25-Jan-2015.) -/
theorem mptiniseg {A2 B2 : setvar → «class»} {C : «class»} {F : setvar → «class»} {V : «class»}
  (dmmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (wcel C V) (wceq (cima (ccnv (F x3)) (csn C)) (crab (λ x3, wceq (B2 x3) C) (λ x3, A2 x3))) :=
@syl5eq (wcel C V) (cima (ccnv (F x3)) (csn C)) (crab (λ x3, wcel (B2 x3) (csn C)) (λ x3, A2 x3)) (crab (λ x3, wceq (B2 x3) C) (λ x3, A2 x3))
  (@mptpreima (λ x3, A2 x3) (λ x3, B2 x3) (csn C) (λ x3, F x3)
    (λ x3, dmmpt_1 x3) x3)
  (@rabbidv (wcel C V) (λ x3, wcel (B2 x3) (csn C)) (λ x3, wceq (B2 x3) C) (λ x3, A2 x3)
    (λ x3, @elsn2g (B2 x3) C V))


/-- The domain of the mapping operation in general. (Contributed by NM, 16-May-1995.) (Revised by
Mario Carneiro, 22-Mar-2015.) -/
theorem dmmpt {A2 B2 F : setvar → «class»}
  (dmmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wceq (cdm (F x3)) (crab (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3)) :=
@«3eqtri» (cdm (F x3)) (crn (ccnv (F x3))) (cima (ccnv (F x3)) cvv) (crab (λ x3, wcel (B2 x3) cvv) (λ x3, A2 x3))
  (@dfdm4 (F x3))
  (@dfrn4 (ccnv (F x3)))
  (@mptpreima (λ x3, A2 x3) (λ x3, B2 x3) cvv (λ x3, F x3)
    (λ x3, dmmpt_1 x3) x3)


/-- The domain of a mapping is a subset of its base class. (Contributed by Scott Fenton,
17-Jun-2013.) -/
theorem dmmptss {A2 : «class»} {B2 F : setvar → «class»}
  (dmmpt_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wss (cdm (F x3)) A2 :=
@ssrab3 (λ x3, wcel (B2 x3) cvv) A2 (λ x3, cdm (F x3))
  (λ x3, @dmmpt (λ x3, A2) (λ x3, B2 x3) (λ x3, F x3)
    (λ x3, dmmpt_1 x3) x3) x3


/-- The domain of the mapping operation is the stated domain, if the function value is always a set.
(Contributed by Mario Carneiro, 9-Feb-2013.) (Revised by Mario Carneiro, 14-Sep-2013.) -/
theorem dmmptg {A2 : «class»} {B2 V : setvar → «class»} :
  ⊦ wi (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2)) (wceq (cdm (cmpt (λ x3, A2) (λ x3, B2 x3))) A2) :=
@eqtr4id (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2)) (cdm (cmpt (λ x3, A2) (λ x3, B2 x3))) (crab (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) A2
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wceq (cdm (cmpt (λ x3, A2) (λ x3, B2 x3))) (crab (λ x3, wcel (B2 x3) cvv) (λ x3, A2)), from
    @dmmpt (λ x3, A2) (λ x3, B2 x3) (λ x3, cmpt (λ x3, A2) (λ x3, B2 x3))
      (λ x3, @eqid (cmpt (λ x3, A2) (λ x3, B2 x3))) x3)
  (@sylibr (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2)) (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) (wceq A2 (crab (λ x3, wcel (B2 x3) cvv) (λ x3, A2)))
    (@ralimi (λ x3, wcel (B2 x3) (V x3)) (λ x3, wcel (B2 x3) cvv) (λ x3, A2)
      (λ x3, @elex (B2 x3) (V x3)))
    (@rabid2 (λ x3, wcel (B2 x3) cvv) A2))


/-- A composition is a relation. Exercise 24 of [TakeutiZaring] p. 25. (Contributed by NM,
26-Jan-1997.) -/
theorem relco {A2 B2 : «class»} :
  ⊦ wrel (ccom A2 B2) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wrel (ccom A2 B2), from
  @relopabiv (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (λ x3 y, ccom A2 B2)
    (λ x3 y, @df_co A2 B2) x3 y


/-- Class composition distributes over union. (Contributed by NM, 21-Dec-2008.) (Proof shortened by
Andrew Salmon, 27-Aug-2011.) -/
theorem coundi {A2 B2 C : «class»} :
  ⊦ wceq (ccom A2 (cun B2 C)) (cun (ccom A2 B2) (ccom A2 C)) :=
@«3eqtr4ri» (cun (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2)))) (cun (ccom A2 B2) (ccom A2 C)) (ccom A2 (cun B2 C))
  (@eqtri (cun (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))) (copab (λ x3 y, wo (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2))))
    (@unopab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))
    (@opabbii (λ x3 y, wo (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2)))) (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2)))
      (λ x3 y, @bitr2i (wex (λ z, wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2))) (wex (λ z, wo (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)) (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2)))) (wo (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))
        (@exbii (λ z, wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2)) (λ z, wo (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)) (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2)))
          (λ z, @bitri (wa (wbr (cv x3) (cv z) (cun B2 C)) (wbr (cv z) (cv y) A2)) (wa (wo (wbr (cv x3) (cv z) B2) (wbr (cv x3) (cv z) C)) (wbr (cv z) (cv y) A2)) (wo (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)) (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2)))
            (@anbi1i (wbr (cv x3) (cv z) (cun B2 C)) (wo (wbr (cv x3) (cv z) B2) (wbr (cv x3) (cv z) C)) (wbr (cv z) (cv y) A2)
              (@brun (cv x3) (cv z) B2 C))
            (@andir (wbr (cv x3) (cv z) B2) (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))
        (@«19_43» (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)) (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))))
  (@uneq12i (ccom A2 B2) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (ccom A2 C) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) A2))))
    (@df_co A2 B2)
    (@df_co A2 C))
  (@df_co A2 (cun B2 C))


/-- Restricted first member of a class composition. (Contributed by NM, 12-Oct-2004.) (Proof
shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem cores {A2 B2 C : «class»} :
  ⊦ wi (wss (crn B2) C) (wceq (ccom (cres A2 C) B2) (ccom A2 B2)) :=
@«3eqtr4g» (wss (crn B2) C) (copab (λ z x3, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) (cres A2 C))))) (copab (λ z x3, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2)))) (ccom (cres A2 C) B2) (ccom A2 B2)
  (@opabbidv (wss (crn B2) C) (λ z x3, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) (cres A2 C)))) (λ z x3, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2)))
    (λ z x3, @exbidv (wss (crn B2) C) (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) (cres A2 C))) (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2))
      (λ y, @pm5_32d (wss (crn B2) C) (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) (cres A2 C)) (wbr (cv y) (cv x3) A2)
        (@syl56 (wbr (cv z) (cv y) B2) (wcel (cv y) (crn B2)) (wss (crn B2) C) (wcel (cv y) C) (wb (wbr (cv y) (cv x3) (cres A2 C)) (wbr (cv y) (cv x3) A2))
          (@brelrn (cv z) (cv y) B2
            (@vex z)
            (@vex y))
          (@ssel (crn B2) C (cv y))
          (@baib (wbr (cv y) (cv x3) (cres A2 C)) (wcel (cv y) C) (wbr (cv y) (cv x3) A2)
            (@brresi C (cv y) (cv x3) A2
              (@vex x3)))))))
  (@df_co (cres A2 C) B2)
  (@df_co A2 B2)


/-- Associative law for the restriction of a composition. (Contributed by NM, 12-Dec-2006.) -/
theorem resco {A2 B2 C : «class»} :
  ⊦ wceq (cres (ccom A2 B2) C) (ccom A2 (cres B2 C)) :=
@eqbrriv (cres (ccom A2 B2) C) (ccom A2 (cres B2 C))
  (@relres (ccom A2 B2) C)
  (@relco A2 (cres B2 C))
  (λ x3 y, @«3bitr4i» (wa (wcel (cv x3) C) (wbr (cv x3) (cv y) (ccom A2 B2))) (wex (λ z, wa (wbr (cv x3) (cv z) (cres B2 C)) (wbr (cv z) (cv y) A2))) (wbr (cv x3) (cv y) (cres (ccom A2 B2) C)) (wbr (cv x3) (cv y) (ccom A2 (cres B2 C)))
    (@«3bitr2i» (wa (wcel (cv x3) C) (wbr (cv x3) (cv y) (ccom A2 B2))) (wa (wcel (cv x3) C) (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (wex (λ z, wa (wcel (cv x3) C) (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (wex (λ z, wa (wbr (cv x3) (cv z) (cres B2 C)) (wbr (cv z) (cv y) A2)))
      (@anbi2i (wbr (cv x3) (cv y) (ccom A2 B2)) (wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (wcel (cv x3) C)
        (@brco (cv x3) (cv y) A2 B2
          (@vex x3)
          (@vex y)))
      (@«19_42v» (wcel (cv x3) C) (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))
      (@exbii (λ z, wa (wcel (cv x3) C) (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (λ z, wa (wbr (cv x3) (cv z) (cres B2 C)) (wbr (cv z) (cv y) A2))
        (λ z, @bitr2i (wa (wbr (cv x3) (cv z) (cres B2 C)) (wbr (cv z) (cv y) A2)) (wa (wa (wcel (cv x3) C) (wbr (cv x3) (cv z) B2)) (wbr (cv z) (cv y) A2)) (wa (wcel (cv x3) C) (wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))
          (@anbi1i (wbr (cv x3) (cv z) (cres B2 C)) (wa (wcel (cv x3) C) (wbr (cv x3) (cv z) B2)) (wbr (cv z) (cv y) A2)
            (@brresi C (cv x3) (cv z) B2
              (@vex z)))
          (@anass (wcel (cv x3) C) (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))))
    (@brresi C (cv x3) (cv y) (ccom A2 B2)
      (@vex y))
    (@brco (cv x3) (cv y) A2 (cres B2 C)
      (@vex x3)
      (@vex y)))


/-- Image of the composition of two classes. (Contributed by Jason Orendorff, 12-Dec-2006.) -/
theorem imaco {A2 B2 C : «class»} :
  ⊦ wceq (cima (ccom A2 B2) C) (cima A2 (cima B2 C)) :=
@eqriv (cima (ccom A2 B2) C) (cima A2 (cima B2 C))
  (λ x3, @«3bitr4ri» (wrex (λ y, wbr (cv y) (cv x3) A2) (λ y, cima B2 C)) (wex (λ y, wa (wcel (cv y) (cima B2 C)) (wbr (cv y) (cv x3) A2))) (wcel (cv x3) (cima A2 (cima B2 C))) (wcel (cv x3) (cima (ccom A2 B2) C))
    (@df_rex (λ y, wbr (cv y) (cv x3) A2) (λ y, cima B2 C))
    (@elima (cv x3) A2 (cima B2 C)
      (@vex x3))
    (@«3bitr4i» (wrex (λ z, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2))) (λ z, C)) (wex (λ y, wa (wrex (λ z, wbr (cv z) (cv y) B2) (λ z, C)) (wbr (cv y) (cv x3) A2))) (wcel (cv x3) (cima (ccom A2 B2) C)) (wex (λ y, wa (wcel (cv y) (cima B2 C)) (wbr (cv y) (cv x3) A2)))
      (@bitri (wrex (λ z, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2))) (λ z, C)) (wex (λ y, wrex (λ z, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2)) (λ z, C))) (wex (λ y, wa (wrex (λ z, wbr (cv z) (cv y) B2) (λ z, C)) (wbr (cv y) (cv x3) A2)))
        (@rexcom4 (λ z y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2)) (λ z, C))
        (@exbii (λ y, wrex (λ z, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2)) (λ z, C)) (λ y, wa (wrex (λ z, wbr (cv z) (cv y) B2) (λ z, C)) (wbr (cv y) (cv x3) A2))
          (λ y, @r19_41v (λ z, wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2) (λ z, C))))
      (@bitri (wcel (cv x3) (cima (ccom A2 B2) C)) (wrex (λ z, wbr (cv z) (cv x3) (ccom A2 B2)) (λ z, C)) (wrex (λ z, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2))) (λ z, C))
        (@elima (cv x3) (ccom A2 B2) C
          (@vex x3))
        (@rexbii (λ z, wbr (cv z) (cv x3) (ccom A2 B2)) (λ z, wex (λ y, wa (wbr (cv z) (cv y) B2) (wbr (cv y) (cv x3) A2))) (λ z, C)
          (λ z, @brco (cv z) (cv x3) A2 B2
            (@vex z)
            (@vex x3))))
      (@exbii (λ y, wa (wcel (cv y) (cima B2 C)) (wbr (cv y) (cv x3) A2)) (λ y, wa (wrex (λ z, wbr (cv z) (cv y) B2) (λ z, C)) (wbr (cv y) (cv x3) A2))
        (λ y, @anbi1i (wcel (cv y) (cima B2 C)) (wrex (λ z, wbr (cv z) (cv y) B2) (λ z, C)) (wbr (cv y) (cv x3) A2)
          (@elima (cv y) B2 C
            (@vex y))))))


/-- The range of the composition of two classes. (Contributed by NM, 12-Dec-2006.) (Proof shortened
by Peter Mazsa, 2-Oct-2022.) -/
theorem rnco {A2 B2 : «class»} :
  ⊦ wceq (crn (ccom A2 B2)) (crn (cres A2 (crn B2))) :=
@eqriv (crn (ccom A2 B2)) (crn (cres A2 (crn B2)))
  (λ y, @«3bitr4i» (wex (λ x3, wbr (cv x3) (cv y) (ccom A2 B2))) (wex (λ z, wbr (cv z) (cv y) (cres A2 (crn B2)))) (wcel (cv y) (crn (ccom A2 B2))) (wcel (cv y) (crn (cres A2 (crn B2))))
    (@«3bitri» (wex (λ x3, wbr (cv x3) (cv y) (ccom A2 B2))) (wex (λ x3, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (wex (λ z, wex (λ x3, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))) (wex (λ z, wbr (cv z) (cv y) (cres A2 (crn B2))))
      (@exbii (λ x3, wbr (cv x3) (cv y) (ccom A2 B2)) (λ x3, wex (λ z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))
        (λ x3, @brco (cv x3) (cv y) A2 B2
          (@vex x3)
          (@vex y)))
      (@excom (λ x3 z, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))
      (@exbii (λ z, wex (λ x3, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2))) (λ z, wbr (cv z) (cv y) (cres A2 (crn B2)))
        (λ z, @«3bitr4ri» (wa (wcel (cv z) (crn B2)) (wbr (cv z) (cv y) A2)) (wa (wex (λ x3, wbr (cv x3) (cv z) B2)) (wbr (cv z) (cv y) A2)) (wbr (cv z) (cv y) (cres A2 (crn B2))) (wex (λ x3, wa (wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))
          (@anbi1i (wcel (cv z) (crn B2)) (wex (λ x3, wbr (cv x3) (cv z) B2)) (wbr (cv z) (cv y) A2)
            (@elrn (cv z) B2
              (@vex z)))
          (@brresi (crn B2) (cv z) (cv y) A2
            (@vex y))
          (@«19_41v» (λ x3, wbr (cv x3) (cv z) B2) (wbr (cv z) (cv y) A2)))))
    (@elrn (cv y) (ccom A2 B2)
      (@vex y))
    (@elrn (cv y) (cres A2 (crn B2))
      (@vex y)))


/-- The range of the composition of two classes. (Contributed by NM, 27-Mar-2008.) -/
theorem rnco2 {A2 B2 : «class»} :
  ⊦ wceq (crn (ccom A2 B2)) (cima A2 (crn B2)) :=
@eqtr4i (crn (ccom A2 B2)) (crn (cres A2 (crn B2))) (cima A2 (crn B2))
  (@rnco A2 B2)
  (@df_ima A2 (crn B2))


/-- The domain of a composition. Exercise 27 of [Enderton] p. 53. (Contributed by NM, 4-Feb-2004.)
-/
theorem dmco {A2 B2 : «class»} :
  ⊦ wceq (cdm (ccom A2 B2)) (cima (ccnv B2) (cdm A2)) :=
@«3eqtri» (cdm (ccom A2 B2)) (crn (ccnv (ccom A2 B2))) (crn (ccom (ccnv B2) (ccnv A2))) (cima (ccnv B2) (cdm A2))
  (@dfdm4 (ccom A2 B2))
  (@rneqi (ccnv (ccom A2 B2)) (ccom (ccnv B2) (ccnv A2))
    (@cnvco A2 B2))
  (@eqtr4i (crn (ccom (ccnv B2) (ccnv A2))) (cima (ccnv B2) (crn (ccnv A2))) (cima (ccnv B2) (cdm A2))
    (@rnco2 (ccnv B2) (ccnv A2))
    (@imaeq2i (cdm A2) (crn (ccnv A2)) (ccnv B2)
      (@dfdm4 A2)))


/-- A composition is not affected by a double converse of its first argument. (Contributed by NM,
8-Oct-2007.) -/
theorem cocnvcnv1 {A2 B2 : «class»} :
  ⊦ wceq (ccom (ccnv (ccnv A2)) B2) (ccom A2 B2) :=
@eqtri (ccom (ccnv (ccnv A2)) B2) (ccom (cres A2 cvv) B2) (ccom A2 B2)
  (@coeq1i (ccnv (ccnv A2)) (cres A2 cvv) B2
    (@cnvcnv2 A2))
  (@ax_mp (wss (crn B2) cvv) (wceq (ccom (cres A2 cvv) B2) (ccom A2 B2))
    (@ssv (crn B2))
    (@cores A2 B2 cvv))


/-- Composition with the empty set. Theorem 20 of [Suppes] p. 63. (Contributed by NM, 24-Apr-2004.)
-/
theorem co02 {A2 : «class»} :
  ⊦ wceq (ccom A2 c0) c0 :=
@eqrelriiv (ccom A2 c0) c0
  (@relco A2 c0)
  rel0
  (λ x3 y, @«2false» (wcel (cop (cv x3) (cv y)) (ccom A2 c0)) (wcel (cop (cv x3) (cv y)) c0)
    (@mtbir (wcel (cop (cv x3) (cv y)) (ccom A2 c0)) (wex (λ z, wa (wbr (cv x3) (cv z) c0) (wbr (cv z) (cv y) A2)))
      (@nex (λ z, wa (wbr (cv x3) (cv z) c0) (wbr (cv z) (cv y) A2))
        (λ z, @intnanr (wbr (cv x3) (cv z) c0) (wbr (cv z) (cv y) A2)
          (@br0 (cv x3) (cv z))))
      (@opelco (cv x3) (cv y) A2 c0
        (@vex x3)
        (@vex y)))
    (@noel (cop (cv x3) (cv y))))


/-- Composition with the empty set. (Contributed by NM, 24-Apr-2004.) -/
theorem co01 {A2 : «class»} :
  ⊦ wceq (ccom c0 A2) c0 :=
@«3eqtr3ri» (ccnv (ccnv c0)) (ccnv (ccnv (ccom c0 A2))) c0 (ccom c0 A2)
  (@cnveqi (ccnv c0) (ccnv (ccom c0 A2))
    (@eqtr4i (ccnv c0) c0 (ccnv (ccom c0 A2))
      cnv0
      (@«3eqtri» (ccnv (ccom c0 A2)) (ccom (ccnv A2) (ccnv c0)) (ccom (ccnv A2) c0) c0
        (@cnvco c0 A2)
        (@coeq2i (ccnv c0) c0 (ccnv A2)
          cnv0)
        (@co02 (ccnv A2)))))
  (@mpbi (wrel c0) (wceq (ccnv (ccnv c0)) c0)
    rel0
    (@dfrel2 c0))
  (@mpbi (wrel (ccom c0 A2)) (wceq (ccnv (ccnv (ccom c0 A2))) (ccom c0 A2))
    (@relco c0 A2)
    (@dfrel2 (ccom c0 A2)))


/-- Composition with the identity relation. Part of Theorem 3.7(i) of [Monk1] p. 36. (Contributed by
NM, 22-Apr-2004.) -/
theorem coi1 {A2 : «class»} :
  ⊦ wi (wrel A2) (wceq (ccom A2 cid) A2) :=
@mpan (wrel (ccom A2 cid)) (wrel A2) (wceq (ccom A2 cid) A2)
  (@relco A2 cid)
  (@eqrelriv (ccom A2 cid) A2
    (λ x3 y, @bitri (wcel (cop (cv x3) (cv y)) (ccom A2 cid)) (wbr (cv x3) (cv y) A2) (wcel (cop (cv x3) (cv y)) A2)
      (@bitri (wcel (cop (cv x3) (cv y)) (ccom A2 cid)) (wex (λ z, wa (wbr (cv x3) (cv z) cid) (wbr (cv z) (cv y) A2))) (wbr (cv x3) (cv y) A2)
        (@opelco (cv x3) (cv y) A2 cid
          (@vex x3)
          (@vex y))
        (@bitri (wex (λ z, wa (wbr (cv x3) (cv z) cid) (wbr (cv z) (cv y) A2))) (wex (λ z, wa (wceq (cv z) (cv x3)) (wbr (cv z) (cv y) A2))) (wbr (cv x3) (cv y) A2)
          (@exbii (λ z, wa (wbr (cv x3) (cv z) cid) (wbr (cv z) (cv y) A2)) (λ z, wa (wceq (cv z) (cv x3)) (wbr (cv z) (cv y) A2))
            (λ z, @anbi1i (wbr (cv x3) (cv z) cid) (wceq (cv z) (cv x3)) (wbr (cv z) (cv y) A2)
              (@bitri (wbr (cv x3) (cv z) cid) (wceq (cv x3) (cv z)) (wceq (cv z) (cv x3))
                (@ideq (cv x3) (cv z)
                  (@vex z))
                (@equcom x3 z))))
          (@equsexvw (λ z x3, wbr (cv z) (cv y) A2) (λ x3, wbr (cv x3) (cv y) A2)
            (λ z x3, @breq1 (cv z) (cv x3) (cv y) A2) x3)))
      (@df_br (cv x3) (cv y) A2)))


/-- Composition with the identity relation. Part of Theorem 3.7(i) of [Monk1] p. 36. (Contributed by
NM, 22-Apr-2004.) -/
theorem coi2 {A2 : «class»} :
  ⊦ wi (wrel A2) (wceq (ccom cid A2) A2) :=
@sylbi (wrel A2) (wceq (ccnv (ccnv A2)) A2) (wceq (ccom cid A2) A2)
  (@dfrel2 A2)
  (@«3eqtr3a» (wceq (ccnv (ccnv A2)) A2) (ccom (ccnv cid) (ccnv (ccnv A2))) (ccnv (ccnv A2)) (ccom cid A2) A2
    (@eqtr3i (ccnv (ccom (ccnv A2) cid)) (ccom (ccnv cid) (ccnv (ccnv A2))) (ccnv (ccnv A2))
      (@cnvco (ccnv A2) cid)
      (@cnveqi (ccom (ccnv A2) cid) (ccnv A2)
        (@ax_mp (wrel (ccnv A2)) (wceq (ccom (ccnv A2) cid) (ccnv A2))
          (@relcnv A2)
          (@coi1 (ccnv A2)))))
    (@mpan2 (wceq (ccnv (ccnv A2)) A2) (wceq (ccnv cid) cid) (wceq (ccom (ccnv cid) (ccnv (ccnv A2))) (ccom cid A2))
      cnvi
      (@sylan9eq (wceq (ccnv (ccnv A2)) A2) (wceq (ccnv cid) cid) (ccom (ccnv cid) (ccnv (ccnv A2))) (ccom (ccnv cid) A2) (ccom cid A2)
        (@coeq2 (ccnv (ccnv A2)) A2 (ccnv cid))
        (@coeq1 (ccnv cid) cid A2)))
    (@id (wceq (ccnv (ccnv A2)) A2)))


/-- Composition with a restricted identity relation. (Contributed by FL, 19-Jun-2011.) (Revised by
Stefan O'Rear, 7-Mar-2015.) -/
theorem coires1 {A2 B2 : «class»} :
  ⊦ wceq (ccom A2 (cres cid B2)) (cres A2 B2) :=
@eqtr3i (cres (ccnv (ccnv A2)) B2) (ccom A2 (cres cid B2)) (cres A2 B2)
  (@eqtr3i (cres (ccom A2 cid) B2) (cres (ccnv (ccnv A2)) B2) (ccom A2 (cres cid B2))
    (@reseq1i (ccom A2 cid) (ccnv (ccnv A2)) B2
      (@eqtr3i (ccom (ccnv (ccnv A2)) cid) (ccom A2 cid) (ccnv (ccnv A2))
        (@cocnvcnv1 A2 cid)
        (@ax_mp (wrel (ccnv (ccnv A2))) (wceq (ccom (ccnv (ccnv A2)) cid) (ccnv (ccnv A2)))
          (@relcnv (ccnv A2))
          (@coi1 (ccnv (ccnv A2))))))
    (@resco A2 cid B2))
  (@rescnvcnv A2 B2)


/-- Associative law for class composition. Theorem 27 of [Suppes] p. 64. Also Exercise 21 of
[Enderton] p. 53. Interestingly, this law holds for any classes whatsoever, not just functions or
even relations. (Contributed by NM, 27-Jan-1997.) -/
theorem coass {A2 B2 C : «class»} :
  ⊦ wceq (ccom (ccom A2 B2) C) (ccom A2 (ccom B2 C)) :=
@eqrelriiv (ccom (ccom A2 B2) C) (ccom A2 (ccom B2 C))
  (@relco (ccom A2 B2) C)
  (@relco A2 (ccom B2 C))
  (λ x3 y, @«3bitr4i» (wex (λ z, wex (λ w, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))) (wex (λ w, wex (λ z, wa (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2)))) (wcel (cop (cv x3) (cv y)) (ccom (ccom A2 B2) C)) (wcel (cop (cv x3) (cv y)) (ccom A2 (ccom B2 C)))
    (@bitr4i (wex (λ z, wex (λ w, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))) (wex (λ w, wex (λ z, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))) (wex (λ w, wex (λ z, wa (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2))))
      (@excom (λ z w, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))
      (@«2exbii» (λ w z, wa (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2)) (λ w z, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2)))
        (λ w z, @anass (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))
    (@«3bitr4i» (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) (ccom A2 B2)))) (wex (λ z, wa (wbr (cv x3) (cv z) C) (wex (λ w, wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))) (wcel (cop (cv x3) (cv y)) (ccom (ccom A2 B2) C)) (wex (λ z, wex (λ w, wa (wbr (cv x3) (cv z) C) (wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2)))))
      (@exbii (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv y) (ccom A2 B2))) (λ z, wa (wbr (cv x3) (cv z) C) (wex (λ w, wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))
        (λ z, @anbi2i (wbr (cv z) (cv y) (ccom A2 B2)) (wex (λ w, wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))) (wbr (cv x3) (cv z) C)
          (@brco (cv z) (cv y) A2 B2
            (@vex z)
            (@vex y))))
      (@opelco (cv x3) (cv y) (ccom A2 B2) C
        (@vex x3)
        (@vex y))
      (@exdistr (λ z, wbr (cv x3) (cv z) C) (λ z w, wa (wbr (cv z) (cv w) B2) (wbr (cv w) (cv y) A2))))
    (@«3bitr4i» (wex (λ w, wa (wbr (cv x3) (cv w) (ccom B2 C)) (wbr (cv w) (cv y) A2))) (wex (λ w, wa (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2))) (wbr (cv w) (cv y) A2))) (wcel (cop (cv x3) (cv y)) (ccom A2 (ccom B2 C))) (wex (λ w, wex (λ z, wa (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2))))
      (@exbii (λ w, wa (wbr (cv x3) (cv w) (ccom B2 C)) (wbr (cv w) (cv y) A2)) (λ w, wa (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2))) (wbr (cv w) (cv y) A2))
        (λ w, @anbi1i (wbr (cv x3) (cv w) (ccom B2 C)) (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2))) (wbr (cv w) (cv y) A2)
          (@brco (cv x3) (cv w) B2 C
            (@vex x3)
            (@vex w))))
      (@opelco (cv x3) (cv y) A2 (ccom B2 C)
        (@vex x3)
        (@vex y))
      (@exbii (λ w, wex (λ z, wa (wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2))) (λ w, wa (wex (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2))) (wbr (cv w) (cv y) A2))
        (λ w, @«19_41v» (λ z, wa (wbr (cv x3) (cv z) C) (wbr (cv z) (cv w) B2)) (wbr (cv w) (cv y) A2)))))


/-- A relation is included in the Cartesian product of its domain and range. Exercise 4.12(t) of
[Mendelson] p. 235. (Contributed by NM, 3-Aug-1994.) -/
theorem relssdmrn {A2 : «class»} :
  ⊦ wi (wrel A2) (wss A2 (cxp (cdm A2) (crn A2))) :=
@relssdv (wrel A2) A2 (cxp (cdm A2) (crn A2))
  (@id (wrel A2))
  (λ x3 y, @a1i (wi (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv y)) (cxp (cdm A2) (crn A2)))) (wrel A2)
    (@sylanbrc (wcel (cop (cv x3) (cv y)) A2) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wex (λ x3, wcel (cop (cv x3) (cv y)) A2)) (wcel (cop (cv x3) (cv y)) (cxp (cdm A2) (crn A2)))
      (@«19_8a» (λ y, wcel (cop (cv x3) (cv y)) A2) y)
      (@«19_8a» (λ x3, wcel (cop (cv x3) (cv y)) A2) x3)
      (@bitri (wcel (cop (cv x3) (cv y)) (cxp (cdm A2) (crn A2))) (wa (wcel (cv x3) (cdm A2)) (wcel (cv y) (crn A2))) (wa (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wex (λ x3, wcel (cop (cv x3) (cv y)) A2)))
        (@opelxp (cv x3) (cv y) (cdm A2) (crn A2))
        (@anbi12i (wcel (cv x3) (cdm A2)) (wex (λ y, wcel (cop (cv x3) (cv y)) A2)) (wcel (cv y) (crn A2)) (wex (λ x3, wcel (cop (cv x3) (cv y)) A2))
          (@eldm2 (cv x3) A2
            (@vex x3))
          (@elrn2 (cv y) A2
            (@vex y))))))


/-- Composition as a subset of the Cartesian product of factors. (Contributed by Mario Carneiro,
12-Jan-2017.) -/
theorem cossxp {A2 B2 : «class»} :
  ⊦ wss (ccom A2 B2) (cxp (cdm B2) (crn A2)) :=
@sstri (ccom A2 B2) (cxp (cdm (ccom A2 B2)) (crn (ccom A2 B2))) (cxp (cdm B2) (crn A2))
  (@ax_mp (wrel (ccom A2 B2)) (wss (ccom A2 B2) (cxp (cdm (ccom A2 B2)) (crn (ccom A2 B2))))
    (@relco A2 B2)
    (@relssdmrn (ccom A2 B2)))
  (@mp2an (wss (cdm (ccom A2 B2)) (cdm B2)) (wss (crn (ccom A2 B2)) (crn A2)) (wss (cxp (cdm (ccom A2 B2)) (crn (ccom A2 B2))) (cxp (cdm B2) (crn A2)))
    (@dmcoss A2 B2)
    (@rncoss A2 B2)
    (@xpss12 (cdm (ccom A2 B2)) (cdm B2) (crn (ccom A2 B2)) (crn A2)))


/-- Restriction of a class to a singleton. (Contributed by Mario Carneiro, 28-Dec-2014.) (Proof
shortened by Peter Mazsa, 2-Oct-2022.) -/
theorem ressn {A2 B2 : «class»} :
  ⊦ wceq (cres A2 (csn B2)) (cxp (csn B2) (cima A2 (csn B2))) :=
@eqrelriiv (cres A2 (csn B2)) (cxp (csn B2) (cima A2 (csn B2)))
  (@relres A2 (csn B2))
  (@relxp (csn B2) (cima A2 (csn B2)))
  (λ x3 y, @«3bitr4i» (wa (wcel (cv x3) (csn B2)) (wcel (cop (cv x3) (cv y)) A2)) (wa (wcel (cv x3) (csn B2)) (wcel (cv y) (cima A2 (csn B2)))) (wcel (cop (cv x3) (cv y)) (cres A2 (csn B2))) (wcel (cop (cv x3) (cv y)) (cxp (csn B2) (cima A2 (csn B2))))
    (@pm5_32i (wcel (cv x3) (csn B2)) (wcel (cop (cv x3) (cv y)) A2) (wcel (cv y) (cima A2 (csn B2)))
      (@bitr3id (wcel (cop (cv x3) (cv y)) A2) (wcel (cv y) (cima A2 (csn (cv x3)))) (wcel (cv x3) (csn B2)) (wcel (cv y) (cima A2 (csn B2)))
        (@elimasn A2 (cv x3) (cv y)
          (@vex x3)
          (@vex y))
        (@eleq2d (wcel (cv x3) (csn B2)) (cima A2 (csn (cv x3))) (cima A2 (csn B2)) (cv y)
          (@imaeq2d (wcel (cv x3) (csn B2)) (csn (cv x3)) (csn B2) A2
            (@sneqd (wcel (cv x3) (csn B2)) (cv x3) B2
              (@elsni (cv x3) B2))))))
    (@opelresi (csn B2) (cv x3) (cv y) A2
      (@vex y))
    (@opelxp (cv x3) (cv y) (csn B2) (cima A2 (csn B2))))


/-- The converse of a partial order relation is a partial order relation. (Contributed by NM,
15-Jun-2005.) -/
theorem cnvpo {A2 R : «class»} :
  ⊦ wb (wpo A2 R) (wpo A2 (ccnv R)) :=
@«3bitr4i» (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wral (λ z, wral (λ y, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ y, A2)) (λ z, A2)) (wpo A2 R) (wpo A2 (ccnv R))
  (@«3bitr4i» (wral (λ y, wral (λ x3, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, A2)) (λ y, A2)) (wral (λ y, wral (λ z, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ z, A2)) (λ y, A2)) (wral (λ x3, wral (λ y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ y, A2)) (λ x3, A2)) (wral (λ z, wral (λ y, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ y, A2)) (λ z, A2))
    (@ralbii (λ y, wral (λ x3, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, A2)) (λ y, wral (λ z, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ z, A2)) (λ y, A2)
      (λ y, @«3bitr4i» (wral (λ x3, wa (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, A2)) (wral (λ x3, wral (λ z, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ z, A2)) (λ x3, A2)) (wral (λ x3, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, A2)) (wral (λ z, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ z, A2))
        (@ralbii (λ x3, wa (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, wral (λ z, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ z, A2)) (λ x3, A2)
          (λ x3, @bitr2i (wral (λ z, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ z, A2)) (wa (wral (λ z, wn (wbr (cv z) (cv z) (ccnv R))) (λ z, A2)) (wral (λ z, wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R))) (λ z, A2))) (wa (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)))
            (@r19_26 (λ z, wn (wbr (cv z) (cv z) (ccnv R))) (λ z, wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R))) (λ z, A2))
            (@anbi12i (wral (λ z, wn (wbr (cv z) (cv z) (ccnv R))) (λ z, A2)) (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ z, wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R))) (λ z, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))
              (@cbvralvw (λ z, wn (wbr (cv z) (cv z) (ccnv R))) (λ x3, wn (wbr (cv x3) (cv x3) R)) A2
                (λ z x3, @notbid (wceq (cv z) (cv x3)) (wbr (cv z) (cv z) (ccnv R)) (wbr (cv x3) (cv x3) R)
                  (@syl5bb (wbr (cv z) (cv z) (ccnv R)) (wbr (cv z) (cv z) R) (wceq (cv z) (cv x3)) (wbr (cv x3) (cv x3) R)
                    (@brcnv (cv z) (cv z) R
                      (@vex z)
                      (@vex z))
                    (@breq12d (wceq (cv z) (cv x3)) (cv z) (cv x3) (cv z) (cv x3) R
                      (@id (wceq (cv z) (cv x3)))
                      (@id (wceq (cv z) (cv x3)))))))
              (@ralbii (λ z, wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R))) (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)
                (λ z, @imbi12i (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv z) (cv x3) (ccnv R)) (wbr (cv x3) (cv z) R)
                  (@anbi12ci (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv z) R) (wbr (cv y) (cv x3) (ccnv R)) (wbr (cv x3) (cv y) R)
                    (@brcnv (cv z) (cv y) R
                      (@vex z)
                      (@vex y))
                    (@brcnv (cv y) (cv x3) R
                      (@vex y)
                      (@vex x3)))
                  (@brcnv (cv z) (cv x3) R
                    (@vex z)
                    (@vex x3)))))))
        (@«3bitr4i» (wral (λ x3, wa (wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, A2)) (wa (wral (λ x3, wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2))) (wral (λ x3, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, A2)) (wral (λ x3, wa (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, A2))
          (@bitri (wral (λ x3, wa (wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, A2)) (wa (wral (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2)) (wral (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2))) (wa (wral (λ x3, wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2)))
            (@r19_26 (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2))
            (@anbi1i (wral (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2)) (wral (λ x3, wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2))
              (@bitr2i (wral (λ x3, wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (λ x3, A2)) (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2))
                (@ralidm (λ x3, wn (wbr (cv x3) (cv x3) R)) A2)
                (@pm2_61ine (wb (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2))) A2 c0
                  (@«2thd» (wceq A2 c0) (wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (wral (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2))
                    (@rzal (λ x3, wn (wbr (cv x3) (cv x3) R)) A2)
                    (@rzal (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) A2))
                  (@ralbidv (wne A2 c0) (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (λ x3, A2)
                    (λ x3, @r19_3rzv (wn (wbr (cv x3) (cv x3) R)) A2))))))
          (@ralbii (λ x3, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, wa (wral (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, A2)) (wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2))) (λ x3, A2)
            (λ x3, @r19_26 (λ z, wn (wbr (cv x3) (cv x3) R)) (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)))
          (@r19_26 (λ x3, wral (λ x3, wn (wbr (cv x3) (cv x3) R)) (λ x3, A2)) (λ x3, wral (λ z, wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R)) (λ z, A2)) (λ x3, A2)))
        (@ralcom (λ z x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ z, A2) (λ x3, A2))))
    (@ralcom (λ x3 y, wral (λ z, wa (wn (wbr (cv x3) (cv x3) R)) (wi (wa (wbr (cv x3) (cv y) R) (wbr (cv y) (cv z) R)) (wbr (cv x3) (cv z) R))) (λ z, A2)) (λ x3, A2) (λ y, A2))
    (@ralcom (λ z y, wral (λ x3, wa (wn (wbr (cv z) (cv z) (ccnv R))) (wi (wa (wbr (cv z) (cv y) (ccnv R)) (wbr (cv y) (cv x3) (ccnv R))) (wbr (cv z) (cv x3) (ccnv R)))) (λ x3, A2)) (λ z, A2) (λ y, A2)))
  (@df_po A2 R)
  (@df_po A2 (ccnv R))


/-- The converse of a strict order relation is a strict order relation. (Contributed by NM,
15-Jun-2005.) -/
theorem cnvso {A2 R : «class»} :
  ⊦ wb (wor A2 R) (wor A2 (ccnv R)) :=
@«3bitr4i» (wa (wpo A2 R) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2))) (wa (wpo A2 (ccnv R)) (wral (λ y, wral (λ x3, w3o (wbr (cv y) (cv x3) (ccnv R)) (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) (ccnv R))) (λ x3, A2)) (λ y, A2))) (wor A2 R) (wor A2 (ccnv R))
  (@anbi12i (wpo A2 R) (wpo A2 (ccnv R)) (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wral (λ y, wral (λ x3, w3o (wbr (cv y) (cv x3) (ccnv R)) (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) (ccnv R))) (λ x3, A2)) (λ y, A2))
    (@cnvpo A2 R)
    (@bitr4i (wral (λ x3, wral (λ y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y, A2)) (λ x3, A2)) (wral (λ y, wral (λ x3, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3, A2)) (λ y, A2)) (wral (λ y, wral (λ x3, w3o (wbr (cv y) (cv x3) (ccnv R)) (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) (ccnv R))) (λ x3, A2)) (λ y, A2))
      (@ralcom (λ x3 y, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3, A2) (λ y, A2))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wb (wral (λ y, wral (λ x3, w3o (wbr (cv y) (cv x3) (ccnv R)) (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) (ccnv R))) (λ x3, A2)) (λ y, A2)) (wral (λ y, wral (λ x3, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ x3, A2)) (λ y, A2)), from
        @«2ralbii» (λ y x3, w3o (wbr (cv y) (cv x3) (ccnv R)) (wceq (cv y) (cv x3)) (wbr (cv x3) (cv y) (ccnv R))) (λ y x3, w3o (wbr (cv x3) (cv y) R) (wceq (cv x3) (cv y)) (wbr (cv y) (cv x3) R)) (λ y x3, A2) (λ y x3, A2)
          (λ y x3, @«3orbi123i» (wbr (cv y) (cv x3) (ccnv R)) (wbr (cv x3) (cv y) R) (wceq (cv y) (cv x3)) (wceq (cv x3) (cv y)) (wbr (cv x3) (cv y) (ccnv R)) (wbr (cv y) (cv x3) R)
            (@brcnv (cv y) (cv x3) R
              (@vex y)
              (@vex x3))
            (@equcom y x3)
            (@brcnv (cv x3) (cv y) R
              (@vex x3)
              (@vex y))) x3)))
  (@df_so A2 R)
  (@df_so A2 (ccnv R))


-- /-- The predecessors symbol. -/
-- constant cpred : «class» → «class» → «class» → «class»


-- /-- Define the predecessor class of a binary relation. This is the class of all elements ` y ` of
-- ` A ` such that ` y R X ` (see ~ elpred ) . (Contributed by Scott Fenton, 29-Jan-2011.) -/
-- axiom df_pred {A2 R X : «class»} : ⊦ wceq (cpred A2 R X) (cin A2 (cima (ccnv R) (csn X)))


/-- Equality theorem for the predecessor class. (Contributed by Scott Fenton, 13-Jun-2018.) -/
theorem predeq123 {A2 B2 R S X Y : «class»} :
  ⊦ wi (w3a (wceq R S) (wceq A2 B2) (wceq X Y)) (wceq (cpred A2 R X) (cpred B2 S Y)) :=
@«3eqtr4g» (w3a (wceq R S) (wceq A2 B2) (wceq X Y)) (cin A2 (cima (ccnv R) (csn X))) (cin B2 (cima (ccnv S) (csn Y))) (cpred A2 R X) (cpred B2 S Y)
  (@ineq12d (w3a (wceq R S) (wceq A2 B2) (wceq X Y)) A2 B2 (cima (ccnv R) (csn X)) (cima (ccnv S) (csn Y))
    (@simp2 (wceq R S) (wceq A2 B2) (wceq X Y))
    (@imaeq12d (w3a (wceq R S) (wceq A2 B2) (wceq X Y)) (ccnv R) (ccnv S) (csn X) (csn Y)
      (@«3ad2ant1» (wceq R S) (wceq A2 B2) (wceq (ccnv R) (ccnv S)) (wceq X Y)
        (@cnveq R S))
      (@«3ad2ant3» (wceq X Y) (wceq R S) (wceq (csn X) (csn Y)) (wceq A2 B2)
        (@sneq X Y))))
  (@df_pred A2 R X)
  (@df_pred B2 S Y)


/-- Equality theorem for the predecessor class. (Contributed by Scott Fenton, 2-Feb-2011.) -/
theorem predeq1 {A2 R S X : «class»} :
  ⊦ wi (wceq R S) (wceq (cpred A2 R X) (cpred A2 S X)) :=
@mp3an23 (wceq R S) (wceq A2 A2) (wceq X X) (wceq (cpred A2 R X) (cpred A2 S X))
  (@eqid A2)
  (@eqid X)
  (@predeq123 A2 A2 R S X X)


/-- Equality theorem for the predecessor class. (Contributed by Scott Fenton, 2-Feb-2011.) -/
theorem predeq2 {A2 B2 R X : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cpred A2 R X) (cpred B2 R X)) :=
@mp3an13 (wceq R R) (wceq A2 B2) (wceq X X) (wceq (cpred A2 R X) (cpred B2 R X))
  (@eqid R)
  (@eqid X)
  (@predeq123 A2 B2 R R X X)


/-- Bound-variable hypothesis builder for the predecessor class. (Contributed by Scott Fenton,
9-Jun-2018.) -/
theorem nfpred {A2 R X : setvar → «class»}
  (nfpred_1 : ⊦ wnfc (λ x3, R x3))
  (nfpred_2 : ⊦ wnfc (λ x3, A2 x3))
  (nfpred_3 : ⊦ wnfc (λ x3, X x3)) :
  ⊦ wnfc (λ x3, cpred (A2 x3) (R x3) (X x3)) :=
@nfcxfr (λ x3, cpred (A2 x3) (R x3) (X x3)) (λ x3, cin (A2 x3) (cima (ccnv (R x3)) (csn (X x3))))
  (λ x3, @df_pred (A2 x3) (R x3) (X x3))
  (@nfin (λ x3, A2 x3) (λ x3, cima (ccnv (R x3)) (csn (X x3)))
    nfpred_2
    (@nfima (λ x3, ccnv (R x3)) (λ x3, csn (X x3))
      (@nfcnv (λ x3, R x3)
        nfpred_1)
      (@nfsn (λ x3, X x3)
        nfpred_3)))


/-- The predecessor under the membership relation is equivalent to an intersection. (Contributed by
Scott Fenton, 27-Mar-2011.) (Proof shortened by Andrew Salmon, 27-Aug-2011.) -/
theorem predep {A2 B2 X : «class»} :
  ⊦ wi (wcel X B2) (wceq (cpred A2 cep X) (cin A2 X)) :=
@syl5eq (wcel X B2) (cpred A2 cep X) (cin A2 (cima (ccnv cep) (csn X))) (cin A2 X)
  (@df_pred A2 cep X)
  (@ineq2d (wcel X B2) (cima (ccnv cep) (csn X)) X A2
    (@syl5eq (wcel X B2) (cima (ccnv cep) (csn X)) (cab (λ y, wbr X (cv y) (ccnv cep))) X
      (@ax_mp (wrel (ccnv cep)) (wceq (cima (ccnv cep) (csn X)) (cab (λ y, wbr X (cv y) (ccnv cep))))
        (@relcnv cep)
        (@relimasn X (ccnv cep)))
      (@abbi1dv (wcel X B2) (λ y, wbr X (cv y) (ccnv cep)) X
        (λ y, @bitrd (wcel X B2) (wbr X (cv y) (ccnv cep)) (wbr (cv y) X cep) (wcel (cv y) X)
          (@elvd (λ y, wcel X B2) (λ y, wb (wbr X (cv y) (ccnv cep)) (wbr (cv y) X cep))
            (λ y, @brcnvg X (cv y) B2 cvv cep) y)
          (@epelg (cv y) X B2)))))


-- /-- Extend the definition of a wff to include the ordinal predicate. -/
-- constant word : «class» → wff


-- /-- Extend the definition of a class to include the class of all ordinal numbers. (The 0 in the
-- name prevents creating a file called con.html, which causes problems in Windows.) -/
-- constant con0 : «class»


-- /-- Extend the definition of a wff to include the limit ordinal predicate. -/
-- constant wlim : «class» → wff


-- /-- Extend class notation to include the successor function. -/
-- constant csuc : «class» → «class»


-- /-- Define the ordinal predicate, which is true for a class that is transitive and is
-- well-ordered by the membership relation. Variant of definition of [BellMachover] p. 468. Some
-- sources will define a notation for ordinal order corresponding to ` < ` and ` <_ ` but we just
-- use ` e. ` and ` C_ ` respectively. (Contributed by NM, 17-Sep-1993.) -/
-- axiom df_ord {A2 : «class»} : ⊦ wb (word A2) (wa (wtr A2) (wwe A2 cep))


-- /-- Define the class of all ordinal numbers. Definition 7.11 of [TakeutiZaring] p. 38.
-- (Contributed by NM, 5-Jun-1994.) -/
-- axiom df_on : ⊦ wceq con0 (cab (λ x3, word (cv x3)))


-- /-- Define the limit ordinal predicate, which is true for a nonempty ordinal that is not a
-- successor (i.e. that is the union of itself). Our definition combines the definition of Lim of
-- [BellMachover] p. 471 and Exercise 1 of [TakeutiZaring] p. 42. See ~ dflim2 , ~ dflim3 , and
-- dflim4 for alternate definitions. (Contributed by NM, 22-Apr-1994.) -/
-- axiom df_lim {A2 : «class»} : ⊦ wb (wlim A2) (w3a (word A2) (wne A2 c0) (wceq A2 (cuni A2)))


-- /-- Define the successor of a class. When applied to an ordinal number, the successor means the
-- same thing as "plus 1" (see ~ oa1suc ). Definition 7.22 of [TakeutiZaring] p. 41, who use "+ 1"
-- to denote this function. Ordinal natural numbers defined using this successor function and 0 as
-- the empty set are also called von Neumann ordinals; 0 is the empty set {}, 1 is {0, {0}}, 2 is
-- {1, {1}}, and so on. Our definition is a generalization to classes. Although it is not
-- conventional to use it with proper classes, it has no effect on a proper class ( ~ sucprc ), so
-- that the successor of any ordinal class is still an ordinal class ( ~ ordsuc ), simplifying
-- certain proofs. Some authors denote the successor operation with a prime (apostrophe-like)
-- symbol, such as Definition 6 of [Suppes] p. 134 and the definition of successor in [Mendelson] p.
-- 246 (who uses the symbol "Suc" as a predicate to mean "is a successor ordinal"). The definition
-- of successor of [Enderton] p. 68 denotes the operation with a plus-sign superscript. (Contributed
-- by NM, 30-Aug-1993.) -/
-- axiom df_suc {A2 : «class»} : ⊦ wceq (csuc A2) (cun A2 (csn A2))


/-- Equality theorem for the ordinal predicate. (Contributed by NM, 17-Sep-1993.) -/
theorem ordeq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wb (word A2) (word B2)) :=
@«3bitr4g» (wceq A2 B2) (wa (wtr A2) (wwe A2 cep)) (wa (wtr B2) (wwe B2 cep)) (word A2) (word B2)
  (@anbi12d (wceq A2 B2) (wtr A2) (wtr B2) (wwe A2 cep) (wwe B2 cep)
    (@treq A2 B2)
    (@weeq2 A2 B2 cep))
  (@df_ord A2)
  (@df_ord B2)


/-- An ordinal number is an ordinal set. (Contributed by NM, 5-Jun-1994.) -/
theorem elong {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 con0) (word A2)) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wi (wcel A2 V) (wb (wcel A2 con0) (word A2)), from
  @elab2gw (λ y, word (cv y)) (λ x3, word (cv x3)) (λ y, word A2) (λ y, A2) (λ y x3, con0) (λ y x3, V)
    (λ y x3, @ordeq (cv y) (cv x3))
    (λ y x3, @ordeq (cv x3) A2)
    (λ y x3, df_on) y x3


/-- An ordinal number is an ordinal set. (Contributed by NM, 5-Jun-1994.) -/
theorem elon {A2 : «class»}
  (elon_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 con0) (word A2) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 con0) (word A2))
  elon_1
  (@elong A2 cvv)


/-- An ordinal number has the ordinal property. (Contributed by NM, 5-Jun-1994.) -/
theorem eloni {A2 : «class»} :
  ⊦ wi (wcel A2 con0) (word A2) :=
@ibi (wcel A2 con0) (word A2)
  (@elong A2 con0)


/-- An ordinal number is an ordinal set. (Contributed by NM, 8-Feb-2004.) -/
theorem elon2 {A2 : «class»} :
  ⊦ wb (wcel A2 con0) (wa (word A2) (wcel A2 cvv)) :=
@biancomi (wcel A2 con0) (word A2) (wcel A2 cvv)
  (@biadanii (wcel A2 con0) (wcel A2 cvv) (word A2)
    (@elex A2 con0)
    (@elong A2 cvv))


/-- Equality theorem for the limit predicate. (Contributed by NM, 22-Apr-1994.) (Proof shortened by
Andrew Salmon, 25-Jul-2011.) -/
theorem limeq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wlim A2) (wlim B2)) :=
@«3bitr4g» (wceq A2 B2) (w3a (word A2) (wne A2 c0) (wceq A2 (cuni A2))) (w3a (word B2) (wne B2 c0) (wceq B2 (cuni B2))) (wlim A2) (wlim B2)
  (@«3anbi123d» (wceq A2 B2) (word A2) (word B2) (wne A2 c0) (wne B2 c0) (wceq A2 (cuni A2)) (wceq B2 (cuni B2))
    (@ordeq A2 B2)
    (@neeq1 A2 B2 c0)
    (@eqeq12d (wceq A2 B2) A2 B2 (cuni A2) (cuni B2)
      (@id (wceq A2 B2))
      (@unieq A2 B2)))
  (@df_lim A2)
  (@df_lim B2)


/-- Membership well-orders every ordinal. Proposition 7.4 of [TakeutiZaring] p. 36. (Contributed by
NM, 3-Apr-1994.) -/
theorem ordwe {A2 : «class»} :
  ⊦ wi (word A2) (wwe A2 cep) :=
@simprbi (word A2) (wtr A2) (wwe A2 cep)
  (@df_ord A2)


/-- An ordinal class is transitive. (Contributed by NM, 3-Apr-1994.) -/
theorem ordtr {A2 : «class»} :
  ⊦ wi (word A2) (wtr A2) :=
@simplbi (word A2) (wtr A2) (wwe A2 cep)
  (@df_ord A2)


/-- Membership is well-founded on an ordinal class. In other words, an ordinal class is
well-founded. (Contributed by NM, 22-Apr-1994.) -/
theorem ordfr {A2 : «class»} :
  ⊦ wi (word A2) (wfr A2 cep) :=
@syl (word A2) (wwe A2 cep) (wfr A2 cep)
  (@ordwe A2)
  (@wefr A2 cep)


/-- An element of an ordinal class is a subset of it. (Contributed by NM, 30-May-1994.) -/
theorem ordelss {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wcel B2 A2)) (wss B2 A2) :=
@sylan (word A2) (wtr A2) (wcel B2 A2) (wss B2 A2)
  (@ordtr A2)
  (@imp (wtr A2) (wcel B2 A2) (wss B2 A2)
    (@trss A2 B2))


/-- A transitive subclass of an ordinal class is ordinal. (Contributed by NM, 29-May-1994.) -/
theorem trssord {A2 B2 : «class»} :
  ⊦ wi (w3a (wtr A2) (wss A2 B2) (word B2)) (word A2) :=
@sylibr (w3a (wtr A2) (wss A2 B2) (word B2)) (wa (wtr A2) (wwe A2 cep)) (word A2)
  (@«3impb» (wtr A2) (wss A2 B2) (word B2) (wa (wtr A2) (wwe A2 cep))
    (@anim2i (wa (wss A2 B2) (word B2)) (wwe A2 cep) (wtr A2)
      (@impel (wss A2 B2) (wwe B2 cep) (wwe A2 cep) (word B2)
        (@wess A2 B2 cep)
        (@ordwe B2))))
  (@df_ord A2)


/-- No ordinal class is a member of itself. In other words, the membership relation is irreflexive
on ordinal classes. Theorem 2.2(i) of [BellMachover] p. 469, generalized to classes. We prove this
without invoking the Axiom of Regularity. (Contributed by NM, 2-Jan-1994.) -/
theorem ordirr {A2 : «class»} :
  ⊦ wi (word A2) (wn (wcel A2 A2)) :=
@syl (word A2) (wfr A2 cep) (wn (wcel A2 A2))
  (@ordfr A2)
  (@efrirr A2)


/-- A member of an ordinal class is not equal to it. (Contributed by NM, 25-May-1998.) -/
theorem nordeq {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wcel B2 A2)) (wne A2 B2) :=
@imp (word A2) (wcel B2 A2) (wne A2 B2)
  (@necon2ad (word A2) (wcel B2 A2) A2 B2
    (@syl5ibcom (word A2) (wn (wcel A2 A2)) (wceq A2 B2) (wn (wcel B2 A2))
      (@ordirr A2)
      (@notbid (wceq A2 B2) (wcel A2 A2) (wcel B2 A2)
        (@eleq1 A2 B2 A2))))


/-- An ordinal class cannot be an element of one of its members. Variant of first part of Theorem
2.2(vii) of [BellMachover] p. 469. (Contributed by NM, 3-Apr-1994.) -/
theorem ordn2lp {A2 B2 : «class»} :
  ⊦ wi (word A2) (wn (wa (wcel A2 B2) (wcel B2 A2))) :=
@mtod (word A2) (wa (wcel A2 B2) (wcel B2 A2)) (wcel A2 A2)
  (@ordirr A2)
  (@syl (word A2) (wtr A2) (wi (wa (wcel A2 B2) (wcel B2 A2)) (wcel A2 A2))
    (@ordtr A2)
    (@trel A2 A2 B2))


/-- A nonempty subclass of an ordinal class has a minimal element. Proposition 7.5 of
[TakeutiZaring] p. 36. (Contributed by NM, 18-Feb-2004.) (Revised by David Abernethy, 16-Mar-2011.)
-/
theorem tz7_5 {A2 : setvar → «class»} {B2 : «class»}
  (x3 : setvar) : ⊦ wi (w3a (word (A2 x3)) (wss B2 (A2 x3)) (wne B2 c0)) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2)) :=
@syl3an1 (word (A2 x3)) (wwe (A2 x3) cep) (wss B2 (A2 x3)) (wne B2 c0) (wrex (λ x3, wceq (cin B2 (cv x3)) c0) (λ x3, B2))
  (@ordwe (A2 x3))
  (@wefrc (λ x3, A2 x3) B2 x3)


/-- An element of an ordinal class is ordinal. Proposition 7.6 of [TakeutiZaring] p. 36.
(Contributed by NM, 23-Apr-1994.) -/
theorem ordelord {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wcel B2 A2)) (word B2) :=
@anabsi7 (word A2) (wcel B2 A2) (word B2)
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wcel B2 A2) (wi (wa (word A2) (wcel B2 A2)) (word B2)), from
    @vtoclg (λ x3, wi (wa (word A2) (wcel (cv x3) A2)) (word (cv x3))) (wi (wa (word A2) (wcel B2 A2)) (word B2)) B2 (λ x3, A2)
      (λ x3, @imbi12d (wceq (cv x3) B2) (wa (word A2) (wcel (cv x3) A2)) (wa (word A2) (wcel B2 A2)) (word (cv x3)) (word B2)
        (@anbi2d (wceq (cv x3) B2) (wcel (cv x3) A2) (wcel B2 A2) (word A2)
          (@eleq1 (cv x3) B2 A2))
        (@ordeq (cv x3) B2))
      (λ x3, @sylanbrc (wa (word A2) (wcel (cv x3) A2)) (wtr (cv x3)) (wwe (cv x3) cep) (word (cv x3))
        (@sylibr (wa (word A2) (wcel (cv x3) A2)) (wal (λ z, wal (λ y, wi (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3))))) (wtr (cv x3))
          (@alrimivv (wa (word A2) (wcel (cv x3) A2)) (λ z y, wi (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3)))
            (λ z y, @pm2_43d (wa (word A2) (wcel (cv x3) A2)) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3))
              (@ex (wa (word A2) (wcel (cv x3) A2)) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wi (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3)))
                (@syl13anc (wa (wa (word A2) (wcel (cv x3) A2)) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)))) (word A2) (wcel (cv z) A2) (wcel (cv y) A2) (wcel (cv x3) A2) (wi (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3)))
                  (@simpll (word A2) (wcel (cv x3) A2) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))))
                  (@impl (word A2) (wcel (cv x3) A2) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) A2)
                    (@syl5bir (wa (wcel (cv x3) A2) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)))) (w3a (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (word A2) (wcel (cv z) A2)
                      (@bitr3i (w3a (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (w3a (wcel (cv x3) A2) (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wa (wcel (cv x3) A2) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))))
                        (@«3anrot» (wcel (cv x3) A2) (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)))
                        (@«3anass» (wcel (cv x3) A2) (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))))
                      (@syl (word A2) (wtr A2) (wi (w3a (wcel (cv z) (cv y)) (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv z) A2))
                        (@ordtr A2)
                        (@trel3 A2 (cv z) (cv y) (cv x3)))))
                  (@adantrl (wa (word A2) (wcel (cv x3) A2)) (wcel (cv y) (cv x3)) (wcel (cv y) A2) (wcel (cv z) (cv y))
                    (@imp31 (word A2) (wcel (cv x3) A2) (wcel (cv y) (cv x3)) (wcel (cv y) A2)
                      (@expcomd (word A2) (wcel (cv y) (cv x3)) (wcel (cv x3) A2) (wcel (cv y) A2)
                        (@syl (word A2) (wtr A2) (wi (wa (wcel (cv y) (cv x3)) (wcel (cv x3) A2)) (wcel (cv y) A2))
                          (@ordtr A2)
                          (@trel A2 (cv y) (cv x3))))))
                  (@simplr (word A2) (wcel (cv x3) A2) (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))))
                  (@sylan (word A2) (wwe A2 cep) (w3a (wcel (cv z) A2) (wcel (cv y) A2) (wcel (cv x3) A2)) (wi (wa (wcel (cv z) (cv y)) (wcel (cv y) (cv x3))) (wcel (cv z) (cv x3)))
                    (@ordwe A2)
                    (@wetrep z (λ y x3, A2) y x3))))))
          (@dftr2 (cv x3)))
        (@imp (word A2) (wcel (cv x3) A2) (wwe (cv x3) cep)
          (@syl6ci (word A2) (wcel (cv x3) A2) (wss (cv x3) A2) (wwe A2 cep) (wwe (cv x3) cep)
            (@syl (word A2) (wtr A2) (wi (wcel (cv x3) A2) (wss (cv x3) A2))
              (@ordtr A2)
              (@trss A2 (cv x3)))
            (@ordwe A2)
            (@wess (cv x3) A2 cep)))
        (@df_ord (cv x3))) x3)


/-- The class of all ordinal numbers is transitive. (Contributed by NM, 4-May-2009.) -/
theorem tron :
  ⊦ wtr con0 :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wtr con0, from
  @mprgbir (λ x3, wtr con0) (λ x3, wss (cv x3) con0) (λ x3, con0)
    (λ x3, @dftr3 con0)
    (λ x3, @ssrdv (wcel (cv x3) con0) (cv x3) con0
      (λ y, @syl6ibr (wcel (cv x3) con0) (wcel (cv y) (cv x3)) (word (cv y)) (wcel (cv y) con0)
        (@ex (wcel (cv x3) con0) (wcel (cv y) (cv x3)) (word (cv y))
          (@sylanb (wcel (cv x3) con0) (word (cv x3)) (wcel (cv y) (cv x3)) (word (cv y))
            (@elon (cv x3)
              (@vex x3))
            (@ordelord (cv x3) (cv y))))
        (@elon (cv y)
          (@vex y)))) x3


/-- An element of an ordinal class is an ordinal number. (Contributed by NM, 26-Oct-2003.) -/
theorem ordelon {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wcel B2 A2)) (wcel B2 con0) :=
@mpbird (wa (word A2) (wcel B2 A2)) (wcel B2 con0) (word B2)
  (@ordelord A2 B2)
  (@adantl (wcel B2 A2) (wb (wcel B2 con0) (word B2)) (word A2)
    (@elong B2 A2))


/-- An element of an ordinal number is an ordinal number. Theorem 2.2(iii) of [BellMachover] p. 469.
(Contributed by NM, 26-Oct-2003.) -/
theorem onelon {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 A2)) (wcel B2 con0) :=
@sylan (wcel A2 con0) (word A2) (wcel B2 A2) (wcel B2 con0)
  (@eloni A2)
  (@ordelon A2 B2)


/-- A transitive class belongs to an ordinal class iff it is strictly included in it. Proposition
7.7 of [TakeutiZaring] p. 37. (Contributed by NM, 5-May-1994.) -/
theorem tz7_7 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wtr B2)) (wb (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2))) :=
@impbid (wa (word A2) (wtr B2)) (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2))
  (@adantr (word A2) (wi (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2))) (wtr B2)
    (@sylc (word A2) (wtr A2) (wfr A2 cep) (wi (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2)))
      (@ordtr A2)
      (@ordfr A2)
      (@«3exp» (wtr A2) (wfr A2 cep) (wcel B2 A2) (wa (wss B2 A2) (wne B2 A2))
        (@tz7_2 A2 B2))))
  (@impd (wa (word A2) (wtr B2)) (wss B2 A2) (wne B2 A2) (wcel B2 A2)
    (@pm2_43d (wa (word A2) (wtr B2)) (wss B2 A2) (wi (wne B2 A2) (wcel B2 A2))
      (@exp4a (wa (word A2) (wtr B2)) (wss B2 A2) (wss B2 A2) (wne B2 A2) (wcel B2 A2)
        (@syl7 (wa (wss B2 A2) (wne B2 A2)) (wne (cdif A2 B2) c0) (wa (word A2) (wtr B2)) (wss B2 A2) (wcel B2 A2)
          (@pssdifn0 B2 A2)
          (@pm2_43i (wa (word A2) (wtr B2)) (wi (wss B2 A2) (wi (wne (cdif A2 B2) c0) (wcel B2 A2)))
            (@adantrd (wa (word A2) (wtr B2)) (word A2) (wi (wss B2 A2) (wi (wne (cdif A2 B2) c0) (wcel B2 A2))) (wtr B2)
              (@com23 (wa (word A2) (wtr B2)) (wss B2 A2) (word A2) (wi (wne (cdif A2 B2) c0) (wcel B2 A2))
                (@exp4b (wa (word A2) (wtr B2)) (wss B2 A2) (word A2) (wne (cdif A2 B2) c0) (wcel B2 A2)
                  (@syl5 (wa (word A2) (wne (cdif A2 B2) c0)) (wrex (λ x3, wceq (cin (cdif A2 B2) (cv x3)) c0) (λ x3, cdif A2 B2)) (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wcel B2 A2)
                    (@mp3an2 (word A2) (wss (cdif A2 B2) A2) (wne (cdif A2 B2) c0) (wrex (λ x3, wceq (cin (cdif A2 B2) (cv x3)) c0) (λ x3, cdif A2 B2))
                      (@difss A2 B2)
                      (setvar.forget $ λ x3 : setvar,
                        show ⊦ wi (w3a (word A2) (wss (cdif A2 B2) A2) (wne (cdif A2 B2) c0)) (wrex (λ x3, wceq (cin (cdif A2 B2) (cv x3)) c0) (λ x3, cdif A2 B2)), from
                        @tz7_5 (λ x3, A2) (cdif A2 B2) x3))
                    (@rexlimdvaa (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (λ x3, wceq (cin (cdif A2 B2) (cv x3)) c0) (wcel B2 A2) (λ x3, cdif A2 B2)
                      (λ x3, @eqeltrrd (wa (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wa (wcel (cv x3) (cdif A2 B2)) (wceq (cin (cdif A2 B2) (cv x3)) c0))) (cv x3) B2 A2
                        (@eqssd (wa (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wa (wcel (cv x3) (cdif A2 B2)) (wceq (cin (cdif A2 B2) (cv x3)) c0))) (cv x3) B2
                          (@imp32 (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wcel (cv x3) (cdif A2 B2)) (wceq (cin (cdif A2 B2) (cv x3)) c0) (wss (cv x3) B2)
                            (@ad2antrr (word A2) (wi (wcel (cv x3) (cdif A2 B2)) (wi (wceq (cin (cdif A2 B2) (cv x3)) c0) (wss (cv x3) B2))) (wtr B2) (wss B2 A2)
                              (@syl (word A2) (wtr A2) (wi (wcel (cv x3) (cdif A2 B2)) (wi (wceq (cin (cdif A2 B2) (cv x3)) c0) (wss (cv x3) B2)))
                                (@ordtr A2)
                                (@syl56 (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) A2) (wtr A2) (wss (cv x3) A2) (wi (wceq (cin (cdif A2 B2) (cv x3)) c0) (wss (cv x3) B2))
                                  (@eldifi (cv x3) A2 B2)
                                  (@trss A2 (cv x3))
                                  (@com12 (wceq (cin (cdif A2 B2) (cv x3)) c0) (wss (cv x3) A2) (wss (cv x3) B2)
                                    (@difin0ss A2 B2 (cv x3)))))))
                          (@adantrr (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wcel (cv x3) (cdif A2 B2)) (wss B2 (cv x3)) (wceq (cin (cdif A2 B2) (cv x3)) c0)
                            (@ssrdv (wa (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wcel (cv x3) (cdif A2 B2))) B2 (cv x3)
                              (λ y, @imp31 (wa (word A2) (wtr B2)) (wss B2 A2) (wcel (cv x3) (cdif A2 B2)) (wi (wcel (cv y) B2) (wcel (cv y) (cv x3)))
                                (@com34 (wa (word A2) (wtr B2)) (wss B2 A2) (wcel (cv y) B2) (wcel (cv x3) (cdif A2 B2)) (wcel (cv y) (cv x3))
                                  (@exp44 (wa (word A2) (wtr B2)) (wss B2 A2) (wcel (cv y) B2) (wcel (cv x3) (cdif A2 B2)) (wcel (cv y) (cv x3))
                                    (@ecase23d (wa (wa (word A2) (wtr B2)) (wa (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2)))) (wcel (cv y) (cv x3)) (wceq (cv y) (cv x3)) (wcel (cv x3) (cv y))
                                      (@adantl (wa (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2))) (wn (wceq (cv y) (cv x3))) (wa (word A2) (wtr B2))
                                        (@adantll (wcel (cv y) B2) (wcel (cv x3) (cdif A2 B2)) (wn (wceq (cv y) (cv x3))) (wss B2 A2)
                                          (@imp (wcel (cv y) B2) (wcel (cv x3) (cdif A2 B2)) (wn (wceq (cv y) (cv x3)))
                                            (@nsyli (wcel (cv y) B2) (wceq (cv y) (cv x3)) (wcel (cv x3) B2) (wcel (cv x3) (cdif A2 B2))
                                              (@biimpcd (wceq (cv y) (cv x3)) (wcel (cv y) B2) (wcel (cv x3) B2)
                                                (@eleq1w (λ y x3, B2) y x3))
                                              (@eldifn (cv x3) A2 B2)))))
                                      (@adantll (wtr B2) (wa (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2))) (wn (wcel (cv x3) (cv y))) (word A2)
                                        (@imp32 (wtr B2) (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2)) (wn (wcel (cv x3) (cv y)))
                                          (@adantld (wtr B2) (wcel (cv y) B2) (wi (wcel (cv x3) (cdif A2 B2)) (wn (wcel (cv x3) (cv y)))) (wss B2 A2)
                                            (@ex (wtr B2) (wcel (cv y) B2) (wi (wcel (cv x3) (cdif A2 B2)) (wn (wcel (cv x3) (cv y))))
                                              (@nsyli (wa (wtr B2) (wcel (cv y) B2)) (wcel (cv x3) (cv y)) (wcel (cv x3) B2) (wcel (cv x3) (cdif A2 B2))
                                                (@imp (wtr B2) (wcel (cv y) B2) (wi (wcel (cv x3) (cv y)) (wcel (cv x3) B2))
                                                  (@expcomd (wtr B2) (wcel (cv x3) (cv y)) (wcel (cv y) B2) (wcel (cv x3) B2)
                                                    (@trel B2 (cv x3) (cv y))))
                                                (@eldifn (cv x3) A2 B2))))))
                                      (@adantlr (word A2) (wa (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2))) (w3o (wcel (cv y) (cv x3)) (wceq (cv y) (cv x3)) (wcel (cv x3) (cv y))) (wtr B2)
                                        (@syl2an (word A2) (wwe A2 cep) (wa (wcel (cv y) A2) (wcel (cv x3) A2)) (w3o (wcel (cv y) (cv x3)) (wceq (cv y) (cv x3)) (wcel (cv x3) (cv y))) (wa (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv x3) (cdif A2 B2)))
                                          (@ordwe A2)
                                          (@anim12i (wa (wss B2 A2) (wcel (cv y) B2)) (wcel (cv y) A2) (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) A2)
                                            (@ssel2 B2 A2 (cv y))
                                            (@eldifi (cv x3) A2 B2))
                                          (@wecmpep (λ y x3, A2) y x3))))))))))
                        (@ad2antrl (wcel (cv x3) (cdif A2 B2)) (wcel (cv x3) A2) (wa (wa (word A2) (wtr B2)) (wss B2 A2)) (wceq (cin (cdif A2 B2) (cv x3)) c0)
                          (@eldifi (cv x3) A2 B2)))))))))))))


/-- For ordinal classes, membership is equivalent to strict inclusion. Corollary 7.8 of
[TakeutiZaring] p. 37. (Contributed by NM, 25-Nov-1995.) -/
theorem ordelssne {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2))) :=
@ancoms (word B2) (word A2) (wb (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2)))
  (@sylan2 (word A2) (word B2) (wtr A2) (wb (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2)))
    (@ordtr A2)
    (@tz7_7 B2 A2))


/-- For ordinal classes, membership is equivalent to strict inclusion. Corollary 7.8 of
[TakeutiZaring] p. 37. (Contributed by NM, 17-Jun-1998.) -/
theorem ordelpss {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wcel A2 B2) (wpss A2 B2)) :=
@bitr4di (wa (word A2) (word B2)) (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2)) (wpss A2 B2)
  (@ordelssne A2 B2)
  (@df_pss A2 B2)


/-- For ordinal classes, inclusion is equivalent to membership or equality. (Contributed by NM,
25-Nov-1995.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem ordsseleq {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2))) :=
@bitr4id (wa (word A2) (word B2)) (wss A2 B2) (wo (wpss A2 B2) (wceq A2 B2)) (wo (wcel A2 B2) (wceq A2 B2))
  (@sspss A2 B2)
  (@orbi1d (wa (word A2) (word B2)) (wcel A2 B2) (wpss A2 B2) (wceq A2 B2)
    (@ordelpss A2 B2))


/-- The intersection of two ordinal classes is ordinal. Proposition 7.9 of [TakeutiZaring] p. 37.
(Contributed by NM, 9-May-1994.) -/
theorem ordin {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (word (cin A2 B2)) :=
@sylancom (word A2) (word B2) (wtr (cin A2 B2)) (word (cin A2 B2))
  (@syl2an (word A2) (wtr A2) (wtr B2) (wtr (cin A2 B2)) (word B2)
    (@ordtr A2)
    (@ordtr B2)
    (@trin A2 B2))
  (@mp3an2 (wtr (cin A2 B2)) (wss (cin A2 B2) B2) (word B2) (word (cin A2 B2))
    (@inss2 A2 B2)
    (@trssord (cin A2 B2) B2))


/-- The intersection of two ordinal numbers is an ordinal number. (Contributed by NM, 7-Apr-1995.)
-/
theorem onin {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wcel (cin A2 B2) con0) :=
@mpbird (wa (wcel A2 con0) (wcel B2 con0)) (wcel (cin A2 B2) con0) (word (cin A2 B2))
  (@syl2an (wcel A2 con0) (word A2) (word B2) (word (cin A2 B2)) (wcel B2 con0)
    (@eloni A2)
    (@eloni B2)
    (@ordin A2 B2))
  (@«3syl» (wa (wcel A2 con0) (wcel B2 con0)) (wcel A2 con0) (wcel (cin A2 B2) cvv) (wb (wcel (cin A2 B2) con0) (word (cin A2 B2)))
    (@simpl (wcel A2 con0) (wcel B2 con0))
    (@inex1g A2 B2 con0)
    (@elong (cin A2 B2) cvv))


/-- A trichotomy law for ordinals. Proposition 7.10 of [TakeutiZaring] p. 38. (Contributed by NM,
10-May-1994.) (Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem ordtri3or {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (w3o (wcel A2 B2) (wceq A2 B2) (wcel B2 A2)) :=
@mpbird (wa (word A2) (word B2)) (w3o (wcel A2 B2) (wceq A2 B2) (wcel B2 A2)) (w3o (wpss A2 B2) (wceq A2 B2) (wpss B2 A2))
  (@sylib (wa (word A2) (word B2)) (wo (wss A2 B2) (wss B2 A2)) (w3o (wpss A2 B2) (wceq A2 B2) (wpss B2 A2))
    (@mpd (wa (word A2) (word B2)) (wo (wn (wcel (cin A2 B2) A2)) (wn (wcel (cin B2 A2) B2))) (wo (wss A2 B2) (wss B2 A2))
      (@sylib (wa (word A2) (word B2)) (wn (wcel (cin A2 B2) (cin A2 B2))) (wo (wn (wcel (cin A2 B2) A2)) (wn (wcel (cin B2 A2) B2)))
        (@syl (wa (word A2) (word B2)) (word (cin A2 B2)) (wn (wcel (cin A2 B2) (cin A2 B2)))
          (@ordin A2 B2)
          (@ordirr (cin A2 B2)))
        (@xchnxbir (wa (wcel (cin A2 B2) A2) (wcel (cin B2 A2) B2)) (wo (wn (wcel (cin A2 B2) A2)) (wn (wcel (cin B2 A2) B2))) (wcel (cin A2 B2) (cin A2 B2))
          (@ianor (wcel (cin A2 B2) A2) (wcel (cin B2 A2) B2))
          (@bitri (wcel (cin A2 B2) (cin A2 B2)) (wa (wcel (cin A2 B2) A2) (wcel (cin A2 B2) B2)) (wa (wcel (cin A2 B2) A2) (wcel (cin B2 A2) B2))
            (@elin (cin A2 B2) A2 B2)
            (@anbi2i (wcel (cin A2 B2) B2) (wcel (cin B2 A2) B2) (wcel (cin A2 B2) A2)
              (@eleq1i (cin A2 B2) (cin B2 A2) B2
                (@incom A2 B2))))))
      (@orim12d (wa (word A2) (word B2)) (wn (wcel (cin A2 B2) A2)) (wss A2 B2) (wn (wcel (cin B2 A2) B2)) (wss B2 A2)
        (@syl6ibr (wa (word A2) (word B2)) (wn (wcel (cin A2 B2) A2)) (wceq (cin A2 B2) A2) (wss A2 B2)
          (@ord (wa (word A2) (word B2)) (wcel (cin A2 B2) A2) (wceq (cin A2 B2) A2)
            (@anabss1 (word A2) (word B2) (wo (wcel (cin A2 B2) A2) (wceq (cin A2 B2) A2))
              (@sylan (wa (word A2) (word B2)) (word (cin A2 B2)) (word A2) (wo (wcel (cin A2 B2) A2) (wceq (cin A2 B2) A2))
                (@ordin A2 B2)
                (@mpbii (wa (word (cin A2 B2)) (word A2)) (wss (cin A2 B2) A2) (wo (wcel (cin A2 B2) A2) (wceq (cin A2 B2) A2))
                  (@inss1 A2 B2)
                  (@ordsseleq (cin A2 B2) A2)))))
          (@df_ss A2 B2))
        (@syl6ibr (wa (word A2) (word B2)) (wn (wcel (cin B2 A2) B2)) (wceq (cin B2 A2) B2) (wss B2 A2)
          (@ord (wa (word A2) (word B2)) (wcel (cin B2 A2) B2) (wceq (cin B2 A2) B2)
            (@anabss4 (word A2) (word B2) (wo (wcel (cin B2 A2) B2) (wceq (cin B2 A2) B2))
              (@sylan (wa (word B2) (word A2)) (word (cin B2 A2)) (word B2) (wo (wcel (cin B2 A2) B2) (wceq (cin B2 A2) B2))
                (@ordin B2 A2)
                (@mpbii (wa (word (cin B2 A2)) (word B2)) (wss (cin B2 A2) B2) (wo (wcel (cin B2 A2) B2) (wceq (cin B2 A2) B2))
                  (@inss1 B2 A2)
                  (@ordsseleq (cin B2 A2) B2)))))
          (@df_ss B2 A2))))
    (@sspsstri A2 B2))
  (@«3orbi123d» (wa (word A2) (word B2)) (wcel A2 B2) (wpss A2 B2) (wceq A2 B2) (wceq A2 B2) (wcel B2 A2) (wpss B2 A2)
    (@ordelpss A2 B2)
    (@biidd (wa (word A2) (word B2)) (wceq A2 B2))
    (@ancoms (word B2) (word A2) (wb (wcel B2 A2) (wpss B2 A2))
      (@ordelpss B2 A2)))


/-- A trichotomy law for ordinals. (Contributed by NM, 25-Mar-1995.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem ordtri1 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wss A2 B2) (wn (wcel B2 A2))) :=
@bitrd (wa (word A2) (word B2)) (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2)) (wn (wcel B2 A2))
  (@ordsseleq A2 B2)
  (@impbid (wa (word A2) (word B2)) (wo (wcel A2 B2) (wceq A2 B2)) (wn (wcel B2 A2))
    (@jaao (word A2) (wcel A2 B2) (wn (wcel B2 A2)) (word B2) (wceq A2 B2)
      (@sylibr (word A2) (wn (wa (wcel A2 B2) (wcel B2 A2))) (wi (wcel A2 B2) (wn (wcel B2 A2)))
        (@ordn2lp A2 B2)
        (@imnan (wcel A2 B2) (wcel B2 A2)))
      (@syl5ibrcom (word B2) (wn (wcel B2 A2)) (wceq A2 B2) (wn (wcel B2 B2))
        (@ordirr B2)
        (@notbid (wceq A2 B2) (wcel B2 A2) (wcel B2 B2)
          (@eleq2 A2 B2 B2))))
    (@ord (wa (word A2) (word B2)) (wcel B2 A2) (wo (wcel A2 B2) (wceq A2 B2))
      (@orcomd (wa (word A2) (word B2)) (wo (wcel A2 B2) (wceq A2 B2)) (wcel B2 A2)
        (@sylib (wa (word A2) (word B2)) (w3o (wcel A2 B2) (wceq A2 B2) (wcel B2 A2)) (wo (wo (wcel A2 B2) (wceq A2 B2)) (wcel B2 A2))
          (@ordtri3or A2 B2)
          (@df_3or (wcel A2 B2) (wceq A2 B2) (wcel B2 A2))))))


/-- A trichotomy law for ordinal numbers. (Contributed by NM, 6-Nov-2003.) -/
theorem ontri1 {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wb (wss A2 B2) (wn (wcel B2 A2))) :=
@syl2an (wcel A2 con0) (word A2) (word B2) (wb (wss A2 B2) (wn (wcel B2 A2))) (wcel B2 con0)
  (@eloni A2)
  (@eloni B2)
  (@ordtri1 A2 B2)


/-- A trichotomy law for ordinals. (Contributed by NM, 25-Nov-1995.) -/
theorem ordtri2 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wcel A2 B2) (wn (wo (wceq A2 B2) (wcel B2 A2)))) :=
@con2bid (wa (word A2) (word B2)) (wo (wceq A2 B2) (wcel B2 A2)) (wcel A2 B2)
  (@ancoms (word B2) (word A2) (wb (wo (wceq A2 B2) (wcel B2 A2)) (wn (wcel A2 B2)))
    (@bitr3d (wa (word B2) (word A2)) (wss B2 A2) (wo (wceq A2 B2) (wcel B2 A2)) (wn (wcel A2 B2))
      (@bitrdi (wa (word B2) (word A2)) (wss B2 A2) (wo (wcel B2 A2) (wceq B2 A2)) (wo (wceq A2 B2) (wcel B2 A2))
        (@ordsseleq B2 A2)
        (@bitri (wo (wcel B2 A2) (wceq B2 A2)) (wo (wcel B2 A2) (wceq A2 B2)) (wo (wceq A2 B2) (wcel B2 A2))
          (@orbi2i (wceq B2 A2) (wceq A2 B2) (wcel B2 A2)
            (@eqcom B2 A2))
          (@orcom (wcel B2 A2) (wceq A2 B2))))
      (@ordtri1 B2 A2)))


/-- A trichotomy law for ordinals. (Contributed by NM, 18-Oct-1995.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) (Proof shortened by JJ, 24-Sep-2021.) -/
theorem ordtri3 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wb (wceq A2 B2) (wn (wo (wcel A2 B2) (wcel B2 A2)))) :=
@bitr4d (wa (word A2) (word B2)) (wceq A2 B2) (wn (wo (wn (wo (wceq A2 B2) (wcel B2 A2))) (wcel B2 A2))) (wn (wo (wcel A2 B2) (wcel B2 A2)))
  (@bitrdi (wa (word A2) (word B2)) (wceq A2 B2) (wa (wceq A2 B2) (wn (wcel B2 A2))) (wn (wo (wn (wo (wceq A2 B2) (wcel B2 A2))) (wcel B2 A2)))
    (@pm4_71d (wa (word A2) (word B2)) (wceq A2 B2) (wn (wcel B2 A2))
      (@syl5ibrcom (wa (word A2) (word B2)) (wn (wcel B2 A2)) (wceq A2 B2) (wn (wcel B2 B2))
        (@adantl (word B2) (wn (wcel B2 B2)) (word A2)
          (@ordirr B2))
        (@notbid (wceq A2 B2) (wcel B2 A2) (wcel B2 B2)
          (@eleq2 A2 B2 B2))))
    (@bitr3i (wa (wceq A2 B2) (wn (wcel B2 A2))) (wa (wo (wceq A2 B2) (wcel B2 A2)) (wn (wcel B2 A2))) (wn (wo (wn (wo (wceq A2 B2) (wcel B2 A2))) (wcel B2 A2)))
      (@pm5_61 (wceq A2 B2) (wcel B2 A2))
      (@pm4_52 (wo (wceq A2 B2) (wcel B2 A2)) (wcel B2 A2))))
  (@notbid (wa (word A2) (word B2)) (wo (wcel A2 B2) (wcel B2 A2)) (wo (wn (wo (wceq A2 B2) (wcel B2 A2))) (wcel B2 A2))
    (@orbi1d (wa (word A2) (word B2)) (wcel A2 B2) (wn (wo (wceq A2 B2) (wcel B2 A2))) (wcel B2 A2)
      (@ordtri2 A2 B2)))


/-- An ordinal class and its singleton are disjoint. (Contributed by NM, 19-May-1998.) -/
theorem orddisj {A2 : «class»} :
  ⊦ wi (word A2) (wceq (cin A2 (csn A2)) c0) :=
@sylibr (word A2) (wn (wcel A2 A2)) (wceq (cin A2 (csn A2)) c0)
  (@ordirr A2)
  (@disjsn A2 A2)


/-- The ordinal class is well-founded. This proof does not require the axiom of regularity. This
lemma is used in ~ ordon (through ~ epweon ) in order to eliminate the need for the axiom of
regularity. (Contributed by NM, 17-May-1994.) -/
theorem onfr :
  ⊦ wfr con0 cep :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wfr con0 cep, from
  @mpgbir (λ x3, wfr con0 cep) (λ x3, wi (wa (wss (cv x3) con0) (wne (cv x3) c0)) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3)))
    (λ x3, @dfepfr con0)
    (λ x3, @imp (wss (cv x3) con0) (wne (cv x3) c0) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3))
      (@syl5bi (wne (cv x3) c0) (wex (λ y, wcel (cv y) (cv x3))) (wss (cv x3) con0) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3))
        (@n0 (cv x3))
        (@exlimdv (wss (cv x3) con0) (λ y, wcel (cv y) (cv x3)) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3))
          (λ y, @ex (wss (cv x3) con0) (wcel (cv y) (cv x3)) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3))
            (@pm2_61dane (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3)) (cin (cv x3) (cv y)) c0
              (@adantll (wcel (cv y) (cv x3)) (wceq (cin (cv x3) (cv y)) c0) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3)) (wss (cv x3) con0)
                (@rspcev (λ z, wceq (cin (cv x3) (cv z)) c0) (wceq (cin (cv x3) (cv y)) c0) (cv y) (cv x3)
                  (λ z, @eqeq1d (wceq (cv z) (cv y)) (cin (cv x3) (cv z)) (cin (cv x3) (cv y)) c0
                    (@ineq2 (cv z) (cv y) (cv x3)))))
              (@mpsyl (wss (cin (cv x3) (cv y)) (cv x3)) (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wne (cin (cv x3) (cv y)) c0)) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cin (cv x3) (cv y))) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cv x3))
                (@inss1 (cv x3) (cv y))
                (@mpbid (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wne (cin (cv x3) (cv y)) c0)) (wrex (λ z, wceq (cin (cin (cv x3) (cv y)) (cv z)) c0) (λ z, cin (cv x3) (cv y))) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cin (cv x3) (cv y)))
                  (@sylan (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wfr (cv y) cep) (wne (cin (cv x3) (cv y)) c0) (wrex (λ z, wceq (cin (cin (cv x3) (cv y)) (cv z)) c0) (λ z, cin (cv x3) (cv y)))
                    (@«3syl» (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv y) con0) (word (cv y)) (wfr (cv y) cep)
                      (@ssel2 (cv x3) con0 (cv y))
                      (@eloni (cv y))
                      (@ordfr (cv y)))
                    (@mp3an2 (wfr (cv y) cep) (wss (cin (cv x3) (cv y)) (cv y)) (wne (cin (cv x3) (cv y)) c0) (wrex (λ z, wceq (cin (cin (cv x3) (cv y)) (cv z)) c0) (λ z, cin (cv x3) (cv y)))
                      (@inss2 (cv x3) (cv y))
                      (@epfrc (cv y) (cin (cv x3) (cv y))
                        (@inex1 (cv x3) (cv y)
                          (@vex x3)))))
                  (@adantr (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wb (wrex (λ z, wceq (cin (cin (cv x3) (cv y)) (cv z)) c0) (λ z, cin (cv x3) (cv y))) (wrex (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cin (cv x3) (cv y)))) (wne (cin (cv x3) (cv y)) c0)
                    (@rexbidva (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (λ z, wceq (cin (cin (cv x3) (cv y)) (cv z)) c0) (λ z, wceq (cin (cv x3) (cv z)) c0) (λ z, cin (cv x3) (cv y))
                      (λ z, @eqeq1d (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv z) (cin (cv x3) (cv y)))) (cin (cin (cv x3) (cv y)) (cv z)) (cin (cv x3) (cv z)) c0
                        (@syl5eq (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv z) (cin (cv x3) (cv y)))) (cin (cin (cv x3) (cv y)) (cv z)) (cin (cv x3) (cin (cv y) (cv z))) (cin (cv x3) (cv z))
                          (@inass (cv x3) (cv y) (cv z))
                          (@ineq2d (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv z) (cin (cv x3) (cv y)))) (cin (cv y) (cv z)) (cv z) (cv x3)
                            (@sylib (wa (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv z) (cin (cv x3) (cv y)))) (wss (cv z) (cv y)) (wceq (cin (cv y) (cv z)) (cv z))
                              (@syl2an (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (word (cv y)) (wcel (cv z) (cv y)) (wss (cv z) (cv y)) (wcel (cv z) (cin (cv x3) (cv y)))
                                (@syl (wa (wss (cv x3) con0) (wcel (cv y) (cv x3))) (wcel (cv y) con0) (word (cv y))
                                  (@ssel2 (cv x3) con0 (cv y))
                                  (@eloni (cv y)))
                                (@elinel2 (cv z) (cv x3) (cv y))
                                (@ordelss (cv y) (cv z)))
                              (@sseqin2 (cv z) (cv y)))))))))
                (@ssrexv (λ z, wceq (cin (cv x3) (cv z)) c0) (cin (cv x3) (cv y)) (cv x3)))))))) x3


/-- Relationship between membership and proper subset of an ordinal number. (Contributed by NM,
15-Sep-1995.) -/
theorem onelpss {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wb (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2))) :=
@syl2an (wcel A2 con0) (word A2) (word B2) (wb (wcel A2 B2) (wa (wss A2 B2) (wne A2 B2))) (wcel B2 con0)
  (@eloni A2)
  (@eloni B2)
  (@ordelssne A2 B2)


/-- Relationship between subset and membership of an ordinal number. (Contributed by NM,
15-Sep-1995.) -/
theorem onsseleq {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wb (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2))) :=
@syl2an (wcel A2 con0) (word A2) (word B2) (wb (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2))) (wcel B2 con0)
  (@eloni A2)
  (@eloni B2)
  (@ordsseleq A2 B2)


/-- An element of an ordinal number is a subset of the number. (Contributed by NM, 5-Jun-1994.)
(Proof shortened by Andrew Salmon, 25-Jul-2011.) -/
theorem onelss {A2 B2 : «class»} :
  ⊦ wi (wcel A2 con0) (wi (wcel B2 A2) (wss B2 A2)) :=
@syl (wcel A2 con0) (word A2) (wi (wcel B2 A2) (wss B2 A2))
  (@eloni A2)
  (@ex (word A2) (wcel B2 A2) (wss B2 A2)
    (@ordelss A2 B2))


/-- Transitive law for ordinal classes. (Contributed by NM, 12-Dec-2004.) -/
theorem ordtr1 {A2 B2 C : «class»} :
  ⊦ wi (word C) (wi (wa (wcel A2 B2) (wcel B2 C)) (wcel A2 C)) :=
@syl (word C) (wtr C) (wi (wa (wcel A2 B2) (wcel B2 C)) (wcel A2 C))
  (@ordtr C)
  (@trel C A2 B2)


/-- Transitive law for ordinal classes. (Contributed by NM, 12-Dec-2004.) (Proof shortened by Andrew
Salmon, 25-Jul-2011.) -/
theorem ordtr2 {A2 B2 C : «class»} :
  ⊦ wi (wa (word A2) (word C)) (wi (wa (wss A2 B2) (wcel B2 C)) (wcel A2 C)) :=
@sylibrd (wa (word A2) (word C)) (wa (wss A2 B2) (wcel B2 C)) (wpss A2 C) (wcel A2 C)
  (@adantl (word C) (wi (wa (wss A2 B2) (wcel B2 C)) (wpss A2 C)) (word A2)
    (@impd (word C) (wss A2 B2) (wcel B2 C) (wpss A2 C)
      (@syl9 (word C) (wcel B2 C) (wa (word C) (wa (wcel B2 C) (word B2))) (wss A2 B2) (wpss A2 C)
        (@anc2li (word C) (wcel B2 C) (wa (wcel B2 C) (word B2))
          (@ancld (word C) (wcel B2 C) (word B2)
            (@ex (word C) (wcel B2 C) (word B2)
              (@ordelord C B2))))
        (@com12 (wa (word C) (wa (wcel B2 C) (word B2))) (wss A2 B2) (wpss A2 C)
          (@imp32 (word C) (wcel B2 C) (word B2) (wi (wss A2 B2) (wpss A2 C))
            (@com23 (word C) (word B2) (wcel B2 C) (wi (wss A2 B2) (wpss A2 C))
              (@expcom (word B2) (word C) (wi (wcel B2 C) (wi (wss A2 B2) (wpss A2 C)))
                (@syl6bi (wa (word B2) (word C)) (wcel B2 C) (wpss B2 C) (wi (wss A2 B2) (wpss A2 C))
                  (@ordelpss B2 C)
                  (@expcom (wss A2 B2) (wpss B2 C) (wpss A2 C)
                    (@sspsstr A2 B2 C))))))))))
  (@ordelpss A2 C)


/-- Transitive law for ordinal numbers. Theorem 7M(b) of [Enderton] p. 192. (Contributed by NM,
11-Aug-1994.) -/
theorem ontr1 {A2 B2 C : «class»} :
  ⊦ wi (wcel C con0) (wi (wa (wcel A2 B2) (wcel B2 C)) (wcel A2 C)) :=
@syl (wcel C con0) (word C) (wi (wa (wcel A2 B2) (wcel B2 C)) (wcel A2 C))
  (@eloni C)
  (@ordtr1 A2 B2 C)


/-- Transitive law for ordinal numbers. Exercise 3 of [TakeutiZaring] p. 40. (Contributed by NM,
6-Nov-2003.) -/
theorem ontr2 {A2 B2 C : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel C con0)) (wi (wa (wss A2 B2) (wcel B2 C)) (wcel A2 C)) :=
@syl2an (wcel A2 con0) (word A2) (word C) (wi (wa (wss A2 B2) (wcel B2 C)) (wcel A2 C)) (wcel C con0)
  (@eloni A2)
  (@eloni C)
  (@ordtr2 A2 B2 C)


/-- If a property is true for an ordinal number, then the minimum ordinal number for which it is
true is smaller or equal. Theorem Schema 61 of [Suppes] p. 228. (Contributed by NM, 3-Oct-2003.) -/
theorem onintss {ph : setvar → wff} {ps : wff} {A2 : «class»}
  (onintss_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps)) :
  ⊦ wi (wcel A2 con0) (wi ps (wss (cint (crab (λ x3, ph x3) (λ x3, con0))) A2)) :=
@ex (wcel A2 con0) ps (wss (cint (crab (λ x3, ph x3) (λ x3, con0))) A2)
  (@intminss (λ x3, ph x3) ps A2 con0
    (λ x3, onintss_1 x3))


/-- The empty set is an ordinal class. (Contributed by NM, 11-May-1994.) -/
theorem ord0 :
  ⊦ word c0 :=
@mpbir2an (word c0) (wtr c0) (wwe c0 cep)
  tr0
  (@we0 cep)
  (@df_ord c0)


/-- The empty set is an ordinal number. Corollary 7N(b) of [Enderton] p. 193. (Contributed by NM,
17-Sep-1993.) -/
theorem «0elon» :
  ⊦ wcel c0 con0 :=
@mpbir (wcel c0 con0) (word c0)
  ord0
  (@elon c0
    «0ex»)


/-- A nonempty ordinal contains the empty set. (Contributed by NM, 25-Nov-1995.) -/
theorem ord0eln0 {A2 : «class»} :
  ⊦ wi (word A2) (wb (wcel c0 A2) (wne A2 c0)) :=
@impbid2 (word A2) (wcel c0 A2) (wne A2 c0)
  (@ne0i A2 c0)
  (@sylib (word A2) (wo (wceq A2 c0) (wcel c0 A2)) (wi (wne A2 c0) (wcel c0 A2))
    (@mpan2 (word A2) (word c0) (wo (wceq A2 c0) (wcel c0 A2))
      ord0
      (@mpbiri (wa (word A2) (word c0)) (wo (wceq A2 c0) (wcel c0 A2)) (wn (wcel A2 c0))
        (@noel A2)
        (@con2bid (wa (word A2) (word c0)) (wcel A2 c0) (wo (wceq A2 c0) (wcel c0 A2))
          (@ordtri2 A2 c0))))
    (@neor (wcel c0 A2) A2 c0))


/-- An ordinal number contains zero iff it is nonzero. (Contributed by NM, 6-Dec-2004.) -/
theorem on0eln0 {A2 : «class»} :
  ⊦ wi (wcel A2 con0) (wb (wcel c0 A2) (wne A2 c0)) :=
@syl (wcel A2 con0) (word A2) (wb (wcel c0 A2) (wne A2 c0))
  (@eloni A2)
  (@ord0eln0 A2)


/-- An alternate definition of a limit ordinal. (Contributed by NM, 4-Nov-2004.) -/
theorem dflim2 {A2 : «class»} :
  ⊦ wb (wlim A2) (w3a (word A2) (wcel c0 A2) (wceq A2 (cuni A2))) :=
@bitr4i (wlim A2) (w3a (word A2) (wne A2 c0) (wceq A2 (cuni A2))) (w3a (word A2) (wcel c0 A2) (wceq A2 (cuni A2)))
  (@df_lim A2)
  (@«3bitr4i» (wa (word A2) (wa (wcel c0 A2) (wceq A2 (cuni A2)))) (wa (word A2) (wa (wne A2 c0) (wceq A2 (cuni A2)))) (w3a (word A2) (wcel c0 A2) (wceq A2 (cuni A2))) (w3a (word A2) (wne A2 c0) (wceq A2 (cuni A2)))
    (@pm5_32i (word A2) (wa (wcel c0 A2) (wceq A2 (cuni A2))) (wa (wne A2 c0) (wceq A2 (cuni A2)))
      (@anbi1d (word A2) (wcel c0 A2) (wne A2 c0) (wceq A2 (cuni A2))
        (@ord0eln0 A2)))
    (@«3anass» (word A2) (wcel c0 A2) (wceq A2 (cuni A2)))
    (@«3anass» (word A2) (wne A2 c0) (wceq A2 (cuni A2))))


/-- The empty set is not a limit ordinal. (Contributed by NM, 24-Mar-1995.) (Proof shortened by
Andrew Salmon, 25-Jul-2011.) -/
theorem nlim0 :
  ⊦ wn (wlim c0) :=
@mtbir (wlim c0) (w3a (word c0) (wcel c0 c0) (wceq c0 (cuni c0)))
  (@mto (w3a (word c0) (wcel c0 c0) (wceq c0 (cuni c0))) (wcel c0 c0)
    (@noel c0)
    (@simp2 (word c0) (wcel c0 c0) (wceq c0 (cuni c0))))
  (@dflim2 c0)


/-- A limit ordinal is ordinal. (Contributed by NM, 4-May-1995.) -/
theorem limord {A2 : «class»} :
  ⊦ wi (wlim A2) (word A2) :=
@simp1bi (wlim A2) (word A2) (wne A2 c0) (wceq A2 (cuni A2))
  (@df_lim A2)


/-- A limit ordinal is its own supremum (union). (Contributed by NM, 4-May-1995.) -/
theorem limuni {A2 : «class»} :
  ⊦ wi (wlim A2) (wceq A2 (cuni A2)) :=
@simp3bi (wlim A2) (word A2) (wne A2 c0) (wceq A2 (cuni A2))
  (@df_lim A2)


/-- A limit ordinal contains the empty set. (Contributed by NM, 15-May-1994.) -/
theorem «0ellim» {A2 : «class»} :
  ⊦ wi (wlim A2) (wcel c0 A2) :=
@mpbird (wlim A2) (wcel c0 A2) (wne A2 c0)
  (@necon2ai (wlim A2) A2 c0
    (@mtbiri (wceq A2 c0) (wlim A2) (wlim c0)
      nlim0
      (@limeq A2 c0)))
  (@syl (wlim A2) (word A2) (wb (wcel c0 A2) (wne A2 c0))
    (@limord A2)
    (@ord0eln0 A2))


/-- A limit ordinal class that is also a set is an ordinal number. (Contributed by NM, 26-Apr-2004.)
-/
theorem limelon {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 B2) (wlim A2)) (wcel A2 con0) :=
@imp (wcel A2 B2) (wlim A2) (wcel A2 con0)
  (@syl5ibr (wlim A2) (wcel A2 con0) (wcel A2 B2) (word A2)
    (@limord A2)
    (@elong A2 B2))


/-- The class of all ordinal numbers is not empty. (Contributed by NM, 17-Sep-1995.) -/
theorem onn0 :
  ⊦ wne con0 c0 :=
@ne0ii c0 con0
  «0elon»


/-- Equality of successors. (Contributed by NM, 30-Aug-1993.) (Proof shortened by Andrew Salmon,
25-Jul-2011.) -/
theorem suceq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (csuc A2) (csuc B2)) :=
@«3eqtr4g» (wceq A2 B2) (cun A2 (csn A2)) (cun B2 (csn B2)) (csuc A2) (csuc B2)
  (@uneq12d (wceq A2 B2) A2 B2 (csn A2) (csn B2)
    (@id (wceq A2 B2))
    (@sneq A2 B2))
  (@df_suc A2)
  (@df_suc B2)


/-- Membership in a successor. This one-way implication does not require that either ` A ` or ` B `
be sets. (Contributed by NM, 6-Jun-1994.) -/
theorem elsuci {A2 B2 : «class»} :
  ⊦ wi (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2)) :=
@sylbi (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wcel A2 (csn B2))) (wo (wcel A2 B2) (wceq A2 B2))
  (@bitri (wcel A2 (csuc B2)) (wcel A2 (cun B2 (csn B2))) (wo (wcel A2 B2) (wcel A2 (csn B2)))
    (@eleq2i (csuc B2) (cun B2 (csn B2)) A2
      (@df_suc B2))
    (@elun A2 B2 (csn B2)))
  (@orim2i (wcel A2 (csn B2)) (wceq A2 B2) (wcel A2 B2)
    (@elsni A2 B2))


/-- Membership in a successor. Exercise 5 of [TakeutiZaring] p. 17. (Contributed by NM,
15-Sep-1995.) -/
theorem elsucg {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2))) :=
@syl5bb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wcel A2 (csn B2))) (wcel A2 V) (wo (wcel A2 B2) (wceq A2 B2))
  (@bitri (wcel A2 (csuc B2)) (wcel A2 (cun B2 (csn B2))) (wo (wcel A2 B2) (wcel A2 (csn B2)))
    (@eleq2i (csuc B2) (cun B2 (csn B2)) A2
      (@df_suc B2))
    (@elun A2 B2 (csn B2)))
  (@orbi2d (wcel A2 V) (wcel A2 (csn B2)) (wceq A2 B2) (wcel A2 B2)
    (@elsng A2 B2 V))


/-- Variant of membership in a successor, requiring that ` B ` rather than ` A ` be a set.
(Contributed by NM, 28-Oct-2003.) -/
theorem elsuc2g {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2))) :=
@syl5bb (wcel A2 (csuc B2)) (wcel A2 (cun B2 (csn B2))) (wcel B2 V) (wo (wcel A2 B2) (wceq A2 B2))
  (@eleq2i (csuc B2) (cun B2 (csn B2)) A2
    (@df_suc B2))
  (@syl5bb (wcel A2 (cun B2 (csn B2))) (wo (wcel A2 B2) (wcel A2 (csn B2))) (wcel B2 V) (wo (wcel A2 B2) (wceq A2 B2))
    (@elun A2 B2 (csn B2))
    (@orbi2d (wcel B2 V) (wcel A2 (csn B2)) (wceq A2 B2) (wcel A2 B2)
      (@elsn2g A2 B2 V)))


/-- Membership in a successor. Exercise 5 of [TakeutiZaring] p. 17. (Contributed by NM,
15-Sep-2003.) -/
theorem elsuc {A2 B2 : «class»}
  (elsuc_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2)) :=
@ax_mp (wcel A2 cvv) (wb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2)))
  elsuc_1
  (@elsucg A2 B2 cvv)


/-- Membership in a successor. (Contributed by NM, 20-Jun-1998.) -/
theorem elelsuc {A2 B2 : «class»} :
  ⊦ wi (wcel A2 B2) (wcel A2 (csuc B2)) :=
@mpbird (wcel A2 B2) (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2))
  (@orc (wcel A2 B2) (wceq A2 B2))
  (@elsucg A2 B2 B2)


/-- Membership of a successor in another class. (Contributed by NM, 29-Jun-2004.) -/
theorem sucel {A2 : «class»} {B2 : setvar → «class»}
  (y : setvar) : ⊦ wb (wcel (csuc A2) (B2 y)) (wrex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wo (wcel (cv y) A2) (wceq (cv y) A2)))) (λ x3, B2 y)) :=
@bitri (wcel (csuc A2) (B2 y)) (wrex (λ x3, wceq (cv x3) (csuc A2)) (λ x3, B2 y)) (wrex (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wo (wcel (cv y) A2) (wceq (cv y) A2)))) (λ x3, B2 y))
  (@risset (csuc A2) (B2 y))
  (@rexbii (λ x3, wceq (cv x3) (csuc A2)) (λ x3, wal (λ y, wb (wcel (cv y) (cv x3)) (wo (wcel (cv y) A2) (wceq (cv y) A2)))) (λ x3, B2 y)
    (λ x3, @bitri (wceq (cv x3) (csuc A2)) (wal (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) (csuc A2)))) (wal (λ y, wb (wcel (cv y) (cv x3)) (wo (wcel (cv y) A2) (wceq (cv y) A2))))
      (@dfcleq (cv x3) (csuc A2))
      (@albii (λ y, wb (wcel (cv y) (cv x3)) (wcel (cv y) (csuc A2))) (λ y, wb (wcel (cv y) (cv x3)) (wo (wcel (cv y) A2) (wceq (cv y) A2)))
        (λ y, @bibi2i (wcel (cv y) (csuc A2)) (wo (wcel (cv y) A2) (wceq (cv y) A2)) (wcel (cv y) (cv x3))
          (@elsuc (cv y) A2
            (@vex y))))))


/-- The successor of the empty set. (Contributed by NM, 1-Feb-2005.) -/
theorem suc0 :
  ⊦ wceq (csuc c0) (csn c0) :=
@«3eqtri» (csuc c0) (cun c0 (csn c0)) (cun (csn c0) c0) (csn c0)
  (@df_suc c0)
  (@uncom c0 (csn c0))
  (@un0 (csn c0))


/-- A proper class is its own successor. (Contributed by NM, 3-Apr-1995.) -/
theorem sucprc {A2 : «class»} :
  ⊦ wi (wn (wcel A2 cvv)) (wceq (csuc A2) A2) :=
@«3eqtr4g» (wn (wcel A2 cvv)) (cun A2 (csn A2)) (cun A2 c0) (csuc A2) A2
  (@uneq2d (wn (wcel A2 cvv)) (csn A2) c0 A2
    (@biimpi (wn (wcel A2 cvv)) (wceq (csn A2) c0)
      (@snprc A2)))
  (@df_suc A2)
  (@eqcomi (cun A2 c0) A2
    (@un0 A2))


/-- A transitive class is equal to the union of its successor. Combines Theorem 4E of [Enderton] p.
72 and Exercise 6 of [Enderton] p. 73. (Contributed by NM, 30-Aug-1993.) -/
theorem unisuc {A2 : «class»}
  (unisuc_1 : ⊦ wcel A2 cvv) :
  ⊦ wb (wtr A2) (wceq (cuni (csuc A2)) A2) :=
@«3bitr4i» (wss (cuni A2) A2) (wceq (cun (cuni A2) A2) A2) (wtr A2) (wceq (cuni (csuc A2)) A2)
  (@ssequn1 (cuni A2) A2)
  (@df_tr A2)
  (@eqeq1i (cuni (csuc A2)) (cun (cuni A2) A2) A2
    (@«3eqtri» (cuni (csuc A2)) (cuni (cun A2 (csn A2))) (cun (cuni A2) (cuni (csn A2))) (cun (cuni A2) A2)
      (@unieqi (csuc A2) (cun A2 (csn A2))
        (@df_suc A2))
      (@uniun A2 (csn A2))
      (@uneq2i (cuni (csn A2)) A2 (cuni A2)
        (@unisn A2
          unisuc_1))))


/-- A class is included in its own successor. Part of Proposition 7.23 of [TakeutiZaring] p. 41
(generalized to arbitrary classes). (Contributed by NM, 31-May-1994.) -/
theorem sssucid {A2 : «class»} :
  ⊦ wss A2 (csuc A2) :=
@sseqtrri A2 (cun A2 (csn A2)) (csuc A2)
  (@ssun1 A2 (csn A2))
  (@df_suc A2)


/-- Part of Proposition 7.23 of [TakeutiZaring] p. 41 (generalized). (Contributed by NM,
25-Mar-1995.) (Proof shortened by Scott Fenton, 20-Feb-2012.) -/
theorem sucidg {A2 V : «class»} :
  ⊦ wi (wcel A2 V) (wcel A2 (csuc A2)) :=
@mpbiri (wcel A2 V) (wcel A2 (csuc A2)) (wo (wcel A2 A2) (wceq A2 A2))
  (@olci (wceq A2 A2) (wcel A2 A2)
    (@eqid A2))
  (@elsucg A2 A2 V)


/-- A set belongs to its successor. (Contributed by NM, 22-Jun-1994.) (Proof shortened by Alan Sare,
18-Feb-2012.) (Proof shortened by Scott Fenton, 20-Feb-2012.) -/
theorem sucid {A2 : «class»}
  (sucid_1 : ⊦ wcel A2 cvv) :
  ⊦ wcel A2 (csuc A2) :=
@ax_mp (wcel A2 cvv) (wcel A2 (csuc A2))
  sucid_1
  (@sucidg A2 cvv)


/-- No successor is empty. (Contributed by NM, 3-Apr-1995.) -/
theorem nsuceq0 {A2 : «class»} :
  ⊦ wne (csuc A2) c0 :=
@neir (csuc A2) c0
  (@pm2_61i (wcel A2 cvv) (wn (wceq (csuc A2) c0))
    (@mtoi (wcel A2 cvv) (wceq (csuc A2) c0) (wcel A2 c0)
      (@noel A2)
      (@syl5ibcom (wcel A2 cvv) (wcel A2 (csuc A2)) (wceq (csuc A2) c0) (wcel A2 c0)
        (@sucidg A2 cvv)
        (@eleq2 (csuc A2) c0 A2)))
    (@mtbird (wn (wcel A2 cvv)) (wceq (csuc A2) c0) (wceq A2 c0)
      (@con3i (wceq A2 c0) (wcel A2 cvv)
        (@mpbiri (wceq A2 c0) (wcel A2 cvv) (wcel c0 cvv)
          «0ex»
          (@eleq1 A2 c0 cvv)))
      (@eqeq1d (wn (wcel A2 cvv)) (csuc A2) A2 c0
        (@sucprc A2))))


/-- A set belongs to the successor of an equal set. (Contributed by NM, 18-Aug-1994.) -/
theorem eqelsuc {A2 B2 : «class»}
  (eqelsuc_1 : ⊦ wcel A2 cvv) :
  ⊦ wi (wceq A2 B2) (wcel A2 (csuc B2)) :=
@eleqtrid (wceq A2 B2) A2 (csuc A2) (csuc B2)
  (@sucid A2
    eqelsuc_1)
  (@suceq A2 B2)


/-- A set whose successor belongs to a transitive class also belongs. (Contributed by NM,
5-Sep-2003.) (Proof shortened by Andrew Salmon, 12-Aug-2011.) -/
theorem trsuc {A2 B2 : «class»} :
  ⊦ wi (wa (wtr A2) (wcel (csuc B2) A2)) (wcel B2 A2) :=
@impel (wtr A2) (wa (wcel B2 (csuc B2)) (wcel (csuc B2) A2)) (wcel B2 A2) (wcel (csuc B2) A2)
  (@trel A2 B2 (csuc B2))
  (@ancri (wcel (csuc B2) A2) (wcel B2 (csuc B2))
    (@syl (wcel (csuc B2) A2) (wcel B2 cvv) (wcel B2 (csuc B2))
      (@mpan (wss B2 (csuc B2)) (wcel (csuc B2) A2) (wcel B2 cvv)
        (@sssucid B2)
        (@ssexg B2 (csuc B2) A2))
      (@sucidg B2 cvv)))


/-- An ordinal is a subset of another ordinal if and only if it belongs to its successor.
(Contributed by NM, 28-Nov-2003.) -/
theorem ordsssuc {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (word B2)) (wb (wss A2 B2) (wcel A2 (csuc B2))) :=
@bitr4d (wa (wcel A2 con0) (word B2)) (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2)) (wcel A2 (csuc B2))
  (@sylan (wcel A2 con0) (word A2) (word B2) (wb (wss A2 B2) (wo (wcel A2 B2) (wceq A2 B2)))
    (@eloni A2)
    (@ordsseleq A2 B2))
  (@adantr (wcel A2 con0) (wb (wcel A2 (csuc B2)) (wo (wcel A2 B2) (wceq A2 B2))) (word B2)
    (@elsucg A2 B2 con0))


/-- A subset of an ordinal number belongs to its successor. (Contributed by NM, 15-Sep-1995.) -/
theorem onsssuc {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wb (wss A2 B2) (wcel A2 (csuc B2))) :=
@sylan2 (wcel B2 con0) (wcel A2 con0) (word B2) (wb (wss A2 B2) (wcel A2 (csuc B2)))
  (@eloni B2)
  (@ordsssuc A2 B2)


/-- An ordinal subset of an ordinal number belongs to its successor. (Contributed by NM,
1-Feb-2005.) (Proof shortened by Andrew Salmon, 12-Aug-2011.) -/
theorem ordsssuc2 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (wcel B2 con0)) (wb (wss A2 B2) (wcel A2 (csuc B2))) :=
@pm2_61i (wcel A2 cvv) (wi (wa (word A2) (wcel B2 con0)) (wb (wss A2 B2) (wcel A2 (csuc B2))))
  (@syl6 (wcel A2 cvv) (wa (word A2) (wcel B2 con0)) (wa (wcel A2 con0) (wcel B2 con0)) (wb (wss A2 B2) (wcel A2 (csuc B2)))
    (@anim1d (wcel A2 cvv) (word A2) (wcel A2 con0) (wcel B2 con0)
      (@biimprd (wcel A2 cvv) (wcel A2 con0) (word A2)
        (@elong A2 cvv)))
    (@onsssuc A2 B2))
  (@adantld (wn (wcel A2 cvv)) (wcel B2 con0) (wb (wss A2 B2) (wcel A2 (csuc B2))) (word A2)
    (@expcom (wcel B2 con0) (wn (wcel A2 cvv)) (wb (wss A2 B2) (wcel A2 (csuc B2)))
      (@sylbi (wa (wcel B2 con0) (wn (wcel A2 cvv))) (wn (wi (wcel B2 con0) (wcel A2 cvv))) (wb (wss A2 B2) (wcel A2 (csuc B2)))
        (@annim (wcel B2 con0) (wcel A2 cvv))
        (@pm5_21ni (wss A2 B2) (wi (wcel B2 con0) (wcel A2 cvv)) (wcel A2 (csuc B2))
          (@ex (wss A2 B2) (wcel B2 con0) (wcel A2 cvv)
            (@ssexg A2 B2 con0))
          (@a1d (wcel A2 (csuc B2)) (wcel A2 cvv) (wcel B2 con0)
            (@elex A2 (csuc B2)))))))


/-- When its successor is subtracted from a class of ordinal numbers, an ordinal number is less than
the minimum of the resulting subclass. (Contributed by NM, 1-Dec-2003.) -/
theorem onmindif {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 con0) (wcel B2 con0)) (wcel B2 (cint (cdif A2 (csuc B2)))) :=
@mpbird (wa (wss A2 con0) (wcel B2 con0)) (wcel B2 (cint (cdif A2 (csuc B2)))) (wral (λ x3, wcel B2 (cv x3)) (λ x3, cdif A2 (csuc B2)))
  (@ralrimiv (wa (wss A2 con0) (wcel B2 con0)) (λ x3, wcel B2 (cv x3)) (λ x3, cdif A2 (csuc B2))
    (λ x3, @syl5bi (wcel (cv x3) (cdif A2 (csuc B2))) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) (csuc B2)))) (wa (wss A2 con0) (wcel B2 con0)) (wcel B2 (cv x3))
      (@eldif (cv x3) A2 (csuc B2))
      (@imp4b (wss A2 con0) (wcel B2 con0) (wcel (cv x3) A2) (wn (wcel (cv x3) (csuc B2))) (wcel B2 (cv x3))
        (@com23 (wss A2 con0) (wcel (cv x3) A2) (wcel B2 con0) (wi (wn (wcel (cv x3) (csuc B2))) (wcel B2 (cv x3)))
          (@exp31 (wss A2 con0) (wcel (cv x3) A2) (wcel B2 con0) (wi (wn (wcel (cv x3) (csuc B2))) (wcel B2 (cv x3)))
            (@biimpd (wa (wa (wss A2 con0) (wcel (cv x3) A2)) (wcel B2 con0)) (wn (wcel (cv x3) (csuc B2))) (wcel B2 (cv x3))
              (@sylan (wa (wss A2 con0) (wcel (cv x3) A2)) (wcel (cv x3) con0) (wcel B2 con0) (wb (wn (wcel (cv x3) (csuc B2))) (wcel B2 (cv x3)))
                (@ssel2 A2 con0 (cv x3))
                (@con1bid (wa (wcel (cv x3) con0) (wcel B2 con0)) (wcel B2 (cv x3)) (wcel (cv x3) (csuc B2))
                  (@bitr3d (wa (wcel (cv x3) con0) (wcel B2 con0)) (wss (cv x3) B2) (wn (wcel B2 (cv x3))) (wcel (cv x3) (csuc B2))
                    (@ontri1 (cv x3) B2)
                    (@onsssuc (cv x3) B2))))))))))
  (@adantl (wcel B2 con0) (wb (wcel B2 (cint (cdif A2 (csuc B2)))) (wral (λ x3, wcel B2 (cv x3)) (λ x3, cdif A2 (csuc B2)))) (wss A2 con0)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wcel B2 con0) (wb (wcel B2 (cint (cdif A2 (csuc B2)))) (wral (λ x3, wcel B2 (cv x3)) (λ x3, cdif A2 (csuc B2)))), from
      @elintg B2 (cdif A2 (csuc B2)) (λ x3, con0) x3))


/-- There is no set between an ordinal class and its successor. Generalized Proposition 7.25 of
[TakeutiZaring] p. 41. (Contributed by NM, 21-Jun-1998.) (Proof shortened by JJ, 24-Sep-2021.) -/
theorem ordnbtwn {A2 B2 : «class»} :
  ⊦ wi (word A2) (wn (wa (wcel A2 B2) (wcel B2 (csuc A2)))) :=
@nsyl (word A2) (wa (wcel A2 B2) (wo (wcel B2 A2) (wceq B2 A2))) (wa (wcel A2 B2) (wcel B2 (csuc A2)))
  (@mtod (word A2) (wa (wcel A2 B2) (wo (wcel B2 A2) (wceq B2 A2))) (wcel A2 A2)
    (@ordirr A2)
    (@syl5com (word A2) (wn (wa (wcel A2 B2) (wcel B2 A2))) (wa (wcel A2 B2) (wo (wcel B2 A2) (wceq B2 A2))) (wcel A2 A2)
      (@ordn2lp A2 B2)
      (@jaodan (wcel A2 B2) (wcel B2 A2) (wi (wn (wa (wcel A2 B2) (wcel B2 A2))) (wcel A2 A2)) (wceq B2 A2)
        (@pm2_24 (wa (wcel A2 B2) (wcel B2 A2)) (wcel A2 A2))
        (@a1d (wa (wcel A2 B2) (wceq B2 A2)) (wcel A2 A2) (wn (wa (wcel A2 B2) (wcel B2 A2)))
          (@biimpac (wceq B2 A2) (wcel A2 B2) (wcel A2 A2)
            (@eleq2 B2 A2 A2))))))
  (@anim2i (wcel B2 (csuc A2)) (wo (wcel B2 A2) (wceq B2 A2)) (wcel A2 B2)
    (@elsuci B2 A2))


/-- There is no set between an ordinal number and its successor. Proposition 7.25 of [TakeutiZaring]
p. 41. (Contributed by NM, 9-Jun-1994.) -/
theorem onnbtwn {A2 B2 : «class»} :
  ⊦ wi (wcel A2 con0) (wn (wa (wcel A2 B2) (wcel B2 (csuc A2)))) :=
@syl (wcel A2 con0) (word A2) (wn (wa (wcel A2 B2) (wcel B2 (csuc A2))))
  (@eloni A2)
  (@ordnbtwn A2 B2)


/-- A set whose successor is a subset of another class is a member of that class. (Contributed by
NM, 16-Sep-1995.) -/
theorem sucssel {A2 B2 V : «class»} :
  ⊦ wi (wcel A2 V) (wi (wss (csuc A2) B2) (wcel A2 B2)) :=
@syl5com (wcel A2 V) (wcel A2 (csuc A2)) (wss (csuc A2) B2) (wcel A2 B2)
  (@sucidg A2 V)
  (@ssel (csuc A2) B2 A2)


/-- Ordinal derived from its successor. (Contributed by NM, 20-May-1998.) -/
theorem orddif {A2 : «class»} :
  ⊦ wi (word A2) (wceq A2 (cdif (csuc A2) (csn A2))) :=
@sylib (word A2) (wceq (cin A2 (csn A2)) c0) (wceq A2 (cdif (csuc A2) (csn A2)))
  (@orddisj A2)
  (@bitr4i (wceq (cin A2 (csn A2)) c0) (wceq A2 (cdif A2 (csn A2))) (wceq A2 (cdif (csuc A2) (csn A2)))
    (@disj3 A2 (csn A2))
    (@eqeq2i (cdif (csuc A2) (csn A2)) (cdif A2 (csn A2)) A2
      (@eqtri (cdif (csuc A2) (csn A2)) (cdif (cun A2 (csn A2)) (csn A2)) (cdif A2 (csn A2))
        (@difeq1i (csuc A2) (cun A2 (csn A2)) (csn A2)
          (@df_suc A2))
        (@difun2 A2 (csn A2)))))


/-- An ordinal class includes its union. (Contributed by NM, 13-Sep-2003.) -/
theorem orduniss {A2 : «class»} :
  ⊦ wi (word A2) (wss (cuni A2) A2) :=
@sylib (word A2) (wtr A2) (wss (cuni A2) A2)
  (@ordtr A2)
  (@df_tr A2)


/-- A trichotomy law for ordinal classes. (Contributed by NM, 13-Sep-2003.) (Proof shortened by
Andrew Salmon, 12-Aug-2011.) -/
theorem ordtri2or {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wo (wcel A2 B2) (wss B2 A2)) :=
@orrd (wa (word A2) (word B2)) (wcel A2 B2) (wss B2 A2)
  (@biimprd (wa (word A2) (word B2)) (wss B2 A2) (wn (wcel A2 B2))
    (@ancoms (word B2) (word A2) (wb (wss B2 A2) (wn (wcel A2 B2)))
      (@ordtri1 B2 A2)))


/-- A trichotomy law for ordinal classes. (Contributed by NM, 2-Nov-2003.) -/
theorem ordtri2or2 {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (wo (wss A2 B2) (wss B2 A2)) :=
@mpd (wa (word A2) (word B2)) (wo (wcel A2 B2) (wss B2 A2)) (wo (wss A2 B2) (wss B2 A2))
  (@ordtri2or A2 B2)
  (@adantl (word B2) (wi (wo (wcel A2 B2) (wss B2 A2)) (wo (wss A2 B2) (wss B2 A2))) (word A2)
    (@orim1d (word B2) (wcel A2 B2) (wss A2 B2) (wss B2 A2)
      (@ex (word B2) (wcel A2 B2) (wss A2 B2)
        (@ordelss B2 A2))))


/-- The maximum (i.e. union) of two ordinals is either one or the other. Similar to Exercise 14 of
[TakeutiZaring] p. 40. (Contributed by NM, 28-Nov-2003.) -/
theorem ordequn {A2 B2 C : «class»} :
  ⊦ wi (wa (word B2) (word C)) (wi (wceq A2 (cun B2 C)) (wo (wceq A2 B2) (wceq A2 C))) :=
@syl5ibcom (wa (word B2) (word C)) (wo (wss C B2) (wss B2 C)) (wceq A2 (cun B2 C)) (wo (wceq A2 B2) (wceq A2 C))
  (@orcomd (wa (word B2) (word C)) (wss B2 C) (wss C B2)
    (@ordtri2or2 B2 C))
  (@orbi12d (wceq A2 (cun B2 C)) (wss C B2) (wceq A2 B2) (wss B2 C) (wceq A2 C)
    (@bitr4id (wceq A2 (cun B2 C)) (wss C B2) (wceq (cun B2 C) B2) (wceq A2 B2)
      (@ssequn2 C B2)
      (@eqeq1 A2 (cun B2 C) B2))
    (@bitr4id (wceq A2 (cun B2 C)) (wss B2 C) (wceq (cun B2 C) C) (wceq A2 C)
      (@ssequn1 B2 C)
      (@eqeq1 A2 (cun B2 C) C)))


/-- The maximum (i.e. union) of two ordinals is ordinal. Exercise 12 of [TakeutiZaring] p. 40.
(Contributed by NM, 28-Nov-2003.) -/
theorem ordun {A2 B2 : «class»} :
  ⊦ wi (wa (word A2) (word B2)) (word (cun A2 B2)) :=
@mpd (wa (word A2) (word B2)) (wo (wceq (cun A2 B2) A2) (wceq (cun A2 B2) B2)) (word (cun A2 B2))
  (@mpi (wa (word A2) (word B2)) (wceq (cun A2 B2) (cun A2 B2)) (wo (wceq (cun A2 B2) A2) (wceq (cun A2 B2) B2))
    (@eqid (cun A2 B2))
    (@ordequn (cun A2 B2) A2 B2))
  (@jaao (word A2) (wceq (cun A2 B2) A2) (word (cun A2 B2)) (word B2) (wceq (cun A2 B2) B2)
    (@biimprcd (wceq (cun A2 B2) A2) (word (cun A2 B2)) (word A2)
      (@ordeq (cun A2 B2) A2))
    (@biimprcd (wceq (cun A2 B2) B2) (word (cun A2 B2)) (word B2)
      (@ordeq (cun A2 B2) B2)))


/-- A subclass relationship for union and successor of ordinal classes. (Contributed by NM,
28-Nov-2003.) -/
theorem ordunisssuc {A2 B2 : «class»} :
  ⊦ wi (wa (wss A2 con0) (word B2)) (wb (wss (cuni A2) B2) (wss A2 (csuc B2))) :=
@«3bitr4g» (wa (wss A2 con0) (word B2)) (wral (λ x3, wss (cv x3) B2) (λ x3, A2)) (wral (λ x3, wcel (cv x3) (csuc B2)) (λ x3, A2)) (wss (cuni A2) B2) (wss A2 (csuc B2))
  (@ralbidva (wa (wss A2 con0) (word B2)) (λ x3, wss (cv x3) B2) (λ x3, wcel (cv x3) (csuc B2)) (λ x3, A2)
    (λ x3, @an32s (wss A2 con0) (wcel (cv x3) A2) (word B2) (wb (wss (cv x3) B2) (wcel (cv x3) (csuc B2)))
      (@sylan (wa (wss A2 con0) (wcel (cv x3) A2)) (wcel (cv x3) con0) (word B2) (wb (wss (cv x3) B2) (wcel (cv x3) (csuc B2)))
        (@ssel2 A2 con0 (cv x3))
        (@ordsssuc (cv x3) B2))))
  (@unissb A2 B2)
  (@dfss3 A2 (csuc B2))


/-- The successor operation behaves like a one-to-one function. Compare Exercise 16 of [Enderton] p.
194. (Contributed by NM, 3-Sep-2003.) -/
theorem suc11 {A2 B2 : «class»} :
  ⊦ wi (wa (wcel A2 con0) (wcel B2 con0)) (wb (wceq (csuc A2) (csuc B2)) (wceq A2 B2)) :=
@impbid1 (wa (wcel A2 con0) (wcel B2 con0)) (wceq (csuc A2) (csuc B2)) (wceq A2 B2)
  (@mpd (wa (wcel A2 con0) (wcel B2 con0)) (wo (wn (wcel A2 B2)) (wn (wcel B2 A2))) (wi (wceq (csuc A2) (csuc B2)) (wceq A2 B2))
    (@adantr (wcel A2 con0) (wo (wn (wcel A2 B2)) (wn (wcel B2 A2))) (wcel B2 con0)
      (@«3syl» (wcel A2 con0) (word A2) (wn (wa (wcel A2 B2) (wcel B2 A2))) (wo (wn (wcel A2 B2)) (wn (wcel B2 A2)))
        (@eloni A2)
        (@ordn2lp A2 B2)
        (@pm3_13 (wcel A2 B2) (wcel B2 A2))))
    (@jaao (wcel A2 con0) (wn (wcel A2 B2)) (wi (wceq (csuc A2) (csuc B2)) (wceq A2 B2)) (wcel B2 con0) (wn (wcel B2 A2))
      (@syl9 (wcel A2 con0) (wceq (csuc A2) (csuc B2)) (wcel A2 (csuc B2)) (wn (wcel A2 B2)) (wceq A2 B2)
        (@syl5 (wceq (csuc A2) (csuc B2)) (wss (csuc A2) (csuc B2)) (wcel A2 con0) (wcel A2 (csuc B2))
          (@eqimss (csuc A2) (csuc B2))
          (@sucssel A2 (csuc B2) con0))
        (@com12 (wcel A2 (csuc B2)) (wn (wcel A2 B2)) (wceq A2 B2)
          (@ord (wcel A2 (csuc B2)) (wcel A2 B2) (wceq A2 B2)
            (@elsuci A2 B2))))
      (@syl9 (wcel B2 con0) (wceq (csuc A2) (csuc B2)) (wcel B2 (csuc A2)) (wn (wcel B2 A2)) (wceq A2 B2)
        (@syl5 (wceq (csuc A2) (csuc B2)) (wss (csuc B2) (csuc A2)) (wcel B2 con0) (wcel B2 (csuc A2))
          (@eqimss2 (csuc B2) (csuc A2))
          (@sucssel B2 (csuc A2) con0))
        (@com12 (wcel B2 (csuc A2)) (wn (wcel B2 A2)) (wceq A2 B2)
          (@syl6ib (wcel B2 (csuc A2)) (wn (wcel B2 A2)) (wceq B2 A2) (wceq A2 B2)
            (@ord (wcel B2 (csuc A2)) (wcel B2 A2) (wceq B2 A2)
              (@elsuci B2 A2))
            (@eqcom B2 A2))))))
  (@suceq A2 B2)


/-- An ordinal number is an ordinal class. (Contributed by NM, 11-Jun-1994.) -/
theorem onordi {A2 : «class»}
  (on_1 : ⊦ wcel A2 con0) :
  ⊦ word A2 :=
@ax_mp (wcel A2 con0) (word A2)
  on_1
  (@eloni A2)


/-- An ordinal number is not a member of itself. Theorem 7M(c) of [Enderton] p. 192. (Contributed by
NM, 11-Jun-1994.) -/
theorem onirri {A2 : «class»}
  (on_1 : ⊦ wcel A2 con0) :
  ⊦ wn (wcel A2 A2) :=
@ax_mp (word A2) (wn (wcel A2 A2))
  (@onordi A2
    on_1)
  (@ordirr A2)


/-- A member of an ordinal number is an ordinal number. Theorem 7M(a) of [Enderton] p. 192.
(Contributed by NM, 11-Jun-1994.) -/
theorem oneli {A2 B2 : «class»}
  (on_1 : ⊦ wcel A2 con0) :
  ⊦ wi (wcel B2 A2) (wcel B2 con0) :=
@mpan (wcel A2 con0) (wcel B2 A2) (wcel B2 con0)
  on_1
  (@onelon A2 B2)


/-- A member of an ordinal number is a subset of it. (Contributed by NM, 11-Aug-1994.) -/
theorem onelssi {A2 B2 : «class»}
  (on_1 : ⊦ wcel A2 con0) :
  ⊦ wi (wcel B2 A2) (wss B2 A2) :=
@ax_mp (wcel A2 con0) (wi (wcel B2 A2) (wss B2 A2))
  on_1
  (@onelss A2 B2)


/-- An ordinal equal to its own union is either zero or a limit ordinal. (Contributed by NM,
1-Oct-2003.) -/
theorem unizlim {A2 : «class»} :
  ⊦ wi (word A2) (wb (wceq A2 (cuni A2)) (wo (wceq A2 c0) (wlim A2))) :=
@impbid1 (word A2) (wceq A2 (cuni A2)) (wo (wceq A2 c0) (wlim A2))
  (@ex (word A2) (wceq A2 (cuni A2)) (wo (wceq A2 c0) (wlim A2))
    (@orrd (wa (word A2) (wceq A2 (cuni A2))) (wceq A2 c0) (wlim A2)
      (@imp (word A2) (wceq A2 (cuni A2)) (wi (wn (wceq A2 c0)) (wlim A2))
        (@com23 (word A2) (wn (wceq A2 c0)) (wceq A2 (cuni A2)) (wlim A2)
          (@syl5bir (wn (wceq A2 c0)) (wne A2 c0) (word A2) (wi (wceq A2 (cuni A2)) (wlim A2))
            (@df_ne A2 c0)
            (@«3exp» (word A2) (wne A2 c0) (wceq A2 (cuni A2)) (wlim A2)
              (@biimpri (wlim A2) (w3a (word A2) (wne A2 c0) (wceq A2 (cuni A2)))
                (@df_lim A2))))))))
  (@jaoi (wceq A2 c0) (wceq A2 (cuni A2)) (wlim A2)
    (@«3eqtr4a» (wceq A2 c0) c0 (cuni c0) A2 (cuni A2)
      (@eqcomi (cuni c0) c0
        uni0)
      (@id (wceq A2 c0))
      (@unieq A2 c0))
    (@limuni A2))


-- /-- Extend class notation with Russell's definition description binder (inverted iota). -/
-- constant cio : (setvar → wff) → «class»


-- /-- Define Russell's definition description binder, which can be read as "the unique ` x ` such
-- that ` ph ` ", where ` ph ` ordinarily contains ` x ` as a free variable. Our definition is
-- meaningful only when there is exactly one ` x ` such that ` ph ` is true (see ~ iotaval );
-- otherwise, it evaluates to the empty set (see ~ iotanul ). Russell used the inverted iota symbol
-- ` iota ` to represent the binder. Sometimes proofs need to expand an iota-based definition. That
-- is, given "X = the x for which ... x ... x ..." holds, the proof needs to get to "... X ... X
-- ...". A general strategy to do this is to use ~ riotacl2 (or ~ iotacl for unbounded iota), as
-- demonstrated in the proof of ~ supub . This can be easier than applying ~ riotasbc or a version
-- that applies an explicit substitution, because substituting an iota into its own property always
-- has a bound variable clash which must be first renamed or else guarded with NF. (Contributed by
-- Andrew Salmon, 30-Jun-2011.) -/
-- axiom df_iota {ph : setvar → wff} : ⊦ wceq (cio (λ x3, ph x3)) (cuni (cab (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y)))))


/-- Alternate definition for descriptions. Definition 8.18 in [Quine] p. 56. (Contributed by Andrew
Salmon, 30-Jun-2011.) -/
theorem dfiota2 {ph : setvar → wff} :
  ⊦ wceq (cio (λ x3, ph x3)) (cuni (cab (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y)))))) :=
@eqtri (cio (λ x3, ph x3)) (cuni (cab (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y))))) (cuni (cab (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y))))))
  (@df_iota (λ x3, ph x3))
  (@unieqi (cab (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y)))) (cab (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y)))))
    (@abbii (λ y, wceq (cab (λ x3, ph x3)) (csn (cv y))) (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y))))
      (λ y, @absn (λ x3, ph x3) (cv y))))


/-- Bound-variable hypothesis builder for the ` iota ` class. (Contributed by Andrew Salmon,
11-Jul-2011.) (Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem nfiota1 {ph : setvar → wff} :
  ⊦ wnfc (λ x3, cio (λ x3, ph x3)) :=
@nfcxfr (λ x3, cio (λ x3, ph x3)) (λ x3, cuni (cab (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y))))))
  (λ x3, @dfiota2 (λ x3, ph x3))
  (@nfuni (λ x3, cab (λ y, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv y)))))
    (@nfaba1 (λ x3 y, wb (ph x3) (wceq (cv x3) (cv y)))))


/-- Deduction version of ~ nfiotaw . Version of ~ nfiotad with a disjoint variable condition, which
does not require ~ ax-13 . (Contributed by NM, 18-Feb-2013.) (Revised by Gino Giotto, 26-Jan-2024.)
-/
theorem nfiotadw {ph ps : setvar → setvar → wff}
  (nfiotadw_1 : ∀ x3, ⊦ wnf (λ y, ph x3 y))
  (nfiotadw_2 : ∀ x3 y, ⊦ wi (ph x3 y) (wnf (λ x3, ps x3 y)))
  (x3 y : setvar) : ⊦ wi (ph x3 y) (wnfc (λ x3, cio (λ y, ps x3 y))) :=
@nfcxfrd (λ x3, ph x3 y) (λ x3, cio (λ y, ps x3 y)) (λ x3, cuni (cab (λ z, wal (λ y, wb (ps x3 y) (wceq (cv y) (cv z))))))
  (λ x3, @dfiota2 (λ y, ps x3 y))
  (λ x3, @nfunid (λ x3, ph x3 y) (λ x3, cab (λ z, wal (λ y, wb (ps x3 y) (wceq (cv y) (cv z)))))
    (λ x3, setvar.forget $ λ z : setvar,
      show ⊦ wi (ph x3 y) (wnfc (λ x3, cab (λ z, wal (λ y, wb (ps x3 y) (wceq (cv y) (cv z)))))), from
      @nfabdw (λ x3 z, ph x3 y) (λ x3 z, wal (λ y, wb (ps x3 y) (wceq (cv y) (cv z))))
        (λ x3, @nfv (ph x3 y))
        (λ x3 z, @nfald (λ x3 y, ph x3 y) (λ x3 y, wb (ps x3 y) (wceq (cv y) (cv z)))
          (λ x3, nfiotadw_1 x3)
          (λ x3 y, @nfbid (λ x3, ph x3 y) (λ x3, ps x3 y) (λ x3, wceq (cv y) (cv z))
            (λ x3, nfiotadw_2 x3 y)
            (λ x3, @nfvd (λ x3, ph x3 y) (wceq (cv y) (cv z)) x3) x3) x3 y) x3 z) x3) x3


/-- Bound-variable hypothesis builder for the ` iota ` class. Version of ~ nfiota with a disjoint
variable condition, which does not require ~ ax-13 . (Contributed by NM, 23-Aug-2011.) (Revised by
Gino Giotto, 26-Jan-2024.) -/
theorem nfiotaw {ph : setvar → setvar → wff}
  (nfiotaw_1 : ∀ y, ⊦ wnf (λ x3, ph x3 y)) :
  ⊦ wnfc (λ x3, cio (λ y, ph x3 y)) :=
@mptru (wnfc (λ x3, cio (λ y, ph x3 y)))
  (setvar.forget $ λ x3 : setvar,
    setvar.forget $ λ y : setvar,
    show ⊦ wi wtru (wnfc (λ x3, cio (λ y, ph x3 y))), from
    @nfiotadw (λ x3 y, wtru) (λ x3 y, ph x3 y)
      (λ x3, nftru)
      (λ x3 y, @a1i (wnf (λ x3, ph x3 y)) wtru
        (nfiotaw_1 y)) x3 y)


/-- Change bound variables in a description binder. Version of ~ cbviotav with a disjoint variable
condition, which requires fewer axioms . (Contributed by Andrew Salmon, 1-Aug-2011.) (Revised by
Gino Giotto, 30-Sep-2024.) -/
theorem cbviotavw {ph ps : setvar → wff}
  (cbviotavw_1 : ∀ x3 y, ⊦ wi (wceq (cv x3) (cv y)) (wb (ph x3) (ps y))) :
  ⊦ wceq (cio (λ x3, ph x3)) (cio (λ y, ps y)) :=
@«3eqtr4i» (cuni (cab (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z))))) (cuni (cab (λ z, wceq (cab (λ y, ps y)) (csn (cv z))))) (cio (λ x3, ph x3)) (cio (λ y, ps y))
  (@unieqi (cab (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z)))) (cab (λ z, wceq (cab (λ y, ps y)) (csn (cv z))))
    (@abbii (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z))) (λ z, wceq (cab (λ y, ps y)) (csn (cv z)))
      (λ z, @eqeq1i (cab (λ x3, ph x3)) (cab (λ y, ps y)) (csn (cv z))
        (@cbvabv (λ x3, ph x3) (λ y, ps y)
          (λ x3 y, cbviotavw_1 x3 y)))))
  (@df_iota (λ x3, ph x3))
  (@df_iota (λ y, ps y))


/-- Equivalence theorem for descriptions. (Contributed by Andrew Salmon, 30-Jun-2011.) -/
theorem iotabi {ph ps : setvar → wff} :
  ⊦ wi (wal (λ x3, wb (ph x3) (ps x3))) (wceq (cio (λ x3, ph x3)) (cio (λ x3, ps x3))) :=
@«3eqtr4g» (wal (λ x3, wb (ph x3) (ps x3))) (cuni (cab (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z))))) (cuni (cab (λ z, wceq (cab (λ x3, ps x3)) (csn (cv z))))) (cio (λ x3, ph x3)) (cio (λ x3, ps x3))
  (@unieqd (wal (λ x3, wb (ph x3) (ps x3))) (cab (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z)))) (cab (λ z, wceq (cab (λ x3, ps x3)) (csn (cv z))))
    (@abbidv (wal (λ x3, wb (ph x3) (ps x3))) (λ z, wceq (cab (λ x3, ph x3)) (csn (cv z))) (λ z, wceq (cab (λ x3, ps x3)) (csn (cv z)))
      (λ z, @eqeq1d (wal (λ x3, wb (ph x3) (ps x3))) (cab (λ x3, ph x3)) (cab (λ x3, ps x3)) (csn (cv z))
        (@abbi1 (λ x3, ph x3) (λ x3, ps x3)))))
  (@df_iota (λ x3, ph x3))
  (@df_iota (λ x3, ps x3))


/-- Part of Theorem 8.17 in [Quine] p. 56. This theorem serves as a lemma for the fundamental
property of iota. (Contributed by Andrew Salmon, 11-Jul-2011.) -/
theorem uniabio {ph : setvar → setvar → wff}
  (y : setvar) : ⊦ wi (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wceq (cuni (cab (λ x3, ph x3 y))) (cv y)) :=
@eqtrdi (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (cuni (cab (λ x3, ph x3 y))) (cuni (csn (cv y))) (cv y)
  (@unieqd (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (cab (λ x3, ph x3 y)) (csn (cv y))
    (@eqtr4di (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (cab (λ x3, ph x3 y)) (cab (λ x3, wceq (cv x3) (cv y))) (csn (cv y))
      (@abbi1 (λ x3, ph x3 y) (λ x3, wceq (cv x3) (cv y)))
      (@df_sn (cv y))))
  (@unisn (cv y)
    (@vex y))


/-- Theorem 8.19 in [Quine] p. 57. This theorem is the fundamental property of iota. (Contributed by
Andrew Salmon, 11-Jul-2011.) -/
theorem iotaval {ph : setvar → setvar → wff}
  (y : setvar) : ⊦ wi (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wceq (cio (λ x3, ph x3 y)) (cv y)) :=
@syl5eq (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (cio (λ x3, ph x3 y)) (cuni (cab (λ z, wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))))) (cv y)
  (@dfiota2 (λ x3, ph x3 y))
  (@syl (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ z, wb (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) (wceq (cv z) (cv y)))) (wceq (cuni (cab (λ z, wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))))) (cv y))
    (@alrimiv (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (λ z, wb (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) (wceq (cv z) (cv y)))
      (λ z, @bitrdi (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) (wceq (cv y) (cv z)) (wceq (cv z) (cv y))
        (@impbid (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) (wceq (cv y) (cv z))
          (@ex (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) (wceq (cv y) (cv z))
            (@elv (λ y, wi (wa (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z))))) (wceq (cv y) (cv z)))
              (λ y, setvar.forget $ λ x3 : setvar,
                show ⊦ wi (wcel (cv y) cvv) (wi (wa (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z))))) (wceq (cv y) (cv z))), from
                @sbeqalb (λ x3, ph x3 y) (cv y) (cv z) (λ x3, cvv) x3) y))
          (@com12 (wceq (cv y) (cv z)) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z))))
            (@alimdv (wceq (cv y) (cv z)) (λ x3, wb (ph x3 y) (wceq (cv x3) (cv y))) (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))
              (λ x3, @biimpd (wceq (cv y) (cv z)) (wb (ph x3 y) (wceq (cv x3) (cv y))) (wb (ph x3 y) (wceq (cv x3) (cv z)))
                (@bibi2d (wceq (cv y) (cv z)) (wceq (cv x3) (cv y)) (wceq (cv x3) (cv z)) (ph x3 y)
                  (@equequ2 y z x3))))))
        (@equcom y z)))
    (@uniabio (λ z y, wal (λ x3, wb (ph x3 y) (wceq (cv x3) (cv z)))) y))


/-- Equivalence between two different forms of ` iota ` . (Contributed by Andrew Salmon,
12-Jul-2011.) -/
theorem iotauni {ph : setvar → wff} :
  ⊦ wi (weu (λ x3, ph x3)) (wceq (cio (λ x3, ph x3)) (cuni (cab (λ x3, ph x3)))) :=
@sylbi (weu (λ x3, ph x3)) (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wceq (cio (λ x3, ph x3)) (cuni (cab (λ x3, ph x3))))
  (@eu6 (λ x3, ph x3))
  (@exlimiv (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wceq (cio (λ x3, ph x3)) (cuni (cab (λ x3, ph x3))))
    (λ z, @eqtr4d (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (cio (λ x3, ph x3)) (cv z) (cuni (cab (λ x3, ph x3)))
      (@iotaval (λ x3 z, ph x3) z)
      (@uniabio (λ x3 z, ph x3) z)))


/-- Property of iota. (Contributed by NM, 23-Aug-2011.) (Revised by Mario Carneiro, 23-Dec-2016.) -/
theorem iota1 {ph : setvar → wff}
  (x3 : setvar) : ⊦ wi (weu (λ x3, ph x3)) (wb (ph x3) (wceq (cio (λ x3, ph x3)) (cv x3))) :=
@sylbi (weu (λ x3, ph x3)) (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wb (ph x3) (wceq (cio (λ x3, ph x3)) (cv x3)))
  (@eu6 (λ x3, ph x3))
  (@exlimiv (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wb (ph x3) (wceq (cio (λ x3, ph x3)) (cv x3)))
    (λ z, @bitrdi (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (ph x3) (wceq (cv x3) (cio (λ x3, ph x3))) (wceq (cio (λ x3, ph x3)) (cv x3))
      (@bitr4d (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (ph x3) (wceq (cv x3) (cv z)) (wceq (cv x3) (cio (λ x3, ph x3)))
        (@sp (λ x3, wb (ph x3) (wceq (cv x3) (cv z))) x3)
        (@eqeq2d (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (cio (λ x3, ph x3)) (cv z) (cv x3)
          (@iotaval (λ x3 z, ph x3) z)))
      (@eqcom (cv x3) (cio (λ x3, ph x3)))))


/-- Theorem 8.22 in [Quine] p. 57. This theorem is the result if there isn't exactly one ` x ` that
satisfies ` ph ` . (Contributed by Andrew Salmon, 11-Jul-2011.) -/
theorem iotanul {ph : setvar → wff} :
  ⊦ wi (wn (weu (λ x3, ph x3))) (wceq (cio (λ x3, ph x3)) c0) :=
@sylnbi (weu (λ x3, ph x3)) (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wceq (cio (λ x3, ph x3)) c0)
  (@eu6 (λ x3, ph x3))
  (@syl5eq (wn (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (cio (λ x3, ph x3)) (cuni (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) c0
    (@dfiota2 (λ x3, ph x3))
    (@eqtrdi (wn (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (cuni (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (cuni c0) c0
      (@unieqd (wn (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) c0
        (@sylbir (wn (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (wal (λ z, wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (wceq (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) c0)
          (@alnex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))
          (@eqtr2id (wal (λ z, wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) c0 (cab (λ z, wn (wceq (cv z) (cv z)))) (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))
            dfnul2
            (@syl (wal (λ z, wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (wal (λ z, wb (wn (wceq (cv z) (cv z))) (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))) (wceq (cab (λ z, wn (wceq (cv z) (cv z)))) (cab (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))))
              (@alimi (λ z, wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (λ z, wb (wn (wceq (cv z) (cv z))) (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))
                (λ z, @con1bid (wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wceq (cv z) (cv z))
                  (@biimpi (wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wb (wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wceq (cv z) (cv z)))
                    (@tbt (wceq (cv z) (cv z)) (wn (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))
                      (@equid z)))))
              (@abbi1 (λ z, wn (wceq (cv z) (cv z))) (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))))))))
      uni0))


/-- Theorem 8.23 in [Quine] p. 58. This theorem proves the existence of the ` iota ` class under our
definition. (Contributed by Andrew Salmon, 11-Jul-2011.) -/
theorem iotaex {ph : setvar → wff} :
  ⊦ wcel (cio (λ x3, ph x3)) cvv :=
@pm2_61i (weu (λ x3, ph x3)) (wcel (cio (λ x3, ph x3)) cvv)
  (@«3imtr4i» (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wex (λ z, wceq (cv z) (cio (λ x3, ph x3)))) (weu (λ x3, ph x3)) (wcel (cio (λ x3, ph x3)) cvv)
    (@eximi (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (λ z, wceq (cv z) (cio (λ x3, ph x3)))
      (λ z, @eqcomd (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (cio (λ x3, ph x3)) (cv z)
        (@iotaval (λ x3 z, ph x3) z)))
    (@eu6 (λ x3, ph x3))
    (@isset (cio (λ x3, ph x3))))
  (@eqeltrdi (wn (weu (λ x3, ph x3))) (cio (λ x3, ph x3)) c0 cvv
    (@iotanul (λ x3, ph x3))
    «0ex»)


/-- Theorem *14.22 in [WhiteheadRussell] p. 190. (Contributed by Andrew Salmon, 12-Jul-2011.) -/
theorem iota4 {ph : setvar → wff} :
  ⊦ wi (weu (λ x3, ph x3)) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3))) :=
@sylbi (weu (λ x3, ph x3)) (wex (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z))))) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3)))
  (@eu6 (λ x3, ph x3))
  (@exlimiv (λ z, wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3)))
    (λ z, @mpbid (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wsb (λ x3, ph x3) z) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3)))
      (@sylibr (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wal (λ x3, wi (wceq (cv x3) (cv z)) (ph x3))) (wsb (λ x3, ph x3) z)
        (@alimi (λ x3, wb (ph x3) (wceq (cv x3) (cv z))) (λ x3, wi (wceq (cv x3) (cv z)) (ph x3))
          (λ x3, @biimpr (ph x3) (wceq (cv x3) (cv z))))
        (@sb6 (λ x3 z, ph x3) z))
      (@syl (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (wceq (cv z) (cio (λ x3, ph x3))) (wb (wsb (λ x3, ph x3) z) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3))))
        (@eqcomd (wal (λ x3, wb (ph x3) (wceq (cv x3) (cv z)))) (cio (λ x3, ph x3)) (cv z)
          (@iotaval (λ x3 z, ph x3) z))
        (setvar.forget $ λ x3 : setvar,
          show ⊦ wi (wceq (cv z) (cio (λ x3, ph x3))) (wb (wsb (λ x3, ph x3) z) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3)))), from
          @dfsbcq2 (λ x3, ph x3) z (λ x3, cio (λ x3, ph x3)) x3))))


/-- A method for computing iota. (Contributed by NM, 17-Sep-2013.) -/
theorem iota5 {ph : wff} {ps : setvar → wff} {A2 V : «class»}
  (iota5_1 : ∀ x3, ⊦ wi (wa ph (wcel A2 V)) (wb (ps x3) (wceq (cv x3) A2))) :
  ⊦ wi (wa ph (wcel A2 V)) (wceq (cio (λ x3, ps x3)) A2) :=
@mpd (wa ph (wcel A2 V)) (wal (λ x3, wb (ps x3) (wceq (cv x3) A2))) (wceq (cio (λ x3, ps x3)) A2)
  (@alrimiv (wa ph (wcel A2 V)) (λ x3, wb (ps x3) (wceq (cv x3) A2))
    (λ x3, iota5_1 x3))
  (@adantl (wcel A2 V) (wi (wal (λ x3, wb (ps x3) (wceq (cv x3) A2))) (wceq (cio (λ x3, ps x3)) A2)) ph
    (setvar.forget $ λ y : setvar,
      show ⊦ wi (wcel A2 V) (wi (wal (λ x3, wb (ps x3) (wceq (cv x3) A2))) (wceq (cio (λ x3, ps x3)) A2)), from
      @vtoclg (λ y, wi (wal (λ x3, wb (ps x3) (wceq (cv x3) (cv y)))) (wceq (cio (λ x3, ps x3)) (cv y))) (wi (wal (λ x3, wb (ps x3) (wceq (cv x3) A2))) (wceq (cio (λ x3, ps x3)) A2)) A2 (λ y, V)
        (λ y, @imbi12d (wceq (cv y) A2) (wal (λ x3, wb (ps x3) (wceq (cv x3) (cv y)))) (wal (λ x3, wb (ps x3) (wceq (cv x3) A2))) (wceq (cio (λ x3, ps x3)) (cv y)) (wceq (cio (λ x3, ps x3)) A2)
          (@albidv (wceq (cv y) A2) (λ x3, wb (ps x3) (wceq (cv x3) (cv y))) (λ x3, wb (ps x3) (wceq (cv x3) A2))
            (λ x3, @bibi2d (wceq (cv y) A2) (wceq (cv x3) (cv y)) (wceq (cv x3) A2) (ps x3)
              (@eqeq2 (cv y) A2 (cv x3))))
          (@eqeq2 (cv y) A2 (cio (λ x3, ps x3))))
        (λ y, @iotaval (λ x3 y, ps x3) y) y))


/-- Formula-building deduction for iota. (Contributed by NM, 20-Aug-2011.) -/
theorem iotabidv {ph : wff} {ps ch : setvar → wff}
  (iotabidv_1 : ∀ x3, ⊦ wi ph (wb (ps x3) (ch x3))) :
  ⊦ wi ph (wceq (cio (λ x3, ps x3)) (cio (λ x3, ch x3))) :=
@syl ph (wal (λ x3, wb (ps x3) (ch x3))) (wceq (cio (λ x3, ps x3)) (cio (λ x3, ch x3)))
  (@alrimiv ph (λ x3, wb (ps x3) (ch x3))
    (λ x3, iotabidv_1 x3))
  (@iotabi (λ x3, ps x3) (λ x3, ch x3))


/-- Formula-building deduction for iota. (Contributed by Mario Carneiro, 2-Oct-2015.) -/
theorem iotabii {ph ps : setvar → wff}
  (iotabii_1 : ∀ x3, ⊦ wb (ph x3) (ps x3)) :
  ⊦ wceq (cio (λ x3, ph x3)) (cio (λ x3, ps x3)) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wceq (cio (λ x3, ph x3)) (cio (λ x3, ps x3)), from
  @mpg (λ x3, wb (ph x3) (ps x3)) (λ x3, wceq (cio (λ x3, ph x3)) (cio (λ x3, ps x3)))
    (λ x3, @iotabi (λ x3, ph x3) (λ x3, ps x3))
    (λ x3, iotabii_1 x3) x3


/-- Membership law for descriptions. This can be useful for expanding an unbounded iota-based
definition (see ~ df-iota ). If you have a bounded iota-based definition, ~ riotacl2 may be useful.
(Contributed by Andrew Salmon, 1-Aug-2011.) -/
theorem iotacl {ph : setvar → wff} :
  ⊦ wi (weu (λ x3, ph x3)) (wcel (cio (λ x3, ph x3)) (cab (λ x3, ph x3))) :=
@sylib (weu (λ x3, ph x3)) (wsbc (λ x3, ph x3) (cio (λ x3, ph x3))) (wcel (cio (λ x3, ph x3)) (cab (λ x3, ph x3)))
  (@iota4 (λ x3, ph x3))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wb (wsbc (λ x3, ph x3) (cio (λ x3, ph x3))) (wcel (cio (λ x3, ph x3)) (cab (λ x3, ph x3))), from
    @df_sbc (λ x3, ph x3) (λ x3, cio (λ x3, ph x3)) x3)


/-- A condition that allows us to represent "the unique element such that ` ph ` " with a class
expression ` A ` . (Contributed by NM, 30-Dec-2014.) -/
theorem iota2df {ph ps ch : setvar → wff} {B2 V : setvar → «class»}
  (iota2df_1 : ∀ x3, ⊦ wi (ph x3) (wcel (B2 x3) (V x3)))
  (iota2df_2 : ∀ x3, ⊦ wi (ph x3) (weu (λ x3, ps x3)))
  (iota2df_3 : ∀ x3, ⊦ wi (wa (ph x3) (wceq (cv x3) (B2 x3))) (wb (ps x3) (ch x3)))
  (iota2df_4 : ⊦ wnf (λ x3, ph x3))
  (iota2df_5 : ∀ x3, ⊦ wi (ph x3) (wnf (λ x3, ch x3)))
  (iota2df_6 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wb (ch x3) (wceq (cio (λ x3, ps x3)) (B2 x3))) :=
@vtocldf (λ x3, ph x3) (λ x3, wb (ps x3) (wceq (cio (λ x3, ps x3)) (cv x3))) (λ x3, wb (ch x3) (wceq (cio (λ x3, ps x3)) (B2 x3))) (λ x3, B2 x3) (λ x3, V x3)
  (λ x3, iota2df_1 x3)
  (λ x3, @bibi12d (wa (ph x3) (wceq (cv x3) (B2 x3))) (ps x3) (ch x3) (wceq (cio (λ x3, ps x3)) (cv x3)) (wceq (cio (λ x3, ps x3)) (B2 x3))
    (iota2df_3 x3)
    (@eqeq2d (wa (ph x3) (wceq (cv x3) (B2 x3))) (cv x3) (B2 x3) (cio (λ x3, ps x3))
      (@simpr (ph x3) (wceq (cv x3) (B2 x3)))))
  (λ x3, @syl (ph x3) (weu (λ x3, ps x3)) (wb (ps x3) (wceq (cio (λ x3, ps x3)) (cv x3)))
    (iota2df_2 x3)
    (@iota1 (λ x3, ps x3) x3))
  iota2df_4
  (λ x3, iota2df_6 x3)
  (λ x3, @nfbid (λ x3, ph x3) (λ x3, ch x3) (λ x3, wceq (cio (λ x3, ps x3)) (B2 x3))
    (λ x3, iota2df_5 x3)
    (λ x3, @nfeqd (λ x3, ph x3) (λ x3, cio (λ x3, ps x3)) (λ x3, B2 x3)
      (λ x3, @a1i (wnfc (λ x3, cio (λ x3, ps x3))) (ph x3)
        (@nfiota1 (λ x3, ps x3)))
      (λ x3, iota2df_6 x3) x3) x3) x3


/-- The unique element such that ` ph ` . (Contributed by Jeff Madsen, 1-Jun-2011.) (Revised by
Mario Carneiro, 23-Dec-2016.) -/
theorem iota2 {ph : setvar → wff} {ps : wff} {A2 : «class»} {B2 : setvar → «class»}
  (iota2_1 : ∀ x3, ⊦ wi (wceq (cv x3) A2) (wb (ph x3) ps))
  (x3 : setvar) : ⊦ wi (wa (wcel A2 (B2 x3)) (weu (λ x3, ph x3))) (wb ps (wceq (cio (λ x3, ph x3)) A2)) :=
@sylan (wcel A2 (B2 x3)) (wcel A2 cvv) (weu (λ x3, ph x3)) (wb ps (wceq (cio (λ x3, ph x3)) A2))
  (@elex A2 (B2 x3))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wi (wa (wcel A2 cvv) (weu (λ x3, ph x3))) (wb ps (wceq (cio (λ x3, ph x3)) A2)), from
    @iota2df (λ x3, wa (wcel A2 cvv) (weu (λ x3, ph x3))) (λ x3, ph x3) (λ x3, ps) (λ x3, A2) (λ x3, cvv)
      (λ x3, @simpl (wcel A2 cvv) (weu (λ x3, ph x3)))
      (λ x3, @simpr (wcel A2 cvv) (weu (λ x3, ph x3)))
      (λ x3, @adantl (wceq (cv x3) A2) (wb (ph x3) ps) (wa (wcel A2 cvv) (weu (λ x3, ph x3)))
        (iota2_1 x3))
      (@nfan (λ x3, wcel A2 cvv) (λ x3, weu (λ x3, ph x3))
        (@nfv (wcel A2 cvv))
        (@nfeu1 (λ x3, ph x3)))
      (λ x3, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wa (wcel A2 cvv) (weu (λ x3, ph x3))) (wnf (λ x3, ps)), from
        @nfvd (λ x3, wa (wcel A2 cvv) (weu (λ x3, ph x3))) ps x3)
      (λ x3, setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wa (wcel A2 cvv) (weu (λ x3, ph x3))) (wnfc (λ x3, A2)), from
        @nfcvd (λ x3, wa (wcel A2 cvv) (weu (λ x3, ph x3))) A2 x3) x3)


/-- Class substitution within a description binder. (Contributed by Scott Fenton, 6-Oct-2017.)
(Revised by NM, 23-Aug-2018.) -/
theorem csbiota {ph : setvar → setvar → wff} {A2 : setvar → «class»}
  (x3 : setvar) : ⊦ wceq (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) :=
@pm2_61i (wcel (A2 x3) cvv) (wceq (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3))))
  (setvar.forget $ λ z : setvar,
    show ⊦ wi (wcel (A2 x3) cvv) (wceq (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))), from
    @vtoclg (λ z, wceq (csb (cv z) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsb (λ x3, ph x3 y) z))) (wceq (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (A2 x3) (λ z, cvv)
      (λ z, @eqeq12d (wceq (cv z) (A2 x3)) (csb (cv z) (λ x3, cio (λ y, ph x3 y))) (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsb (λ x3, ph x3 y) z)) (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))
        (@csbeq1 (λ x3, cv z) (λ x3, A2 x3) (λ x3, cio (λ y, ph x3 y)) x3)
        (@iotabidv (wceq (cv z) (A2 x3)) (λ y, wsb (λ x3, ph x3 y) z) (λ y, wsbc (λ x3, ph x3 y) (A2 x3))
          (λ y, @dfsbcq2 (λ x3, ph x3 y) z (λ x3, A2 x3) x3)))
      (λ z, setvar.forget $ λ x3 : setvar,
        show ⊦ wceq (csb (cv z) (λ x3, cio (λ y, ph x3 y))) (cio (λ y, wsb (λ x3, ph x3 y) z)), from
        @csbief (cv z) (λ x3, cio (λ y, ph x3 y)) (λ x3, cio (λ y, wsb (λ x3, ph x3 y) z))
          (@vex z)
          (@nfiotaw (λ x3 y, wsb (λ x3, ph x3 y) z)
            (λ y, @nfs1v (λ x3 z, ph x3 y) z))
          (λ x3, @iotabidv (wceq (cv x3) (cv z)) (λ y, ph x3 y) (λ y, wsb (λ x3, ph x3 y) z)
            (λ y, @sbequ12 (λ x3 z, ph x3 y) x3 z)) x3) z)
  (@eqtr4d (wn (wcel (A2 x3) cvv)) (csb (A2 x3) (λ x3, cio (λ y, ph x3 y))) c0 (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))
    (@csbprc (λ x3, A2 x3) (λ x3, cio (λ y, ph x3 y)) x3)
    (@«3syl» (wn (wcel (A2 x3) cvv)) (wn (wex (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wn (weu (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))) (wceq (cio (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) c0)
      (@nexdv (wn (wcel (A2 x3) cvv)) (λ y, wsbc (λ x3, ph x3 y) (A2 x3))
        (λ y, @con3i (wsbc (λ x3, ph x3 y) (A2 x3)) (wcel (A2 x3) cvv)
          (@sbcex (λ x3, ph x3 y) (λ x3, A2 x3) x3)))
      (@con3i (weu (λ y, wsbc (λ x3, ph x3 y) (A2 x3))) (wex (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))
        (@euex (λ y, wsbc (λ x3, ph x3 y) (A2 x3))))
      (@iotanul (λ y, wsbc (λ x3, ph x3 y) (A2 x3)))))


-- /-- Extend the definition of a wff to include the function predicate. (Read: ` A ` is a
-- function.) -/
-- constant wfun : «class» → wff


-- /-- Extend the definition of a wff to include the function predicate with a domain. (Read: ` A `
-- is a function on ` B ` .) -/
-- constant wfn : «class» → «class» → wff


-- /-- Extend the definition of a wff to include the function predicate with domain and codomain.
-- (Read: ` F ` maps ` A ` into ` B ` .) -/
-- constant wf : «class» → «class» → «class» → wff


-- /-- Extend the definition of a wff to include one-to-one functions. (Read: ` F ` maps ` A `
-- one-to-one into ` B ` .) The notation ("1-1" above the arrow) is from Definition 6.15(5) of
-- [TakeutiZaring] p. 27. -/
-- constant wf1 : «class» → «class» → «class» → wff


-- /-- Extend the definition of a wff to include onto functions. (Read: ` F ` maps ` A ` onto ` B `
-- .) The notation ("onto" below the arrow) is from Definition 6.15(4) of [TakeutiZaring] p. 27. -/
-- constant wfo : «class» → «class» → «class» → wff


-- /-- Extend the definition of a wff to include one-to-one onto functions. (Read: ` F ` maps ` A `
-- one-to-one onto ` B ` .) The notation ("1-1" above the arrow and "onto" below the arrow) is from
-- Definition 6.15(6) of [TakeutiZaring] p. 27. -/
-- constant wf1o : «class» → «class» → «class» → wff


-- /-- Extend the definition of a class to include the value of a function. Read: "the value of ` F
-- ` at ` A ` ", or " ` F ` of ` A ` ". -/
-- constant cfv : «class» → «class» → «class»


-- /-- Extend the definition of a wff to include the isomorphism property. Read: " ` H ` is an ` R `
-- , ` S ` isomorphism of ` A ` onto ` B ` ". -/
-- constant wiso : «class» → «class» → «class» → «class» → «class» → wff


-- /-- Define predicate that determines if some class ` A ` is a function. Definition 10.1 of
-- [Quine] p. 65. For example, the expression ` Fun cos ` is true once we define cosine ( ~ df-cos
-- ). This is not the same as defining a specific function's mapping, which is typically done using
-- the format of ~ cmpt with the maps-to notation (see ~ df-mpt and ~ df-mpo ). Contrast this
-- predicate with the predicates to determine if some class is a function with a given domain ( ~
-- df-fn ), a function with a given domain and codomain ( ~ df-f ), a one-to-one function ( ~ df-f1
-- ), an onto function ( ~ df-fo ), or a one-to-one onto function ( ~ df-f1o ). For alternate
-- definitions, see ~ dffun2 , ~ dffun3 , ~ dffun4 , ~ dffun5 , ~ dffun6 , ~ dffun7 , ~ dffun8 , and
-- ~ dffun9 . (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_fun {A2 : «class»} : ⊦ wb (wfun A2) (wa (wrel A2) (wss (ccom A2 (ccnv A2)) cid))


-- /-- Define a function with domain. Definition 6.15(1) of [TakeutiZaring] p. 27. For alternate
-- definitions, see ~ dffn2 , ~ dffn3 , ~ dffn4 , and ~ dffn5 . (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_fn {A2 B2 : «class»} : ⊦ wb (wfn A2 B2) (wa (wfun A2) (wceq (cdm A2) B2))


-- /-- Define a function (mapping) with domain and codomain. Definition 6.15(3) of [TakeutiZaring]
-- p. 27. ` F : A --> B ` can be read as " ` F ` is a function from ` A ` to ` B ` ". For alternate
-- definitions, see ~ dff2 , ~ dff3 , and ~ dff4 . (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_f {A2 B2 F : «class»} : ⊦ wb (wf A2 B2 F) (wa (wfn F A2) (wss (crn F) B2))


-- /-- Define a one-to-one function. For equivalent definitions see ~ dff12 and ~ dff13 . Compare
-- Definition 6.15(5) of [TakeutiZaring] p. 27. We use their notation ("1-1" above the arrow). A
-- one-to-one function is also called an "injection" or an "injective function", ` F : A -1-1-> B `
-- can be read as " ` F ` is an injection from ` A ` into ` B ` ". Injections are precisely the
-- monomorphisms in the category ` SetCat ` of sets and set functions, see ~ setcmon . (Contributed
-- by NM, 1-Aug-1994.) -/
-- axiom df_f1 {A2 B2 F : «class»} : ⊦ wb (wf1 A2 B2 F) (wa (wf A2 B2 F) (wfun (ccnv F)))


-- /-- Define an onto function. Definition 6.15(4) of [TakeutiZaring] p. 27. We use their notation
-- ("onto" under the arrow). For alternate definitions, see ~ dffo2 , ~ dffo3 , ~ dffo4 , and ~
-- dffo5 . An onto function is also called a "surjection" or a "surjective function", ` F : A
-- -onto-> B ` can be read as " ` F ` is a surjection from ` A ` onto ` B ` ". Surjections are
-- precisely the epimorphisms in the category ` SetCat ` of sets and set functions, see ~ setcepi .
-- (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_fo {A2 B2 F : «class»} : ⊦ wb (wfo A2 B2 F) (wa (wfn F A2) (wceq (crn F) B2))


-- /-- Define a one-to-one onto function. For equivalent definitions see ~ dff1o2 , ~ dff1o3 , ~
-- dff1o4 , and ~ dff1o5 . Compare Definition 6.15(6) of [TakeutiZaring] p. 27. We use their
-- notation ("1-1" above the arrow and "onto" below the arrow). A one-to-one onto function is also
-- called a "bijection" or a "bijective function", ` F : A -1-1-onto-> B ` can be read as " ` F ` is
-- a bijection between ` A ` and ` B ` ". Bijections are precisely the isomorphisms in the category
-- ` SetCat ` of sets and set functions, see ~ setciso . Therefore, two sets are called "isomorphic"
-- if there is a bijection between them. According to ~ isof1oidb , two sets are isomorphic iff
-- there is an isomorphism ` Isom ` regarding the identity relation. In this case, the two sets are
-- also "equinumerous", see ~ bren . (Contributed by NM, 1-Aug-1994.) -/
-- axiom df_f1o {A2 B2 F : «class»} : ⊦ wb (wf1o A2 B2 F) (wa (wf1 A2 B2 F) (wfo A2 B2 F))


-- /-- Define the value of a function, ` ( F `` A ) ` , also known as function application. For
-- example, ` ( cos `` 0 ) = 1 ` (we prove this in ~ cos0 after we define cosine in ~ df-cos ).
-- Typically, function ` F ` is defined using maps-to notation (see ~ df-mpt and ~ df-mpo ), but
-- this is not required. For example, ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> ( F `` 3 ) = 9 ` ( ~
-- ex-fv ). Note that ~ df-ov will define two-argument functions using ordered pairs as ` ( A F B )
-- = ( F `` <. A , B >. ) ` . This particular definition is quite convenient: it can be applied to
-- any class and evaluates to the empty set when it is not meaningful (as shown by ~ ndmfv and ~
-- fvprc ). The left apostrophe notation originated with Peano and was adopted in Definition *30.01
-- of [WhiteheadRussell] p. 235, Definition 10.11 of [Quine] p. 68, and Definition 6.11 of
-- [TakeutiZaring] p. 26. It means the same thing as the more familiar ` F ( A ) ` notation for a
-- function's value at ` A ` , i.e., " ` F ` of ` A ` ", but without context-dependent notational
-- ambiguity. Alternate definitions are ~ dffv2 , ~ dffv3 , ~ fv2 , and ~ fv3 (the latter two
-- previously required ` A ` to be a set.) Restricted equivalents that require ` F ` to be a
-- function are shown in ~ funfv and ~ funfv2 . For the familiar definition of function value in
-- terms of ordered pair membership, see ~ funopfvb . (Contributed by NM, 1-Aug-1994.) Revised to
-- use ` iota ` . Original version is now Theorem ~ dffv4 . (Revised by Scott Fenton, 6-Oct-2017.)
-- -/
-- axiom df_fv {A2 F : «class»} : ⊦ wceq (cfv A2 F) (cio (λ x3, wbr A2 (cv x3) F))


-- /-- Define the isomorphism predicate. We read this as " ` H ` is an ` R ` , ` S ` isomorphism of
-- ` A ` onto ` B ` ". Normally, ` R ` and ` S ` are ordering relations on ` A ` and ` B `
-- respectively. Definition 6.28 of [TakeutiZaring] p. 32, whose notation is the same as ours except
-- that ` R ` and ` S ` are subscripts. (Contributed by NM, 4-Mar-1997.) -/
-- axiom df_isom {A2 B2 R S H : «class»} : ⊦ wb (wiso A2 B2 R S H) (wa (wf1o A2 B2 H) (wral (λ x3, wral (λ y, wb (wbr (cv x3) (cv y) R) (wbr (cfv (cv x3) H) (cfv (cv y) H) S)) (λ y, A2)) (λ x3, A2)))


/-- Alternate definition of a function. (Contributed by NM, 29-Dec-1996.) -/
theorem dffun2 {A2 : «class»} :
  ⊦ wb (wfun A2) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))))) :=
@bitri (wfun A2) (wa (wrel A2) (wss (ccom A2 (ccnv A2)) cid)) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))))
  (@df_fun A2)
  (@anbi2i (wss (ccom A2 (ccnv A2)) cid) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))) (wrel A2)
    (@«3bitri» (wss (ccom A2 (ccnv A2)) cid) (wal (λ y, wal (λ z, wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z))))) (wal (λ y, wal (λ x3, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))))
      (@«3bitri» (wss (ccom A2 (ccnv A2)) cid) (wss (ccom A2 (ccnv A2)) (copab (λ y z, wceq (cv y) (cv z)))) (wss (copab (λ y z, wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2)))) (copab (λ y z, wceq (cv y) (cv z)))) (wal (λ y, wal (λ z, wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z)))))
        (@sseq2i cid (copab (λ y z, wceq (cv y) (cv z))) (ccom A2 (ccnv A2))
          df_id)
        (@sseq1i (ccom A2 (ccnv A2)) (copab (λ y z, wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2)))) (copab (λ y z, wceq (cv y) (cv z)))
          (@df_co A2 (ccnv A2)))
        (@ssopab2bw (λ y z, wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (λ y z, wceq (cv y) (cv z))))
      (@albii (λ y, wal (λ z, wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z)))) (λ y, wal (λ x3, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))
        (λ y, @bitri (wal (λ z, wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z)))) (wal (λ z, wal (λ x3, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))) (wal (λ x3, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))
          (@albii (λ z, wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z))) (λ z, wal (λ x3, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))
            (λ z, @bitr4i (wi (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z))) (wi (wex (λ x3, wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z))) (wal (λ x3, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))
              (@imbi1i (wex (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2))) (wex (λ x3, wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2))) (wceq (cv y) (cv z))
                (@exbii (λ x3, wa (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv z) A2)) (λ x3, wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2))
                  (λ x3, @anbi1i (wbr (cv y) (cv x3) (ccnv A2)) (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)
                    (@brcnv (cv y) (cv x3) A2
                      (@vex y)
                      (@vex x3)))))
              (@«19_23v» (λ x3, wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))
          (@alcom (λ z x3, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))))
      (@alcom (λ y x3, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))))


/-- Alternate definition of function. (Contributed by NM, 29-Dec-1996.) -/
theorem dffun3 {A2 : «class»} :
  ⊦ wb (wfun A2) (wa (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z))))))) :=
@bitri (wfun A2) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))))) (wa (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))))))
  (@dffun2 A2)
  (@anbi2i (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))) (wal (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))))) (wrel A2)
    (@albii (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))) (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))))
      (λ x3, @bitr3i (wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))) (wmo (λ y, wbr (cv x3) (cv y) A2)) (wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))))
        (@mo4 (λ y, wbr (cv x3) (cv y) A2) (λ z, wbr (cv x3) (cv z) A2)
          (λ y z, @breq2 (cv y) (cv z) (cv x3) A2))
        (@df_mo (λ y, wbr (cv x3) (cv y) A2)))))


/-- Alternate definition of a function. Definition 6.4(4) of [TakeutiZaring] p. 24. (Contributed by
NM, 29-Dec-1996.) -/
theorem dffun4 {A2 : «class»} :
  ⊦ wb (wfun A2) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z))))))) :=
@bitri (wfun A2) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))))))) (wa (wrel A2) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z)))))))
  (@dffun2 A2)
  (@anbi2i (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))))) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z)))))) (wrel A2)
    (@«2albii» (λ x3 y, wal (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z)))) (λ x3 y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z))))
      (λ x3 y, @albii (λ z, wi (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wceq (cv y) (cv z))) (λ z, wi (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z)))
        (λ z, @imbi1i (wa (wbr (cv x3) (cv y) A2) (wbr (cv x3) (cv z) A2)) (wa (wcel (cop (cv x3) (cv y)) A2) (wcel (cop (cv x3) (cv z)) A2)) (wceq (cv y) (cv z))
          (@anbi12i (wbr (cv x3) (cv y) A2) (wcel (cop (cv x3) (cv y)) A2) (wbr (cv x3) (cv z) A2) (wcel (cop (cv x3) (cv z)) A2)
            (@df_br (cv x3) (cv y) A2)
            (@df_br (cv x3) (cv z) A2))))))


/-- Alternate definition of function. (Contributed by NM, 29-Dec-1996.) -/
theorem dffun5 {A2 : «class»} :
  ⊦ wb (wfun A2) (wa (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z))))))) :=
@bitri (wfun A2) (wa (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z))))))) (wa (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))))))
  (@dffun3 A2)
  (@anbi2i (wal (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))))) (wal (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))))) (wrel A2)
    (@albii (λ x3, wex (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z))))) (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))))
      (λ x3, @exbii (λ z, wal (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z)))) (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z))))
        (λ z, @albii (λ y, wi (wbr (cv x3) (cv y) A2) (wceq (cv y) (cv z))) (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))
          (λ y, @imbi1i (wbr (cv x3) (cv y) A2) (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z))
            (@df_br (cv x3) (cv y) A2))))))


/-- Definition of function, using bound-variable hypotheses instead of distinct variable conditions.
(Contributed by NM, 9-Mar-1995.) (Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem dffun6f {A2 : setvar → setvar → «class»}
  (dffun6f_1 : ∀ y, ⊦ wnfc (λ x3, A2 x3 y))
  (dffun6f_2 : ∀ x3, ⊦ wnfc (λ y, A2 x3 y))
  (x3 y : setvar) : ⊦ wb (wfun (A2 x3 y)) (wa (wrel (A2 x3 y)) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y))))) :=
@bitr4i (wfun (A2 x3 y)) (wa (wrel (A2 x3 y)) (wal (λ w, wex (λ u, wal (λ v, wi (wbr (cv w) (cv v) (A2 x3 y)) (wceq (cv v) (cv u))))))) (wa (wrel (A2 x3 y)) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y)))))
  (@dffun3 (A2 x3 y))
  (@anbi2i (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y)))) (wal (λ w, wex (λ u, wal (λ v, wi (wbr (cv w) (cv v) (A2 x3 y)) (wceq (cv v) (cv u)))))) (wrel (A2 x3 y))
    (@«3bitr3ri» (wal (λ w, wmo (λ v, wbr (cv w) (cv v) (A2 x3 y)))) (wal (λ w, wmo (λ y, wbr (cv w) (cv y) (A2 x3 y)))) (wal (λ w, wex (λ u, wal (λ v, wi (wbr (cv w) (cv v) (A2 x3 y)) (wceq (cv v) (cv u)))))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y))))
      (@albii (λ w, wmo (λ v, wbr (cv w) (cv v) (A2 x3 y))) (λ w, wmo (λ y, wbr (cv w) (cv y) (A2 x3 y)))
        (λ w, setvar.forget $ λ v : setvar,
          show ⊦ wb (wmo (λ v, wbr (cv w) (cv v) (A2 x3 y))) (wmo (λ y, wbr (cv w) (cv y) (A2 x3 y))), from
          @cbvmow (λ v y, wbr (cv w) (cv v) (A2 x3 y)) (λ v y, wbr (cv w) (cv y) (A2 x3 y))
            (λ v, @nfbr (λ y, cv w) (λ y, cv v) (λ y, A2 x3 y)
              (@nfcv (cv w))
              (dffun6f_2 x3)
              (@nfcv (cv v)))
            (λ y, @nfv (wbr (cv w) (cv y) (A2 x3 y)))
            (λ v y, @breq2 (cv v) (cv y) (cv w) (A2 x3 y)) v y))
      (@albii (λ w, wmo (λ v, wbr (cv w) (cv v) (A2 x3 y))) (λ w, wex (λ u, wal (λ v, wi (wbr (cv w) (cv v) (A2 x3 y)) (wceq (cv v) (cv u)))))
        (λ w, @df_mo (λ v, wbr (cv w) (cv v) (A2 x3 y))))
      (setvar.forget $ λ w : setvar,
        show ⊦ wb (wal (λ w, wmo (λ y, wbr (cv w) (cv y) (A2 x3 y)))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y)))), from
        @cbvalv1 (λ w x3, wmo (λ y, wbr (cv w) (cv y) (A2 x3 y))) (λ w x3, wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y)))
          (λ w, @nfmov (λ x3 y, wbr (cv w) (cv y) (A2 x3 y))
            (λ y, @nfbr (λ x3, cv w) (λ x3, cv y) (λ x3, A2 x3 y)
              (@nfcv (cv w))
              (dffun6f_1 y)
              (@nfcv (cv y))))
          (λ x3, @nfv (wmo (λ y, wbr (cv x3) (cv y) (A2 x3 y))))
          (λ w x3, @mobidv (wceq (cv w) (cv x3)) (λ y, wbr (cv w) (cv y) (A2 x3 y)) (λ y, wbr (cv x3) (cv y) (A2 x3 y))
            (λ y, @breq1 (cv w) (cv x3) (cv y) (A2 x3 y))) w x3)))


/-- Alternate definition of a function using "at most one" notation. (Contributed by NM,
9-Mar-1995.) -/
theorem dffun6 {F : «class»} :
  ⊦ wb (wfun F) (wa (wrel F) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)))) :=
setvar.forget $ λ x3 : setvar,
  setvar.forget $ λ y : setvar,
  show ⊦ wb (wfun F) (wa (wrel F) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)))), from
  @dffun6f (λ x3 y, F)
    (λ y, @nfcv F)
    (λ x3, @nfcv F) x3 y


/-- A function has at most one value for each argument. (Contributed by NM, 24-May-1998.) -/
theorem funmo {A2 F : «class»} :
  ⊦ wi (wfun F) (wmo (λ y, wbr A2 (cv y) F)) :=
@sylc (wfun F) (wal (λ y, wi (wbr A2 (cv y) F) (wa (wcel A2 cvv) (wbr A2 (cv y) F)))) (wmo (λ y, wa (wcel A2 cvv) (wbr A2 (cv y) F))) (wmo (λ y, wbr A2 (cv y) F))
  (@alrimiv (wfun F) (λ y, wi (wbr A2 (cv y) F) (wa (wcel A2 cvv) (wbr A2 (cv y) F)))
    (λ y, @ancrd (wfun F) (wbr A2 (cv y) F) (wcel A2 cvv)
      (@syl (wfun F) (wrel F) (wi (wbr A2 (cv y) F) (wcel A2 cvv))
        (@simplbi (wfun F) (wrel F) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)))
          (@dffun6 F))
        (@ex (wrel F) (wbr A2 (cv y) F) (wcel A2 cvv)
          (@brrelex1 A2 (cv y) F)))))
  (@sylibr (wfun F) (wi (wcel A2 cvv) (wmo (λ y, wbr A2 (cv y) F))) (wmo (λ y, wa (wcel A2 cvv) (wbr A2 (cv y) F)))
    (@com12 (wcel A2 cvv) (wfun F) (wmo (λ y, wbr A2 (cv y) F))
      (setvar.forget $ λ x3 : setvar,
        show ⊦ wi (wcel A2 cvv) (wi (wfun F) (wmo (λ y, wbr A2 (cv y) F))), from
        @vtoclg (λ x3, wi (wfun F) (wmo (λ y, wbr (cv x3) (cv y) F))) (wi (wfun F) (wmo (λ y, wbr A2 (cv y) F))) A2 (λ x3, cvv)
          (λ x3, @imbi2d (wceq (cv x3) A2) (wmo (λ y, wbr (cv x3) (cv y) F)) (wmo (λ y, wbr A2 (cv y) F)) (wfun F)
            (@mobidv (wceq (cv x3) A2) (λ y, wbr (cv x3) (cv y) F) (λ y, wbr A2 (cv y) F)
              (λ y, @breq1 (cv x3) A2 (cv y) F)))
          (λ x3, @«19_21bi» (λ x3, wfun F) (λ x3, wmo (λ y, wbr (cv x3) (cv y) F))
            (λ x3, @simprbi (wfun F) (wrel F) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)))
              (@dffun6 F)) x3) x3))
    (@moanimv (wcel A2 cvv) (λ y, wbr A2 (cv y) F)))
  (@moim (λ y, wbr A2 (cv y) F) (λ y, wa (wcel A2 cvv) (wbr A2 (cv y) F)))


/-- A function is a relation. (Contributed by NM, 1-Aug-1994.) -/
theorem funrel {A2 : «class»} :
  ⊦ wi (wfun A2) (wrel A2) :=
@simplbi (wfun A2) (wrel A2) (wss (ccom A2 (ccnv A2)) cid)
  (@df_fun A2)


/-- Subclass theorem for function predicate. (Contributed by NM, 16-Aug-1994.) (Proof shortened by
Mario Carneiro, 24-Jun-2014.) -/
theorem funss {A2 B2 : «class»} :
  ⊦ wi (wss A2 B2) (wi (wfun B2) (wfun A2)) :=
@«3imtr4g» (wss A2 B2) (wa (wrel B2) (wss (ccom B2 (ccnv B2)) cid)) (wa (wrel A2) (wss (ccom A2 (ccnv A2)) cid)) (wfun B2) (wfun A2)
  (@anim12d (wss A2 B2) (wrel B2) (wrel A2) (wss (ccom B2 (ccnv B2)) cid) (wss (ccom A2 (ccnv A2)) cid)
    (@relss A2 B2)
    (@syl (wss A2 B2) (wss (ccom A2 (ccnv A2)) (ccom B2 (ccnv B2))) (wi (wss (ccom B2 (ccnv B2)) cid) (wss (ccom A2 (ccnv A2)) cid))
      (@sstrd (wss A2 B2) (ccom A2 (ccnv A2)) (ccom B2 (ccnv A2)) (ccom B2 (ccnv B2))
        (@coss1 A2 B2 (ccnv A2))
        (@syl (wss A2 B2) (wss (ccnv A2) (ccnv B2)) (wss (ccom B2 (ccnv A2)) (ccom B2 (ccnv B2)))
          (@cnvss A2 B2)
          (@coss2 (ccnv A2) (ccnv B2) B2)))
      (@sstr2 (ccom A2 (ccnv A2)) (ccom B2 (ccnv B2)) cid)))
  (@df_fun B2)
  (@df_fun A2)


/-- Equality theorem for function predicate. (Contributed by NM, 16-Aug-1994.) -/
theorem funeq {A2 B2 : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wfun A2) (wfun B2)) :=
@impbid (wceq A2 B2) (wfun A2) (wfun B2)
  (@syl (wceq A2 B2) (wss B2 A2) (wi (wfun A2) (wfun B2))
    (@eqimss2 B2 A2)
    (@funss B2 A2))
  (@syl (wceq A2 B2) (wss A2 B2) (wi (wfun B2) (wfun A2))
    (@eqimss A2 B2)
    (@funss A2 B2))


/-- Equality inference for the function predicate. (Contributed by Jonathan Ben-Naim, 3-Jun-2011.)
-/
theorem funeqi {A2 B2 : «class»}
  (funeqi_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wfun A2) (wfun B2) :=
@ax_mp (wceq A2 B2) (wb (wfun A2) (wfun B2))
  funeqi_1
  (@funeq A2 B2)


/-- Equality deduction for the function predicate. (Contributed by NM, 23-Feb-2013.) -/
theorem funeqd {ph : wff} {A2 B2 : «class»}
  (funeqd_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wfun A2) (wfun B2)) :=
@syl ph (wceq A2 B2) (wb (wfun A2) (wfun B2))
  funeqd_1
  (@funeq A2 B2)


/-- Bound-variable hypothesis builder for a function. (Contributed by NM, 30-Jan-2004.) -/
theorem nffun {F : setvar → «class»}
  (nffun_1 : ⊦ wnfc (λ x3, F x3)) :
  ⊦ wnf (λ x3, wfun (F x3)) :=
@nfxfr (λ x3, wfun (F x3)) (λ x3, wa (wrel (F x3)) (wss (ccom (F x3) (ccnv (F x3))) cid))
  (λ x3, @df_fun (F x3))
  (@nfan (λ x3, wrel (F x3)) (λ x3, wss (ccom (F x3) (ccnv (F x3))) cid)
    (@nfrel (λ x3, F x3)
      nffun_1)
    (@nfss (λ x3, ccom (F x3) (ccnv (F x3))) (λ x3, cid)
      (@nfco (λ x3, F x3) (λ x3, ccnv (F x3))
        nffun_1
        (@nfcnv (λ x3, F x3)
          nffun_1))
      (@nfcv cid)))


/-- There is exactly one value of a function. (Contributed by NM, 22-Apr-2004.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem funeu {A2 : «class»} {B2 : setvar → «class»} {F : «class»}
  (y : setvar) : ⊦ wi (wa (wfun F) (wbr A2 (B2 y) F)) (weu (λ y, wbr A2 (cv y) F)) :=
@mpd (wa (wfun F) (wbr A2 (B2 y) F)) (wex (λ y, wbr A2 (cv y) F)) (weu (λ y, wbr A2 (cv y) F))
  (@syl (wa (wfun F) (wbr A2 (B2 y) F)) (wcel A2 (cdm F)) (wex (λ y, wbr A2 (cv y) F))
    (@sylan (wfun F) (wrel F) (wbr A2 (B2 y) F) (wcel A2 (cdm F))
      (@funrel F)
      (@releldm A2 (B2 y) F))
    (@ibi (wcel A2 (cdm F)) (wex (λ y, wbr A2 (cv y) F))
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wcel A2 (cdm F)) (wb (wcel A2 (cdm F)) (wex (λ y, wbr A2 (cv y) F))), from
        @eldmg A2 F (λ y, cdm F) y)))
  (@sylib (wa (wfun F) (wbr A2 (B2 y) F)) (wmo (λ y, wbr A2 (cv y) F)) (wi (wex (λ y, wbr A2 (cv y) F)) (weu (λ y, wbr A2 (cv y) F)))
    (@adantr (wfun F) (wmo (λ y, wbr A2 (cv y) F)) (wbr A2 (B2 y) F)
      (@funmo A2 F))
    (@moeu (λ y, wbr A2 (cv y) F)))


/-- There is exactly one value of a function. (Contributed by NM, 3-Aug-1994.) -/
theorem funeu2 {A2 : «class»} {B2 : setvar → «class»} {F : «class»}
  (y : setvar) : ⊦ wi (wa (wfun F) (wcel (cop A2 (B2 y)) F)) (weu (λ y, wcel (cop A2 (cv y)) F)) :=
@sylan2br (wcel (cop A2 (B2 y)) F) (wfun F) (wbr A2 (B2 y) F) (weu (λ y, wcel (cop A2 (cv y)) F))
  (@df_br A2 (B2 y) F)
  (@sylib (wa (wfun F) (wbr A2 (B2 y) F)) (weu (λ y, wbr A2 (cv y) F)) (weu (λ y, wcel (cop A2 (cv y)) F))
    (@funeu A2 (λ y, B2 y) F y)
    (@eubii (λ y, wbr A2 (cv y) F) (λ y, wcel (cop A2 (cv y)) F)
      (λ y, @df_br A2 (cv y) F)))


/-- Alternate definition of a function. One possibility for the definition of a function in
[Enderton] p. 42. (Enderton's definition is ambiguous because "there is only one" could mean either
"there is at most one" or "there is exactly one." However, ~ dffun8 shows that it doesn't matter
which meaning we pick.) (Contributed by NM, 4-Nov-2002.) -/
theorem dffun7 {A2 : «class»} :
  ⊦ wb (wfun A2) (wa (wrel A2) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, cdm A2))) :=
@bitri (wfun A2) (wa (wrel A2) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)))) (wa (wrel A2) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, cdm A2)))
  (@dffun6 A2)
  (@anbi2i (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2))) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, cdm A2)) (wrel A2)
    (@bitr4i (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2))) (wal (λ x3, wi (wcel (cv x3) (cdm A2)) (wmo (λ y, wbr (cv x3) (cv y) A2)))) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, cdm A2))
      (@albii (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, wi (wcel (cv x3) (cdm A2)) (wmo (λ y, wbr (cv x3) (cv y) A2)))
        (λ x3, @bitr4i (wmo (λ y, wbr (cv x3) (cv y) A2)) (wi (wex (λ y, wbr (cv x3) (cv y) A2)) (wmo (λ y, wbr (cv x3) (cv y) A2))) (wi (wcel (cv x3) (cdm A2)) (wmo (λ y, wbr (cv x3) (cv y) A2)))
          (@moabs (λ y, wbr (cv x3) (cv y) A2))
          (@imbi1i (wcel (cv x3) (cdm A2)) (wex (λ y, wbr (cv x3) (cv y) A2)) (wmo (λ y, wbr (cv x3) (cv y) A2))
            (@eldm (cv x3) A2
              (@vex x3)))))
      (@df_ral (λ x3, wmo (λ y, wbr (cv x3) (cv y) A2)) (λ x3, cdm A2))))


/-- A class is a function if and only if it is a function on its domain. (Contributed by NM,
13-Aug-2004.) -/
theorem funfn {A2 : «class»} :
  ⊦ wb (wfun A2) (wfn A2 (cdm A2)) :=
@bitr4i (wfun A2) (wa (wfun A2) (wceq (cdm A2) (cdm A2))) (wfn A2 (cdm A2))
  (@biantru (wceq (cdm A2) (cdm A2)) (wfun A2)
    (@eqid (cdm A2)))
  (@df_fn A2 (cdm A2))


/-- A function is a function on its domain. (Contributed by Glauco Siliprandi, 23-Oct-2021.) -/
theorem funfnd {ph : wff} {A2 : «class»}
  (funfnd_1 : ⊦ wi ph (wfun A2)) :
  ⊦ wi ph (wfn A2 (cdm A2)) :=
@sylib ph (wfun A2) (wfn A2 (cdm A2))
  funfnd_1
  (@funfn A2)


/-- The identity relation is a function. Part of Theorem 10.4 of [Quine] p. 65. See also ~ idfn .
(Contributed by NM, 30-Apr-1998.) -/
theorem funi :
  ⊦ wfun cid :=
@mpbir2an (wfun cid) (wrel cid) (wss (ccom cid (ccnv cid)) cid)
  reli
  (@eqimssi (ccom cid (ccnv cid)) cid
    (@eqtri (ccom cid (ccnv cid)) (ccnv cid) cid
      (@ax_mp (wrel (ccnv cid)) (wceq (ccom cid (ccnv cid)) (ccnv cid))
        (@relcnv cid)
        (@coi2 (ccnv cid)))
      cnvi))
  (@df_fun cid)


/-- A class of ordered pairs is a function when there is at most one second member for each pair.
(Contributed by NM, 16-May-1995.) -/
theorem funopab {ph : setvar → setvar → wff} :
  ⊦ wb (wfun (copab (λ x3 y, ph x3 y))) (wal (λ x3, wmo (λ y, ph x3 y))) :=
@bitri (wfun (copab (λ x3 y, ph x3 y))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))))) (wal (λ x3, wmo (λ y, ph x3 y)))
  (@mpbiran (wfun (copab (λ x3 y, ph x3 y))) (wrel (copab (λ x3 y, ph x3 y))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))))
    (@relopabv (λ x3 y, ph x3 y))
    (setvar.forget $ λ x3 : setvar,
      setvar.forget $ λ y : setvar,
      show ⊦ wb (wfun (copab (λ x3 y, ph x3 y))) (wa (wrel (copab (λ x3 y, ph x3 y))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))))), from
      @dffun6f (λ x3 y, copab (λ x3 y, ph x3 y))
        (λ y, @nfopab1 (λ x3 y, ph x3 y))
        (λ x3, @nfopab2 (λ x3 y, ph x3 y)) x3 y))
  (@albii (λ x3, wmo (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))) (λ x3, wmo (λ y, ph x3 y))
    (λ x3, @mobii (λ y, wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (λ y, ph x3 y)
      (λ y, @bitri (wbr (cv x3) (cv y) (copab (λ x3 y, ph x3 y))) (wcel (cop (cv x3) (cv y)) (copab (λ x3 y, ph x3 y))) (ph x3 y)
        (@df_br (cv x3) (cv y) (copab (λ x3 y, ph x3 y)))
        (@opabidw (λ x3 y, ph x3 y) x3 y))))


/-- A class of ordered pairs of values is a function. (Contributed by NM, 14-Nov-1995.) -/
theorem funopabeq {A2 : setvar → «class»} :
  ⊦ wfun (copab (λ x3 y, wceq (cv y) (A2 x3))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wfun (copab (λ x3 y, wceq (cv y) (A2 x3))), from
  @mpgbir (λ x3, wfun (copab (λ x3 y, wceq (cv y) (A2 x3)))) (λ x3, wmo (λ y, wceq (cv y) (A2 x3)))
    (λ x3, @funopab (λ x3 y, wceq (cv y) (A2 x3)))
    (λ x3, @moeq (A2 x3)) x3


/-- A class of ordered pairs of values in the form used by ~ df-mpt is a function. (Contributed by
NM, 17-Feb-2013.) -/
theorem funopab4 {ph : setvar → setvar → wff} {A2 : setvar → «class»} :
  ⊦ wfun (copab (λ x3 y, wa (ph x3 y) (wceq (cv y) (A2 x3)))) :=
@mp2 (wss (copab (λ x3 y, wa (ph x3 y) (wceq (cv y) (A2 x3)))) (copab (λ x3 y, wceq (cv y) (A2 x3)))) (wfun (copab (λ x3 y, wceq (cv y) (A2 x3)))) (wfun (copab (λ x3 y, wa (ph x3 y) (wceq (cv y) (A2 x3)))))
  (@ssopab2i (λ x3 y, wa (ph x3 y) (wceq (cv y) (A2 x3))) (λ x3 y, wceq (cv y) (A2 x3))
    (λ x3 y, @simpr (ph x3 y) (wceq (cv y) (A2 x3))))
  (@funopabeq (λ x3, A2 x3))
  (@funss (copab (λ x3 y, wa (ph x3 y) (wceq (cv y) (A2 x3)))) (copab (λ x3 y, wceq (cv y) (A2 x3))))


/-- A function in maps-to notation is a function. (Contributed by Mario Carneiro, 13-Jan-2013.) -/
theorem funmpt {A2 B2 : setvar → «class»} :
  ⊦ wfun (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) :=
@mpbir (wfun (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) (wfun (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))
  (@funopab4 (λ x3 y, wcel (cv x3) (A2 x3)) (λ x3, B2 x3))
  (@funeqi (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
    (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3)))


/-- Functionality of a class given by a maps-to notation. (Contributed by FL, 17-Feb-2008.) (Revised
by Mario Carneiro, 31-May-2014.) -/
theorem funmpt2 {A2 B2 F : setvar → «class»}
  (funmpt2_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wfun (F x3) :=
@mpbir (wfun (F x3)) (wfun (cmpt (λ x3, A2 x3) (λ x3, B2 x3)))
  (@funmpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@funeqi (F x3) (cmpt (λ x3, A2 x3) (λ x3, B2 x3))
    (funmpt2_1 x3))


/-- The composition of two functions is a function. Exercise 29 of [TakeutiZaring] p. 25.
(Contributed by NM, 26-Jan-1997.) (Proof shortened by Andrew Salmon, 17-Sep-2011.) -/
theorem funco {F G : «class»} :
  ⊦ wi (wa (wfun F) (wfun G)) (wfun (ccom F G)) :=
@sylibr (wa (wfun F) (wfun G)) (wfun (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F))))) (wfun (ccom F G))
  (@sylibr (wa (wfun F) (wfun G)) (wal (λ x3, wmo (λ y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F))))) (wfun (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F)))))
    (@alrimiv (wa (wfun F) (wfun G)) (λ x3, wmo (λ y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F))))
      (λ x3, @syl2anr (wfun G) (wmo (λ z, wbr (cv x3) (cv z) G)) (wal (λ z, wmo (λ y, wbr (cv z) (cv y) F))) (wmo (λ y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F)))) (wfun F)
        (@funmo (cv x3) G)
        (@alrimiv (wfun F) (λ z, wmo (λ y, wbr (cv z) (cv y) F))
          (λ z, @funmo (cv z) F))
        (@moexexvw (λ z, wbr (cv x3) (cv z) G) (λ z y, wbr (cv z) (cv y) F))))
    (@funopab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F)))))
  (@funeqi (ccom F G) (copab (λ x3 y, wex (λ z, wa (wbr (cv x3) (cv z) G) (wbr (cv z) (cv y) F))))
    (@df_co F G))


/-- A restriction of a function is a function. Compare Exercise 18 of [TakeutiZaring] p. 25.
(Contributed by NM, 16-Aug-1994.) -/
theorem funres {A2 F : «class»} :
  ⊦ wi (wfun F) (wfun (cres F A2)) :=
@ax_mp (wss (cres F A2) F) (wi (wfun F) (wfun (cres F A2)))
  (@resss F A2)
  (@funss (cres F A2) F)


/-- A restriction of a function is a function. (Contributed by Glauco Siliprandi, 2-Jan-2022.) -/
theorem funresd {ph : wff} {A2 F : «class»}
  (funresd_1 : ⊦ wi ph (wfun F)) :
  ⊦ wi ph (wfun (cres F A2)) :=
@syl ph (wfun F) (wfun (cres F A2))
  funresd_1
  (@funres A2 F)


/-- The restriction of a function to the domain of a subclass equals the subclass. (Contributed by
NM, 15-Aug-1994.) -/
theorem funssres {F G : «class»} :
  ⊦ wi (wa (wfun F) (wss G F)) (wceq (cres F (cdm G)) G) :=
@mpbird (wa (wfun F) (wss G F)) (wceq (cres F (cdm G)) G) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) (cres F (cdm G))) (wcel (cop (cv x3) (cv y)) G))))
  (@alrimivv (wa (wfun F) (wss G F)) (λ x3 y, wb (wcel (cop (cv x3) (cv y)) (cres F (cdm G))) (wcel (cop (cv x3) (cv y)) G))
    (λ x3 y, @bitr4id (wa (wfun F) (wss G F)) (wcel (cop (cv x3) (cv y)) (cres F (cdm G))) (wa (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) F)) (wcel (cop (cv x3) (cv y)) G)
      (@opelresi (cdm G) (cv x3) (cv y) F
        (@vex y))
      (@impbid (wa (wfun F) (wss G F)) (wcel (cop (cv x3) (cv y)) G) (wa (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) F))
        (@adantl (wss G F) (wi (wcel (cop (cv x3) (cv y)) G) (wa (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) F))) (wfun F)
          (@jcad (wss G F) (wcel (cop (cv x3) (cv y)) G) (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) F)
            (@a1i (wi (wcel (cop (cv x3) (cv y)) G) (wcel (cv x3) (cdm G))) (wss G F)
              (@opeldm (cv x3) (cv y) G
                (@vex x3)
                (@vex y)))
            (@ssel G F (cop (cv x3) (cv y)))))
        (@impcomd (wa (wfun F) (wss G F)) (wcel (cop (cv x3) (cv y)) F) (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) G)
          (@pm2_43d (wa (wfun F) (wss G F)) (wcel (cop (cv x3) (cv y)) F) (wi (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) G))
            (@com34 (wa (wfun F) (wss G F)) (wcel (cop (cv x3) (cv y)) F) (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)
              (@imp (wfun F) (wss G F) (wi (wcel (cop (cv x3) (cv y)) F) (wi (wcel (cv x3) (cdm G)) (wi (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G))))
                (@com23 (wfun F) (wcel (cop (cv x3) (cv y)) F) (wss G F) (wi (wcel (cv x3) (cdm G)) (wi (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)))
                  (@exp43 (wfun F) (wcel (cop (cv x3) (cv y)) F) (wss G F) (wcel (cv x3) (cdm G)) (wi (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G))
                    (@syl2an (wa (wfun F) (wcel (cop (cv x3) (cv y)) F)) (weu (λ y, wcel (cop (cv x3) (cv y)) F)) (wex (λ y, wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G))) (wi (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)) (wa (wss G F) (wcel (cv x3) (cdm G)))
                      (@funeu2 (cv x3) (λ y, cv y) F y)
                      (@imp (wss G F) (wcel (cv x3) (cdm G)) (wex (λ y, wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)))
                        (@syl5bi (wcel (cv x3) (cdm G)) (wex (λ y, wcel (cop (cv x3) (cv y)) G)) (wss G F) (wex (λ y, wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)))
                          (@eldm2 (cv x3) G
                            (@vex x3))
                          (@eximdv (wss G F) (λ y, wcel (cop (cv x3) (cv y)) G) (λ y, wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G))
                            (λ y, @ancrd (wss G F) (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv y)) F)
                              (@ssel G F (cop (cv x3) (cv y)))))))
                      (@eupick (λ y, wcel (cop (cv x3) (cv y)) F) (λ y, wcel (cop (cv x3) (cv y)) G) y)))))))))))
  (@sylancr (wa (wfun F) (wss G F)) (wrel (cres F (cdm G))) (wrel G) (wb (wceq (cres F (cdm G)) G) (wal (λ x3, wal (λ y, wb (wcel (cop (cv x3) (cv y)) (cres F (cdm G))) (wcel (cop (cv x3) (cv y)) G)))))
    (@relres F (cdm G))
    (@mpan9 (wfun F) (wrel F) (wss G F) (wrel G)
      (@funrel F)
      (@relss G F))
    (@eqrel (cres F (cdm G)) G))


/-- Equality of restrictions of a function and a subclass. (Contributed by NM, 16-Aug-1994.) -/
theorem fun2ssres {A2 F G : «class»} :
  ⊦ wi (w3a (wfun F) (wss G F) (wss A2 (cdm G))) (wceq (cres F A2) (cres G A2)) :=
@«3impa» (wfun F) (wss G F) (wss A2 (cdm G)) (wceq (cres F A2) (cres G A2))
  (@sylan9eqr (wss A2 (cdm G)) (wa (wfun F) (wss G F)) (cres F A2) (cres (cres F (cdm G)) A2) (cres G A2)
    (@eqcomd (wss A2 (cdm G)) (cres (cres F (cdm G)) A2) (cres F A2)
      (@resabs1 F A2 (cdm G)))
    (@reseq1d (wa (wfun F) (wss G F)) (cres F (cdm G)) G A2
      (@funssres F G)))


/-- The union of functions with disjoint domains is a function. Theorem 4.6 of [Monk1] p. 43.
(Contributed by NM, 12-Aug-1994.) -/
theorem funun {F G : «class»} :
  ⊦ wi (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (wfun (cun F G)) :=
@sylanbrc (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (wrel (cun F G)) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wceq (cv y) (cv z)))))) (wfun (cun F G))
  (@adantr (wa (wfun F) (wfun G)) (wrel (cun F G)) (wceq (cin (cdm F) (cdm G)) c0)
    (@sylibr (wa (wfun F) (wfun G)) (wa (wrel F) (wrel G)) (wrel (cun F G))
      (@anim12i (wfun F) (wrel F) (wfun G) (wrel G)
        (@funrel F)
        (@funrel G))
      (@relun F G)))
  (@alrimivv (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (λ x3 y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wceq (cv y) (cv z))))
    (λ x3 y, @alrimiv (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (λ z, wi (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wceq (cv y) (cv z)))
      (λ z, @syld (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))) (wceq (cv y) (cv z))
        (@syl5bi (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wo (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wo (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))) (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))
          (@bitri (wa (wcel (cop (cv x3) (cv y)) (cun F G)) (wcel (cop (cv x3) (cv z)) (cun F G))) (wa (wo (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)) (wo (wcel (cop (cv x3) (cv z)) F) (wcel (cop (cv x3) (cv z)) G))) (wo (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wo (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))))
            (@anbi12i (wcel (cop (cv x3) (cv y)) (cun F G)) (wo (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G)) (wcel (cop (cv x3) (cv z)) (cun F G)) (wo (wcel (cop (cv x3) (cv z)) F) (wcel (cop (cv x3) (cv z)) G))
              (@elun (cop (cv x3) (cv y)) F G)
              (@elun (cop (cv x3) (cv z)) F G))
            (@anddi (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F) (wcel (cop (cv x3) (cv z)) G)))
          (@adantl (wceq (cin (cdm F) (cdm G)) c0) (wi (wo (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wo (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))) (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))) (wa (wfun F) (wfun G))
            (@orim12d (wceq (cin (cdm F) (cdm G)) c0) (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wo (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))
              (@syl (wceq (cin (cdm F) (cdm G)) c0) (wn (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wi (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)))
                (@nsyl (wceq (cin (cdm F) (cdm G)) c0) (wa (wcel (cv x3) (cdm F)) (wcel (cv x3) (cdm G))) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G))
                  (@sylib (wceq (cin (cdm F) (cdm G)) c0) (wi (wcel (cv x3) (cdm F)) (wn (wcel (cv x3) (cdm G)))) (wn (wa (wcel (cv x3) (cdm F)) (wcel (cv x3) (cdm G))))
                    (@«19_21bi» (λ x3, wceq (cin (cdm F) (cdm G)) c0) (λ x3, wi (wcel (cv x3) (cdm F)) (wn (wcel (cv x3) (cdm G))))
                      (λ x3, @biimpi (wceq (cin (cdm F) (cdm G)) c0) (wal (λ x3, wi (wcel (cv x3) (cdm F)) (wn (wcel (cv x3) (cdm G)))))
                        (@disj1 (cdm F) (cdm G))) x3)
                    (@imnan (wcel (cv x3) (cdm F)) (wcel (cv x3) (cdm G))))
                  (@anim12i (wcel (cop (cv x3) (cv y)) F) (wcel (cv x3) (cdm F)) (wcel (cop (cv x3) (cv z)) G) (wcel (cv x3) (cdm G))
                    (@opeldm (cv x3) (cv y) F
                      (@vex x3)
                      (@vex y))
                    (@opeldm (cv x3) (cv z) G
                      (@vex x3)
                      (@vex z))))
                (@orel2 (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) G)) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F))))
              (@syl (wceq (cin (cdm F) (cdm G)) c0) (wn (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F))) (wi (wo (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))
                (@nsyl (wceq (cin (cdm F) (cdm G)) c0) (wa (wcel (cv x3) (cdm G)) (wcel (cv x3) (cdm F))) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F))
                  (@sylib (wceq (cin (cdm F) (cdm G)) c0) (wi (wcel (cv x3) (cdm G)) (wn (wcel (cv x3) (cdm F)))) (wn (wa (wcel (cv x3) (cdm G)) (wcel (cv x3) (cdm F))))
                    (@con2d (wceq (cin (cdm F) (cdm G)) c0) (wcel (cv x3) (cdm F)) (wcel (cv x3) (cdm G))
                      (@«19_21bi» (λ x3, wceq (cin (cdm F) (cdm G)) c0) (λ x3, wi (wcel (cv x3) (cdm F)) (wn (wcel (cv x3) (cdm G))))
                        (λ x3, @biimpi (wceq (cin (cdm F) (cdm G)) c0) (wal (λ x3, wi (wcel (cv x3) (cdm F)) (wn (wcel (cv x3) (cdm G)))))
                          (@disj1 (cdm F) (cdm G))) x3))
                    (@imnan (wcel (cv x3) (cdm G)) (wcel (cv x3) (cdm F))))
                  (@anim12i (wcel (cop (cv x3) (cv y)) G) (wcel (cv x3) (cdm G)) (wcel (cop (cv x3) (cv z)) F) (wcel (cv x3) (cdm F))
                    (@opeldm (cv x3) (cv y) G
                      (@vex x3)
                      (@vex y))
                    (@opeldm (cv x3) (cv z) F
                      (@vex x3)
                      (@vex z))))
                (@orel1 (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)))))))
        (@adantr (wa (wfun F) (wfun G)) (wi (wo (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))) (wceq (cv y) (cv z))) (wceq (cin (cdm F) (cdm G)) c0)
          (@jaao (wfun F) (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wceq (cv y) (cv z)) (wfun G) (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G))
            (@«19_21bbi» (λ y z, wfun F) (λ y z, wi (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wceq (cv y) (cv z)))
              (λ y z, @«19_21bi» (λ x3, wfun F) (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wceq (cv y) (cv z)))))
                (λ x3, @simprbi (wfun F) (wrel F) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) F) (wcel (cop (cv x3) (cv z)) F)) (wceq (cv y) (cv z))))))
                  (@dffun4 F)) x3) y z)
            (@«19_21bbi» (λ y z, wfun G) (λ y z, wi (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)) (wceq (cv y) (cv z)))
              (λ y z, @«19_21bi» (λ x3, wfun G) (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)) (wceq (cv y) (cv z)))))
                (λ x3, @simprbi (wfun G) (wrel G) (wal (λ x3, wal (λ y, wal (λ z, wi (wa (wcel (cop (cv x3) (cv y)) G) (wcel (cop (cv x3) (cv z)) G)) (wceq (cv y) (cv z))))))
                  (@dffun4 G)) x3) y z))))))
  (@dffun4 (cun F G))


/-- The converse singleton of an ordered pair is a function. This is equivalent to ~ funsn via ~
cnvsn , but stating it this way allows us to skip the sethood assumptions on ` A ` and ` B ` .
(Contributed by NM, 30-Apr-2015.) -/
theorem funcnvsn {A2 B2 : «class»} :
  ⊦ wfun (ccnv (csn (cop A2 B2))) :=
@mpbir2an (wfun (ccnv (csn (cop A2 B2)))) (wrel (ccnv (csn (cop A2 B2)))) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2))))))
  (@relcnv (csn (cop A2 B2)))
  (@ax_gen (λ x3, wmo (λ y, wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2)))))
    (λ x3, @ax_mp (wmo (λ y, wceq (cv y) A2)) (wmo (λ y, wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2)))))
      (@moeq A2)
      (@moimi (λ y, wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2)))) (λ y, wceq (cv y) A2)
        (λ y, @sylbi (wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2)))) (wcel (cop (cv y) (cv x3)) (csn (cop A2 B2))) (wceq (cv y) A2)
          (@bitri (wbr (cv x3) (cv y) (ccnv (csn (cop A2 B2)))) (wbr (cv y) (cv x3) (csn (cop A2 B2))) (wcel (cop (cv y) (cv x3)) (csn (cop A2 B2)))
            (@brcnv (cv x3) (cv y) (csn (cop A2 B2))
              (@vex x3)
              (@vex y))
            (@df_br (cv y) (cv x3) (csn (cop A2 B2))))
          (@syl (wcel (cop (cv y) (cv x3)) (csn (cop A2 B2))) (wceq (cop (cv y) (cv x3)) (cop A2 B2)) (wceq (cv y) A2)
            (@elsni (cop (cv y) (cv x3)) (cop A2 B2))
            (@opth1 (cv y) (cv x3) A2 B2
              (@vex y)
              (@vex x3)))))))
  (@dffun6 (ccnv (csn (cop A2 B2))))


/-- A singleton of an ordered pair is a function. Theorem 10.5 of [Quine] p. 65. (Contributed by NM,
28-Jun-2011.) -/
theorem funsng {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wfun (csn (cop A2 B2))) :=
@mpbii (wa (wcel A2 V) (wcel B2 W)) (wfun (ccnv (csn (cop B2 A2)))) (wfun (csn (cop A2 B2)))
  (@funcnvsn B2 A2)
  (@funeqd (wa (wcel A2 V) (wcel B2 W)) (ccnv (csn (cop B2 A2))) (csn (cop A2 B2))
    (@ancoms (wcel B2 W) (wcel A2 V) (wceq (ccnv (csn (cop B2 A2))) (csn (cop A2 B2)))
      (@cnvsng B2 A2 W V)))


/-- Functionality and domain of the singleton of an ordered pair. (Contributed by Mario Carneiro,
30-Apr-2015.) -/
theorem fnsng {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wfn (csn (cop A2 B2)) (csn A2)) :=
@sylanbrc (wa (wcel A2 V) (wcel B2 W)) (wfun (csn (cop A2 B2))) (wceq (cdm (csn (cop A2 B2))) (csn A2)) (wfn (csn (cop A2 B2)) (csn A2))
  (@funsng A2 B2 V W)
  (@adantl (wcel B2 W) (wceq (cdm (csn (cop A2 B2))) (csn A2)) (wcel A2 V)
    (@dmsnopg A2 B2 W))
  (@df_fn (csn (cop A2 B2)) (csn A2))


/-- A singleton of an ordered pair is a function. Theorem 10.5 of [Quine] p. 65. (Contributed by NM,
12-Aug-1994.) -/
theorem funsn {A2 B2 : «class»}
  (funsn_1 : ⊦ wcel A2 cvv)
  (funsn_2 : ⊦ wcel B2 cvv) :
  ⊦ wfun (csn (cop A2 B2)) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wfun (csn (cop A2 B2)))
  funsn_1
  funsn_2
  (@funsng A2 B2 cvv cvv)


/-- A set of two pairs is a function if their first members are different. (Contributed by FL,
26-Jun-2011.) (Proof shortened by JJ, 14-Jul-2021.) -/
theorem funprg {A2 B2 C D V W X Y : «class»} :
  ⊦ wi (w3a (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wne A2 B2)) (wfun (cpr (cop A2 C) (cop B2 D))) :=
@sylibr (w3a (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wne A2 B2)) (wfun (cun (csn (cop A2 C)) (csn (cop B2 D)))) (wfun (cpr (cop A2 C) (cop B2 D)))
  (@syl2anc (w3a (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wne A2 B2)) (wa (wfun (csn (cop A2 C))) (wfun (csn (cop B2 D)))) (wceq (cin (cdm (csn (cop A2 C))) (cdm (csn (cop B2 D)))) c0) (wfun (cun (csn (cop A2 C)) (csn (cop B2 D))))
    (@«3adant3» (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wa (wfun (csn (cop A2 C))) (wfun (csn (cop B2 D)))) (wne A2 B2)
      (@an4s (wcel A2 V) (wcel C X) (wcel B2 W) (wcel D Y) (wa (wfun (csn (cop A2 C))) (wfun (csn (cop B2 D))))
        (@anim12i (wa (wcel A2 V) (wcel C X)) (wfun (csn (cop A2 C))) (wa (wcel B2 W) (wcel D Y)) (wfun (csn (cop B2 D)))
          (@funsng A2 C V X)
          (@funsng B2 D W Y))))
    (@«3adant1» (wa (wcel C X) (wcel D Y)) (wne A2 B2) (wceq (cin (cdm (csn (cop A2 C))) (cdm (csn (cop B2 D)))) c0) (wa (wcel A2 V) (wcel B2 W))
      (@sylan9eq (wa (wcel C X) (wcel D Y)) (wne A2 B2) (cin (cdm (csn (cop A2 C))) (cdm (csn (cop B2 D)))) (cin (csn A2) (csn B2)) c0
        (@ineqan12d (wcel C X) (wcel D Y) (cdm (csn (cop A2 C))) (csn A2) (cdm (csn (cop B2 D))) (csn B2)
          (@dmsnopg A2 C X)
          (@dmsnopg B2 D Y))
        (@disjsn2 A2 B2)))
    (@funun (csn (cop A2 C)) (csn (cop B2 D))))
  (@funeqi (cpr (cop A2 C) (cop B2 D)) (cun (csn (cop A2 C)) (csn (cop B2 D)))
    (@df_pr (cop A2 C) (cop B2 D)))


/-- Functionality and domain of the singleton of an ordered pair. (Contributed by Jonathan Ben-Naim,
3-Jun-2011.) -/
theorem fnsn {A2 B2 : «class»}
  (fnsn_1 : ⊦ wcel A2 cvv)
  (fnsn_2 : ⊦ wcel B2 cvv) :
  ⊦ wfn (csn (cop A2 B2)) (csn A2) :=
@mp2an (wcel A2 cvv) (wcel B2 cvv) (wfn (csn (cop A2 B2)) (csn A2))
  fnsn_1
  fnsn_2
  (@fnsng A2 B2 cvv cvv)


/-- Function with a domain of two different values. (Contributed by FL, 26-Jun-2011.) (Revised by
Mario Carneiro, 26-Apr-2015.) -/
theorem fnprg {A2 B2 C D V W X Y : «class»} :
  ⊦ wi (w3a (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wne A2 B2)) (wfn (cpr (cop A2 C) (cop B2 D)) (cpr A2 B2)) :=
@sylanbrc (w3a (wa (wcel A2 V) (wcel B2 W)) (wa (wcel C X) (wcel D Y)) (wne A2 B2)) (wfun (cpr (cop A2 C) (cop B2 D))) (wceq (cdm (cpr (cop A2 C) (cop B2 D))) (cpr A2 B2)) (wfn (cpr (cop A2 C) (cop B2 D)) (cpr A2 B2))
  (@funprg A2 B2 C D V W X Y)
  (@«3ad2ant2» (wa (wcel C X) (wcel D Y)) (wa (wcel A2 V) (wcel B2 W)) (wceq (cdm (cpr (cop A2 C) (cop B2 D))) (cpr A2 B2)) (wne A2 B2)
    (@dmpropg A2 C B2 D X Y))
  (@df_fn (cpr (cop A2 C) (cop B2 D)) (cpr A2 B2))


/-- The empty set is a function. Theorem 10.3 of [Quine] p. 65. (Contributed by NM, 7-Apr-1998.) -/
theorem fun0 :
  ⊦ wfun c0 :=
@mp2 (wss c0 (csn (cop c0 c0))) (wfun (csn (cop c0 c0))) (wfun c0)
  (@«0ss» (csn (cop c0 c0)))
  (@funsn c0 c0
    «0ex»
    «0ex»)
  (@funss c0 (csn (cop c0 c0)))


/-- The converse of the empty set is a function. (Contributed by AV, 7-Jan-2021.) -/
theorem funcnv0 :
  ⊦ wfun (ccnv c0) :=
@mpbir (wfun (ccnv c0)) (wfun c0)
  fun0
  (@funeqi (ccnv c0) c0
    cnv0)


/-- The double converse of a function is a function. (Contributed by NM, 21-Sep-2004.) -/
theorem funcnvcnv {A2 : «class»} :
  ⊦ wi (wfun A2) (wfun (ccnv (ccnv A2))) :=
@ax_mp (wss (ccnv (ccnv A2)) A2) (wi (wfun A2) (wfun (ccnv (ccnv A2))))
  (@cnvcnvss A2)
  (@funss (ccnv (ccnv A2)) A2)


/-- A simpler equivalence for single-rooted (see ~ funcnv ). (Contributed by NM, 9-Aug-2004.) -/
theorem funcnv2 {A2 : «class»} :
  ⊦ wb (wfun (ccnv A2)) (wal (λ y, wmo (λ x3, wbr (cv x3) (cv y) A2))) :=
@bitri (wfun (ccnv A2)) (wal (λ y, wmo (λ x3, wbr (cv y) (cv x3) (ccnv A2)))) (wal (λ y, wmo (λ x3, wbr (cv x3) (cv y) A2)))
  (@mpbiran (wfun (ccnv A2)) (wrel (ccnv A2)) (wal (λ y, wmo (λ x3, wbr (cv y) (cv x3) (ccnv A2))))
    (@relcnv A2)
    (@dffun6 (ccnv A2)))
  (@albii (λ y, wmo (λ x3, wbr (cv y) (cv x3) (ccnv A2))) (λ y, wmo (λ x3, wbr (cv x3) (cv y) A2))
    (λ y, @mobii (λ x3, wbr (cv y) (cv x3) (ccnv A2)) (λ x3, wbr (cv x3) (cv y) A2)
      (λ x3, @brcnv (cv y) (cv x3) A2
        (@vex y)
        (@vex x3))))


/-- The restriction of a one-to-one function is one-to-one. (Contributed by NM, 25-Mar-1998.) -/
theorem funres11 {A2 F : «class»} :
  ⊦ wi (wfun (ccnv F)) (wfun (ccnv (cres F A2))) :=
@mp2b (wss (cres F A2) F) (wss (ccnv (cres F A2)) (ccnv F)) (wi (wfun (ccnv F)) (wfun (ccnv (cres F A2))))
  (@resss F A2)
  (@cnvss (cres F A2) F)
  (@funss (ccnv (cres F A2)) (ccnv F))


/-- The converse of a restricted function. (Contributed by NM, 27-Mar-1998.) -/
theorem funcnvres {A2 F : «class»} :
  ⊦ wi (wfun (ccnv F)) (wceq (ccnv (cres F A2)) (cres (ccnv F) (cima F A2))) :=
@eqtr2id (wfun (ccnv F)) (cres (ccnv F) (cima F A2)) (cres (ccnv F) (cdm (ccnv (cres F A2)))) (ccnv (cres F A2))
  (@reseq2i (cima F A2) (cdm (ccnv (cres F A2))) (ccnv F)
    (@eqtri (cima F A2) (crn (cres F A2)) (cdm (ccnv (cres F A2)))
      (@df_ima F A2)
      (@df_rn (cres F A2))))
  (@mpan2 (wfun (ccnv F)) (wss (ccnv (cres F A2)) (ccnv F)) (wceq (cres (ccnv F) (cdm (ccnv (cres F A2)))) (ccnv (cres F A2)))
    (@ax_mp (wss (cres F A2) F) (wss (ccnv (cres F A2)) (ccnv F))
      (@resss F A2)
      (@cnvss (cres F A2) F))
    (@funssres (ccnv F) (ccnv (cres F A2))))


/-- Converse of a restricted identity function. (Contributed by FL, 4-Mar-2007.) -/
theorem cnvresid {A2 : «class»} :
  ⊦ wceq (ccnv (cres cid A2)) (cres cid A2) :=
@mp2b (wceq cid (ccnv cid)) (wfun (ccnv cid)) (wceq (ccnv (cres cid A2)) (cres cid A2))
  (@eqcomi (ccnv cid) cid
    cnvi)
  (@mpbii (wceq cid (ccnv cid)) (wfun cid) (wfun (ccnv cid))
    funi
    (@funeq cid (ccnv cid)))
  (@eqtrdi (wfun (ccnv cid)) (ccnv (cres cid A2)) (cres (ccnv cid) (cima cid A2)) (cres cid A2)
    (@funcnvres A2 cid)
    (@reseq12i (ccnv cid) cid (cima cid A2) A2
      cnvi
      (@imai A2)))


/-- The converse of a restriction of the converse of a function equals the function restricted to
the image of its converse. (Contributed by NM, 4-May-2005.) -/
theorem funcnvres2 {A2 F : «class»} :
  ⊦ wi (wfun F) (wceq (ccnv (cres (ccnv F) A2)) (cres F (cima (ccnv F) A2))) :=
@eqtrd (wfun F) (ccnv (cres (ccnv F) A2)) (cres (ccnv (ccnv F)) (cima (ccnv F) A2)) (cres F (cima (ccnv F) A2))
  (@syl (wfun F) (wfun (ccnv (ccnv F))) (wceq (ccnv (cres (ccnv F) A2)) (cres (ccnv (ccnv F)) (cima (ccnv F) A2)))
    (@funcnvcnv F)
    (@funcnvres A2 (ccnv F)))
  (@reseq1d (wfun F) (ccnv (ccnv F)) F (cima (ccnv F) A2)
    (@sylib (wfun F) (wrel F) (wceq (ccnv (ccnv F)) F)
      (@funrel F)
      (@dfrel2 F)))


/-- The image of the preimage of a function. (Contributed by NM, 25-May-2004.) -/
theorem funimacnv {A2 F : «class»} :
  ⊦ wi (wfun F) (wceq (cima F (cima (ccnv F) A2)) (cin A2 (crn F))) :=
@eqtrdi (wfun F) (cima F (cima (ccnv F) A2)) (crn (ccnv (cres (ccnv F) A2))) (cin A2 (crn F))
  (@eqtr4id (wfun F) (cima F (cima (ccnv F) A2)) (crn (cres F (cima (ccnv F) A2))) (crn (ccnv (cres (ccnv F) A2)))
    (@df_ima F (cima (ccnv F) A2))
    (@rneqd (wfun F) (ccnv (cres (ccnv F) A2)) (cres F (cima (ccnv F) A2))
      (@funcnvres2 A2 F)))
  (@«3eqtr2ri» (cin A2 (crn F)) (cin A2 (cdm (ccnv F))) (cdm (cres (ccnv F) A2)) (crn (ccnv (cres (ccnv F) A2)))
    (@ineq2i (crn F) (cdm (ccnv F)) A2
      (@df_rn F))
    (@dmres (ccnv F) A2)
    (@dfdm4 (cres (ccnv F) A2)))


/-- A kind of contraposition law that infers an image subclass from a subclass of a preimage.
(Contributed by NM, 25-May-2004.) -/
theorem funimass2 {A2 B2 F : «class»} :
  ⊦ wi (wa (wfun F) (wss A2 (cima (ccnv F) B2))) (wss (cima F A2) B2) :=
@impel (wfun F) (wss (cima F A2) (cima F (cima (ccnv F) B2))) (wss (cima F A2) B2) (wss A2 (cima (ccnv F) B2))
  (@syl6bi (wfun F) (wss (cima F A2) (cima F (cima (ccnv F) B2))) (wss (cima F A2) (cin B2 (crn F))) (wss (cima F A2) B2)
    (@sseq2d (wfun F) (cima F (cima (ccnv F) B2)) (cin B2 (crn F)) (cima F A2)
      (@funimacnv B2 F))
    (@mpi (wss (cima F A2) (cin B2 (crn F))) (wss (cin B2 (crn F)) B2) (wss (cima F A2) B2)
      (@inss1 B2 (crn F))
      (@sstr2 (cima F A2) (cin B2 (crn F)) B2)))
  (@imass2 A2 (cima (ccnv F) B2) F)


/-- The image of a difference is the difference of images. (Contributed by NM, 24-May-1998.) -/
theorem imadif {A2 B2 F : «class»} :
  ⊦ wi (wfun (ccnv F)) (wceq (cima F (cdif A2 B2)) (cdif (cima F A2) (cima F B2))) :=
@eqrdv (wfun (ccnv F)) (cima F (cdif A2 B2)) (cdif (cima F A2) (cima F B2))
  (λ y, @«3bitr4g» (wfun (ccnv F)) (wex (λ x3, wa (wcel (cv x3) (cdif A2 B2)) (wbr (cv x3) (cv y) F))) (wa (wcel (cv y) (cima F A2)) (wn (wcel (cv y) (cima F B2)))) (wcel (cv y) (cima F (cdif A2 B2))) (wcel (cv y) (cdif (cima F A2) (cima F B2)))
    (@«3bitr4g» (wfun (ccnv F)) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))) (wex (λ x3, wa (wcel (cv x3) (cdif A2 B2)) (wbr (cv x3) (cv y) F))) (wa (wcel (cv y) (cima F A2)) (wn (wcel (cv y) (cima F B2))))
      (@impbid1 (wfun (ccnv F)) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))))
        (@syl5 (wex (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wex (λ x3, wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F)))) (wfun (ccnv F)) (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))))
          (@sylbi (wex (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F)))) (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wex (λ x3, wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F))))
            (@exbii (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F)) (λ x3, wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F)))
              (λ x3, @anandir (wcel (cv x3) A2) (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F)))
            (@«19_40» (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (λ x3, wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F))))
          (@anim2d (wfun (ccnv F)) (wex (λ x3, wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)))
            (@«3imtr3g» (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2)))) (wal (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (wex (λ x3, wa (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))
              (@ex (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2)))) (wal (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))
                (setvar.forget $ λ x3 : setvar,
                  show ⊦ wi (wa (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2))))) (wal (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))), from
                  @alrimi (λ x3, wa (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2))))) (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))
                    (@nfan (λ x3, wfun (ccnv F)) (λ x3, wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2))))
                      (@nfv (wfun (ccnv F)))
                      (@nfe1 (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2)))))
                    (λ x3, @sylib (wa (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2))))) (wi (wcel (cv x3) B2) (wn (wbr (cv x3) (cv y) F))) (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))
                      (@con2d (wa (wfun (ccnv F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2))))) (wbr (cv x3) (cv y) F) (wcel (cv x3) B2)
                        (@sylan (wfun (ccnv F)) (wmo (λ x3, wbr (cv x3) (cv y) F)) (wex (λ x3, wa (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2)))) (wi (wbr (cv x3) (cv y) F) (wn (wcel (cv x3) B2)))
                          (@sylib (wfun (ccnv F)) (wmo (λ x3, wbr (cv y) (cv x3) (ccnv F))) (wmo (λ x3, wbr (cv x3) (cv y) F))
                            (@funmo (cv y) (ccnv F))
                            (@mobii (λ x3, wbr (cv y) (cv x3) (ccnv F)) (λ x3, wbr (cv x3) (cv y) F)
                              (λ x3, @brcnv (cv y) (cv x3) F
                                (@vex y)
                                (@vex x3))))
                          (@mopick (λ x3, wbr (cv x3) (cv y) F) (λ x3, wn (wcel (cv x3) B2)) x3)))
                      (@imnan (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))) x3))
              (@exancom (λ x3, wbr (cv x3) (cv y) F) (λ x3, wn (wcel (cv x3) B2)))
              (@alnex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))))
        (@sylib (wa (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F)))
          (@sylan2br (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wal (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (wex (λ x3, wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))))
            (@alnex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))
            (@«19_29r» (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (λ x3, wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))))
          (@exbii (λ x3, wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))
            (λ x3, @«3bitr4i» (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wo (wn (wcel (cv x3) B2)) (wn (wbr (cv x3) (cv y) F)))) (wo (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wcel (cv x3) B2))) (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wbr (cv x3) (cv y) F)))) (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))) (wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))
              (@andi (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wcel (cv x3) B2)) (wn (wbr (cv x3) (cv y) F)))
              (@anbi2i (wn (wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))) (wo (wn (wcel (cv x3) B2)) (wn (wbr (cv x3) (cv y) F))) (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))
                (@ianor (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))
              (@bitri (wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F)) (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wcel (cv x3) B2))) (wo (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wcel (cv x3) B2))) (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wbr (cv x3) (cv y) F))))
                (@an32 (wcel (cv x3) A2) (wn (wcel (cv x3) B2)) (wbr (cv x3) (cv y) F))
                (@biorfi (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wbr (cv x3) (cv y) F))) (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wcel (cv x3) B2)))
                  (@mtbir (wa (wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F)) (wn (wbr (cv x3) (cv y) F))) (wa (wcel (cv x3) A2) (wa (wbr (cv x3) (cv y) F) (wn (wbr (cv x3) (cv y) F))))
                    (@intnan (wa (wbr (cv x3) (cv y) F) (wn (wbr (cv x3) (cv y) F))) (wcel (cv x3) A2)
                      (@pm3_24 (wbr (cv x3) (cv y) F)))
                    (@anass (wcel (cv x3) A2) (wbr (cv x3) (cv y) F) (wn (wbr (cv x3) (cv y) F))))))))))
      (@exbii (λ x3, wa (wcel (cv x3) (cdif A2 B2)) (wbr (cv x3) (cv y) F)) (λ x3, wa (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F))
        (λ x3, @anbi1i (wcel (cv x3) (cdif A2 B2)) (wa (wcel (cv x3) A2) (wn (wcel (cv x3) B2))) (wbr (cv x3) (cv y) F)
          (@eldif (cv x3) A2 B2)))
      (@anbi12i (wcel (cv y) (cima F A2)) (wex (λ x3, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wn (wcel (cv y) (cima F B2))) (wn (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F))))
        (@elima2 (cv y) F A2
          (@vex y))
        (@notbii (wcel (cv y) (cima F B2)) (wex (λ x3, wa (wcel (cv x3) B2) (wbr (cv x3) (cv y) F)))
          (@elima2 (cv y) F B2
            (@vex y)))))
    (@elima2 (cv y) F (cdif A2 B2)
      (@vex y))
    (@eldif (cv y) (cima F A2) (cima F B2)))


/-- The image of an intersection is the intersection of images. (Contributed by Paul Chapman,
11-Apr-2009.) -/
theorem imain {A2 B2 F : «class»} :
  ⊦ wi (wfun (ccnv F)) (wceq (cima F (cin A2 B2)) (cin (cima F A2) (cima F B2))) :=
@«3eqtr4g» (wfun (ccnv F)) (cima F (cdif A2 (cdif A2 B2))) (cdif (cima F A2) (cdif (cima F A2) (cima F B2))) (cima F (cin A2 B2)) (cin (cima F A2) (cima F B2))
  (@eqtrd (wfun (ccnv F)) (cima F (cdif A2 (cdif A2 B2))) (cdif (cima F A2) (cima F (cdif A2 B2))) (cdif (cima F A2) (cdif (cima F A2) (cima F B2)))
    (@imadif A2 (cdif A2 B2) F)
    (@difeq2d (wfun (ccnv F)) (cima F (cdif A2 B2)) (cdif (cima F A2) (cima F B2)) (cima F A2)
      (@imadif A2 B2 F)))
  (@imaeq2i (cin A2 B2) (cdif A2 (cdif A2 B2)) F
    (@dfin4 A2 B2))
  (@dfin4 (cima F A2) (cima F B2))


/-- Axiom of Replacement using abbreviations. Axiom 39(vi) of [Quine] p. 284. Compare Exercise 9 of
[TakeutiZaring] p. 29. (Contributed by NM, 10-Sep-2006.) -/
theorem funimaexg {A2 B2 C : «class»} :
  ⊦ wi (wa (wfun A2) (wcel B2 C)) (wcel (cima A2 B2) cvv) :=
@impcom (wcel B2 C) (wfun A2) (wcel (cima A2 B2) cvv)
  (setvar.forget $ λ w : setvar,
    show ⊦ wi (wcel B2 C) (wi (wfun A2) (wcel (cima A2 B2) cvv)), from
    @vtoclg (λ w, wi (wfun A2) (wcel (cima A2 (cv w)) cvv)) (wi (wfun A2) (wcel (cima A2 B2) cvv)) B2 (λ w, C)
      (λ w, @imbi2d (wceq (cv w) B2) (wcel (cima A2 (cv w)) cvv) (wcel (cima A2 B2) cvv) (wfun A2)
        (@eleq1d (wceq (cv w) B2) (cima A2 (cv w)) (cima A2 B2) cvv
          (@imaeq2 (cv w) B2 A2)))
      (λ w, @simplbiim (wfun A2) (wrel A2) (wal (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))))) (wcel (cima A2 (cv w)) cvv)
        (@dffun5 A2)
        (@sylibr (wal (λ x3, wex (λ z, wal (λ y, wi (wcel (cop (cv x3) (cv y)) A2) (wceq (cv y) (cv z)))))) (wex (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2)))))) (wcel (cima A2 (cv w)) cvv)
          (@axrep4 (λ x3 y z w, wcel (cop (cv x3) (cv y)) A2)
            (λ x3 y w, @nfv (wcel (cop (cv x3) (cv y)) A2)) w)
          (@bitri (wcel (cima A2 (cv w)) cvv) (wex (λ z, wceq (cv z) (cima A2 (cv w)))) (wex (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2))))))
            (@isset (cima A2 (cv w)))
            (@exbii (λ z, wceq (cv z) (cima A2 (cv w))) (λ z, wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2)))))
              (λ z, @bitri (wceq (cv z) (cima A2 (cv w))) (wceq (cv z) (cab (λ y, wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2))))) (wal (λ y, wb (wcel (cv y) (cv z)) (wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2)))))
                (@eqeq2i (cima A2 (cv w)) (cab (λ y, wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2)))) (cv z)
                  (@dfima3 A2 (cv w)))
                (@abeq2 (λ y, wex (λ x3, wa (wcel (cv x3) (cv w)) (wcel (cop (cv x3) (cv y)) A2))) (cv z))))))) w)


/-- The image of a set under any function is also a set. Equivalent of Axiom of Replacement ~ ax-rep
. Axiom 39(vi) of [Quine] p. 284. Compare Exercise 9 of [TakeutiZaring] p. 29. (Contributed by NM,
17-Nov-2002.) -/
theorem funimaex {A2 B2 : «class»}
  (zfrep5_1 : ⊦ wcel B2 cvv) :
  ⊦ wi (wfun A2) (wcel (cima A2 B2) cvv) :=
@mpan2 (wfun A2) (wcel B2 cvv) (wcel (cima A2 B2) cvv)
  zfrep5_1
  (@funimaexg A2 B2 cvv)


/-- Equality theorem for function predicate with domain. (Contributed by NM, 1-Aug-1994.) -/
theorem fneq1 {A2 F G : «class»} :
  ⊦ wi (wceq F G) (wb (wfn F A2) (wfn G A2)) :=
@«3bitr4g» (wceq F G) (wa (wfun F) (wceq (cdm F) A2)) (wa (wfun G) (wceq (cdm G) A2)) (wfn F A2) (wfn G A2)
  (@anbi12d (wceq F G) (wfun F) (wfun G) (wceq (cdm F) A2) (wceq (cdm G) A2)
    (@funeq F G)
    (@eqeq1d (wceq F G) (cdm F) (cdm G) A2
      (@dmeq F G)))
  (@df_fn F A2)
  (@df_fn G A2)


/-- Equality theorem for function predicate with domain. (Contributed by NM, 1-Aug-1994.) -/
theorem fneq2 {A2 B2 F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wfn F A2) (wfn F B2)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfun F) (wceq (cdm F) A2)) (wa (wfun F) (wceq (cdm F) B2)) (wfn F A2) (wfn F B2)
  (@anbi2d (wceq A2 B2) (wceq (cdm F) A2) (wceq (cdm F) B2) (wfun F)
    (@eqeq2 A2 B2 (cdm F)))
  (@df_fn F A2)
  (@df_fn F B2)


/-- Equality deduction for function predicate with domain. (Contributed by Paul Chapman,
22-Jun-2011.) -/
theorem fneq1d {ph : wff} {A2 F G : «class»}
  (fneq1d_1 : ⊦ wi ph (wceq F G)) :
  ⊦ wi ph (wb (wfn F A2) (wfn G A2)) :=
@syl ph (wceq F G) (wb (wfn F A2) (wfn G A2))
  fneq1d_1
  (@fneq1 A2 F G)


/-- Equality deduction for function predicate with domain. (Contributed by Paul Chapman,
22-Jun-2011.) -/
theorem fneq2d {ph : wff} {A2 B2 F : «class»}
  (fneq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wfn F A2) (wfn F B2)) :=
@syl ph (wceq A2 B2) (wb (wfn F A2) (wfn F B2))
  fneq2d_1
  (@fneq2 A2 B2 F)


/-- Equality deduction for function predicate with domain. (Contributed by NM, 26-Jun-2011.) -/
theorem fneq12d {ph : wff} {A2 B2 F G : «class»}
  (fneq12d_1 : ⊦ wi ph (wceq F G))
  (fneq12d_2 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wfn F A2) (wfn G B2)) :=
@bitrd ph (wfn F A2) (wfn G A2) (wfn G B2)
  (@fneq1d ph A2 F G
    fneq12d_1)
  (@fneq2d ph A2 B2 G
    fneq12d_2)


/-- Equality theorem for function predicate with domain. (Contributed by Thierry Arnoux,
31-Jan-2017.) -/
theorem fneq12 {A2 B2 F G : «class»} :
  ⊦ wi (wa (wceq F G) (wceq A2 B2)) (wb (wfn F A2) (wfn G B2)) :=
@fneq12d (wa (wceq F G) (wceq A2 B2)) A2 B2 F G
  (@simpl (wceq F G) (wceq A2 B2))
  (@simpr (wceq F G) (wceq A2 B2))


/-- Equality inference for function predicate with domain. (Contributed by Paul Chapman,
22-Jun-2011.) -/
theorem fneq1i {A2 F G : «class»}
  (fneq1i_1 : ⊦ wceq F G) :
  ⊦ wb (wfn F A2) (wfn G A2) :=
@ax_mp (wceq F G) (wb (wfn F A2) (wfn G A2))
  fneq1i_1
  (@fneq1 A2 F G)


/-- Equality inference for function predicate with domain. (Contributed by NM, 4-Sep-2011.) -/
theorem fneq2i {A2 B2 F : «class»}
  (fneq2i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wfn F A2) (wfn F B2) :=
@ax_mp (wceq A2 B2) (wb (wfn F A2) (wfn F B2))
  fneq2i_1
  (@fneq2 A2 B2 F)


/-- Bound-variable hypothesis builder for a function with domain. (Contributed by NM, 30-Jan-2004.)
-/
theorem nffn {A2 F : setvar → «class»}
  (nffn_1 : ⊦ wnfc (λ x3, F x3))
  (nffn_2 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnf (λ x3, wfn (F x3) (A2 x3)) :=
@nfxfr (λ x3, wfn (F x3) (A2 x3)) (λ x3, wa (wfun (F x3)) (wceq (cdm (F x3)) (A2 x3)))
  (λ x3, @df_fn (F x3) (A2 x3))
  (@nfan (λ x3, wfun (F x3)) (λ x3, wceq (cdm (F x3)) (A2 x3))
    (@nffun (λ x3, F x3)
      nffn_1)
    (@nfeq (λ x3, cdm (F x3)) (λ x3, A2 x3)
      (@nfdm (λ x3, F x3)
        nffn_1)
      nffn_2))


/-- A function with domain is a function. (Contributed by NM, 1-Aug-1994.) -/
theorem fnfun {A2 F : «class»} :
  ⊦ wi (wfn F A2) (wfun F) :=
@simplbi (wfn F A2) (wfun F) (wceq (cdm F) A2)
  (@df_fn F A2)


/-- A function with domain is a relation. (Contributed by NM, 1-Aug-1994.) -/
theorem fnrel {A2 F : «class»} :
  ⊦ wi (wfn F A2) (wrel F) :=
@syl (wfn F A2) (wfun F) (wrel F)
  (@fnfun A2 F)
  (@funrel F)


/-- The domain of a function. (Contributed by NM, 2-Aug-1994.) -/
theorem fndm {A2 F : «class»} :
  ⊦ wi (wfn F A2) (wceq (cdm F) A2) :=
@simprbi (wfn F A2) (wfun F) (wceq (cdm F) A2)
  (@df_fn F A2)


/-- The domain of a function. (Contributed by Wolf Lammen, 1-Jun-2024.) -/
theorem fndmi {A2 F : «class»}
  (fndmi_1 : ⊦ wfn F A2) :
  ⊦ wceq (cdm F) A2 :=
@ax_mp (wfn F A2) (wceq (cdm F) A2)
  fndmi_1
  (@fndm A2 F)


/-- The domain of a function. (Contributed by Glauco Siliprandi, 23-Oct-2021.) -/
theorem fndmd {ph : wff} {A2 F : «class»}
  (fndmd_1 : ⊦ wi ph (wfn F A2)) :
  ⊦ wi ph (wceq (cdm F) A2) :=
@syl ph (wfn F A2) (wceq (cdm F) A2)
  fndmd_1
  (@fndm A2 F)


/-- Inference to convert a function and domain antecedent. (Contributed by NM, 22-Apr-2004.) -/
theorem funfni {ph : wff} {A2 B2 F : «class»}
  (funfni_1 : ⊦ wi (wa (wfun F) (wcel B2 (cdm F))) ph) :
  ⊦ wi (wa (wfn F A2) (wcel B2 A2)) ph :=
@syl2an2r (wfn F A2) (wfun F) (wcel B2 A2) (wcel B2 (cdm F)) ph
  (@fnfun A2 F)
  (@biimpar (wfn F A2) (wcel B2 (cdm F)) (wcel B2 A2)
    (@eleq2d (wfn F A2) (cdm F) A2 B2
      (@fndm A2 F)))
  funfni_1


/-- The first argument of binary relation on a function belongs to the function's domain.
(Contributed by NM, 7-May-2004.) -/
theorem fnbr {A2 B2 C F : «class»} :
  ⊦ wi (wa (wfn F A2) (wbr B2 C F)) (wcel B2 A2) :=
@syldan (wfn F A2) (wbr B2 C F) (wcel B2 (cdm F)) (wcel B2 A2)
  (@sylan (wfn F A2) (wrel F) (wbr B2 C F) (wcel B2 (cdm F))
    (@fnrel A2 F)
    (@releldm B2 C F))
  (@biimpa (wfn F A2) (wcel B2 (cdm F)) (wcel B2 A2)
    (@eleq2d (wfn F A2) (cdm F) A2 B2
      (@fndm A2 F)))


/-- The first argument of an ordered pair in a function belongs to the function's domain.
(Contributed by NM, 8-Aug-1994.) -/
theorem fnop {A2 B2 C F : «class»} :
  ⊦ wi (wa (wfn F A2) (wcel (cop B2 C) F)) (wcel B2 A2) :=
@sylan2br (wcel (cop B2 C) F) (wfn F A2) (wbr B2 C F) (wcel B2 A2)
  (@df_br B2 C F)
  (@fnbr A2 B2 C F)


/-- There is exactly one value of a function. (Contributed by NM, 22-Apr-2004.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem fneu {A2 : setvar → «class»} {B2 F : «class»}
  (y : setvar) : ⊦ wi (wa (wfn F (A2 y)) (wcel B2 (A2 y))) (weu (λ y, wbr B2 (cv y) F)) :=
@funfni (weu (λ y, wbr B2 (cv y) F)) (A2 y) B2 F
  (@mpbid (wa (wfun F) (wcel B2 (cdm F))) (wmo (λ y, wbr B2 (cv y) F)) (weu (λ y, wbr B2 (cv y) F))
    (@adantr (wfun F) (wmo (λ y, wbr B2 (cv y) F)) (wcel B2 (cdm F))
      (@funmo B2 F))
    (@syl (wa (wfun F) (wcel B2 (cdm F))) (wex (λ y, wbr B2 (cv y) F)) (wb (wmo (λ y, wbr B2 (cv y) F)) (weu (λ y, wbr B2 (cv y) F)))
      (@adantl (wcel B2 (cdm F)) (wex (λ y, wbr B2 (cv y) F)) (wfun F)
        (@ibi (wcel B2 (cdm F)) (wex (λ y, wbr B2 (cv y) F))
          (setvar.forget $ λ y : setvar,
            show ⊦ wi (wcel B2 (cdm F)) (wb (wcel B2 (cdm F)) (wex (λ y, wbr B2 (cv y) F))), from
            @eldmg B2 F (λ y, cdm F) y)))
      (@exmoeub (λ y, wbr B2 (cv y) F))))


/-- There is exactly one value of a function. (Contributed by NM, 7-Nov-1995.) -/
theorem fneu2 {A2 : setvar → «class»} {B2 F : «class»}
  (y : setvar) : ⊦ wi (wa (wfn F (A2 y)) (wcel B2 (A2 y))) (weu (λ y, wcel (cop B2 (cv y)) F)) :=
@sylib (wa (wfn F (A2 y)) (wcel B2 (A2 y))) (weu (λ y, wbr B2 (cv y) F)) (weu (λ y, wcel (cop B2 (cv y)) F))
  (@fneu (λ y, A2 y) B2 F y)
  (@eubii (λ y, wbr B2 (cv y) F) (λ y, wcel (cop B2 (cv y)) F)
    (λ y, @df_br B2 (cv y) F))


/-- The union of two functions with disjoint domains. (Contributed by NM, 22-Sep-2004.) -/
theorem fnun {A2 B2 F G : «class»} :
  ⊦ wi (wa (wa (wfn F A2) (wfn G B2)) (wceq (cin A2 B2) c0)) (wfn (cun F G) (cun A2 B2)) :=
@imp (wa (wfn F A2) (wfn G B2)) (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2))
  (@syl2anb (wfn F A2) (wa (wfun F) (wceq (cdm F) A2)) (wa (wfun G) (wceq (cdm G) B2)) (wi (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2))) (wfn G B2)
    (@df_fn F A2)
    (@df_fn G B2)
    (@an4s (wfun F) (wfun G) (wceq (cdm F) A2) (wceq (cdm G) B2) (wi (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2)))
      (@impcom (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wa (wfun F) (wfun G)) (wi (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2)))
        (@expd (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wa (wfun F) (wfun G)) (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2))
          (@syl6ibr (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wa (wa (wfun F) (wfun G)) (wceq (cin A2 B2) c0)) (wa (wfun (cun F G)) (wceq (cdm (cun F G)) (cun A2 B2))) (wfn (cun F G) (cun A2 B2))
            (@jctird (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wa (wa (wfun F) (wfun G)) (wceq (cin A2 B2) c0)) (wfun (cun F G)) (wceq (cdm (cun F G)) (cun A2 B2))
              (@syl6bir (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wa (wa (wfun F) (wfun G)) (wceq (cin A2 B2) c0)) (wa (wa (wfun F) (wfun G)) (wceq (cin (cdm F) (cdm G)) c0)) (wfun (cun F G))
                (@anbi2d (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (wceq (cin (cdm F) (cdm G)) c0) (wceq (cin A2 B2) c0) (wa (wfun F) (wfun G))
                  (@eqeq1d (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (cin (cdm F) (cdm G)) (cin A2 B2) c0
                    (@ineq12 (cdm F) A2 (cdm G) B2)))
                (@funun F G))
              (@syl5eq (wa (wceq (cdm F) A2) (wceq (cdm G) B2)) (cdm (cun F G)) (cun (cdm F) (cdm G)) (cun A2 B2)
                (@dmun F G)
                (@uneq12 (cdm F) A2 (cdm G) B2)))
            (@df_fn (cun F G) (cun A2 B2)))))))


/-- Composition of a function with domain and a function as a function with domain. Generalization
of ~ fnco . (Contributed by AV, 17-Sep-2024.) -/
theorem fncofn {A2 F G : «class»} :
  ⊦ wi (wa (wfn F A2) (wfun G)) (wfn (ccom F G) (cima (ccnv G) A2)) :=
@mpbird (wa (wfn F A2) (wfun G)) (wfn (ccom F G) (cima (ccnv G) A2)) (wfn (ccom F G) (cdm (ccom F G)))
  (@funfnd (wa (wfn F A2) (wfun G)) (ccom F G)
    (@sylan (wfn F A2) (wfun F) (wfun G) (wfun (ccom F G))
      (@fnfun A2 F)
      (@funco F G)))
  (@fneq2d (wa (wfn F A2) (wfun G)) (cima (ccnv G) A2) (cdm (ccom F G)) (ccom F G)
    (@eqtr4di (wa (wfn F A2) (wfun G)) (cima (ccnv G) A2) (cima (ccnv G) (cdm F)) (cdm (ccom F G))
      (@imaeq2d (wa (wfn F A2) (wfun G)) A2 (cdm F) (ccnv G)
        (@eqcomd (wa (wfn F A2) (wfun G)) (cdm F) A2
          (@adantr (wfn F A2) (wceq (cdm F) A2) (wfun G)
            (@fndm A2 F))))
      (@dmco F G)))


/-- Composition of two functions with domains as a function with domain. (Contributed by NM,
22-May-2006.) (Proof shortened by AV, 20-Sep-2024.) -/
theorem fnco {A2 B2 F G : «class»} :
  ⊦ wi (w3a (wfn F A2) (wfn G B2) (wss (crn G) A2)) (wfn (ccom F G) B2) :=
@mpbird (w3a (wfn F A2) (wfn G B2) (wss (crn G) A2)) (wfn (ccom F G) B2) (wfn (ccom F G) (cima (ccnv G) A2))
  (@«3adant3» (wfn F A2) (wfn G B2) (wfn (ccom F G) (cima (ccnv G) A2)) (wss (crn G) A2)
    (@sylan2 (wfn G B2) (wfn F A2) (wfun G) (wfn (ccom F G) (cima (ccnv G) A2))
      (@fnfun B2 G)
      (@fncofn A2 F G)))
  (@fneq2d (w3a (wfn F A2) (wfn G B2) (wss (crn G) A2)) B2 (cima (ccnv G) A2) (ccom F G)
    (@eqtr2d (w3a (wfn F A2) (wfn G B2) (wss (crn G) A2)) (cima (ccnv G) A2) (cdm G) B2
      (@«3ad2ant3» (wss (crn G) A2) (wfn F A2) (wceq (cima (ccnv G) A2) (cdm G)) (wfn G B2)
        (@cnvimassrndm A2 G))
      (@«3ad2ant2» (wfn G B2) (wfn F A2) (wceq (cdm G) B2) (wss (crn G) A2)
        (@fndm B2 G))))


/-- A function does not change when restricted to its domain. (Contributed by NM, 5-Sep-2004.) -/
theorem fnresdm {A2 F : «class»} :
  ⊦ wi (wfn F A2) (wceq (cres F A2) F) :=
@syl2anc (wfn F A2) (wrel F) (wss (cdm F) A2) (wceq (cres F A2) F)
  (@fnrel A2 F)
  (@syl (wfn F A2) (wceq (cdm F) A2) (wss (cdm F) A2)
    (@fndm A2 F)
    (@eqimss (cdm F) A2))
  (@relssres F A2)


/-- A function restricted to a class disjoint with its domain is empty. (Contributed by NM,
23-Sep-2004.) -/
theorem fnresdisj {A2 B2 F : «class»} :
  ⊦ wi (wfn F A2) (wb (wceq (cin A2 B2) c0) (wceq (cres F B2) c0)) :=
@syl5rbb (wceq (cres F B2) c0) (wceq (cdm (cres F B2)) c0) (wfn F A2) (wceq (cin A2 B2) c0)
  (@ax_mp (wrel (cres F B2)) (wb (wceq (cres F B2) c0) (wceq (cdm (cres F B2)) c0))
    (@relres F B2)
    (@reldm0 (cres F B2)))
  (@eqeq1d (wfn F A2) (cdm (cres F B2)) (cin A2 B2) c0
    (@syl5eq (wfn F A2) (cdm (cres F B2)) (cin (cdm F) B2) (cin A2 B2)
      (@eqtri (cdm (cres F B2)) (cin B2 (cdm F)) (cin (cdm F) B2)
        (@dmres F B2)
        (@incom B2 (cdm F)))
      (@ineq1d (wfn F A2) (cdm F) A2 B2
        (@fndm A2 F))))


/-- Restriction of a function with a subclass of its domain. (Contributed by NM, 10-Oct-2007.) -/
theorem fnssresb {A2 B2 F : «class»} :
  ⊦ wi (wfn F A2) (wb (wfn (cres F B2) B2) (wss B2 A2)) :=
@syl5bb (wfn (cres F B2) B2) (wa (wfun (cres F B2)) (wceq (cdm (cres F B2)) B2)) (wfn F A2) (wss B2 A2)
  (@df_fn (cres F B2) B2)
  (@bitr3d (wfn F A2) (wceq (cdm (cres F B2)) B2) (wa (wfun (cres F B2)) (wceq (cdm (cres F B2)) B2)) (wss B2 A2)
    (@biantrurd (wfn F A2) (wfun (cres F B2)) (wceq (cdm (cres F B2)) B2)
      (@funresd (wfn F A2) B2 F
        (@fnfun A2 F)))
    (@bitr3id (wceq (cdm (cres F B2)) B2) (wss B2 (cdm F)) (wfn F A2) (wss B2 A2)
      (@ssdmres B2 F)
      (@sseq2d (wfn F A2) (cdm F) A2 B2
        (@fndm A2 F))))


/-- Restriction of a function with a subclass of its domain. (Contributed by NM, 2-Aug-1994.) -/
theorem fnssres {A2 B2 F : «class»} :
  ⊦ wi (wa (wfn F A2) (wss B2 A2)) (wfn (cres F B2) B2) :=
@biimpar (wfn F A2) (wfn (cres F B2) B2) (wss B2 A2)
  (@fnssresb A2 B2 F)


/-- An equivalence for functionality of a restriction. Compare ~ dffun8 . (Contributed by Mario
Carneiro, 20-May-2015.) (Proof shortened by Peter Mazsa, 2-Oct-2022.) -/
theorem fnres {A2 F : «class»} :
  ⊦ wb (wfn (cres F A2) A2) (wral (λ x3, weu (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)) :=
@«3bitr4i» (wa (wfun (cres F A2)) (wceq (cdm (cres F A2)) A2)) (wral (λ x3, wa (wex (λ y, wbr (cv x3) (cv y) F)) (wmo (λ y, wbr (cv x3) (cv y) F))) (λ x3, A2)) (wfn (cres F A2) A2) (wral (λ x3, weu (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))
  (@«3bitr4i» (wa (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)) (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))) (wa (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))) (wa (wfun (cres F A2)) (wceq (cdm (cres F A2)) A2)) (wral (λ x3, wa (wex (λ y, wbr (cv x3) (cv y) F)) (wmo (λ y, wbr (cv x3) (cv y) F))) (λ x3, A2))
    (@ancom (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)) (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)))
    (@anbi12i (wfun (cres F A2)) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)) (wceq (cdm (cres F A2)) A2) (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))
      (@«3bitr4i» (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (cres F A2)))) (wal (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wbr (cv x3) (cv y) F)))) (wfun (cres F A2)) (wral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))
        (@albii (λ x3, wmo (λ y, wbr (cv x3) (cv y) (cres F A2))) (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, wbr (cv x3) (cv y) F)))
          (λ x3, @bitri (wmo (λ y, wbr (cv x3) (cv y) (cres F A2))) (wmo (λ y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))) (wi (wcel (cv x3) A2) (wmo (λ y, wbr (cv x3) (cv y) F)))
            (@mobii (λ y, wbr (cv x3) (cv y) (cres F A2)) (λ y, wa (wcel (cv x3) A2) (wbr (cv x3) (cv y) F))
              (λ y, @brresi A2 (cv x3) (cv y) F
                (@vex y)))
            (@moanimv (wcel (cv x3) A2) (λ y, wbr (cv x3) (cv y) F))))
        (@mpbiran (wfun (cres F A2)) (wrel (cres F A2)) (wal (λ x3, wmo (λ y, wbr (cv x3) (cv y) (cres F A2))))
          (@relres F A2)
          (@dffun6 (cres F A2)))
        (@df_ral (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)))
      (@bitri (wceq (cdm (cres F A2)) A2) (wss A2 (cdm (cres F A2))) (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))
        (@mpbiran (wceq (cdm (cres F A2)) A2) (wss (cdm (cres F A2)) A2) (wss A2 (cdm (cres F A2)))
          (@eqsstri (cdm (cres F A2)) (cin A2 (cdm F)) A2
            (@dmres F A2)
            (@inss1 A2 (cdm F)))
          (@eqss (cdm (cres F A2)) A2))
        (@bitri (wss A2 (cdm (cres F A2))) (wral (λ x3, wcel (cv x3) (cdm (cres F A2))) (λ x3, A2)) (wral (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2))
          (@dfss3 A2 (cdm (cres F A2)))
          (@ralbiia (λ x3, wcel (cv x3) (cdm (cres F A2))) (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)
            (λ x3, @bitrdi (wcel (cv x3) A2) (wcel (cv x3) (cdm (cres F A2))) (wcel (cv x3) (cdm F)) (wex (λ y, wbr (cv x3) (cv y) F))
              (@baib (wcel (cv x3) (cdm (cres F A2))) (wcel (cv x3) A2) (wcel (cv x3) (cdm F))
                (@elin2 (cv x3) A2 (cdm F) (cdm (cres F A2))
                  (@dmres F A2)))
              (@eldm (cv x3) F
                (@vex x3)))))))
    (@r19_26 (λ x3, wex (λ y, wbr (cv x3) (cv y) F)) (λ x3, wmo (λ y, wbr (cv x3) (cv y) F)) (λ x3, A2)))
  (@df_fn (cres F A2) A2)
  (@ralbii (λ x3, weu (λ y, wbr (cv x3) (cv y) F)) (λ x3, wa (wex (λ y, wbr (cv x3) (cv y) F)) (wmo (λ y, wbr (cv x3) (cv y) F))) (λ x3, A2)
    (λ x3, @df_eu (λ y, wbr (cv x3) (cv y) F)))


/-- The identity relation is a function on the universal class. See also ~ funi . (Contributed by
BJ, 23-Dec-2023.) -/
theorem idfn :
  ⊦ wfn cid cvv :=
@mpbir2an (wfn cid cvv) (wfun cid) (wceq (cdm cid) cvv)
  funi
  dmi
  (@df_fn cid cvv)


/-- The restricted identity relation is a function on the restricting class. (Contributed by NM,
27-Aug-2004.) (Proof shortened by BJ, 27-Dec-2023.) -/
theorem fnresi {A2 : «class»} :
  ⊦ wfn (cres cid A2) A2 :=
@mp2an (wfn cid cvv) (wss A2 cvv) (wfn (cres cid A2) A2)
  idfn
  (@ssv A2)
  (@fnssres cvv A2 cid)


/-- The image of a function's domain is its range. (Contributed by NM, 4-Nov-2004.) (Proof shortened
by Andrew Salmon, 17-Sep-2011.) -/
theorem fnima {A2 F : «class»} :
  ⊦ wi (wfn F A2) (wceq (cima F A2) (crn F)) :=
@syl5eq (wfn F A2) (cima F A2) (crn (cres F A2)) (crn F)
  (@df_ima F A2)
  (@rneqd (wfn F A2) (cres F A2) F
    (@fnresdm A2 F))


/-- A function with empty domain is empty. (Contributed by NM, 15-Apr-1998.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem fn0 {F : «class»} :
  ⊦ wb (wfn F c0) (wceq F c0) :=
@impbii (wfn F c0) (wceq F c0)
  (@syl2anc (wfn F c0) (wrel F) (wceq (cdm F) c0) (wceq F c0)
    (@fnrel c0 F)
    (@fndm c0 F)
    (@biimpar (wrel F) (wceq F c0) (wceq (cdm F) c0)
      (@reldm0 F)))
  (@mpbiri (wceq F c0) (wfn F c0) (wfn c0 c0)
    (@mpbir2an (wfn c0 c0) (wfun c0) (wceq (cdm c0) c0)
      fun0
      dm0
      (@df_fn c0 c0))
    (@fneq1 c0 F c0))


/-- Alternate definition for the maps-to notation ~ df-mpt . (Contributed by Mario Carneiro,
30-Dec-2016.) -/
theorem dfmpt3 {A2 B2 : setvar → «class»} :
  ⊦ wceq (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (csn (B2 x3)))) :=
@eqtr4i (cmpt (λ x3, A2 x3) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (csn (B2 x3))))
  (@df_mpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@eqriv (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (csn (B2 x3)))) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
    (λ z, @«3bitr4i» (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (csn (B2 x3))))))) (wex (λ x3, wex (λ y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))) (wcel (cv z) (ciun (λ x3, A2 x3) (λ x3, cxp (csn (cv x3)) (csn (B2 x3))))) (wcel (cv z) (copab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3)))))
      (@«2exbii» (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (csn (B2 x3))))) (λ x3 y, wa (wceq (cv z) (cop (cv x3) (cv y))) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))))
        (λ x3 y, @anbi2i (wa (wcel (cv x3) (A2 x3)) (wcel (cv y) (csn (B2 x3)))) (wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (wceq (cv z) (cop (cv x3) (cv y)))
          (@anbi2i (wcel (cv y) (csn (B2 x3))) (wceq (cv y) (B2 x3)) (wcel (cv x3) (A2 x3))
            (@velsn (λ y, B2 x3) y))))
      (@eliunxp (λ x3, A2 x3) (λ x3, csn (B2 x3)) (cv z))
      (@elopab (λ x3 y, wa (wcel (cv x3) (A2 x3)) (wceq (cv y) (B2 x3))) (cv z))))


/-- Functionality and domain of an ordered-pair class abstraction. (Contributed by NM, 30-Jan-2004.)
(Proof shortened by Mario Carneiro, 4-Dec-2016.) -/
theorem fnopabg {ph : setvar → setvar → wff} {A2 : «class»} {F : setvar → setvar → «class»}
  (fnopabg_1 : ∀ x3 y, ⊦ wceq (F x3 y) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))))
  (x3 y : setvar) : ⊦ wb (wral (λ x3, weu (λ y, ph x3 y)) (λ x3, A2)) (wfn (F x3 y) A2) :=
@«3bitr4i» (wral (λ x3, wa (wmo (λ y, ph x3 y)) (wex (λ y, ph x3 y))) (λ x3, A2)) (wfn (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))) A2) (wral (λ x3, weu (λ y, ph x3 y)) (λ x3, A2)) (wfn (F x3 y) A2)
  (@«3bitr4i» (wa (wral (λ x3, wmo (λ y, ph x3 y)) (λ x3, A2)) (wral (λ x3, wex (λ y, ph x3 y)) (λ x3, A2))) (wa (wfun (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (wceq (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2)) (wral (λ x3, wa (wmo (λ y, ph x3 y)) (wex (λ y, ph x3 y))) (λ x3, A2)) (wfn (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))) A2)
    (@anbi12i (wral (λ x3, wmo (λ y, ph x3 y)) (λ x3, A2)) (wfun (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (wral (λ x3, wex (λ y, ph x3 y)) (λ x3, A2)) (wceq (cdm (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) A2)
      (@«3bitr4ri» (wal (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (ph x3 y)))) (wal (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, ph x3 y)))) (wfun (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))) (wral (λ x3, wmo (λ y, ph x3 y)) (λ x3, A2))
        (@albii (λ x3, wmo (λ y, wa (wcel (cv x3) A2) (ph x3 y))) (λ x3, wi (wcel (cv x3) A2) (wmo (λ y, ph x3 y)))
          (λ x3, @moanimv (wcel (cv x3) A2) (λ y, ph x3 y)))
        (@funopab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
        (@df_ral (λ x3, wmo (λ y, ph x3 y)) (λ x3, A2)))
      (@dmopab3 (λ x3 y, ph x3 y) A2))
    (@r19_26 (λ x3, wmo (λ y, ph x3 y)) (λ x3, wex (λ y, ph x3 y)) (λ x3, A2))
    (@df_fn (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))) A2))
  (@ralbii (λ x3, weu (λ y, ph x3 y)) (λ x3, wa (wmo (λ y, ph x3 y)) (wex (λ y, ph x3 y))) (λ x3, A2)
    (λ x3, @biancomi (weu (λ y, ph x3 y)) (wmo (λ y, ph x3 y)) (wex (λ y, ph x3 y))
      (@df_eu (λ y, ph x3 y))))
  (@fneq1i A2 (F x3 y) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y)))
    (fnopabg_1 x3 y))


/-- Functionality and domain of an ordered-pair class abstraction. (Contributed by NM, 5-Mar-1996.)
-/
theorem fnopab {ph : setvar → setvar → wff} {A2 : «class»} {F : setvar → setvar → «class»}
  (fnopab_1 : ∀ x3, ⊦ wi (wcel (cv x3) A2) (weu (λ y, ph x3 y)))
  (fnopab_2 : ∀ x3 y, ⊦ wceq (F x3 y) (copab (λ x3 y, wa (wcel (cv x3) A2) (ph x3 y))))
  (x3 y : setvar) : ⊦ wfn (F x3 y) A2 :=
@mpbi (wral (λ x3, weu (λ y, ph x3 y)) (λ x3, A2)) (wfn (F x3 y) A2)
  (@rgen (λ x3, weu (λ y, ph x3 y)) (λ x3, A2)
    (λ x3, fnopab_1 x3))
  (@fnopabg (λ x3 y, ph x3 y) A2 (λ x3 y, F x3 y)
    (λ x3 y, fnopab_2 x3 y) x3 y)


/-- The maps-to notation defines a function with domain. (Contributed by Scott Fenton, 21-Mar-2011.)
-/
theorem mptfng {A2 : «class»} {B2 F : setvar → «class»}
  (mptfng_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wb (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) (wfn (F x3) A2) :=
@bitri (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) (wral (λ x3, weu (λ y, wceq (cv y) (B2 x3))) (λ x3, A2)) (wfn (F x3) A2)
  (@ralbii (λ x3, wcel (B2 x3) cvv) (λ x3, weu (λ y, wceq (cv y) (B2 x3))) (λ x3, A2)
    (λ x3, @eueq (B2 x3)))
  (setvar.forget $ λ y : setvar,
    show ⊦ wb (wral (λ x3, weu (λ y, wceq (cv y) (B2 x3))) (λ x3, A2)) (wfn (F x3) A2), from
    @fnopabg (λ x3 y, wceq (cv y) (B2 x3)) A2 (λ x3 y, F x3)
      (λ x3 y, @eqtri (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)) (copab (λ x3 y, wa (wcel (cv x3) A2) (wceq (cv y) (B2 x3))))
        (mptfng_1 x3)
        (@df_mpt (λ x3, A2) (λ x3, B2 x3))) x3 y)


/-- The maps-to notation defines a function with domain. (Contributed by NM, 9-Apr-2013.) -/
theorem fnmpt {A2 : «class»} {B2 F V : setvar → «class»}
  (mptfng_1 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wi (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2)) (wfn (F x3) A2) :=
@sylib (wral (λ x3, wcel (B2 x3) (V x3)) (λ x3, A2)) (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) (wfn (F x3) A2)
  (@ralimi (λ x3, wcel (B2 x3) (V x3)) (λ x3, wcel (B2 x3) cvv) (λ x3, A2)
    (λ x3, @elex (B2 x3) (V x3)))
  (@mptfng A2 (λ x3, B2 x3) (λ x3, F x3)
    (λ x3, mptfng_1 x3) x3)


/-- A mapping operation with empty domain. (Contributed by Mario Carneiro, 28-Dec-2014.) -/
theorem mpt0 {A2 : setvar → «class»} :
  ⊦ wceq (cmpt (λ x3, c0) (λ x3, A2 x3)) c0 :=
@mpbi (wfn (cmpt (λ x3, c0) (λ x3, A2 x3)) c0) (wceq (cmpt (λ x3, c0) (λ x3, A2 x3)) c0)
  (@ax_mp (wral (λ x3, wcel (A2 x3) cvv) (λ x3, c0)) (wfn (cmpt (λ x3, c0) (λ x3, A2 x3)) c0)
    (@ral0 (λ x3, wcel (A2 x3) cvv))
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wral (λ x3, wcel (A2 x3) cvv) (λ x3, c0)) (wfn (cmpt (λ x3, c0) (λ x3, A2 x3)) c0), from
      @fnmpt c0 (λ x3, A2 x3) (λ x3, cmpt (λ x3, c0) (λ x3, A2 x3)) (λ x3, cvv)
        (λ x3, @eqid (cmpt (λ x3, c0) (λ x3, A2 x3))) x3))
  (@fn0 (cmpt (λ x3, c0) (λ x3, A2 x3)))


/-- Functionality and domain of an ordered-pair class abstraction. (Contributed by NM, 29-Jan-2004.)
(Revised by Mario Carneiro, 31-Aug-2015.) -/
theorem fnmpti {A2 : «class»} {B2 F : setvar → «class»}
  (fnmpti_1 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (fnmpti_2 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wfn (F x3) A2 :=
@mpbi (wral (λ x3, wcel (B2 x3) cvv) (λ x3, A2)) (wfn (F x3) A2)
  (@rgenw (λ x3, wcel (B2 x3) cvv) (λ x3, A2)
    (λ x3, fnmpti_1 x3))
  (@mptfng A2 (λ x3, B2 x3) (λ x3, F x3)
    (λ x3, fnmpti_2 x3) x3)


/-- Domain of the mapping operation. (Contributed by NM, 6-Sep-2005.) (Revised by Mario Carneiro,
31-Aug-2015.) -/
theorem dmmpti {A2 : «class»} {B2 F : setvar → «class»}
  (fnmpti_1 : ∀ x3, ⊦ wcel (B2 x3) cvv)
  (fnmpti_2 : ∀ x3, ⊦ wceq (F x3) (cmpt (λ x3, A2) (λ x3, B2 x3)))
  (x3 : setvar) : ⊦ wceq (cdm (F x3)) A2 :=
@fndmi A2 (F x3)
  (@fnmpti A2 (λ x3, B2 x3) (λ x3, F x3)
    (λ x3, fnmpti_1 x3)
    (λ x3, fnmpti_2 x3) x3)


/-- The domain of the mapping operation, deduction form. (Contributed by Glauco Siliprandi,
11-Dec-2019.) -/
theorem dmmptd {ph : wff} {A2 : setvar → «class»} {B2 : «class»} {C V : setvar → «class»}
  (dmmptd_a : ∀ x3, ⊦ wceq (A2 x3) (cmpt (λ x3, B2) (λ x3, C x3)))
  (dmmptd_c : ∀ x3, ⊦ wi (wa ph (wcel (cv x3) B2)) (wcel (C x3) (V x3)))
  (x3 : setvar) : ⊦ wi ph (wceq (cdm (A2 x3)) B2) :=
@eqtr4id ph (cdm (A2 x3)) (crab (λ x3, wcel (C x3) cvv) (λ x3, B2)) B2
  (@dmmpt (λ x3, B2) (λ x3, C x3) (λ x3, A2 x3)
    (λ x3, dmmptd_a x3) x3)
  (@sylibr ph (wral (λ x3, wcel (C x3) cvv) (λ x3, B2)) (wceq B2 (crab (λ x3, wcel (C x3) cvv) (λ x3, B2)))
    (@ralrimiva ph (λ x3, wcel (C x3) cvv) (λ x3, B2)
      (λ x3, @elexd (wa ph (wcel (cv x3) B2)) (C x3) (V x3)
        (dmmptd_c x3)))
    (@rabid2 (λ x3, wcel (C x3) cvv) B2))


/-- Equality theorem for functions. (Contributed by NM, 1-Aug-1994.) -/
theorem feq1 {A2 B2 F G : «class»} :
  ⊦ wi (wceq F G) (wb (wf A2 B2 F) (wf A2 B2 G)) :=
@«3bitr4g» (wceq F G) (wa (wfn F A2) (wss (crn F) B2)) (wa (wfn G A2) (wss (crn G) B2)) (wf A2 B2 F) (wf A2 B2 G)
  (@anbi12d (wceq F G) (wfn F A2) (wfn G A2) (wss (crn F) B2) (wss (crn G) B2)
    (@fneq1 A2 F G)
    (@sseq1d (wceq F G) (crn F) (crn G) B2
      (@rneq F G)))
  (@df_f A2 B2 F)
  (@df_f A2 B2 G)


/-- Equality theorem for functions. (Contributed by NM, 1-Aug-1994.) -/
theorem feq2 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf A2 C F) (wf B2 C F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfn F A2) (wss (crn F) C)) (wa (wfn F B2) (wss (crn F) C)) (wf A2 C F) (wf B2 C F)
  (@anbi1d (wceq A2 B2) (wfn F A2) (wfn F B2) (wss (crn F) C)
    (@fneq2 A2 B2 F))
  (@df_f A2 C F)
  (@df_f B2 C F)


/-- Equality theorem for functions. (Contributed by NM, 1-Aug-1994.) -/
theorem feq3 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf C A2 F) (wf C B2 F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfn F C) (wss (crn F) A2)) (wa (wfn F C) (wss (crn F) B2)) (wf C A2 F) (wf C B2 F)
  (@anbi2d (wceq A2 B2) (wss (crn F) A2) (wss (crn F) B2) (wfn F C)
    (@sseq2 A2 B2 (crn F)))
  (@df_f C A2 F)
  (@df_f C B2 F)


/-- Equality theorem for functions. (Contributed by FL, 14-Jul-2007.) (Proof shortened by Andrew
Salmon, 17-Sep-2011.) -/
theorem feq23 {A2 B2 C D F : «class»} :
  ⊦ wi (wa (wceq A2 C) (wceq B2 D)) (wb (wf A2 B2 F) (wf C D F)) :=
@sylan9bb (wceq A2 C) (wf A2 B2 F) (wf C B2 F) (wceq B2 D) (wf C D F)
  (@feq2 A2 C B2 F)
  (@feq3 B2 D C F)


/-- Equality deduction for functions. (Contributed by NM, 19-Feb-2008.) -/
theorem feq1d {ph : wff} {A2 B2 F G : «class»}
  (feq1d_1 : ⊦ wi ph (wceq F G)) :
  ⊦ wi ph (wb (wf A2 B2 F) (wf A2 B2 G)) :=
@syl ph (wceq F G) (wb (wf A2 B2 F) (wf A2 B2 G))
  feq1d_1
  (@feq1 A2 B2 F G)


/-- Equality deduction for functions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem feq2d {ph : wff} {A2 B2 C F : «class»}
  (feq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wf A2 C F) (wf B2 C F)) :=
@syl ph (wceq A2 B2) (wb (wf A2 C F) (wf B2 C F))
  feq2d_1
  (@feq2 A2 B2 C F)


/-- Equality deduction for functions. (Contributed by AV, 1-Jan-2020.) -/
theorem feq3d {ph : wff} {A2 B2 F X : «class»}
  (feq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wf X A2 F) (wf X B2 F)) :=
@syl ph (wceq A2 B2) (wb (wf X A2 F) (wf X B2 F))
  feq2d_1
  (@feq3 A2 B2 X F)


/-- Equality deduction for functions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem feq12d {ph : wff} {A2 B2 C F G : «class»}
  (feq12d_1 : ⊦ wi ph (wceq F G))
  (feq12d_2 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wf A2 C F) (wf B2 C G)) :=
@bitrd ph (wf A2 C F) (wf A2 C G) (wf B2 C G)
  (@feq1d ph A2 C F G
    feq12d_1)
  (@feq2d ph A2 B2 C G
    feq12d_2)


/-- Equality deduction for functions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem feq123d {ph : wff} {A2 B2 C D F G : «class»}
  (feq12d_1 : ⊦ wi ph (wceq F G))
  (feq12d_2 : ⊦ wi ph (wceq A2 B2))
  (feq123d_3 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wb (wf A2 C F) (wf B2 D G)) :=
@bitrd ph (wf A2 C F) (wf B2 C G) (wf B2 D G)
  (@feq12d ph A2 B2 C F G
    feq12d_1
    feq12d_2)
  (@feq3d ph C D G B2
    feq123d_3)


/-- Equality theorem for functions. (Contributed by FL, 16-Nov-2008.) -/
theorem feq123 {A2 B2 C D F G : «class»} :
  ⊦ wi (w3a (wceq F G) (wceq A2 C) (wceq B2 D)) (wb (wf A2 B2 F) (wf C D G)) :=
@feq123d (w3a (wceq F G) (wceq A2 C) (wceq B2 D)) A2 C B2 D F G
  (@simp1 (wceq F G) (wceq A2 C) (wceq B2 D))
  (@simp2 (wceq F G) (wceq A2 C) (wceq B2 D))
  (@simp3 (wceq F G) (wceq A2 C) (wceq B2 D))


/-- Equality inference for functions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem feq1i {A2 B2 F G : «class»}
  (feq1i_1 : ⊦ wceq F G) :
  ⊦ wb (wf A2 B2 F) (wf A2 B2 G) :=
@ax_mp (wceq F G) (wb (wf A2 B2 F) (wf A2 B2 G))
  feq1i_1
  (@feq1 A2 B2 F G)


/-- Equality inference for functions. (Contributed by NM, 5-Sep-2011.) -/
theorem feq2i {A2 B2 C F : «class»}
  (feq2i_1 : ⊦ wceq A2 B2) :
  ⊦ wb (wf A2 C F) (wf B2 C F) :=
@ax_mp (wceq A2 B2) (wb (wf A2 C F) (wf B2 C F))
  feq2i_1
  (@feq2 A2 B2 C F)


/-- Equality inference for functions. (Contributed by Paul Chapman, 22-Jun-2011.) -/
theorem feq23i {A2 B2 C D F : «class»}
  (feq23i_1 : ⊦ wceq A2 C)
  (feq23i_2 : ⊦ wceq B2 D) :
  ⊦ wb (wf A2 B2 F) (wf C D F) :=
@mp2an (wceq A2 C) (wceq B2 D) (wb (wf A2 B2 F) (wf C D F))
  feq23i_1
  feq23i_2
  (@feq23 A2 B2 C D F)


/-- Equality deduction for functions. (Contributed by NM, 8-Jun-2013.) -/
theorem feq23d {ph : wff} {A2 B2 C D F : «class»}
  (feq23d_1 : ⊦ wi ph (wceq A2 C))
  (feq23d_2 : ⊦ wi ph (wceq B2 D)) :
  ⊦ wi ph (wb (wf A2 B2 F) (wf C D F)) :=
@feq123d ph A2 C B2 D F F
  (@eqidd ph F)
  feq23d_1
  feq23d_2


/-- Bound-variable hypothesis builder for a mapping. (Contributed by NM, 29-Jan-2004.) (Revised by
Mario Carneiro, 15-Oct-2016.) -/
theorem nff {A2 B2 F : setvar → «class»}
  (nff_1 : ⊦ wnfc (λ x3, F x3))
  (nff_2 : ⊦ wnfc (λ x3, A2 x3))
  (nff_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wf (A2 x3) (B2 x3) (F x3)) :=
@nfxfr (λ x3, wf (A2 x3) (B2 x3) (F x3)) (λ x3, wa (wfn (F x3) (A2 x3)) (wss (crn (F x3)) (B2 x3)))
  (λ x3, @df_f (A2 x3) (B2 x3) (F x3))
  (@nfan (λ x3, wfn (F x3) (A2 x3)) (λ x3, wss (crn (F x3)) (B2 x3))
    (@nffn (λ x3, A2 x3) (λ x3, F x3)
      nff_1
      nff_2)
    (@nfss (λ x3, crn (F x3)) (λ x3, B2 x3)
      (@nfrn (λ x3, F x3)
        nff_1)
      nff_3))


/-- A mapping is a function with domain. (Contributed by NM, 2-Aug-1994.) -/
theorem ffn {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wfn F A2) :=
@simplbi (wf A2 B2 F) (wfn F A2) (wss (crn F) B2)
  (@df_f A2 B2 F)


/-- A mapping is a function with domain, deduction form. (Contributed by Glauco Siliprandi,
17-Aug-2020.) -/
theorem ffnd {ph : wff} {A2 B2 F : «class»}
  (ffnd_1 : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wfn F A2) :=
@syl ph (wf A2 B2 F) (wfn F A2)
  ffnd_1
  (@ffn A2 B2 F)


/-- Any function is a mapping into ` _V ` . (Contributed by NM, 31-Oct-1995.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem dffn2 {A2 F : «class»} :
  ⊦ wb (wfn F A2) (wf A2 cvv F) :=
@bitr4i (wfn F A2) (wa (wfn F A2) (wss (crn F) cvv)) (wf A2 cvv F)
  (@biantru (wss (crn F) cvv) (wfn F A2)
    (@ssv (crn F)))
  (@df_f A2 cvv F)


/-- A mapping is a function. (Contributed by NM, 3-Aug-1994.) -/
theorem ffun {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wfun F) :=
@syl (wf A2 B2 F) (wfn F A2) (wfun F)
  (@ffn A2 B2 F)
  (@fnfun A2 F)


/-- A mapping is a function, deduction version. (Contributed by Glauco Siliprandi, 3-Mar-2021.) -/
theorem ffund {ph : wff} {A2 B2 F : «class»}
  (ffund_1 : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wfun F) :=
@syl ph (wf A2 B2 F) (wfun F)
  ffund_1
  (@ffun A2 B2 F)


/-- A mapping is a relation. (Contributed by NM, 3-Aug-1994.) -/
theorem frel {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wrel F) :=
@syl (wf A2 B2 F) (wfn F A2) (wrel F)
  (@ffn A2 B2 F)
  (@fnrel A2 F)


/-- The range of a mapping. (Contributed by NM, 3-Aug-1994.) -/
theorem frn {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wss (crn F) B2) :=
@simprbi (wf A2 B2 F) (wfn F A2) (wss (crn F) B2)
  (@df_f A2 B2 F)


/-- Deduction form of ~ frn . The range of a mapping. (Contributed by Glauco Siliprandi,
26-Jun-2021.) -/
theorem frnd {ph : wff} {A2 B2 F : «class»}
  (frnd_1 : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wss (crn F) B2) :=
@syl ph (wf A2 B2 F) (wss (crn F) B2)
  frnd_1
  (@frn A2 B2 F)


/-- The domain of a mapping. (Contributed by NM, 2-Aug-1994.) (Proof shortened by Wolf Lammen,
29-May-2024.) -/
theorem fdm {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wceq (cdm F) A2) :=
@fndmd (wf A2 B2 F) A2 F
  (@ffn A2 B2 F)


/-- Deduction form of ~ fdm . The domain of a mapping. (Contributed by Glauco Siliprandi,
26-Jun-2021.) -/
theorem fdmd {ph : wff} {A2 B2 F : «class»}
  (fdmd_1 : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wceq (cdm F) A2) :=
@syl ph (wf A2 B2 F) (wceq (cdm F) A2)
  fdmd_1
  (@fdm A2 B2 F)


/-- Inference associated with ~ fdm . The domain of a mapping. (Contributed by NM, 28-Jul-2008.) -/
theorem fdmi {A2 B2 F : «class»}
  (fdmi_1 : ⊦ wf A2 B2 F) :
  ⊦ wceq (cdm F) A2 :=
@ax_mp (wf A2 B2 F) (wceq (cdm F) A2)
  fdmi_1
  (@fdm A2 B2 F)


/-- A function maps to its range. (Contributed by NM, 1-Sep-1999.) -/
theorem dffn3 {A2 F : «class»} :
  ⊦ wb (wfn F A2) (wf A2 (crn F) F) :=
@bitr4i (wfn F A2) (wa (wfn F A2) (wss (crn F) (crn F))) (wf A2 (crn F) F)
  (@biantru (wss (crn F) (crn F)) (wfn F A2)
    (@ssid (crn F)))
  (@df_f A2 (crn F) F)


/-- Expanding the codomain of a mapping. (Contributed by NM, 10-May-1998.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem fss {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wss B2 C)) (wf A2 C F) :=
@impcom (wss B2 C) (wf A2 B2 F) (wf A2 C F)
  (@«3imtr4g» (wss B2 C) (wa (wfn F A2) (wss (crn F) B2)) (wa (wfn F A2) (wss (crn F) C)) (wf A2 B2 F) (wf A2 C F)
    (@anim2d (wss B2 C) (wss (crn F) B2) (wss (crn F) C) (wfn F A2)
      (@com12 (wss (crn F) B2) (wss B2 C) (wss (crn F) C)
        (@sstr2 (crn F) B2 C)))
    (@df_f A2 B2 F)
    (@df_f A2 C F))


/-- Expanding the codomain of a mapping, deduction form. (Contributed by Glauco Siliprandi,
11-Dec-2019.) -/
theorem fssd {ph : wff} {A2 B2 C F : «class»}
  (fssd_f : ⊦ wi ph (wf A2 B2 F))
  (fssd_b : ⊦ wi ph (wss B2 C)) :
  ⊦ wi ph (wf A2 C F) :=
@syl2anc ph (wf A2 B2 F) (wss B2 C) (wf A2 C F)
  fssd_f
  fssd_b
  (@fss A2 B2 C F)


/-- Expressing that a class is a subclass of the domain of a function expressed in maps-to notation,
deduction form. (Contributed by AV, 21-Aug-2022.) -/
theorem fssdmd {ph : wff} {A2 B2 D F : «class»}
  (fssdmd_f : ⊦ wi ph (wf A2 B2 F))
  (fssdmd_d : ⊦ wi ph (wss D (cdm F))) :
  ⊦ wi ph (wss D A2) :=
@sseqtrd ph D (cdm F) A2
  fssdmd_d
  (@fdmd ph A2 B2 F
    fssdmd_f)


/-- Expressing that a class is a subclass of the domain of a function expressed in maps-to notation,
semi-deduction form. (Contributed by AV, 21-Aug-2022.) -/
theorem fssdm {ph : wff} {A2 B2 D F : «class»}
  (fssdm_d : ⊦ wss D (cdm F))
  (fssdm_f : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wss D A2) :=
@sseqtrid ph (cdm F) D A2
  fssdm_d
  (@fdmd ph A2 B2 F
    fssdm_f)


/-- The image of a class under a function with domain and codomain is a subset of its codomain.
(Contributed by Glauco Siliprandi, 17-Aug-2020.) -/
theorem fimass {A2 B2 F X : «class»} :
  ⊦ wi (wf A2 B2 F) (wss (cima F X) B2) :=
@sstrid (wf A2 B2 F) (cima F X) (crn F) B2
  (@imassrn F X)
  (@frn A2 B2 F)


/-- The preimage of the codomain of a function is the function's domain. (Contributed by FL,
25-Jan-2007.) (Proof shortened by AV, 20-Sep-2024.) -/
theorem fimacnv {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wceq (cima (ccnv F) B2) A2) :=
@eqtrd (wf A2 B2 F) (cima (ccnv F) B2) (cdm F) A2
  (@syl (wf A2 B2 F) (wss (crn F) B2) (wceq (cima (ccnv F) B2) (cdm F))
    (@frn A2 B2 F)
    (@cnvimassrndm B2 F))
  (@fdm A2 B2 F)


/-- Composition of a function with domain and codomain and a function as a function with domain and
codomain. Generalization of ~ fco . (Contributed by AV, 18-Sep-2024.) -/
theorem fcof {A2 B2 F G : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wfun G)) (wf (cima (ccnv G) A2) B2 (ccom F G)) :=
@sylibr (wa (wf A2 B2 F) (wfun G)) (wa (wfn (ccom F G) (cima (ccnv G) A2)) (wss (crn (ccom F G)) B2)) (wf (cima (ccnv G) A2) B2 (ccom F G))
  (@sylanb (wf A2 B2 F) (wa (wfn F A2) (wss (crn F) B2)) (wfun G) (wa (wfn (ccom F G) (cima (ccnv G) A2)) (wss (crn (ccom F G)) B2))
    (@df_f A2 B2 F)
    (@imp (wa (wfn F A2) (wss (crn F) B2)) (wfun G) (wa (wfn (ccom F G) (cima (ccnv G) A2)) (wss (crn (ccom F G)) B2))
      (@jctird (wa (wfn F A2) (wss (crn F) B2)) (wfun G) (wfn (ccom F G) (cima (ccnv G) A2)) (wss (crn (ccom F G)) B2)
        (@adantr (wfn F A2) (wi (wfun G) (wfn (ccom F G) (cima (ccnv G) A2))) (wss (crn F) B2)
          (@ex (wfn F A2) (wfun G) (wfn (ccom F G) (cima (ccnv G) A2))
            (@fncofn A2 F G)))
        (@adantl (wss (crn F) B2) (wss (crn (ccom F G)) B2) (wfn F A2)
          (@mpan (wss (crn (ccom F G)) (crn F)) (wss (crn F) B2) (wss (crn (ccom F G)) B2)
            (@rncoss F G)
            (@sstr (crn (ccom F G)) (crn F) B2))))))
  (@df_f (cima (ccnv G) A2) B2 (ccom F G))


/-- Composition of two functions with domain and codomain as a function with domain and codomain.
(Contributed by NM, 29-Aug-1999.) (Proof shortened by Andrew Salmon, 17-Sep-2011.) (Proof shortened
by AV, 20-Sep-2024.) -/
theorem fco {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wf B2 C F) (wf A2 B2 G)) (wf A2 C (ccom F G)) :=
@mpbird (wa (wf B2 C F) (wf A2 B2 G)) (wf A2 C (ccom F G)) (wf (cima (ccnv G) B2) C (ccom F G))
  (@sylan2 (wf A2 B2 G) (wf B2 C F) (wfun G) (wf (cima (ccnv G) B2) C (ccom F G))
    (@ffun A2 B2 G)
    (@fcof B2 C F G))
  (@feq2d (wa (wf B2 C F) (wf A2 B2 G)) A2 (cima (ccnv G) B2) C (ccom F G)
    (@adantl (wf A2 B2 G) (wceq A2 (cima (ccnv G) B2)) (wf B2 C F)
      (@eqcomd (wf A2 B2 G) (cima (ccnv G) B2) A2
        (@fimacnv A2 B2 G))))


/-- Composition of two mappings. (Contributed by Glauco Siliprandi, 26-Jun-2021.) -/
theorem fcod {ph : wff} {A2 B2 C F G : «class»}
  (fcod_1 : ⊦ wi ph (wf B2 C F))
  (fcod_2 : ⊦ wi ph (wf A2 B2 G)) :
  ⊦ wi ph (wf A2 C (ccom F G)) :=
@syl2anc ph (wf B2 C F) (wf A2 B2 G) (wf A2 C (ccom F G))
  fcod_1
  fcod_2
  (@fco A2 B2 C F G)


/-- Functionality of a composition with weakened out of domain condition on the first argument.
(Contributed by Stefan O'Rear, 11-Mar-2015.) -/
theorem fco2 {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wf B2 C (cres F B2)) (wf A2 B2 G)) (wf A2 C (ccom F G)) :=
@mpbid (wa (wf B2 C (cres F B2)) (wf A2 B2 G)) (wf A2 C (ccom (cres F B2) G)) (wf A2 C (ccom F G))
  (@fco A2 B2 C (cres F B2) G)
  (@feq1d (wa (wf B2 C (cres F B2)) (wf A2 B2 G)) A2 C (ccom (cres F B2) G) (ccom F G)
    (@adantl (wf A2 B2 G) (wceq (ccom (cres F B2) G) (ccom F G)) (wf B2 C (cres F B2))
      (@syl (wf A2 B2 G) (wss (crn G) B2) (wceq (ccom (cres F B2) G) (ccom F G))
        (@frn A2 B2 G)
        (@cores F G B2))))


/-- A mapping is a class of ordered pairs. (Contributed by NM, 3-Aug-1994.) (Proof shortened by
Andrew Salmon, 17-Sep-2011.) -/
theorem fssxp {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wss F (cxp A2 B2)) :=
@sstrd (wf A2 B2 F) F (cxp (cdm F) (crn F)) (cxp A2 B2)
  (@syl (wf A2 B2 F) (wrel F) (wss F (cxp (cdm F) (crn F)))
    (@frel A2 B2 F)
    (@relssdmrn F))
  (@syl2anc (wf A2 B2 F) (wss (cdm F) A2) (wss (crn F) B2) (wss (cxp (cdm F) (crn F)) (cxp A2 B2))
    (@syl (wf A2 B2 F) (wceq (cdm F) A2) (wss (cdm F) A2)
      (@fdm A2 B2 F)
      (@eqimss (cdm F) A2))
    (@frn A2 B2 F)
    (@xpss12 (cdm F) A2 (crn F) B2))


/-- Two ways of specifying a partial function from ` A ` to ` B ` . (Contributed by NM,
13-Nov-2007.) -/
theorem funssxp {A2 B2 F : «class»} :
  ⊦ wb (wa (wfun F) (wss F (cxp A2 B2))) (wa (wf (cdm F) B2 F) (wss (cdm F) A2)) :=
@impbii (wa (wfun F) (wss F (cxp A2 B2))) (wa (wf (cdm F) B2 F) (wss (cdm F) A2))
  (@jca (wa (wfun F) (wss F (cxp A2 B2))) (wf (cdm F) B2 F) (wss (cdm F) A2)
    (@sylibr (wa (wfun F) (wss F (cxp A2 B2))) (wa (wfn F (cdm F)) (wss (crn F) B2)) (wf (cdm F) B2 F)
      (@anim12i (wfun F) (wfn F (cdm F)) (wss F (cxp A2 B2)) (wss (crn F) B2)
        (@biimpi (wfun F) (wfn F (cdm F))
          (@funfn F))
        (@sstrdi (wss F (cxp A2 B2)) (crn F) (crn (cxp A2 B2)) B2
          (@rnss F (cxp A2 B2))
          (@rnxpss A2 B2)))
      (@df_f (cdm F) B2 F))
    (@adantl (wss F (cxp A2 B2)) (wss (cdm F) A2) (wfun F)
      (@sstrdi (wss F (cxp A2 B2)) (cdm F) (cdm (cxp A2 B2)) A2
        (@dmss F (cxp A2 B2))
        (@dmxpss A2 B2))))
  (@jca (wa (wf (cdm F) B2 F) (wss (cdm F) A2)) (wfun F) (wss F (cxp A2 B2))
    (@adantr (wf (cdm F) B2 F) (wfun F) (wss (cdm F) A2)
      (@ffun (cdm F) B2 F))
    (@sylan9ss (wf (cdm F) B2 F) (wss (cdm F) A2) F (cxp (cdm F) B2) (cxp A2 B2)
      (@fssxp (cdm F) B2 F)
      (@xpss1 (cdm F) A2 B2)))


/-- A mapping is a partial function. (Contributed by NM, 25-Nov-2007.) -/
theorem ffdm {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wa (wf (cdm F) B2 F) (wss (cdm F) A2)) :=
@jca (wf A2 B2 F) (wf (cdm F) B2 F) (wss (cdm F) A2)
  (@ibir (wf A2 B2 F) (wf (cdm F) B2 F)
    (@feq2d (wf A2 B2 F) (cdm F) A2 B2 F
      (@fdm A2 B2 F)))
  (@syl (wf A2 B2 F) (wceq (cdm F) A2) (wss (cdm F) A2)
    (@fdm A2 B2 F)
    (@eqimss (cdm F) A2))


/-- The domain of a function. (Contributed by Glauco Siliprandi, 26-Jun-2021.) -/
theorem ffdmd {ph : wff} {A2 B2 F : «class»}
  (ffdmd_1 : ⊦ wi ph (wf A2 B2 F)) :
  ⊦ wi ph (wf (cdm F) B2 F) :=
@simpld ph (wf (cdm F) B2 F) (wss (cdm F) A2)
  (@syl ph (wf A2 B2 F) (wa (wf (cdm F) B2 F) (wss (cdm F) A2))
    ffdmd_1
    (@ffdm A2 B2 F))


/-- The members of an ordered pair element of a mapping belong to the mapping's domain and codomain.
(Contributed by NM, 10-Dec-2003.) (Revised by Mario Carneiro, 26-Apr-2015.) -/
theorem opelf {A2 B2 C D F : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wcel (cop C D) F)) (wa (wcel C A2) (wcel D B2)) :=
@imp (wf A2 B2 F) (wcel (cop C D) F) (wa (wcel C A2) (wcel D B2))
  (@syl6ib (wf A2 B2 F) (wcel (cop C D) F) (wcel (cop C D) (cxp A2 B2)) (wa (wcel C A2) (wcel D B2))
    (@sseld (wf A2 B2 F) F (cxp A2 B2) (cop C D)
      (@fssxp A2 B2 F))
    (@opelxp C D A2 B2))


/-- The union of two functions with disjoint domains. (Contributed by NM, 22-Sep-2004.) -/
theorem «fun» {A2 B2 C D F G : «class»} :
  ⊦ wi (wa (wa (wf A2 C F) (wf B2 D G)) (wceq (cin A2 B2) c0)) (wf (cun A2 B2) (cun C D) (cun F G)) :=
@impcom (wceq (cin A2 B2) c0) (wa (wf A2 C F) (wf B2 D G)) (wf (cun A2 B2) (cun C D) (cun F G))
  (@«3imtr4g» (wceq (cin A2 B2) c0) (wa (wa (wfn F A2) (wfn G B2)) (wa (wss (crn F) C) (wss (crn G) D))) (wa (wfn (cun F G) (cun A2 B2)) (wss (crn (cun F G)) (cun C D))) (wa (wf A2 C F) (wf B2 D G)) (wf (cun A2 B2) (cun C D) (cun F G))
    (@anim12d1 (wceq (cin A2 B2) c0) (wa (wfn F A2) (wfn G B2)) (wfn (cun F G) (cun A2 B2)) (wa (wss (crn F) C) (wss (crn G) D)) (wss (crn (cun F G)) (cun C D))
      (@expcom (wa (wfn F A2) (wfn G B2)) (wceq (cin A2 B2) c0) (wfn (cun F G) (cun A2 B2))
        (@fnun A2 B2 F G))
      (@eqsstrid (wa (wss (crn F) C) (wss (crn G) D)) (crn (cun F G)) (cun (crn F) (crn G)) (cun C D)
        (@rnun F G)
        (@unss12 (crn F) C (crn G) D)))
    (@bitri (wa (wf A2 C F) (wf B2 D G)) (wa (wa (wfn F A2) (wss (crn F) C)) (wa (wfn G B2) (wss (crn G) D))) (wa (wa (wfn F A2) (wfn G B2)) (wa (wss (crn F) C) (wss (crn G) D)))
      (@anbi12i (wf A2 C F) (wa (wfn F A2) (wss (crn F) C)) (wf B2 D G) (wa (wfn G B2) (wss (crn G) D))
        (@df_f A2 C F)
        (@df_f B2 D G))
      (@an4 (wfn F A2) (wss (crn F) C) (wfn G B2) (wss (crn G) D)))
    (@df_f (cun A2 B2) (cun C D) (cun F G)))


/-- The union of two functions with disjoint domains. (Contributed by Mario Carneiro, 12-Mar-2015.)
-/
theorem fun2 {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wa (wf A2 C F) (wf B2 C G)) (wceq (cin A2 B2) c0)) (wf (cun A2 B2) C (cun F G)) :=
@sylib (wa (wa (wf A2 C F) (wf B2 C G)) (wceq (cin A2 B2) c0)) (wf (cun A2 B2) (cun C C) (cun F G)) (wf (cun A2 B2) C (cun F G))
  (@«fun» A2 B2 C C F G)
  (@ax_mp (wceq (cun C C) C) (wb (wf (cun A2 B2) (cun C C) (cun F G)) (wf (cun A2 B2) C (cun F G)))
    (@unidm C)
    (@feq3 (cun C C) C (cun A2 B2) (cun F G)))


/-- The union of functions with disjoint domains is a function, deduction version of ~ fun2 .
(Contributed by AV, 11-Oct-2020.) (Revised by AV, 24-Oct-2021.) -/
theorem fun2d {ph : wff} {A2 B2 C F G : «class»}
  (fun2d_f : ⊦ wi ph (wf A2 C F))
  (fun2d_g : ⊦ wi ph (wf B2 C G))
  (fun2d_i : ⊦ wi ph (wceq (cin A2 B2) c0)) :
  ⊦ wi ph (wf (cun A2 B2) C (cun F G)) :=
@syl21anc ph (wf A2 C F) (wf B2 C G) (wceq (cin A2 B2) c0) (wf (cun A2 B2) C (cun F G))
  fun2d_f
  fun2d_g
  fun2d_i
  (@fun2 A2 B2 C F G)


/-- Composition of two functions. (Contributed by NM, 22-May-2006.) -/
theorem fnfco {A2 B2 F G : «class»} :
  ⊦ wi (wa (wfn F A2) (wf B2 A2 G)) (wfn (ccom F G) B2) :=
@sylan2b (wf B2 A2 G) (wfn F A2) (wa (wfn G B2) (wss (crn G) A2)) (wfn (ccom F G) B2)
  (@df_f B2 A2 G)
  (@«3expb» (wfn F A2) (wfn G B2) (wss (crn G) A2) (wfn (ccom F G) B2)
    (@fnco A2 B2 F G))


/-- Restriction of a function with a subclass of its domain. (Contributed by NM, 23-Sep-2004.) -/
theorem fssres {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wss C A2)) (wf C B2 (cres F C)) :=
@sylibr (wa (wf A2 B2 F) (wss C A2)) (wa (wfn (cres F C) C) (wss (crn (cres F C)) B2)) (wf C B2 (cres F C))
  (@sylanb (wf A2 B2 F) (wa (wfn F A2) (wss (crn F) B2)) (wss C A2) (wa (wfn (cres F C) C) (wss (crn (cres F C)) B2))
    (@df_f A2 B2 F)
    (@an32s (wfn F A2) (wss C A2) (wss (crn F) B2) (wa (wfn (cres F C) C) (wss (crn (cres F C)) B2))
      (@anim12i (wa (wfn F A2) (wss C A2)) (wfn (cres F C) C) (wss (crn F) B2) (wss (crn (cres F C)) B2)
        (@fnssres A2 C F)
        (@mpan (wss (crn (cres F C)) (crn F)) (wss (crn F) B2) (wss (crn (cres F C)) B2)
          (@rnssi (cres F C) F
            (@resss F C))
          (@sstr (crn (cres F C)) (crn F) B2)))))
  (@df_f C B2 (cres F C))


/-- Restriction of a function with a subclass of its domain, deduction form. (Contributed by Glauco
Siliprandi, 11-Dec-2019.) -/
theorem fssresd {ph : wff} {A2 B2 C F : «class»}
  (fssresd_1 : ⊦ wi ph (wf A2 B2 F))
  (fssresd_2 : ⊦ wi ph (wss C A2)) :
  ⊦ wi ph (wf C B2 (cres F C)) :=
@syl2anc ph (wf A2 B2 F) (wss C A2) (wf C B2 (cres F C))
  fssresd_1
  fssresd_2
  (@fssres A2 B2 C F)


/-- An identity for the mapping relationship under restriction. (Contributed by Scott Fenton,
4-Sep-2011.) (Proof shortened by Mario Carneiro, 26-May-2016.) -/
theorem fresin {A2 B2 F X : «class»} :
  ⊦ wi (wf A2 B2 F) (wf (cin A2 X) B2 (cres F X)) :=
@mpbid (wf A2 B2 F) (wf (cin A2 X) B2 (cres F (cin A2 X))) (wf (cin A2 X) B2 (cres F X))
  (@mpan2 (wf A2 B2 F) (wss (cin A2 X) A2) (wf (cin A2 X) B2 (cres F (cin A2 X)))
    (@inss1 A2 X)
    (@fssres A2 B2 (cin A2 X) F))
  (@feq1d (wf A2 B2 F) (cin A2 X) B2 (cres F (cin A2 X)) (cres F X)
    (@eqtr3id (wf A2 B2 F) (cres F (cin A2 X)) (cres (cres F A2) X) (cres F X)
      (@resres F A2 X)
      (@reseq1d (wf A2 B2 F) (cres F A2) F X
        (@syl (wf A2 B2 F) (wfn F A2) (wceq (cres F A2) F)
          (@ffn A2 B2 F)
          (@fnresdm A2 F)))))


/-- If two functions agree on their common domain, express their union as a union of three functions
with pairwise disjoint domains. (Contributed by Stefan O'Rear, 9-Oct-2014.) -/
theorem resasplit {A2 B2 F G : «class»} :
  ⊦ wi (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (wceq (cun F G) (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))))) :=
@eqtr3d (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F A2) (cres G B2)) (cun F G) (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))))
  (@«3adant3» (wfn F A2) (wfn G B2) (wceq (cun (cres F A2) (cres G B2)) (cun F G)) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))
    (@syl2an (wfn F A2) (wceq (cres F A2) F) (wceq (cres G B2) G) (wceq (cun (cres F A2) (cres G B2)) (cun F G)) (wfn G B2)
      (@fnresdm A2 F)
      (@fnresdm B2 G)
      (@uneq12 (cres F A2) F (cres G B2) G)))
  (@eqtrdi (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F A2) (cres G B2)) (cun (cun (cres F (cin A2 B2)) (cres F (cin A2 B2))) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))) (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))))
    (@eqtrdi (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F A2) (cres G B2)) (cun (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2))) (cun (cres F (cin A2 B2)) (cres G (cdif B2 A2)))) (cun (cun (cres F (cin A2 B2)) (cres F (cin A2 B2))) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))))
      (@eqtr4id (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F A2) (cres G B2)) (cun (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2))) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2)))) (cun (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2))) (cun (cres F (cin A2 B2)) (cres G (cdif B2 A2))))
        (@uneq12i (cres F A2) (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2))) (cres G B2) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2)))
          (@eqtr3i (cres F (cun (cin A2 B2) (cdif A2 B2))) (cres F A2) (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2)))
            (@reseq2i (cun (cin A2 B2) (cdif A2 B2)) A2 F
              (@inundif A2 B2))
            (@resundi F (cin A2 B2) (cdif A2 B2)))
          (@eqtr3i (cres G (cun (cin A2 B2) (cdif B2 A2))) (cres G B2) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2)))
            (@reseq2i (cun (cin A2 B2) (cdif B2 A2)) B2 G
              (@eqtri (cun (cin A2 B2) (cdif B2 A2)) (cun (cin B2 A2) (cdif B2 A2)) B2
                (@uneq1i (cin A2 B2) (cin B2 A2) (cdif B2 A2)
                  (@incom A2 B2))
                (@inundif B2 A2)))
            (@resundi G (cin A2 B2) (cdif B2 A2))))
        (@uneq2d (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F (cin A2 B2)) (cres G (cdif B2 A2))) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2))) (cun (cres F (cin A2 B2)) (cres F (cdif A2 B2)))
          (@uneq1d (w3a (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cres F (cin A2 B2)) (cres G (cin A2 B2)) (cres G (cdif B2 A2))
            (@simp3 (wfn F A2) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))))))
      (@un4 (cres F (cin A2 B2)) (cres F (cdif A2 B2)) (cres F (cin A2 B2)) (cres G (cdif B2 A2))))
    (@uneq1i (cun (cres F (cin A2 B2)) (cres F (cin A2 B2))) (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))
      (@unidm (cres F (cin A2 B2)))))


/-- From the union of two functions that agree on the domain overlap, either component can be
recovered by restriction. (Contributed by Stefan O'Rear, 9-Oct-2014.) -/
theorem fresaunres2 {A2 B2 C F G : «class»} :
  ⊦ wi (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (wceq (cres (cun F G) B2) G) :=
@eqtrd (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cres (cun F G) B2) (cres (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))) B2) G
  (@reseq1d (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun F G) (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))) B2
    (@syl3an (wf A2 C F) (wfn F A2) (wf B2 C G) (wfn G B2) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2))) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2))) (wceq (cun F G) (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))))
      (@ffn A2 C F)
      (@ffn B2 C G)
      (@id (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2))))
      (@resasplit A2 B2 F G)))
  (@syl5eq (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cres (cun (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2)))) B2) (cun (cres (cres F (cin A2 B2)) B2) (cres (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))) B2)) G
    (@resundir (cres F (cin A2 B2)) (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))) B2)
    (@syl5eq (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres (cres F (cin A2 B2)) B2) (cres (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))) B2)) (cun (cres F (cin A2 B2)) (cun (cres (cres F (cdif A2 B2)) B2) (cres (cres G (cdif B2 A2)) B2))) G
      (@uneq12i (cres (cres F (cin A2 B2)) B2) (cres F (cin A2 B2)) (cres (cun (cres F (cdif A2 B2)) (cres G (cdif B2 A2))) B2) (cun (cres (cres F (cdif A2 B2)) B2) (cres (cres G (cdif B2 A2)) B2))
        (@ax_mp (wss (cin A2 B2) B2) (wceq (cres (cres F (cin A2 B2)) B2) (cres F (cin A2 B2)))
          (@inss2 A2 B2)
          (@resabs2 F (cin A2 B2) B2))
        (@resundir (cres F (cdif A2 B2)) (cres G (cdif B2 A2)) B2))
      (@syl5eq (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F (cin A2 B2)) (cun (cres (cres F (cdif A2 B2)) B2) (cres (cres G (cdif B2 A2)) B2))) (cun (cres F (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))) G
        (@uneq2i (cun (cres (cres F (cdif A2 B2)) B2) (cres (cres G (cdif B2 A2)) B2)) (cun c0 (cres G (cdif B2 A2))) (cres F (cin A2 B2))
          (@uneq12i (cres (cres F (cdif A2 B2)) B2) c0 (cres (cres G (cdif B2 A2)) B2) (cres G (cdif B2 A2))
            (@mpbir (wceq (cres (cres F (cdif A2 B2)) B2) c0) (wceq (cdm (cres (cres F (cdif A2 B2)) B2)) c0)
              (@eqtri (cdm (cres (cres F (cdif A2 B2)) B2)) (cin B2 (cdm (cres F (cdif A2 B2)))) c0
                (@dmres (cres F (cdif A2 B2)) B2)
                (@eqtri (cin B2 (cdm (cres F (cdif A2 B2)))) (cin B2 (cin (cdif A2 B2) (cdm F))) c0
                  (@ineq2i (cdm (cres F (cdif A2 B2))) (cin (cdif A2 B2) (cdm F)) B2
                    (@dmres F (cdif A2 B2)))
                  (@«3eqtr3i» (cin (cin B2 (cdif A2 B2)) (cdm F)) (cin c0 (cdm F)) (cin B2 (cin (cdif A2 B2) (cdm F))) c0
                    (@ineq1i (cin B2 (cdif A2 B2)) c0 (cdm F)
                      (@disjdif B2 A2))
                    (@inass B2 (cdif A2 B2) (cdm F))
                    (@«0in» (cdm F)))))
              (@ax_mp (wrel (cres (cres F (cdif A2 B2)) B2)) (wb (wceq (cres (cres F (cdif A2 B2)) B2) c0) (wceq (cdm (cres (cres F (cdif A2 B2)) B2)) c0))
                (@relres (cres F (cdif A2 B2)) B2)
                (@reldm0 (cres (cres F (cdif A2 B2)) B2))))
            (@ax_mp (wss (cdif B2 A2) B2) (wceq (cres (cres G (cdif B2 A2)) B2) (cres G (cdif B2 A2)))
              (@difss B2 A2)
              (@resabs2 G (cdif B2 A2) B2))))
        (@eqtrd (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cun (cres F (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))) (cun (cres G (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))) G
          (@uneq1d (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cres F (cin A2 B2)) (cres G (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))
            (@simp3 (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))))
          (@«3adant3» (wf A2 C F) (wf B2 C G) (wceq (cun (cres G (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))) G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))
            (@syl5eq (wa (wf A2 C F) (wf B2 C G)) (cun (cres G (cin A2 B2)) (cun c0 (cres G (cdif B2 A2)))) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2))) G
              (@uneq2i (cun c0 (cres G (cdif B2 A2))) (cres G (cdif B2 A2)) (cres G (cin A2 B2))
                (@eqtri (cun c0 (cres G (cdif B2 A2))) (cun (cres G (cdif B2 A2)) c0) (cres G (cdif B2 A2))
                  (@uncom c0 (cres G (cdif B2 A2)))
                  (@un0 (cres G (cdif B2 A2)))))
              (@eqtr3id (wa (wf A2 C F) (wf B2 C G)) (cun (cres G (cin A2 B2)) (cres G (cdif B2 A2))) (cres G (cun (cin A2 B2) (cdif B2 A2))) G
                (@resundi G (cin A2 B2) (cdif B2 A2))
                (@syl5eq (wa (wf A2 C F) (wf B2 C G)) (cres G (cun (cin A2 B2) (cdif B2 A2))) (cres G B2) G
                  (@reseq2i (cun (cin A2 B2) (cdif B2 A2)) B2 G
                    (@eqtri (cun (cin A2 B2) (cdif B2 A2)) (cun (cin B2 A2) (cdif B2 A2)) B2
                      (@uneq1i (cin A2 B2) (cin B2 A2) (cdif B2 A2)
                        (@incom A2 B2))
                      (@inundif B2 A2)))
                  (@adantl (wf B2 C G) (wceq (cres G B2) G) (wf A2 C F)
                    (@syl (wf B2 C G) (wfn G B2) (wceq (cres G B2) G)
                      (@ffn B2 C G)
                      (@fnresdm B2 G)))))))))))


/-- From the union of two functions that agree on the domain overlap, either component can be
recovered by restriction. (Contributed by Mario Carneiro, 16-Feb-2015.) -/
theorem fresaunres1 {A2 B2 C F G : «class»} :
  ⊦ wi (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (wceq (cres (cun F G) A2) F) :=
@syl5eq (w3a (wf A2 C F) (wf B2 C G) (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2)))) (cres (cun F G) A2) (cres (cun G F) A2) F
  (@reseq1i (cun F G) (cun G F) A2
    (@uncom F G))
  (@syl3an3b (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2))) (wf A2 C F) (wf B2 C G) (wceq (cres G (cin B2 A2)) (cres F (cin B2 A2))) (wceq (cres (cun G F) A2) F)
    (@bitri (wceq (cres F (cin A2 B2)) (cres G (cin A2 B2))) (wceq (cres F (cin B2 A2)) (cres G (cin B2 A2))) (wceq (cres G (cin B2 A2)) (cres F (cin B2 A2)))
      (@eqeq12i (cres F (cin A2 B2)) (cres F (cin B2 A2)) (cres G (cin A2 B2)) (cres G (cin B2 A2))
        (@reseq2i (cin A2 B2) (cin B2 A2) F
          (@incom A2 B2))
        (@reseq2i (cin A2 B2) (cin B2 A2) G
          (@incom A2 B2)))
      (@eqcom (cres F (cin B2 A2)) (cres G (cin B2 A2))))
    (@«3com12» (wf B2 C G) (wf A2 C F) (wceq (cres G (cin B2 A2)) (cres F (cin B2 A2))) (wceq (cres (cun G F) A2) F)
      (@fresaunres2 B2 A2 C G F)))


/-- Composition of restricted identity and a mapping. (Contributed by NM, 13-Dec-2003.) (Proof
shortened by Andrew Salmon, 17-Sep-2011.) -/
theorem fcoi2 {A2 B2 F : «class»} :
  ⊦ wi (wf A2 B2 F) (wceq (ccom (cres cid B2) F) F) :=
@sylbi (wf A2 B2 F) (wa (wfn F A2) (wss (crn F) B2)) (wceq (ccom (cres cid B2) F) F)
  (@df_f A2 B2 F)
  (@sylan9eqr (wss (crn F) B2) (wfn F A2) (ccom (cres cid B2) F) (ccom cid F) F
    (@cores cid F B2)
    (@syl (wfn F A2) (wrel F) (wceq (ccom cid F) F)
      (@fnrel A2 F)
      (@coi2 F)))


/-- There is exactly one value of a function in its codomain. (Contributed by NM, 10-Dec-2003.) -/
theorem feu {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wcel C A2)) (wreu (λ y, wcel (cop C (cv y)) F) (λ y, B2)) :=
@sylibr (wa (wf A2 B2 F) (wcel C A2)) (weu (λ y, wa (wcel (cv y) B2) (wcel (cop C (cv y)) F))) (wreu (λ y, wcel (cop C (cv y)) F) (λ y, B2))
  (@mpbid (wa (wf A2 B2 F) (wcel C A2)) (weu (λ y, wcel (cop C (cv y)) F)) (weu (λ y, wa (wcel (cv y) B2) (wcel (cop C (cv y)) F)))
    (@sylan (wf A2 B2 F) (wfn F A2) (wcel C A2) (weu (λ y, wcel (cop C (cv y)) F))
      (@ffn A2 B2 F)
      (setvar.forget $ λ y : setvar,
        show ⊦ wi (wa (wfn F A2) (wcel C A2)) (weu (λ y, wcel (cop C (cv y)) F)), from
        @fneu2 (λ y, A2) C F y))
    (@adantr (wf A2 B2 F) (wb (weu (λ y, wcel (cop C (cv y)) F)) (weu (λ y, wa (wcel (cv y) B2) (wcel (cop C (cv y)) F)))) (wcel C A2)
      (@eubidv (wf A2 B2 F) (λ y, wcel (cop C (cv y)) F) (λ y, wa (wcel (cv y) B2) (wcel (cop C (cv y)) F))
        (λ y, @pm4_71rd (wf A2 B2 F) (wcel (cop C (cv y)) F) (wcel (cv y) B2)
          (@ex (wf A2 B2 F) (wcel (cop C (cv y)) F) (wcel (cv y) B2)
            (@simprd (wa (wf A2 B2 F) (wcel (cop C (cv y)) F)) (wcel C A2) (wcel (cv y) B2)
              (@opelf A2 B2 C (cv y) F)))))))
  (@df_reu (λ y, wcel (cop C (cv y)) F) (λ y, B2))


/-- The preimage of a class disjoint with a mapping's codomain is empty. (Contributed by FL,
24-Jan-2007.) -/
theorem fimacnvdisj {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf A2 B2 F) (wceq (cin B2 C) c0)) (wceq (cima (ccnv F) C) c0) :=
@sylibr (wa (wf A2 B2 F) (wceq (cin B2 C) c0)) (wceq (cin (cdm (ccnv F)) C) c0) (wceq (cima (ccnv F) C) c0)
  (@sylancom (wf A2 B2 F) (wceq (cin B2 C) c0) (wss (cdm (ccnv F)) B2) (wceq (cin (cdm (ccnv F)) C) c0)
    (@eqsstrrid (wa (wf A2 B2 F) (wceq (cin B2 C) c0)) (cdm (ccnv F)) (crn F) B2
      (@df_rn F)
      (@adantr (wf A2 B2 F) (wss (crn F) B2) (wceq (cin B2 C) c0)
        (@frn A2 B2 F)))
    (@ssdisj (cdm (ccnv F)) B2 C))
  (@imadisj (ccnv F) C)


/-- The empty function. (Contributed by NM, 14-Aug-1999.) -/
theorem f0 {A2 : «class»} :
  ⊦ wf c0 A2 c0 :=
@mpbir2an (wf c0 A2 c0) (wfn c0 c0) (wss (crn c0) A2)
  (@mpbir (wfn c0 c0) (wceq c0 c0)
    (@eqid c0)
    (@fn0 c0))
  (@eqsstri (crn c0) c0 A2
    rn0
    (@«0ss» A2))
  (@df_f c0 A2 c0)


/-- A Cartesian product with a singleton is a constant function. (Contributed by NM, 14-Aug-1999.)
(Proof shortened by Andrew Salmon, 17-Sep-2011.) -/
theorem fconst {A2 B2 : «class»}
  (fconst_1 : ⊦ wcel B2 cvv) :
  ⊦ wf A2 (csn B2) (cxp A2 (csn B2)) :=
@mpbir2an (wf A2 (csn B2) (cxp A2 (csn B2))) (wfn (cxp A2 (csn B2)) A2) (wss (crn (cxp A2 (csn B2))) (csn B2))
  (setvar.forget $ λ x3 : setvar,
    show ⊦ wfn (cxp A2 (csn B2)) A2, from
    @fnmpti A2 (λ x3, B2) (λ x3, cxp A2 (csn B2))
      (λ x3, fconst_1)
      (λ x3, @fconstmpt A2 B2) x3)
  (@rnxpss A2 (csn B2))
  (@df_f A2 (csn B2) (cxp A2 (csn B2)))


/-- A Cartesian product with a singleton is a constant function. (Contributed by NM, 19-Oct-2004.)
-/
theorem fconstg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wf A2 (csn B2) (cxp A2 (csn B2))) :=
setvar.forget $ λ x3 : setvar,
  show ⊦ wi (wcel B2 V) (wf A2 (csn B2) (cxp A2 (csn B2))), from
  @vtoclg (λ x3, wf A2 (csn (cv x3)) (cxp A2 (csn (cv x3)))) (wf A2 (csn B2) (cxp A2 (csn B2))) B2 (λ x3, V)
    (λ x3, @syl2anc (wceq (cv x3) B2) (wceq (cxp A2 (csn (cv x3))) (cxp A2 (csn B2))) (wceq (csn (cv x3)) (csn B2)) (wb (wf A2 (csn (cv x3)) (cxp A2 (csn (cv x3)))) (wf A2 (csn B2) (cxp A2 (csn B2))))
      (@xpeq2d (wceq (cv x3) B2) (csn (cv x3)) (csn B2) A2
        (@sneq (cv x3) B2))
      (@sneq (cv x3) B2)
      (@sylan9bb (wceq (cxp A2 (csn (cv x3))) (cxp A2 (csn B2))) (wf A2 (csn (cv x3)) (cxp A2 (csn (cv x3)))) (wf A2 (csn (cv x3)) (cxp A2 (csn B2))) (wceq (csn (cv x3)) (csn B2)) (wf A2 (csn B2) (cxp A2 (csn B2)))
        (@feq1 A2 (csn (cv x3)) (cxp A2 (csn (cv x3))) (cxp A2 (csn B2)))
        (@feq3 (csn (cv x3)) (csn B2) A2 (cxp A2 (csn B2)))))
    (λ x3, @fconst A2 (cv x3)
      (@vex x3)) x3


/-- A Cartesian product with a singleton is a constant function. (Contributed by NM, 24-Jul-2014.)
-/
theorem fnconstg {A2 B2 V : «class»} :
  ⊦ wi (wcel B2 V) (wfn (cxp A2 (csn B2)) A2) :=
@ffnd (wcel B2 V) A2 (csn B2) (cxp A2 (csn B2))
  (@fconstg A2 B2 V)


/-- Constant function with loose range. (Contributed by Stefan O'Rear, 1-Feb-2015.) -/
theorem fconst6g {A2 B2 C : «class»} :
  ⊦ wi (wcel B2 C) (wf A2 C (cxp A2 (csn B2))) :=
@fssd (wcel B2 C) A2 (csn B2) C (cxp A2 (csn B2))
  (@fconstg A2 B2 C)
  (@snssi B2 C)


/-- Equality theorem for one-to-one functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1eq1 {A2 B2 F G : «class»} :
  ⊦ wi (wceq F G) (wb (wf1 A2 B2 F) (wf1 A2 B2 G)) :=
@«3bitr4g» (wceq F G) (wa (wf A2 B2 F) (wfun (ccnv F))) (wa (wf A2 B2 G) (wfun (ccnv G))) (wf1 A2 B2 F) (wf1 A2 B2 G)
  (@anbi12d (wceq F G) (wf A2 B2 F) (wf A2 B2 G) (wfun (ccnv F)) (wfun (ccnv G))
    (@feq1 A2 B2 F G)
    (@funeqd (wceq F G) (ccnv F) (ccnv G)
      (@cnveq F G)))
  (@df_f1 A2 B2 F)
  (@df_f1 A2 B2 G)


/-- Equality theorem for one-to-one functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1eq2 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf1 A2 C F) (wf1 B2 C F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wf A2 C F) (wfun (ccnv F))) (wa (wf B2 C F) (wfun (ccnv F))) (wf1 A2 C F) (wf1 B2 C F)
  (@anbi1d (wceq A2 B2) (wf A2 C F) (wf B2 C F) (wfun (ccnv F))
    (@feq2 A2 B2 C F))
  (@df_f1 A2 C F)
  (@df_f1 B2 C F)


/-- Equality theorem for one-to-one functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1eq3 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf1 C A2 F) (wf1 C B2 F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wf C A2 F) (wfun (ccnv F))) (wa (wf C B2 F) (wfun (ccnv F))) (wf1 C A2 F) (wf1 C B2 F)
  (@anbi1d (wceq A2 B2) (wf C A2 F) (wf C B2 F) (wfun (ccnv F))
    (@feq3 A2 B2 C F))
  (@df_f1 C A2 F)
  (@df_f1 C B2 F)


/-- Bound-variable hypothesis builder for a one-to-one function. (Contributed by NM, 16-May-2004.)
-/
theorem nff1 {A2 B2 F : setvar → «class»}
  (nff1_1 : ⊦ wnfc (λ x3, F x3))
  (nff1_2 : ⊦ wnfc (λ x3, A2 x3))
  (nff1_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wf1 (A2 x3) (B2 x3) (F x3)) :=
@nfxfr (λ x3, wf1 (A2 x3) (B2 x3) (F x3)) (λ x3, wa (wf (A2 x3) (B2 x3) (F x3)) (wfun (ccnv (F x3))))
  (λ x3, @df_f1 (A2 x3) (B2 x3) (F x3))
  (@nfan (λ x3, wf (A2 x3) (B2 x3) (F x3)) (λ x3, wfun (ccnv (F x3)))
    (@nff (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, F x3)
      nff1_1
      nff1_2
      nff1_3)
    (@nffun (λ x3, ccnv (F x3))
      (@nfcnv (λ x3, F x3)
        nff1_1)))


/-- Alternate definition of a one-to-one function. (Contributed by NM, 31-Dec-1996.) -/
theorem dff12 {A2 B2 : setvar → setvar → «class»} {F : «class»}
  (x3 y : setvar) : ⊦ wb (wf1 (A2 x3 y) (B2 x3 y) F) (wa (wf (A2 x3 y) (B2 x3 y) F) (wal (λ y, wmo (λ x3, wbr (cv x3) (cv y) F)))) :=
@bitri (wf1 (A2 x3 y) (B2 x3 y) F) (wa (wf (A2 x3 y) (B2 x3 y) F) (wfun (ccnv F))) (wa (wf (A2 x3 y) (B2 x3 y) F) (wal (λ y, wmo (λ x3, wbr (cv x3) (cv y) F))))
  (@df_f1 (A2 x3 y) (B2 x3 y) F)
  (@anbi2i (wfun (ccnv F)) (wal (λ y, wmo (λ x3, wbr (cv x3) (cv y) F))) (wf (A2 x3 y) (B2 x3 y) F)
    (@funcnv2 F))


/-- A one-to-one mapping is a mapping. (Contributed by NM, 31-Dec-1996.) -/
theorem f1f {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wf A2 B2 F) :=
@simplbi (wf1 A2 B2 F) (wf A2 B2 F) (wfun (ccnv F))
  (@df_f1 A2 B2 F)


/-- A one-to-one mapping is a function on its domain. (Contributed by NM, 8-Mar-2014.) -/
theorem f1fn {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wfn F A2) :=
@ffnd (wf1 A2 B2 F) A2 B2 F
  (@f1f A2 B2 F)


/-- A one-to-one mapping is a function. (Contributed by NM, 8-Mar-2014.) -/
theorem f1fun {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wfun F) :=
@syl (wf1 A2 B2 F) (wfn F A2) (wfun F)
  (@f1fn A2 B2 F)
  (@fnfun A2 F)


/-- The domain of a one-to-one mapping. (Contributed by NM, 8-Mar-2014.) (Proof shortened by Wolf
Lammen, 29-May-2024.) -/
theorem f1dm {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wceq (cdm F) A2) :=
@fndmd (wf1 A2 B2 F) A2 F
  (@f1fn A2 B2 F)


/-- A function that is one-to-one is also one-to-one on some superset of its codomain. (Contributed
by Mario Carneiro, 12-Jan-2013.) -/
theorem f1ss {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf1 A2 B2 F) (wss B2 C)) (wf1 A2 C F) :=
@sylanbrc (wa (wf1 A2 B2 F) (wss B2 C)) (wf A2 C F) (wfun (ccnv F)) (wf1 A2 C F)
  (@sylan (wf1 A2 B2 F) (wf A2 B2 F) (wss B2 C) (wf A2 C F)
    (@f1f A2 B2 F)
    (@fss A2 B2 C F))
  (@adantr (wf1 A2 B2 F) (wfun (ccnv F)) (wss B2 C)
    (@simprbi (wf1 A2 B2 F) (wf A2 B2 F) (wfun (ccnv F))
      (@df_f1 A2 B2 F)))
  (@df_f1 A2 C F)


/-- A function that is one-to-one is also one-to-one on any subclass of its domain. (Contributed by
Mario Carneiro, 17-Jan-2015.) -/
theorem f1ssres {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf1 A2 B2 F) (wss C A2)) (wf1 C B2 (cres F C)) :=
@sylanbrc (wa (wf1 A2 B2 F) (wss C A2)) (wf C B2 (cres F C)) (wfun (ccnv (cres F C))) (wf1 C B2 (cres F C))
  (@sylan (wf1 A2 B2 F) (wf A2 B2 F) (wss C A2) (wf C B2 (cres F C))
    (@f1f A2 B2 F)
    (@fssres A2 B2 C F))
  (@adantr (wf1 A2 B2 F) (wfun (ccnv (cres F C))) (wss C A2)
    (@simplbiim (wf1 A2 B2 F) (wf A2 B2 F) (wfun (ccnv F)) (wfun (ccnv (cres F C)))
      (@df_f1 A2 B2 F)
      (@funres11 C F)))
  (@df_f1 C B2 (cres F C))


/-- Composition of two one-to-one functions. Generalization of ~ f1co . (Contributed by AV,
18-Sep-2024.) -/
theorem f1cof1 {A2 B2 C D F G : «class»} :
  ⊦ wi (wa (wf1 C D F) (wf1 A2 B2 G)) (wf1 (cima (ccnv G) C) D (ccom F G)) :=
@sylibr (wa (wf1 C D F) (wf1 A2 B2 G)) (wa (wf (cima (ccnv G) C) D (ccom F G)) (wfun (ccnv (ccom F G)))) (wf1 (cima (ccnv G) C) D (ccom F G))
  (@syl2anb (wf1 C D F) (wa (wf C D F) (wfun (ccnv F))) (wa (wf A2 B2 G) (wfun (ccnv G))) (wa (wf (cima (ccnv G) C) D (ccom F G)) (wfun (ccnv (ccom F G)))) (wf1 A2 B2 G)
    (@df_f1 C D F)
    (@df_f1 A2 B2 G)
    (@an4s (wf C D F) (wf A2 B2 G) (wfun (ccnv F)) (wfun (ccnv G)) (wa (wf (cima (ccnv G) C) D (ccom F G)) (wfun (ccnv (ccom F G))))
      (@anim12i (wa (wf C D F) (wf A2 B2 G)) (wf (cima (ccnv G) C) D (ccom F G)) (wa (wfun (ccnv F)) (wfun (ccnv G))) (wfun (ccnv (ccom F G)))
        (@sylan2 (wf A2 B2 G) (wf C D F) (wfun G) (wf (cima (ccnv G) C) D (ccom F G))
          (@ffun A2 B2 G)
          (@fcof C D F G))
        (@ancoms (wfun (ccnv G)) (wfun (ccnv F)) (wfun (ccnv (ccom F G)))
          (@sylibr (wa (wfun (ccnv G)) (wfun (ccnv F))) (wfun (ccom (ccnv G) (ccnv F))) (wfun (ccnv (ccom F G)))
            (@funco (ccnv G) (ccnv F))
            (@funeqi (ccnv (ccom F G)) (ccom (ccnv G) (ccnv F))
              (@cnvco F G)))))))
  (@df_f1 (cima (ccnv G) C) D (ccom F G))


/-- Composition of one-to-one functions when the codomain of the first matches the domain of the
second. Exercise 30 of [TakeutiZaring] p. 25. (Contributed by NM, 28-May-1998.) (Proof shortened by
AV, 20-Sep-2024.) -/
theorem f1co {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wf1 B2 C F) (wf1 A2 B2 G)) (wf1 A2 C (ccom F G)) :=
@mpbird (wa (wf1 B2 C F) (wf1 A2 B2 G)) (wf1 A2 C (ccom F G)) (wf1 (cima (ccnv G) B2) C (ccom F G))
  (@f1cof1 A2 B2 B2 C F G)
  (@syl (wa (wf1 B2 C F) (wf1 A2 B2 G)) (wceq A2 (cima (ccnv G) B2)) (wb (wf1 A2 C (ccom F G)) (wf1 (cima (ccnv G) B2) C (ccom F G)))
    (@eqcomd (wa (wf1 B2 C F) (wf1 A2 B2 G)) (cima (ccnv G) B2) A2
      (@adantl (wf1 A2 B2 G) (wceq (cima (ccnv G) B2) A2) (wf1 B2 C F)
        (@syl (wf1 A2 B2 G) (wf A2 B2 G) (wceq (cima (ccnv G) B2) A2)
          (@f1f A2 B2 G)
          (@fimacnv A2 B2 G))))
    (@f1eq2 A2 (cima (ccnv G) B2) C (ccom F G)))


/-- Equality theorem for onto functions. (Contributed by NM, 1-Aug-1994.) -/
theorem foeq1 {A2 B2 F G : «class»} :
  ⊦ wi (wceq F G) (wb (wfo A2 B2 F) (wfo A2 B2 G)) :=
@«3bitr4g» (wceq F G) (wa (wfn F A2) (wceq (crn F) B2)) (wa (wfn G A2) (wceq (crn G) B2)) (wfo A2 B2 F) (wfo A2 B2 G)
  (@anbi12d (wceq F G) (wfn F A2) (wfn G A2) (wceq (crn F) B2) (wceq (crn G) B2)
    (@fneq1 A2 F G)
    (@eqeq1d (wceq F G) (crn F) (crn G) B2
      (@rneq F G)))
  (@df_fo A2 B2 F)
  (@df_fo A2 B2 G)


/-- Equality theorem for onto functions. (Contributed by NM, 1-Aug-1994.) -/
theorem foeq2 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wfo A2 C F) (wfo B2 C F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfn F A2) (wceq (crn F) C)) (wa (wfn F B2) (wceq (crn F) C)) (wfo A2 C F) (wfo B2 C F)
  (@anbi1d (wceq A2 B2) (wfn F A2) (wfn F B2) (wceq (crn F) C)
    (@fneq2 A2 B2 F))
  (@df_fo A2 C F)
  (@df_fo B2 C F)


/-- Equality theorem for onto functions. (Contributed by NM, 1-Aug-1994.) -/
theorem foeq3 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wfo C A2 F) (wfo C B2 F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wfn F C) (wceq (crn F) A2)) (wa (wfn F C) (wceq (crn F) B2)) (wfo C A2 F) (wfo C B2 F)
  (@anbi2d (wceq A2 B2) (wceq (crn F) A2) (wceq (crn F) B2) (wfn F C)
    (@eqeq2 A2 B2 (crn F)))
  (@df_fo C A2 F)
  (@df_fo C B2 F)


/-- Bound-variable hypothesis builder for an onto function. (Contributed by NM, 16-May-2004.) -/
theorem nffo {A2 B2 F : setvar → «class»}
  (nffo_1 : ⊦ wnfc (λ x3, F x3))
  (nffo_2 : ⊦ wnfc (λ x3, A2 x3))
  (nffo_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wfo (A2 x3) (B2 x3) (F x3)) :=
@nfxfr (λ x3, wfo (A2 x3) (B2 x3) (F x3)) (λ x3, wa (wfn (F x3) (A2 x3)) (wceq (crn (F x3)) (B2 x3)))
  (λ x3, @df_fo (A2 x3) (B2 x3) (F x3))
  (@nfan (λ x3, wfn (F x3) (A2 x3)) (λ x3, wceq (crn (F x3)) (B2 x3))
    (@nffn (λ x3, A2 x3) (λ x3, F x3)
      nffo_1
      nffo_2)
    (@nfeq (λ x3, crn (F x3)) (λ x3, B2 x3)
      (@nfrn (λ x3, F x3)
        nffo_1)
      nffo_3))


/-- An onto mapping is a mapping. (Contributed by NM, 3-Aug-1994.) -/
theorem fof {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wf A2 B2 F) :=
@«3imtr4i» (wa (wfn F A2) (wceq (crn F) B2)) (wa (wfn F A2) (wss (crn F) B2)) (wfo A2 B2 F) (wf A2 B2 F)
  (@anim2i (wceq (crn F) B2) (wss (crn F) B2) (wfn F A2)
    (@eqimss (crn F) B2))
  (@df_fo A2 B2 F)
  (@df_f A2 B2 F)


/-- An onto mapping is a function. (Contributed by NM, 29-Mar-2008.) -/
theorem fofun {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wfun F) :=
@ffund (wfo A2 B2 F) A2 B2 F
  (@fof A2 B2 F)


/-- An onto mapping is a function on its domain. (Contributed by NM, 16-Dec-2008.) -/
theorem fofn {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wfn F A2) :=
@ffnd (wfo A2 B2 F) A2 B2 F
  (@fof A2 B2 F)


/-- The codomain of an onto function is its range. (Contributed by NM, 3-Aug-1994.) -/
theorem forn {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wceq (crn F) B2) :=
@simprbi (wfo A2 B2 F) (wfn F A2) (wceq (crn F) B2)
  (@df_fo A2 B2 F)


/-- Alternate definition of an onto function. (Contributed by NM, 22-Mar-2006.) -/
theorem dffo2 {A2 B2 F : «class»} :
  ⊦ wb (wfo A2 B2 F) (wa (wf A2 B2 F) (wceq (crn F) B2)) :=
@impbii (wfo A2 B2 F) (wa (wf A2 B2 F) (wceq (crn F) B2))
  (@jca (wfo A2 B2 F) (wf A2 B2 F) (wceq (crn F) B2)
    (@fof A2 B2 F)
    (@forn A2 B2 F))
  (@sylan (wf A2 B2 F) (wfn F A2) (wceq (crn F) B2) (wfo A2 B2 F)
    (@ffn A2 B2 F)
    (@biimpri (wfo A2 B2 F) (wa (wfn F A2) (wceq (crn F) B2))
      (@df_fo A2 B2 F)))


/-- The image of the domain of an onto function. (Contributed by NM, 29-Nov-2002.) -/
theorem foima {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wceq (cima F A2) B2) :=
@«3eqtr3a» (wfo A2 B2 F) (cima F (cdm F)) (crn F) (cima F A2) B2
  (@imadmrn F)
  (@imaeq2d (wfo A2 B2 F) (cdm F) A2 F
    (@fdmd (wfo A2 B2 F) A2 B2 F
      (@fof A2 B2 F)))
  (@forn A2 B2 F)


/-- A function maps onto its range. (Contributed by NM, 10-May-1998.) -/
theorem dffn4 {A2 F : «class»} :
  ⊦ wb (wfn F A2) (wfo A2 (crn F) F) :=
@bitr4i (wfn F A2) (wa (wfn F A2) (wceq (crn F) (crn F))) (wfo A2 (crn F) F)
  (@biantru (wceq (crn F) (crn F)) (wfn F A2)
    (@eqid (crn F)))
  (@df_fo A2 (crn F) F)


/-- A function maps its domain onto its range. (Contributed by NM, 23-Jul-2004.) -/
theorem funforn {A2 : «class»} :
  ⊦ wb (wfun A2) (wfo (cdm A2) (crn A2) A2) :=
@bitri (wfun A2) (wfn A2 (cdm A2)) (wfo (cdm A2) (crn A2) A2)
  (@funfn A2)
  (@dffn4 (cdm A2) A2)


/-- Restriction of an onto function. (Contributed by NM, 4-Mar-1997.) -/
theorem fores {A2 F : «class»} :
  ⊦ wi (wa (wfun F) (wss A2 (cdm F))) (wfo A2 (cima F A2) (cres F A2)) :=
@sylibr (wa (wfun F) (wss A2 (cdm F))) (wa (wfun (cres F A2)) (wss A2 (cdm F))) (wfo A2 (cima F A2) (cres F A2))
  (@anim1i (wfun F) (wfun (cres F A2)) (wss A2 (cdm F))
    (@funres A2 F))
  (@«3bitr4i» (wfn (cres F A2) A2) (wa (wfun (cres F A2)) (wceq (cdm (cres F A2)) A2)) (wfo A2 (cima F A2) (cres F A2)) (wa (wfun (cres F A2)) (wss A2 (cdm F)))
    (@df_fn (cres F A2) A2)
    (@mpbiran2 (wfo A2 (cima F A2) (cres F A2)) (wfn (cres F A2) A2) (wceq (crn (cres F A2)) (cima F A2))
      (@eqcomi (cima F A2) (crn (cres F A2))
        (@df_ima F A2))
      (@df_fo A2 (cima F A2) (cres F A2)))
    (@anbi2i (wss A2 (cdm F)) (wceq (cdm (cres F A2)) A2) (wfun (cres F A2))
      (@ssdmres A2 F)))


/-- Composition of onto functions. (Contributed by NM, 22-Mar-2006.) -/
theorem foco {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wfo B2 C F) (wfo A2 B2 G)) (wfo A2 C (ccom F G)) :=
@sylibr (wa (wfo B2 C F) (wfo A2 B2 G)) (wa (wf A2 C (ccom F G)) (wceq (crn (ccom F G)) C)) (wfo A2 C (ccom F G))
  (@syl2anb (wfo B2 C F) (wa (wf B2 C F) (wceq (crn F) C)) (wa (wf A2 B2 G) (wceq (crn G) B2)) (wa (wf A2 C (ccom F G)) (wceq (crn (ccom F G)) C)) (wfo A2 B2 G)
    (@dffo2 B2 C F)
    (@dffo2 A2 B2 G)
    (@jca (wa (wa (wf B2 C F) (wceq (crn F) C)) (wa (wf A2 B2 G) (wceq (crn G) B2))) (wf A2 C (ccom F G)) (wceq (crn (ccom F G)) C)
      (@ad2ant2r (wf B2 C F) (wf A2 B2 G) (wf A2 C (ccom F G)) (wceq (crn F) C) (wceq (crn G) B2)
        (@fco A2 B2 C F G))
      (@adantrl (wa (wf B2 C F) (wceq (crn F) C)) (wceq (crn G) B2) (wceq (crn (ccom F G)) C) (wf A2 B2 G)
        (@an32s (wf B2 C F) (wceq (crn G) B2) (wceq (crn F) C) (wceq (crn (ccom F G)) C)
          (@sylan (wa (wf B2 C F) (wceq (crn G) B2)) (wceq (cdm F) (crn G)) (wceq (crn F) C) (wceq (crn (ccom F G)) C)
            (@sylan (wf B2 C F) (wceq (cdm F) B2) (wceq (crn G) B2) (wceq (cdm F) (crn G))
              (@fdm B2 C F)
              (@eqtr3 (cdm F) (crn G) B2))
            (@biimpar (wceq (cdm F) (crn G)) (wceq (crn (ccom F G)) C) (wceq (crn F) C)
              (@eqeq1d (wceq (cdm F) (crn G)) (crn (ccom F G)) (crn F) C
                (@rncoeq F G))))))))
  (@dffo2 A2 C (ccom F G))


/-- A nonzero constant function is onto. (Contributed by NM, 12-Jan-2007.) -/
theorem foconst {A2 B2 F : «class»} :
  ⊦ wi (wa (wf A2 (csn B2) F) (wne F c0)) (wfo A2 (csn B2) F) :=
@sylibr (wa (wf A2 (csn B2) F) (wne F c0)) (wa (wf A2 (csn B2) F) (wceq (crn F) (csn B2))) (wfo A2 (csn B2) F)
  (@imdistani (wf A2 (csn B2) F) (wne F c0) (wceq (crn F) (csn B2))
    (@sylbid (wf A2 (csn B2) F) (wne F c0) (wn (wceq (crn F) c0)) (wceq (crn F) (csn B2))
      (@syl (wf A2 (csn B2) F) (wrel F) (wb (wne F c0) (wn (wceq (crn F) c0)))
        (@frel A2 (csn B2) F)
        (@necon3abid (wrel F) (wceq (crn F) c0) F c0
          (@relrn0 F)))
      (@ord (wf A2 (csn B2) F) (wceq (crn F) c0) (wceq (crn F) (csn B2))
        (@sylib (wf A2 (csn B2) F) (wss (crn F) (csn B2)) (wo (wceq (crn F) c0) (wceq (crn F) (csn B2)))
          (@frn A2 (csn B2) F)
          (@sssn (crn F) B2)))))
  (@dffo2 A2 (csn B2) F)


/-- Equality theorem for one-to-one onto functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1oeq1 {A2 B2 F G : «class»} :
  ⊦ wi (wceq F G) (wb (wf1o A2 B2 F) (wf1o A2 B2 G)) :=
@«3bitr4g» (wceq F G) (wa (wf1 A2 B2 F) (wfo A2 B2 F)) (wa (wf1 A2 B2 G) (wfo A2 B2 G)) (wf1o A2 B2 F) (wf1o A2 B2 G)
  (@anbi12d (wceq F G) (wf1 A2 B2 F) (wf1 A2 B2 G) (wfo A2 B2 F) (wfo A2 B2 G)
    (@f1eq1 A2 B2 F G)
    (@foeq1 A2 B2 F G))
  (@df_f1o A2 B2 F)
  (@df_f1o A2 B2 G)


/-- Equality theorem for one-to-one onto functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1oeq2 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf1o A2 C F) (wf1o B2 C F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wf1 A2 C F) (wfo A2 C F)) (wa (wf1 B2 C F) (wfo B2 C F)) (wf1o A2 C F) (wf1o B2 C F)
  (@anbi12d (wceq A2 B2) (wf1 A2 C F) (wf1 B2 C F) (wfo A2 C F) (wfo B2 C F)
    (@f1eq2 A2 B2 C F)
    (@foeq2 A2 B2 C F))
  (@df_f1o A2 C F)
  (@df_f1o B2 C F)


/-- Equality theorem for one-to-one onto functions. (Contributed by NM, 10-Feb-1997.) -/
theorem f1oeq3 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wf1o C A2 F) (wf1o C B2 F)) :=
@«3bitr4g» (wceq A2 B2) (wa (wf1 C A2 F) (wfo C A2 F)) (wa (wf1 C B2 F) (wfo C B2 F)) (wf1o C A2 F) (wf1o C B2 F)
  (@anbi12d (wceq A2 B2) (wf1 C A2 F) (wf1 C B2 F) (wfo C A2 F) (wfo C B2 F)
    (@f1eq3 A2 B2 C F)
    (@foeq3 A2 B2 C F))
  (@df_f1o C A2 F)
  (@df_f1o C B2 F)


/-- Equality theorem for one-to-one onto functions. (Contributed by FL, 14-Jul-2012.) -/
theorem f1oeq23 {A2 B2 C D F : «class»} :
  ⊦ wi (wa (wceq A2 B2) (wceq C D)) (wb (wf1o A2 C F) (wf1o B2 D F)) :=
@sylan9bb (wceq A2 B2) (wf1o A2 C F) (wf1o B2 C F) (wceq C D) (wf1o B2 D F)
  (@f1oeq2 A2 B2 C F)
  (@f1oeq3 C D B2 F)


/-- Equality deduction for one-to-one onto functions. (Contributed by Mario Carneiro, 27-Jan-2017.)
-/
theorem f1oeq123d {ph : wff} {A2 B2 C D F G : «class»}
  (f1eq123d_1 : ⊦ wi ph (wceq F G))
  (f1eq123d_2 : ⊦ wi ph (wceq A2 B2))
  (f1eq123d_3 : ⊦ wi ph (wceq C D)) :
  ⊦ wi ph (wb (wf1o A2 C F) (wf1o B2 D G)) :=
@«3bitrd» ph (wf1o A2 C F) (wf1o A2 C G) (wf1o B2 C G) (wf1o B2 D G)
  (@syl ph (wceq F G) (wb (wf1o A2 C F) (wf1o A2 C G))
    f1eq123d_1
    (@f1oeq1 A2 C F G))
  (@syl ph (wceq A2 B2) (wb (wf1o A2 C G) (wf1o B2 C G))
    f1eq123d_2
    (@f1oeq2 A2 B2 C G))
  (@syl ph (wceq C D) (wb (wf1o B2 C G) (wf1o B2 D G))
    f1eq123d_3
    (@f1oeq3 C D B2 G))


/-- Equality deduction for one-to-one onto functions. (Contributed by Glauco Siliprandi,
17-Aug-2020.) -/
theorem f1oeq1d {ph : wff} {A2 B2 F G : «class»}
  (f1oeq1d_1 : ⊦ wi ph (wceq F G)) :
  ⊦ wi ph (wb (wf1o A2 B2 F) (wf1o A2 B2 G)) :=
@syl ph (wceq F G) (wb (wf1o A2 B2 F) (wf1o A2 B2 G))
  f1oeq1d_1
  (@f1oeq1 A2 B2 F G)


/-- Equality deduction for one-to-one onto functions. (Contributed by Glauco Siliprandi,
17-Aug-2020.) -/
theorem f1oeq2d {ph : wff} {A2 B2 C F : «class»}
  (f1oeq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wf1o A2 C F) (wf1o B2 C F)) :=
@syl ph (wceq A2 B2) (wb (wf1o A2 C F) (wf1o B2 C F))
  f1oeq2d_1
  (@f1oeq2 A2 B2 C F)


/-- Equality deduction for one-to-one onto functions. (Contributed by Glauco Siliprandi,
17-Aug-2020.) -/
theorem f1oeq3d {ph : wff} {A2 B2 C F : «class»}
  (f1oeq3d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wf1o C A2 F) (wf1o C B2 F)) :=
@syl ph (wceq A2 B2) (wb (wf1o C A2 F) (wf1o C B2 F))
  f1oeq3d_1
  (@f1oeq3 A2 B2 C F)


/-- Bound-variable hypothesis builder for a one-to-one onto function. (Contributed by NM,
16-May-2004.) -/
theorem nff1o {A2 B2 F : setvar → «class»}
  (nff1o_1 : ⊦ wnfc (λ x3, F x3))
  (nff1o_2 : ⊦ wnfc (λ x3, A2 x3))
  (nff1o_3 : ⊦ wnfc (λ x3, B2 x3)) :
  ⊦ wnf (λ x3, wf1o (A2 x3) (B2 x3) (F x3)) :=
@nfxfr (λ x3, wf1o (A2 x3) (B2 x3) (F x3)) (λ x3, wa (wf1 (A2 x3) (B2 x3) (F x3)) (wfo (A2 x3) (B2 x3) (F x3)))
  (λ x3, @df_f1o (A2 x3) (B2 x3) (F x3))
  (@nfan (λ x3, wf1 (A2 x3) (B2 x3) (F x3)) (λ x3, wfo (A2 x3) (B2 x3) (F x3))
    (@nff1 (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, F x3)
      nff1o_1
      nff1o_2
      nff1o_3)
    (@nffo (λ x3, A2 x3) (λ x3, B2 x3) (λ x3, F x3)
      nff1o_1
      nff1o_2
      nff1o_3))


/-- A one-to-one onto mapping is a one-to-one mapping. (Contributed by NM, 12-Dec-2003.) -/
theorem f1of1 {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wf1 A2 B2 F) :=
@simplbi (wf1o A2 B2 F) (wf1 A2 B2 F) (wfo A2 B2 F)
  (@df_f1o A2 B2 F)


/-- A one-to-one onto mapping is a mapping. (Contributed by NM, 12-Dec-2003.) -/
theorem f1of {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wf A2 B2 F) :=
@syl (wf1o A2 B2 F) (wf1 A2 B2 F) (wf A2 B2 F)
  (@f1of1 A2 B2 F)
  (@f1f A2 B2 F)


/-- A one-to-one onto mapping is function on its domain. (Contributed by NM, 12-Dec-2003.) -/
theorem f1ofn {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wfn F A2) :=
@ffnd (wf1o A2 B2 F) A2 B2 F
  (@f1of A2 B2 F)


/-- A one-to-one onto mapping is a function. (Contributed by NM, 12-Dec-2003.) -/
theorem f1ofun {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wfun F) :=
@syl (wf1o A2 B2 F) (wfn F A2) (wfun F)
  (@f1ofn A2 B2 F)
  (@fnfun A2 F)


/-- A one-to-one onto mapping is a relation. (Contributed by NM, 13-Dec-2003.) -/
theorem f1orel {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wrel F) :=
@syl (wf1o A2 B2 F) (wfun F) (wrel F)
  (@f1ofun A2 B2 F)
  (@funrel F)


/-- The domain of a one-to-one onto mapping. (Contributed by NM, 8-Mar-2014.) -/
theorem f1odm {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wceq (cdm F) A2) :=
@syl (wf1o A2 B2 F) (wfn F A2) (wceq (cdm F) A2)
  (@f1ofn A2 B2 F)
  (@fndm A2 F)


/-- Alternate definition of one-to-one onto function. (Contributed by NM, 10-Feb-1997.) (Proof
shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem dff1o2 {A2 B2 F : «class»} :
  ⊦ wb (wf1o A2 B2 F) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) :=
@bitri (wf1o A2 B2 F) (wa (wf1 A2 B2 F) (wfo A2 B2 F)) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2))
  (@df_f1o A2 B2 F)
  (@bitri (wa (wf1 A2 B2 F) (wfo A2 B2 F)) (wa (wa (wf A2 B2 F) (wfun (ccnv F))) (wa (wfn F A2) (wceq (crn F) B2))) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2))
    (@anbi12i (wf1 A2 B2 F) (wa (wf A2 B2 F) (wfun (ccnv F))) (wfo A2 B2 F) (wa (wfn F A2) (wceq (crn F) B2))
      (@df_f1 A2 B2 F)
      (@df_fo A2 B2 F))
    (@bitri (wa (wa (wf A2 B2 F) (wfun (ccnv F))) (wa (wfn F A2) (wceq (crn F) B2))) (wa (wf A2 B2 F) (wa (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2)))) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2))
      (@anass (wf A2 B2 F) (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2)))
      (@«3bitr4ri» (wa (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wf A2 B2 F)) (wa (wa (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2))) (wf A2 B2 F)) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wa (wf A2 B2 F) (wa (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2))))
        (@anbi1i (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wa (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2))) (wf A2 B2 F)
          (@«3anan12» (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)))
        (@pm4_71i (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wf A2 B2 F)
          (@«3adant2» (wfn F A2) (wceq (crn F) B2) (wf A2 B2 F) (wfun (ccnv F))
            (@sylan2 (wceq (crn F) B2) (wfn F A2) (wss (crn F) B2) (wf A2 B2 F)
              (@eqimss (crn F) B2)
              (@biimpri (wf A2 B2 F) (wa (wfn F A2) (wss (crn F) B2))
                (@df_f A2 B2 F)))))
        (@ancom (wf A2 B2 F) (wa (wfun (ccnv F)) (wa (wfn F A2) (wceq (crn F) B2)))))))


/-- Alternate definition of one-to-one onto function. (Contributed by NM, 25-Mar-1998.) (Proof
shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem dff1o3 {A2 B2 F : «class»} :
  ⊦ wb (wf1o A2 B2 F) (wa (wfo A2 B2 F) (wfun (ccnv F))) :=
@«3bitr4i» (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wa (wa (wfn F A2) (wceq (crn F) B2)) (wfun (ccnv F))) (wf1o A2 B2 F) (wa (wfo A2 B2 F) (wfun (ccnv F)))
  (@«3anan32» (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2))
  (@dff1o2 A2 B2 F)
  (@anbi1i (wfo A2 B2 F) (wa (wfn F A2) (wceq (crn F) B2)) (wfun (ccnv F))
    (@df_fo A2 B2 F))


/-- A one-to-one onto function is an onto function. (Contributed by NM, 28-Apr-2004.) -/
theorem f1ofo {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wfo A2 B2 F) :=
@simplbi (wf1o A2 B2 F) (wfo A2 B2 F) (wfun (ccnv F))
  (@dff1o3 A2 B2 F)


/-- Alternate definition of one-to-one onto function. (Contributed by NM, 25-Mar-1998.) (Proof
shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem dff1o4 {A2 B2 F : «class»} :
  ⊦ wb (wf1o A2 B2 F) (wa (wfn F A2) (wfn (ccnv F) B2)) :=
@«3bitri» (wf1o A2 B2 F) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2)) (wa (wfn F A2) (wa (wfun (ccnv F)) (wceq (crn F) B2))) (wa (wfn F A2) (wfn (ccnv F) B2))
  (@dff1o2 A2 B2 F)
  (@«3anass» (wfn F A2) (wfun (ccnv F)) (wceq (crn F) B2))
  (@anbi2i (wa (wfun (ccnv F)) (wceq (crn F) B2)) (wfn (ccnv F) B2) (wfn F A2)
    (@bitr4i (wa (wfun (ccnv F)) (wceq (crn F) B2)) (wa (wfun (ccnv F)) (wceq (cdm (ccnv F)) B2)) (wfn (ccnv F) B2)
      (@anbi2i (wceq (crn F) B2) (wceq (cdm (ccnv F)) B2) (wfun (ccnv F))
        (@eqeq1i (crn F) (cdm (ccnv F)) B2
          (@df_rn F)))
      (@df_fn (ccnv F) B2)))


/-- Alternate definition of one-to-one onto function. (Contributed by NM, 10-Dec-2003.) (Proof
shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem dff1o5 {A2 B2 F : «class»} :
  ⊦ wb (wf1o A2 B2 F) (wa (wf1 A2 B2 F) (wceq (crn F) B2)) :=
@bitri (wf1o A2 B2 F) (wa (wf1 A2 B2 F) (wfo A2 B2 F)) (wa (wf1 A2 B2 F) (wceq (crn F) B2))
  (@df_f1o A2 B2 F)
  (@pm5_32i (wf1 A2 B2 F) (wfo A2 B2 F) (wceq (crn F) B2)
    (@bitr4id (wf1 A2 B2 F) (wfo A2 B2 F) (wa (wf A2 B2 F) (wceq (crn F) B2)) (wceq (crn F) B2)
      (@dffo2 A2 B2 F)
      (@biantrurd (wf1 A2 B2 F) (wf A2 B2 F) (wceq (crn F) B2)
        (@f1f A2 B2 F))))


/-- A one-to-one function maps onto its range. (Contributed by NM, 13-Aug-2004.) -/
theorem f1orn {A2 F : «class»} :
  ⊦ wb (wf1o A2 (crn F) F) (wa (wfn F A2) (wfun (ccnv F))) :=
@bitri (wf1o A2 (crn F) F) (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) (crn F))) (wa (wfn F A2) (wfun (ccnv F)))
  (@dff1o2 A2 (crn F) F)
  (@mpbiran2 (w3a (wfn F A2) (wfun (ccnv F)) (wceq (crn F) (crn F))) (wa (wfn F A2) (wfun (ccnv F))) (wceq (crn F) (crn F))
    (@eqid (crn F))
    (@df_3an (wfn F A2) (wfun (ccnv F)) (wceq (crn F) (crn F))))


/-- A one-to-one function maps one-to-one onto its range. (Contributed by NM, 4-Sep-2004.) -/
theorem f1f1orn {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wf1o A2 (crn F) F) :=
@sylanbrc (wf1 A2 B2 F) (wfn F A2) (wfun (ccnv F)) (wf1o A2 (crn F) F)
  (@f1fn A2 B2 F)
  (@simprbi (wf1 A2 B2 F) (wf A2 B2 F) (wfun (ccnv F))
    (@df_f1 A2 B2 F))
  (@f1orn A2 F)


/-- The converse of a one-to-one onto function is also one-to-one onto. (Contributed by NM,
11-Feb-1997.) (Proof shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem f1ocnv {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wf1o B2 A2 (ccnv F)) :=
@«3imtr4i» (wa (wfn F A2) (wfn (ccnv F) B2)) (wa (wfn (ccnv F) B2) (wfn (ccnv (ccnv F)) A2)) (wf1o A2 B2 F) (wf1o B2 A2 (ccnv F))
  (@anim1ci (wfn F A2) (wfn (ccnv (ccnv F)) A2) (wfn (ccnv F) B2)
    (@mpcom (wrel F) (wfn F A2) (wfn (ccnv (ccnv F)) A2)
      (@fnrel A2 F)
      (@sylbi (wrel F) (wceq (ccnv (ccnv F)) F) (wi (wfn F A2) (wfn (ccnv (ccnv F)) A2))
        (@dfrel2 F)
        (@biimprd (wceq (ccnv (ccnv F)) F) (wfn (ccnv (ccnv F)) A2) (wfn F A2)
          (@fneq1 A2 (ccnv (ccnv F)) F)))))
  (@dff1o4 A2 B2 F)
  (@dff1o4 B2 A2 (ccnv F))


/-- A relation is a one-to-one onto function iff its converse is a one-to-one onto function with
domain and range interchanged. (Contributed by NM, 8-Dec-2003.) -/
theorem f1ocnvb {A2 B2 F : «class»} :
  ⊦ wi (wrel F) (wb (wf1o A2 B2 F) (wf1o B2 A2 (ccnv F))) :=
@impbid2 (wrel F) (wf1o A2 B2 F) (wf1o B2 A2 (ccnv F))
  (@f1ocnv A2 B2 F)
  (@syl5ib (wf1o B2 A2 (ccnv F)) (wf1o A2 B2 (ccnv (ccnv F))) (wrel F) (wf1o A2 B2 F)
    (@f1ocnv B2 A2 (ccnv F))
    (@sylbi (wrel F) (wceq (ccnv (ccnv F)) F) (wb (wf1o A2 B2 (ccnv (ccnv F))) (wf1o A2 B2 F))
      (@dfrel2 F)
      (@f1oeq1 A2 B2 (ccnv (ccnv F)) F)))


/-- The restriction of a one-to-one function maps one-to-one onto the image. (Contributed by NM,
25-Mar-1998.) -/
theorem f1ores {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf1 A2 B2 F) (wss C A2)) (wf1o C (cima F C) (cres F C)) :=
@sylibr (wa (wf1 A2 B2 F) (wss C A2)) (wf1o C (crn (cres F C)) (cres F C)) (wf1o C (cima F C) (cres F C))
  (@syl (wa (wf1 A2 B2 F) (wss C A2)) (wf1 C B2 (cres F C)) (wf1o C (crn (cres F C)) (cres F C))
    (@f1ssres A2 B2 C F)
    (@f1f1orn C B2 (cres F C)))
  (@ax_mp (wceq (cima F C) (crn (cres F C))) (wb (wf1o C (cima F C) (cres F C)) (wf1o C (crn (cres F C)) (cres F C)))
    (@df_ima F C)
    (@f1oeq3 (cima F C) (crn (cres F C)) C (cres F C)))


/-- The converse of a one-to-one-onto restricted function. (Contributed by Paul Chapman,
21-Apr-2008.) -/
theorem f1orescnv {P R F : «class»} :
  ⊦ wi (wa (wfun (ccnv F)) (wf1o R P (cres F R))) (wf1o P R (cres (ccnv F) P)) :=
@mpbid (wa (wfun (ccnv F)) (wf1o R P (cres F R))) (wf1o P R (ccnv (cres F R))) (wf1o P R (cres (ccnv F) P))
  (@adantl (wf1o R P (cres F R)) (wf1o P R (ccnv (cres F R))) (wfun (ccnv F))
    (@f1ocnv R P (cres F R)))
  (@f1oeq1d (wa (wfun (ccnv F)) (wf1o R P (cres F R))) P R (ccnv (cres F R)) (cres (ccnv F) P)
    (@sylan9eq (wfun (ccnv F)) (wf1o R P (cres F R)) (ccnv (cres F R)) (cres (ccnv F) (cima F R)) (cres (ccnv F) P)
      (@funcnvres R F)
      (@reseq2d (wf1o R P (cres F R)) (cima F R) P (ccnv F)
        (@syl5eq (wf1o R P (cres F R)) (cima F R) (crn (cres F R)) P
          (@df_ima F R)
          (@simprbi (wf1o R P (cres F R)) (wf1 R P (cres F R)) (wceq (crn (cres F R)) P)
            (@dff1o5 R P (cres F R)))))))


/-- Preimage of an image. (Contributed by NM, 30-Sep-2004.) -/
theorem f1imacnv {A2 B2 C F : «class»} :
  ⊦ wi (wa (wf1 A2 B2 F) (wss C A2)) (wceq (cima (ccnv F) (cima F C)) C) :=
@eqtr3id (wa (wf1 A2 B2 F) (wss C A2)) (cima (ccnv F) (cima F C)) (cima (cres (ccnv F) (cima F C)) (cima F C)) C
  (@resima (ccnv F) (cima F C))
  (@eqtr3d (wa (wf1 A2 B2 F) (wss C A2)) (cima (ccnv (cres F C)) (cima F C)) (cima (cres (ccnv F) (cima F C)) (cima F C)) C
    (@imaeq1d (wa (wf1 A2 B2 F) (wss C A2)) (ccnv (cres F C)) (cres (ccnv F) (cima F C)) (cima F C)
      (@syl (wa (wf1 A2 B2 F) (wss C A2)) (wfun (ccnv F)) (wceq (ccnv (cres F C)) (cres (ccnv F) (cima F C)))
        (@adantr (wf1 A2 B2 F) (wfun (ccnv F)) (wss C A2)
          (@simprbi (wf1 A2 B2 F) (wf A2 B2 F) (wfun (ccnv F))
            (@df_f1 A2 B2 F)))
        (@funcnvres C F)))
    (@syl (wa (wf1 A2 B2 F) (wss C A2)) (wf1o (cima F C) C (ccnv (cres F C))) (wceq (cima (ccnv (cres F C)) (cima F C)) C)
      (@syl (wa (wf1 A2 B2 F) (wss C A2)) (wf1o C (cima F C) (cres F C)) (wf1o (cima F C) C (ccnv (cres F C)))
        (@f1ores A2 B2 C F)
        (@f1ocnv C (cima F C) (cres F C)))
      (@«3eqtr3a» (wf1o (cima F C) C (ccnv (cres F C))) (cima (ccnv (cres F C)) (cdm (ccnv (cres F C)))) (crn (ccnv (cres F C))) (cima (ccnv (cres F C)) (cima F C)) C
        (@imadmrn (ccnv (cres F C)))
        (@imaeq2d (wf1o (cima F C) C (ccnv (cres F C))) (cdm (ccnv (cres F C))) (cima F C) (ccnv (cres F C))
          (@f1odm (cima F C) C (ccnv (cres F C))))
        (@syl (wf1o (cima F C) C (ccnv (cres F C))) (wfo (cima F C) C (ccnv (cres F C))) (wceq (crn (ccnv (cres F C))) C)
          (@f1ofo (cima F C) C (ccnv (cres F C)))
          (@forn (cima F C) C (ccnv (cres F C)))))))


/-- A reverse version of ~ f1imacnv . (Contributed by Jeff Hankins, 16-Jul-2009.) -/
theorem foimacnv {A2 B2 C F : «class»} :
  ⊦ wi (wa (wfo A2 B2 F) (wss C B2)) (wceq (cima F (cima (ccnv F) C)) C) :=
@eqtr3id (wa (wfo A2 B2 F) (wss C B2)) (cima F (cima (ccnv F) C)) (cima (cres F (cima (ccnv F) C)) (cima (ccnv F) C)) C
  (@resima F (cima (ccnv F) C))
  (@eqtr3d (wa (wfo A2 B2 F) (wss C B2)) (cima (ccnv (cres (ccnv F) C)) (cima (ccnv F) C)) (cima (cres F (cima (ccnv F) C)) (cima (ccnv F) C)) C
    (@imaeq1d (wa (wfo A2 B2 F) (wss C B2)) (ccnv (cres (ccnv F) C)) (cres F (cima (ccnv F) C)) (cima (ccnv F) C)
      (@syl (wa (wfo A2 B2 F) (wss C B2)) (wfun F) (wceq (ccnv (cres (ccnv F) C)) (cres F (cima (ccnv F) C)))
        (@adantr (wfo A2 B2 F) (wfun F) (wss C B2)
          (@fofun A2 B2 F))
        (@funcnvres2 C F)))
    (@syl (wa (wfo A2 B2 F) (wss C B2)) (wfo (cima (ccnv F) C) C (ccnv (cres (ccnv F) C))) (wceq (cima (ccnv (cres (ccnv F) C)) (cima (ccnv F) C)) C)
      (@sylanbrc (wa (wfo A2 B2 F) (wss C B2)) (wfn (ccnv (cres (ccnv F) C)) (cima (ccnv F) C)) (wceq (crn (ccnv (cres (ccnv F) C))) C) (wfo (cima (ccnv F) C) C (ccnv (cres (ccnv F) C)))
        (@sylanblrc (wa (wfo A2 B2 F) (wss C B2)) (wfun (ccnv (cres (ccnv F) C))) (wceq (cdm (ccnv (cres (ccnv F) C))) (cima (ccnv F) C)) (wfn (ccnv (cres (ccnv F) C)) (cima (ccnv F) C))
          (@adantr (wfo A2 B2 F) (wfun (ccnv (cres (ccnv F) C))) (wss C B2)
            (@mpsyl (wss (ccnv (cres (ccnv F) C)) F) (wfo A2 B2 F) (wfun F) (wfun (ccnv (cres (ccnv F) C)))
              (@sstri (ccnv (cres (ccnv F) C)) (ccnv (ccnv F)) F
                (@ax_mp (wss (cres (ccnv F) C) (ccnv F)) (wss (ccnv (cres (ccnv F) C)) (ccnv (ccnv F)))
                  (@resss (ccnv F) C)
                  (@cnvss (cres (ccnv F) C) (ccnv F)))
                (@cnvcnvss F))
              (@fofun A2 B2 F)
              (@funss (ccnv (cres (ccnv F) C)) F)))
          (@eqtr2i (cima (ccnv F) C) (crn (cres (ccnv F) C)) (cdm (ccnv (cres (ccnv F) C)))
            (@df_ima (ccnv F) C)
            (@df_rn (cres (ccnv F) C)))
          (@df_fn (ccnv (cres (ccnv F) C)) (cima (ccnv F) C)))
        (@eqtr3id (wa (wfo A2 B2 F) (wss C B2)) (crn (ccnv (cres (ccnv F) C))) (cdm (cres (ccnv F) C)) C
          (@dfdm4 (cres (ccnv F) C))
          (@sylib (wa (wfo A2 B2 F) (wss C B2)) (wss C (cdm (ccnv F))) (wceq (cdm (cres (ccnv F) C)) C)
            (@sseqtrdi (wa (wfo A2 B2 F) (wss C B2)) C (crn F) (cdm (ccnv F))
              (@biimpar (wfo A2 B2 F) (wss C (crn F)) (wss C B2)
                (@sseq2d (wfo A2 B2 F) (crn F) B2 C
                  (@forn A2 B2 F)))
              (@df_rn F))
            (@ssdmres C (ccnv F))))
        (@df_fo (cima (ccnv F) C) C (ccnv (cres (ccnv F) C))))
      (@foima (cima (ccnv F) C) C (ccnv (cres (ccnv F) C)))))


/-- The union of two one-to-one onto functions with disjoint domains and ranges. (Contributed by NM,
26-Mar-1998.) -/
theorem f1oun {A2 B2 C D F G : «class»} :
  ⊦ wi (wa (wa (wf1o A2 B2 F) (wf1o C D G)) (wa (wceq (cin A2 C) c0) (wceq (cin B2 D) c0))) (wf1o (cun A2 C) (cun B2 D) (cun F G)) :=
@imp (wa (wf1o A2 B2 F) (wf1o C D G)) (wa (wceq (cin A2 C) c0) (wceq (cin B2 D) c0)) (wf1o (cun A2 C) (cun B2 D) (cun F G))
  (@syl6ibr (wa (wf1o A2 B2 F) (wf1o C D G)) (wa (wceq (cin A2 C) c0) (wceq (cin B2 D) c0)) (wa (wfn (cun F G) (cun A2 C)) (wfn (ccnv (cun F G)) (cun B2 D))) (wf1o (cun A2 C) (cun B2 D) (cun F G))
    (@syl2anb (wf1o A2 B2 F) (wa (wfn F A2) (wfn (ccnv F) B2)) (wa (wfn G C) (wfn (ccnv G) D)) (wi (wa (wceq (cin A2 C) c0) (wceq (cin B2 D) c0)) (wa (wfn (cun F G) (cun A2 C)) (wfn (ccnv (cun F G)) (cun B2 D)))) (wf1o C D G)
      (@dff1o4 A2 B2 F)
      (@dff1o4 C D G)
      (@an4s (wfn F A2) (wfn G C) (wfn (ccnv F) B2) (wfn (ccnv G) D) (wi (wa (wceq (cin A2 C) c0) (wceq (cin B2 D) c0)) (wa (wfn (cun F G) (cun A2 C)) (wfn (ccnv (cun F G)) (cun B2 D))))
        (@im2anan9 (wa (wfn F A2) (wfn G C)) (wceq (cin A2 C) c0) (wfn (cun F G) (cun A2 C)) (wa (wfn (ccnv F) B2) (wfn (ccnv G) D)) (wceq (cin B2 D) c0) (wfn (ccnv (cun F G)) (cun B2 D))
          (@ex (wa (wfn F A2) (wfn G C)) (wceq (cin A2 C) c0) (wfn (cun F G) (cun A2 C))
            (@fnun A2 C F G))
          (@ex (wa (wfn (ccnv F) B2) (wfn (ccnv G) D)) (wceq (cin B2 D) c0) (wfn (ccnv (cun F G)) (cun B2 D))
            (@sylibr (wa (wa (wfn (ccnv F) B2) (wfn (ccnv G) D)) (wceq (cin B2 D) c0)) (wfn (cun (ccnv F) (ccnv G)) (cun B2 D)) (wfn (ccnv (cun F G)) (cun B2 D))
              (@fnun B2 D (ccnv F) (ccnv G))
              (@fneq1i (cun B2 D) (ccnv (cun F G)) (cun (ccnv F) (ccnv G))
                (@cnvun F G)))))))
    (@dff1o4 (cun A2 C) (cun B2 D) (cun F G)))


/-- The restriction of a one-to-one onto function to a difference maps onto the difference of the
images. (Contributed by Paul Chapman, 11-Apr-2009.) -/
theorem resdif {A2 B2 C D F : «class»} :
  ⊦ wi (w3a (wfun (ccnv F)) (wfo A2 C (cres F A2)) (wfo B2 D (cres F B2))) (wf1o (cdif A2 B2) (cdif C D) (cres F (cdif A2 B2))) :=
@mpbid (w3a (wfun (ccnv F)) (wfo A2 C (cres F A2)) (wfo B2 D (cres F B2))) (wf1o (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wf1o (cdif A2 B2) (cdif C D) (cres F (cdif A2 B2)))
  (@«3adant3» (wfun (ccnv F)) (wfo A2 C (cres F A2)) (wf1o (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wfo B2 D (cres F B2))
    (@syl2anr (wfo A2 C (cres F A2)) (wfo (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wfun (ccnv (cres F (cdif A2 B2)))) (wf1o (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wfun (ccnv F))
      (@sylib (wfo A2 C (cres F A2)) (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres (cres F A2) (cdif A2 B2))) (wfo (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2)))
        (@syl2anc (wfo A2 C (cres F A2)) (wfun (cres F A2)) (wss (cdif A2 B2) (cdm (cres F A2))) (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres (cres F A2) (cdif A2 B2)))
          (@fofun A2 C (cres F A2))
          (@sseqtrrid (wfo A2 C (cres F A2)) A2 (cdif A2 B2) (cdm (cres F A2))
            (@difss A2 B2)
            (@fdmd (wfo A2 C (cres F A2)) A2 C (cres F A2)
              (@fof A2 C (cres F A2))))
          (@fores (cdif A2 B2) (cres F A2)))
        (@bitri (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres (cres F A2) (cdif A2 B2))) (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))) (wfo (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2)))
          (@ax_mp (wceq (cres (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))) (wb (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres (cres F A2) (cdif A2 B2))) (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))))
            (@eqtri (cres (cres F A2) (cdif A2 B2)) (cres F (cin A2 (cdif A2 B2))) (cres F (cdif A2 B2))
              (@resres F A2 (cdif A2 B2))
              (@reseq2i (cin A2 (cdif A2 B2)) (cdif A2 B2) F
                (@indif A2 B2)))
            (@foeq1 (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))))
          (@ax_mp (wceq (cima (cres F A2) (cdif A2 B2)) (cima F (cdif A2 B2))) (wb (wfo (cdif A2 B2) (cima (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))) (wfo (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))))
            (@«3eqtr4i» (crn (cres (cres F A2) (cdif A2 B2))) (crn (cres F (cdif A2 B2))) (cima (cres F A2) (cdif A2 B2)) (cima F (cdif A2 B2))
              (@rneqi (cres (cres F A2) (cdif A2 B2)) (cres F (cdif A2 B2))
                (@eqtri (cres (cres F A2) (cdif A2 B2)) (cres F (cin A2 (cdif A2 B2))) (cres F (cdif A2 B2))
                  (@resres F A2 (cdif A2 B2))
                  (@reseq2i (cin A2 (cdif A2 B2)) (cdif A2 B2) F
                    (@indif A2 B2))))
              (@df_ima (cres F A2) (cdif A2 B2))
              (@df_ima F (cdif A2 B2)))
            (@foeq3 (cima (cres F A2) (cdif A2 B2)) (cima F (cdif A2 B2)) (cdif A2 B2) (cres F (cdif A2 B2))))))
      (@funres11 (cdif A2 B2) F)
      (@biimpri (wf1o (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wa (wfo (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))) (wfun (ccnv (cres F (cdif A2 B2)))))
        (@dff1o3 (cdif A2 B2) (cima F (cdif A2 B2)) (cres F (cdif A2 B2))))))
  (@f1oeq3d (w3a (wfun (ccnv F)) (wfo A2 C (cres F A2)) (wfo B2 D (cres F B2))) (cima F (cdif A2 B2)) (cdif C D) (cdif A2 B2) (cres F (cdif A2 B2))
    (@«3impb» (wfun (ccnv F)) (wfo A2 C (cres F A2)) (wfo B2 D (cres F B2)) (wceq (cima F (cdif A2 B2)) (cdif C D))
      (@sylan2 (wa (wfo A2 C (cres F A2)) (wfo B2 D (cres F B2))) (wfun (ccnv F)) (wa (wceq (cima F A2) C) (wceq (cima F B2) D)) (wceq (cima F (cdif A2 B2)) (cdif C D))
        (@anim12i (wfo A2 C (cres F A2)) (wceq (cima F A2) C) (wfo B2 D (cres F B2)) (wceq (cima F B2) D)
          (@syl5eq (wfo A2 C (cres F A2)) (cima F A2) (crn (cres F A2)) C
            (@df_ima F A2)
            (@forn A2 C (cres F A2)))
          (@syl5eq (wfo B2 D (cres F B2)) (cima F B2) (crn (cres F B2)) D
            (@df_ima F B2)
            (@forn B2 D (cres F B2))))
        (@sylan9eq (wfun (ccnv F)) (wa (wceq (cima F A2) C) (wceq (cima F B2) D)) (cima F (cdif A2 B2)) (cdif (cima F A2) (cima F B2)) (cdif C D)
          (@imadif A2 B2 F)
          (@difeq12 (cima F A2) C (cima F B2) D)))))


/-- Composition of one-to-one onto functions. (Contributed by NM, 19-Mar-1998.) -/
theorem f1oco {A2 B2 C F G : «class»} :
  ⊦ wi (wa (wf1o B2 C F) (wf1o A2 B2 G)) (wf1o A2 C (ccom F G)) :=
@sylibr (wa (wf1o B2 C F) (wf1o A2 B2 G)) (wa (wf1 A2 C (ccom F G)) (wfo A2 C (ccom F G))) (wf1o A2 C (ccom F G))
  (@syl2anb (wf1o B2 C F) (wa (wf1 B2 C F) (wfo B2 C F)) (wa (wf1 A2 B2 G) (wfo A2 B2 G)) (wa (wf1 A2 C (ccom F G)) (wfo A2 C (ccom F G))) (wf1o A2 B2 G)
    (@df_f1o B2 C F)
    (@df_f1o A2 B2 G)
    (@an4s (wf1 B2 C F) (wf1 A2 B2 G) (wfo B2 C F) (wfo A2 B2 G) (wa (wf1 A2 C (ccom F G)) (wfo A2 C (ccom F G)))
      (@anim12i (wa (wf1 B2 C F) (wf1 A2 B2 G)) (wf1 A2 C (ccom F G)) (wa (wfo B2 C F) (wfo A2 B2 G)) (wfo A2 C (ccom F G))
        (@f1co A2 B2 C F G)
        (@foco A2 B2 C F G))))
  (@df_f1o A2 C (ccom F G))


/-- The converse of an injective function is bijective. (Contributed by FL, 11-Nov-2011.) -/
theorem f1cnv {A2 B2 F : «class»} :
  ⊦ wi (wf1 A2 B2 F) (wf1o (crn F) A2 (ccnv F)) :=
@syl (wf1 A2 B2 F) (wf1o A2 (crn F) F) (wf1o (crn F) A2 (ccnv F))
  (@f1f1orn A2 B2 F)
  (@f1ocnv A2 (crn F) F)


/-- Composition with the converse. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem funcocnv2 {F : «class»} :
  ⊦ wi (wfun F) (wceq (ccom F (ccnv F)) (cres cid (crn F))) :=
@sylib (wfun F) (wss (ccom F (ccnv F)) cid) (wceq (ccom F (ccnv F)) (cres cid (crn F)))
  (@simprbi (wfun F) (wrel F) (wss (ccom F (ccnv F)) cid)
    (@df_fun F))
  (@bitri (wss (ccom F (ccnv F)) cid) (wceq (ccom F (ccnv F)) (cres cid (cdm (ccom F (ccnv F))))) (wceq (ccom F (ccnv F)) (cres cid (crn F)))
    (@iss (ccom F (ccnv F)))
    (@eqeq2i (cres cid (cdm (ccom F (ccnv F)))) (cres cid (crn F)) (ccom F (ccnv F))
      (@reseq2i (cdm (ccom F (ccnv F))) (crn F) cid
        (@eqtr4i (cdm (ccom F (ccnv F))) (cdm (ccnv F)) (crn F)
          (@ax_mp (wceq (cdm F) (crn (ccnv F))) (wceq (cdm (ccom F (ccnv F))) (cdm (ccnv F)))
            (@dfdm4 F)
            (@dmcoeq F (ccnv F)))
          (@df_rn F)))))


/-- The composition of an onto function and its converse. (Contributed by Stefan O'Rear,
12-Feb-2015.) -/
theorem fococnv2 {A2 B2 F : «class»} :
  ⊦ wi (wfo A2 B2 F) (wceq (ccom F (ccnv F)) (cres cid B2)) :=
@eqtrd (wfo A2 B2 F) (ccom F (ccnv F)) (cres cid (crn F)) (cres cid B2)
  (@syl (wfo A2 B2 F) (wfun F) (wceq (ccom F (ccnv F)) (cres cid (crn F)))
    (@fofun A2 B2 F)
    (@funcocnv2 F))
  (@reseq2d (wfo A2 B2 F) (crn F) B2 cid
    (@forn A2 B2 F))


/-- The composition of a one-to-one onto function and its converse equals the identity relation
restricted to the function's range. (Contributed by NM, 13-Dec-2003.) (Proof shortened by Stefan
O'Rear, 12-Feb-2015.) -/
theorem f1ococnv2 {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wceq (ccom F (ccnv F)) (cres cid B2)) :=
@syl (wf1o A2 B2 F) (wfo A2 B2 F) (wceq (ccom F (ccnv F)) (cres cid B2))
  (@f1ofo A2 B2 F)
  (@fococnv2 A2 B2 F)


/-- The composition of a one-to-one onto function's converse and itself equals the identity relation
restricted to the function's domain. (Contributed by NM, 13-Dec-2003.) -/
theorem f1ococnv1 {A2 B2 F : «class»} :
  ⊦ wi (wf1o A2 B2 F) (wceq (ccom (ccnv F) F) (cres cid A2)) :=
@eqtr3d (wf1o A2 B2 F) (ccom (ccnv F) (ccnv (ccnv F))) (ccom (ccnv F) F) (cres cid A2)
  (@coeq2d (wf1o A2 B2 F) (ccnv (ccnv F)) F (ccnv F)
    (@sylib (wf1o A2 B2 F) (wrel F) (wceq (ccnv (ccnv F)) F)
      (@f1orel A2 B2 F)
      (@dfrel2 F)))
  (@syl (wf1o A2 B2 F) (wf1o B2 A2 (ccnv F)) (wceq (ccom (ccnv F) (ccnv (ccnv F))) (cres cid A2))
    (@f1ocnv A2 B2 F)
    (@f1ococnv2 B2 A2 (ccnv F)))


/-- The empty set maps one-to-one into any class. (Contributed by NM, 7-Apr-1998.) -/
theorem f10 {A2 : «class»} :
  ⊦ wf1 c0 A2 c0 :=
@mpbir2an (wf1 c0 A2 c0) (wf c0 A2 c0) (wfun (ccnv c0))
  (@f0 A2)
  funcnv0
  (@df_f1 c0 A2 c0)


/-- One-to-one onto mapping of the empty set. (Contributed by NM, 15-Apr-1998.) -/
theorem f1o00 {A2 F : «class»} :
  ⊦ wb (wf1o c0 A2 F) (wa (wceq F c0) (wceq A2 c0)) :=
@bitri (wf1o c0 A2 F) (wa (wfn F c0) (wfn (ccnv F) A2)) (wa (wceq F c0) (wceq A2 c0))
  (@dff1o4 c0 A2 F)
  (@impbii (wa (wfn F c0) (wfn (ccnv F) A2)) (wa (wceq F c0) (wceq A2 c0))
    (@jca (wa (wfn F c0) (wfn (ccnv F) A2)) (wceq F c0) (wceq A2 c0)
      (@adantr (wfn F c0) (wceq F c0) (wfn (ccnv F) A2)
        (@biimpi (wfn F c0) (wceq F c0)
          (@fn0 F)))
      (@syl5reqr (wa (wfn F c0) (wfn (ccnv F) A2)) c0 (cdm c0) A2
        dm0
        (@fndmd (wa (wfn F c0) (wfn (ccnv F) A2)) A2 c0
          (@biimpa (wfn F c0) (wfn (ccnv F) A2) (wfn c0 A2)
            (@fneq1d (wfn F c0) A2 (ccnv F) c0
              (@sylbi (wfn F c0) (wceq F c0) (wceq (ccnv F) c0)
                (@fn0 F)
                (@eqtrdi (wceq F c0) (ccnv F) (ccnv c0) c0
                  (@cnveq F c0)
                  cnv0)))))))
    (@jca (wa (wceq F c0) (wceq A2 c0)) (wfn F c0) (wfn (ccnv F) A2)
      (@adantr (wceq F c0) (wfn F c0) (wceq A2 c0)
        (@biimpri (wfn F c0) (wceq F c0)
          (@fn0 F)))
      (@mpbiri (wa (wceq F c0) (wceq A2 c0)) (wfn (ccnv F) A2) (wfn c0 c0)
        (@mpbir (wfn c0 c0) (wceq c0 c0)
          (@eqid c0)
          (@fn0 c0))
        (@sylan9bb (wceq F c0) (wfn (ccnv F) A2) (wfn c0 A2) (wceq A2 c0) (wfn c0 c0)
          (@fneq1d (wceq F c0) A2 (ccnv F) c0
            (@eqtrdi (wceq F c0) (ccnv F) (ccnv c0) c0
              (@cnveq F c0)
              cnv0))
          (@fneq2 A2 c0 c0)))))


/-- Onto mapping of the empty set. (Contributed by NM, 22-Mar-2006.) -/
theorem fo00 {A2 F : «class»} :
  ⊦ wb (wfo c0 A2 F) (wa (wceq F c0) (wceq A2 c0)) :=
@bitri (wfo c0 A2 F) (wf1o c0 A2 F) (wa (wceq F c0) (wceq A2 c0))
  (@impbii (wfo c0 A2 F) (wf1o c0 A2 F)
    (@sylibr (wfo c0 A2 F) (wa (wf1 c0 A2 F) (wfo c0 A2 F)) (wf1o c0 A2 F)
      (@ancri (wfo c0 A2 F) (wf1 c0 A2 F)
        (@syl (wfo c0 A2 F) (wfn F c0) (wf1 c0 A2 F)
          (@fofn c0 A2 F)
          (@sylbi (wfn F c0) (wceq F c0) (wf1 c0 A2 F)
            (@fn0 F)
            (@mpbiri (wceq F c0) (wf1 c0 A2 F) (wf1 c0 A2 c0)
              (@f10 A2)
              (@f1eq1 c0 A2 F c0)))))
      (@df_f1o c0 A2 F))
    (@f1ofo c0 A2 F))
  (@f1o00 A2 F)


/-- One-to-one onto mapping of the empty set. (Contributed by NM, 10-Sep-2004.) -/
theorem f1o0 :
  ⊦ wf1o c0 c0 c0 :=
@mpbir2an (wf1o c0 c0 c0) (wceq c0 c0) (wceq c0 c0)
  (@eqid c0)
  (@eqid c0)
  (@f1o00 c0 c0)


/-- A restriction of the identity relation is a one-to-one onto function. (Contributed by NM,
30-Apr-1998.) (Proof shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem f1oi {A2 : «class»} :
  ⊦ wf1o A2 A2 (cres cid A2) :=
@mpbir2an (wf1o A2 A2 (cres cid A2)) (wfn (cres cid A2) A2) (wfn (ccnv (cres cid A2)) A2)
  (@fnresi A2)
  (@mpbir (wfn (ccnv (cres cid A2)) A2) (wfn (cres cid A2) A2)
    (@fnresi A2)
    (@fneq1i A2 (ccnv (cres cid A2)) (cres cid A2)
      (@cnvresid A2)))
  (@dff1o4 A2 A2 (cres cid A2))


/-- A singleton of an ordered pair is one-to-one onto function. (Contributed by NM, 18-May-1998.)
(Proof shortened by Andrew Salmon, 22-Oct-2011.) -/
theorem f1osn {A2 B2 : «class»}
  (f1osn_1 : ⊦ wcel A2 cvv)
  (f1osn_2 : ⊦ wcel B2 cvv) :
  ⊦ wf1o (csn A2) (csn B2) (csn (cop A2 B2)) :=
@mpbir2an (wf1o (csn A2) (csn B2) (csn (cop A2 B2))) (wfn (csn (cop A2 B2)) (csn A2)) (wfn (ccnv (csn (cop A2 B2))) (csn B2))
  (@fnsn A2 B2
    f1osn_1
    f1osn_2)
  (@mpbir (wfn (ccnv (csn (cop A2 B2))) (csn B2)) (wfn (csn (cop B2 A2)) (csn B2))
    (@fnsn B2 A2
      f1osn_2
      f1osn_1)
    (@fneq1i (csn B2) (ccnv (csn (cop A2 B2))) (csn (cop B2 A2))
      (@cnvsn A2 B2
        f1osn_1
        f1osn_2)))
  (@dff1o4 (csn A2) (csn B2) (csn (cop A2 B2)))


/-- A singleton of an ordered pair is one-to-one onto function. (Contributed by Mario Carneiro,
12-Jan-2013.) -/
theorem f1osng {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wf1o (csn A2) (csn B2) (csn (cop A2 B2))) :=
setvar.forget $ λ a : setvar,
  setvar.forget $ λ b : setvar,
  show ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wf1o (csn A2) (csn B2) (csn (cop A2 B2))), from
  @vtocl2g (λ a b, wf1o (csn (cv a)) (csn (cv b)) (csn (cop (cv a) (cv b)))) (λ b, wf1o (csn A2) (csn (cv b)) (csn (cop A2 (cv b)))) (λ a, wf1o (csn A2) (csn B2) (csn (cop A2 B2))) A2 (λ a, B2) (λ a b, V) (λ a b, W)
    (λ a b, @bitrd (wceq (cv a) A2) (wf1o (csn (cv a)) (csn (cv b)) (csn (cop (cv a) (cv b)))) (wf1o (csn A2) (csn (cv b)) (csn (cop (cv a) (cv b)))) (wf1o (csn A2) (csn (cv b)) (csn (cop A2 (cv b))))
      (@f1oeq2d (wceq (cv a) A2) (csn (cv a)) (csn A2) (csn (cv b)) (csn (cop (cv a) (cv b)))
        (@sneq (cv a) A2))
      (@f1oeq1d (wceq (cv a) A2) (csn A2) (csn (cv b)) (csn (cop (cv a) (cv b))) (csn (cop A2 (cv b)))
        (@sneqd (wceq (cv a) A2) (cop (cv a) (cv b)) (cop A2 (cv b))
          (@opeq1 (cv a) A2 (cv b)))))
    (λ a b, @bitrd (wceq (cv b) B2) (wf1o (csn A2) (csn (cv b)) (csn (cop A2 (cv b)))) (wf1o (csn A2) (csn B2) (csn (cop A2 (cv b)))) (wf1o (csn A2) (csn B2) (csn (cop A2 B2)))
      (@f1oeq3d (wceq (cv b) B2) (csn (cv b)) (csn B2) (csn A2) (csn (cop A2 (cv b)))
        (@sneq (cv b) B2))
      (@f1oeq1d (wceq (cv b) B2) (csn A2) (csn B2) (csn (cop A2 (cv b))) (csn (cop A2 B2))
        (@sneqd (wceq (cv b) B2) (cop A2 (cv b)) (cop A2 B2)
          (@opeq2 (cv b) B2 A2))))
    (λ a b, @f1osn (cv a) (cv b)
      (@vex a)
      (@vex b)) a b


/-- A singleton of an ordered pair is a one-to-one function. (Contributed by AV, 17-Apr-2021.) -/
theorem f1sng {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wf1 (csn A2) W (csn (cop A2 B2))) :=
@syl2anc (wa (wcel A2 V) (wcel B2 W)) (wf1 (csn A2) (csn B2) (csn (cop A2 B2))) (wss (csn B2) W) (wf1 (csn A2) W (csn (cop A2 B2)))
  (@syl (wa (wcel A2 V) (wcel B2 W)) (wf1o (csn A2) (csn B2) (csn (cop A2 B2))) (wf1 (csn A2) (csn B2) (csn (cop A2 B2)))
    (@f1osng A2 B2 V W)
    (@f1of1 (csn A2) (csn B2) (csn (cop A2 B2))))
  (@adantl (wcel B2 W) (wss (csn B2) W) (wcel A2 V)
    (@snssi B2 W))
  (@f1ss (csn A2) (csn B2) W (csn (cop A2 B2)))


/-- A singleton of an ordered pair is a function. (Contributed by AV, 17-Apr-2021.) -/
theorem fsnd {ph : wff} {A2 B2 V W : «class»}
  (fsnd_a : ⊦ wi ph (wcel A2 V))
  (fsnd_b : ⊦ wi ph (wcel B2 W)) :
  ⊦ wi ph (wf (csn A2) W (csn (cop A2 B2))) :=
@«3syl» ph (wa (wcel A2 V) (wcel B2 W)) (wf1 (csn A2) W (csn (cop A2 B2))) (wf (csn A2) W (csn (cop A2 B2)))
  (@jca ph (wcel A2 V) (wcel B2 W)
    fsnd_a
    fsnd_b)
  (@f1sng A2 B2 V W)
  (@f1f (csn A2) W (csn (cop A2 B2)))


/-- A two-element swap is a bijection on a pair. (Contributed by Mario Carneiro, 23-Jan-2015.) -/
theorem f1oprswap {A2 B2 V W : «class»} :
  ⊦ wi (wa (wcel A2 V) (wcel B2 W)) (wf1o (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2))) :=
@pm2_61dane (wa (wcel A2 V) (wcel B2 W)) (wf1o (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2))) A2 B2
  (@mpbid (wa (wa (wcel A2 V) (wcel B2 W)) (wceq A2 B2)) (wf1o (csn A2) (csn A2) (csn (cop A2 A2))) (wf1o (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2)))
    (@ad2antrr (wcel A2 V) (wf1o (csn A2) (csn A2) (csn (cop A2 A2))) (wcel B2 W) (wceq A2 B2)
      (@anidms (wcel A2 V) (wf1o (csn A2) (csn A2) (csn (cop A2 A2)))
        (@f1osng A2 A2 V V)))
    (@adantl (wceq A2 B2) (wb (wf1o (csn A2) (csn A2) (csn (cop A2 A2))) (wf1o (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2)))) (wa (wcel A2 V) (wcel B2 W))
      (@f1oeq123d (wceq A2 B2) (csn A2) (cpr A2 B2) (csn A2) (cpr A2 B2) (csn (cop A2 A2)) (cpr (cop A2 B2) (cop B2 A2))
        (@syl5eq (wceq A2 B2) (csn (cop A2 A2)) (cpr (cop A2 A2) (cop A2 A2)) (cpr (cop A2 B2) (cop B2 A2))
          (@dfsn2 (cop A2 A2))
          (@preq12d (wceq A2 B2) (cop A2 A2) (cop A2 B2) (cop A2 A2) (cop B2 A2)
            (@opeq2 A2 B2 A2)
            (@opeq1 A2 B2 A2)))
        (@syl5eq (wceq A2 B2) (csn A2) (cpr A2 A2) (cpr A2 B2)
          (@dfsn2 A2)
          (@preq2 A2 B2 A2))
        (@syl5eq (wceq A2 B2) (csn A2) (cpr A2 A2) (cpr A2 B2)
          (@dfsn2 A2)
          (@preq2 A2 B2 A2)))))
  (@sylanbrc (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (wfn (cpr (cop A2 B2) (cop B2 A2)) (cpr A2 B2)) (wfn (ccnv (cpr (cop A2 B2) (cop B2 A2))) (cpr A2 B2)) (wf1o (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2)))
    (@syl221anc (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (wcel A2 V) (wcel B2 W) (wcel B2 W) (wcel A2 V) (wne A2 B2) (wfn (cpr (cop A2 B2) (cop B2 A2)) (cpr A2 B2))
      (@simpll (wcel A2 V) (wcel B2 W) (wne A2 B2))
      (@simplr (wcel A2 V) (wcel B2 W) (wne A2 B2))
      (@simplr (wcel A2 V) (wcel B2 W) (wne A2 B2))
      (@simpll (wcel A2 V) (wcel B2 W) (wne A2 B2))
      (@simpr (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2))
      (@fnprg A2 B2 B2 A2 V W W V))
    (@mpbird (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (wfn (ccnv (cpr (cop A2 B2) (cop B2 A2))) (cpr A2 B2)) (wfn (cpr (cop A2 B2) (cop B2 A2)) (cpr A2 B2))
      (@syl221anc (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (wcel A2 V) (wcel B2 W) (wcel B2 W) (wcel A2 V) (wne A2 B2) (wfn (cpr (cop A2 B2) (cop B2 A2)) (cpr A2 B2))
        (@simpll (wcel A2 V) (wcel B2 W) (wne A2 B2))
        (@simplr (wcel A2 V) (wcel B2 W) (wne A2 B2))
        (@simplr (wcel A2 V) (wcel B2 W) (wne A2 B2))
        (@simpll (wcel A2 V) (wcel B2 W) (wne A2 B2))
        (@simpr (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2))
        (@fnprg A2 B2 B2 A2 V W W V))
      (@fneq1d (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (cpr A2 B2) (ccnv (cpr (cop A2 B2) (cop B2 A2))) (cpr (cop A2 B2) (cop B2 A2))
        (@«3eqtr4g» (wa (wa (wcel A2 V) (wcel B2 W)) (wne A2 B2)) (cun (ccnv (csn (cop A2 B2))) (ccnv (csn (cop B2 A2)))) (cun (csn (cop A2 B2)) (csn (cop B2 A2))) (ccnv (cpr (cop A2 B2) (cop B2 A2))) (cpr (cop A2 B2) (cop B2 A2))
          (@adantr (wa (wcel A2 V) (wcel B2 W)) (wceq (cun (ccnv (csn (cop A2 B2))) (ccnv (csn (cop B2 A2)))) (cun (csn (cop A2 B2)) (csn (cop B2 A2)))) (wne A2 B2)
            (@eqtrdi (wa (wcel A2 V) (wcel B2 W)) (cun (ccnv (csn (cop A2 B2))) (ccnv (csn (cop B2 A2)))) (cun (csn (cop B2 A2)) (csn (cop A2 B2))) (cun (csn (cop A2 B2)) (csn (cop B2 A2)))
              (@uneq12d (wa (wcel A2 V) (wcel B2 W)) (ccnv (csn (cop A2 B2))) (csn (cop B2 A2)) (ccnv (csn (cop B2 A2))) (csn (cop A2 B2))
                (@cnvsng A2 B2 V W)
                (@ancoms (wcel B2 W) (wcel A2 V) (wceq (ccnv (csn (cop B2 A2))) (csn (cop A2 B2)))
                  (@cnvsng B2 A2 W V)))
              (@uncom (csn (cop B2 A2)) (csn (cop A2 B2)))))
          (@eqtri (ccnv (cpr (cop A2 B2) (cop B2 A2))) (ccnv (cun (csn (cop A2 B2)) (csn (cop B2 A2)))) (cun (ccnv (csn (cop A2 B2))) (ccnv (csn (cop B2 A2))))
            (@cnveqi (cpr (cop A2 B2) (cop B2 A2)) (cun (csn (cop A2 B2)) (csn (cop B2 A2)))
              (@df_pr (cop A2 B2) (cop B2 A2)))
            (@cnvun (csn (cop A2 B2)) (csn (cop B2 A2))))
          (@df_pr (cop A2 B2) (cop B2 A2)))))
    (@dff1o4 (cpr A2 B2) (cpr A2 B2) (cpr (cop A2 B2) (cop B2 A2))))


/-- Function value when ` F ` is not a function. Theorem 6.12(2) of [TakeutiZaring] p. 27.
(Contributed by NM, 30-Apr-2004.) (Proof shortened by Mario Carneiro, 31-Aug-2015.) -/
theorem tz6_12_2 {A2 F : «class»} :
  ⊦ wi (wn (weu (λ x3, wbr A2 (cv x3) F))) (wceq (cfv A2 F) c0) :=
@syl5eq (wn (weu (λ x3, wbr A2 (cv x3) F))) (cfv A2 F) (cio (λ x3, wbr A2 (cv x3) F)) c0
  (@df_fv A2 F)
  (@iotanul (λ x3, wbr A2 (cv x3) F))


/-- A function's value at a proper class is the empty set. See ~ fvprcALT for a proof that uses ~
ax-pow instead of ~ ax-sep and ~ ax-pr . (Contributed by NM, 20-May-1998.) Avoid ~ ax-pow . (Revised
by BTernaryTau, 3-Aug-2024.) -/
theorem fvprc {A2 F : «class»} :
  ⊦ wi (wn (wcel A2 cvv)) (wceq (cfv A2 F) c0) :=
@syl (wn (wcel A2 cvv)) (wn (weu (λ x3, wbr A2 (cv x3) F))) (wceq (cfv A2 F) c0)
  (@sylibr (wn (wcel A2 cvv)) (wi (wex (λ x3, wbr A2 (cv x3) F)) (wn (wmo (λ x3, wbr A2 (cv x3) F)))) (wn (weu (λ x3, wbr A2 (cv x3) F)))
    (@syl6ibr (wn (wcel A2 cvv)) (wex (λ x3, wbr A2 (cv x3) F)) (wex (λ x3, wex (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y)))))) (wn (wmo (λ x3, wbr A2 (cv x3) F)))
      (@eximdv (wn (wcel A2 cvv)) (λ x3, wbr A2 (cv x3) F) (λ x3, wex (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y)))))
        (λ x3, @«3imtr4g» (wn (wcel A2 cvv)) (wcel (cop A2 (cv x3)) F) (wex (λ y, wa (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y))))) (wbr A2 (cv x3) F) (wex (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y)))))
          (@mpbiri (wn (wcel A2 cvv)) (wi (wcel (cop A2 (cv x3)) F) (wex (λ y, wa (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y)))))) (wi (wcel c0 F) (wex (λ y, wa (wcel c0 F) (wn (wceq (cv x3) (cv y))))))
            (@sylibr (wcel c0 F) (wa (wcel c0 F) (wex (λ y, wn (wceq (cv x3) (cv y))))) (wex (λ y, wa (wcel c0 F) (wn (wceq (cv x3) (cv y)))))
              (@jctr (wcel c0 F) (wex (λ y, wn (wceq (cv x3) (cv y))))
                (@mpbir (wex (λ y, wn (wceq (cv x3) (cv y)))) (wn (wal (λ y, wceq (cv y) (cv x3))))
                  (@dtruALT2 x3)
                  (@xchbinx (wex (λ y, wn (wceq (cv x3) (cv y)))) (wal (λ y, wceq (cv x3) (cv y))) (wal (λ y, wceq (cv y) (cv x3)))
                    (@exnal (λ y, wceq (cv x3) (cv y)))
                    (@albii (λ y, wceq (cv x3) (cv y)) (λ y, wceq (cv y) (cv x3))
                      (λ y, @equcom x3 y)))))
              (@«19_42v» (wcel c0 F) (λ y, wn (wceq (cv x3) (cv y)))))
            (@imbi12d (wn (wcel A2 cvv)) (wcel (cop A2 (cv x3)) F) (wcel c0 F) (wex (λ y, wa (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y))))) (wex (λ y, wa (wcel c0 F) (wn (wceq (cv x3) (cv y)))))
              (@eleq1d (wn (wcel A2 cvv)) (cop A2 (cv x3)) c0 F
                (@opprc1 A2 (cv x3)))
              (@exbidv (wn (wcel A2 cvv)) (λ y, wa (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y)))) (λ y, wa (wcel c0 F) (wn (wceq (cv x3) (cv y))))
                (λ y, @anbi1d (wn (wcel A2 cvv)) (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wcel c0 F) (wn (wceq (cv x3) (cv y)))
                  (@bitrdi (wn (wcel A2 cvv)) (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wa (wcel c0 F) (wcel c0 F)) (wcel c0 F)
                    (@anbi12d (wn (wcel A2 cvv)) (wcel (cop A2 (cv x3)) F) (wcel c0 F) (wcel (cop A2 (cv y)) F) (wcel c0 F)
                      (@eleq1d (wn (wcel A2 cvv)) (cop A2 (cv x3)) c0 F
                        (@opprc1 A2 (cv x3)))
                      (@eleq1d (wn (wcel A2 cvv)) (cop A2 (cv y)) c0 F
                        (@opprc1 A2 (cv y))))
                    (@anidm (wcel c0 F)))))))
          (@df_br A2 (cv x3) F)
          (@exbii (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y)))) (λ y, wa (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y))))
            (λ y, @anbi1i (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wa (wcel (cop A2 (cv x3)) F) (wcel (cop A2 (cv y)) F)) (wn (wceq (cv x3) (cv y)))
              (@anbi12i (wbr A2 (cv x3) F) (wcel (cop A2 (cv x3)) F) (wbr A2 (cv y) F) (wcel (cop A2 (cv y)) F)
                (@df_br A2 (cv x3) F)
                (@df_br A2 (cv y) F))))))
      (@«3bitr4ri» (wex (λ x3, wn (wal (λ y, wi (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wceq (cv x3) (cv y)))))) (wn (wal (λ x3, wal (λ y, wi (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wceq (cv x3) (cv y)))))) (wex (λ x3, wex (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y)))))) (wn (wmo (λ x3, wbr A2 (cv x3) F)))
        (@exnal (λ x3, wal (λ y, wi (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wceq (cv x3) (cv y)))))
        (@exbii (λ x3, wex (λ y, wa (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wn (wceq (cv x3) (cv y))))) (λ x3, wn (wal (λ y, wi (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wceq (cv x3) (cv y)))))
          (λ x3, @exanali (λ y, wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (λ y, wceq (cv x3) (cv y))))
        (@notbii (wmo (λ x3, wbr A2 (cv x3) F)) (wal (λ x3, wal (λ y, wi (wa (wbr A2 (cv x3) F) (wbr A2 (cv y) F)) (wceq (cv x3) (cv y)))))
          (@mo4 (λ x3, wbr A2 (cv x3) F) (λ y, wbr A2 (cv y) F)
            (λ x3 y, @breq2 (cv x3) (cv y) A2 F)))))
    (@bitr4i (wn (weu (λ x3, wbr A2 (cv x3) F))) (wn (wa (wex (λ x3, wbr A2 (cv x3) F)) (wmo (λ x3, wbr A2 (cv x3) F)))) (wi (wex (λ x3, wbr A2 (cv x3) F)) (wn (wmo (λ x3, wbr A2 (cv x3) F))))
      (@notbii (weu (λ x3, wbr A2 (cv x3) F)) (wa (wex (λ x3, wbr A2 (cv x3) F)) (wmo (λ x3, wbr A2 (cv x3) F)))
        (@df_eu (λ x3, wbr A2 (cv x3) F)))
      (@imnan (wex (λ x3, wbr A2 (cv x3) F)) (wmo (λ x3, wbr A2 (cv x3) F)))))
  (@tz6_12_2 A2 F)


/-- A definition of function value in terms of iota. (Contributed by Scott Fenton, 19-Feb-2013.) -/
theorem dffv3 {A2 F : «class»} :
  ⊦ wceq (cfv A2 F) (cio (λ x3, wcel (cv x3) (cima F (csn A2)))) :=
@pm2_61i (wcel A2 cvv) (wceq (cfv A2 F) (cio (λ x3, wcel (cv x3) (cima F (csn A2)))))
  (@eqtr4id (wcel A2 cvv) (cfv A2 F) (cio (λ x3, wbr A2 (cv x3) F)) (cio (λ x3, wcel (cv x3) (cima F (csn A2))))
    (@df_fv A2 F)
    (@iotabidv (wcel A2 cvv) (λ x3, wcel (cv x3) (cima F (csn A2))) (λ x3, wbr A2 (cv x3) F)
      (λ x3, @elvd (λ x3, wcel A2 cvv) (λ x3, wb (wcel (cv x3) (cima F (csn A2))) (wbr A2 (cv x3) F))
        (λ x3, @bitr4di (wa (wcel A2 cvv) (wcel (cv x3) cvv)) (wcel (cv x3) (cima F (csn A2))) (wcel (cop A2 (cv x3)) F) (wbr A2 (cv x3) F)
          (@elimasng F A2 (cv x3) cvv cvv)
          (@df_br A2 (cv x3) F)) x3)))
  (@eqtr4d (wn (wcel A2 cvv)) (cfv A2 F) c0 (cio (λ x3, wcel (cv x3) (cima F (csn A2))))
    (@fvprc A2 F)
    (@eqtrdi (wn (wcel A2 cvv)) (cio (λ x3, wcel (cv x3) (cima F (csn A2)))) (cio (λ x3, wcel (cv x3) c0)) c0
      (@iotabidv (wn (wcel A2 cvv)) (λ x3, wcel (cv x3) (cima F (csn A2))) (λ x3, wcel (cv x3) c0)
        (λ x3, @eleq2d (wn (wcel A2 cvv)) (cima F (csn A2)) c0 (cv x3)
          (@eqtrdi (wn (wcel A2 cvv)) (cima F (csn A2)) (cima F c0) c0
            (@imaeq2d (wn (wcel A2 cvv)) (csn A2) c0 F
              (@biimpi (wn (wcel A2 cvv)) (wceq (csn A2) c0)
                (@snprc A2)))
            (@ima0 F))))
      (@ax_mp (wn (weu (λ x3, wcel (cv x3) c0))) (wceq (cio (λ x3, wcel (cv x3) c0)) c0)
        (@mto (weu (λ x3, wcel (cv x3) c0)) (wex (λ x3, wcel (cv x3) c0))
          (@nex (λ x3, wcel (cv x3) c0)
            (λ x3, @noel (cv x3)))
          (@euex (λ x3, wcel (cv x3) c0)))
        (@iotanul (λ x3, wcel (cv x3) c0)))))


/-- Equality theorem for function value. (Contributed by NM, 29-Dec-1996.) -/
theorem fveq1 {A2 F G : «class»} :
  ⊦ wi (wceq F G) (wceq (cfv A2 F) (cfv A2 G)) :=
@«3eqtr4g» (wceq F G) (cio (λ x3, wbr A2 (cv x3) F)) (cio (λ x3, wbr A2 (cv x3) G)) (cfv A2 F) (cfv A2 G)
  (@iotabidv (wceq F G) (λ x3, wbr A2 (cv x3) F) (λ x3, wbr A2 (cv x3) G)
    (λ x3, @breq A2 (cv x3) F G))
  (@df_fv A2 F)
  (@df_fv A2 G)


/-- Equality theorem for function value. (Contributed by NM, 29-Dec-1996.) -/
theorem fveq2 {A2 B2 F : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cfv A2 F) (cfv B2 F)) :=
@«3eqtr4g» (wceq A2 B2) (cio (λ x3, wbr A2 (cv x3) F)) (cio (λ x3, wbr B2 (cv x3) F)) (cfv A2 F) (cfv B2 F)
  (@iotabidv (wceq A2 B2) (λ x3, wbr A2 (cv x3) F) (λ x3, wbr B2 (cv x3) F)
    (λ x3, @breq1 A2 B2 (cv x3) F))
  (@df_fv A2 F)
  (@df_fv B2 F)


/-- Equality inference for function value. (Contributed by NM, 2-Sep-2003.) -/
theorem fveq1i {A2 F G : «class»}
  (fveq1i_1 : ⊦ wceq F G) :
  ⊦ wceq (cfv A2 F) (cfv A2 G) :=
@ax_mp (wceq F G) (wceq (cfv A2 F) (cfv A2 G))
  fveq1i_1
  (@fveq1 A2 F G)


/-- Equality deduction for function value. (Contributed by NM, 2-Sep-2003.) -/
theorem fveq1d {ph : wff} {A2 F G : «class»}
  (fveq1d_1 : ⊦ wi ph (wceq F G)) :
  ⊦ wi ph (wceq (cfv A2 F) (cfv A2 G)) :=
@syl ph (wceq F G) (wceq (cfv A2 F) (cfv A2 G))
  fveq1d_1
  (@fveq1 A2 F G)


/-- Equality inference for function value. (Contributed by NM, 28-Jul-1999.) -/
theorem fveq2i {A2 B2 F : «class»}
  (fveq2i_1 : ⊦ wceq A2 B2) :
  ⊦ wceq (cfv A2 F) (cfv B2 F) :=
@ax_mp (wceq A2 B2) (wceq (cfv A2 F) (cfv B2 F))
  fveq2i_1
  (@fveq2 A2 B2 F)


/-- Equality deduction for function value. (Contributed by NM, 29-May-1999.) -/
theorem fveq2d {ph : wff} {A2 B2 F : «class»}
  (fveq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cfv A2 F) (cfv B2 F)) :=
@syl ph (wceq A2 B2) (wceq (cfv A2 F) (cfv B2 F))
  fveq2d_1
  (@fveq2 A2 B2 F)


/-- Equality theorem for nested function values. (Contributed by AV, 14-Aug-2022.) -/
theorem «2fveq3» {A2 B2 F G : «class»} :
  ⊦ wi (wceq A2 B2) (wceq (cfv (cfv A2 G) F) (cfv (cfv B2 G) F)) :=
@fveq2d (wceq A2 B2) (cfv A2 G) (cfv B2 G) F
  (@fveq2 A2 B2 G)


/-- Equality deduction for function value. (Contributed by FL, 22-Dec-2008.) -/
theorem fveq12d {ph : wff} {A2 B2 F G : «class»}
  (fveq12d_1 : ⊦ wi ph (wceq F G))
  (fveq12d_2 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wceq (cfv A2 F) (cfv B2 G)) :=
@eqtrd ph (cfv A2 F) (cfv A2 G) (cfv B2 G)
  (@fveq1d ph A2 F G
    fveq12d_1)
  (@fveq2d ph A2 B2 G
    fveq12d_2)


/-- Equality deduction for function value. (Contributed by BJ, 30-Aug-2022.) -/
theorem fveqeq2d {ph : wff} {A2 B2 C F : «class»}
  (fveqeq2d_1 : ⊦ wi ph (wceq A2 B2)) :
  ⊦ wi ph (wb (wceq (cfv A2 F) C) (wceq (cfv B2 F) C)) :=
@eqeq1d ph (cfv A2 F) (cfv B2 F) C
  (@fveq2d ph A2 B2 F
    fveqeq2d_1)


/-- Equality deduction for function value. (Contributed by BJ, 31-Aug-2022.) -/
theorem fveqeq2 {A2 B2 C F : «class»} :
  ⊦ wi (wceq A2 B2) (wb (wceq (cfv A2 F) C) (wceq (cfv B2 F) C)) :=
@fveqeq2d (wceq A2 B2) A2 B2 C F
  (@id (wceq A2 B2))


/-- Bound-variable hypothesis builder for function value. (Contributed by NM, 14-Nov-1995.) (Revised
by Mario Carneiro, 15-Oct-2016.) -/
theorem nffv {A2 F : setvar → «class»}
  (nffv_1 : ⊦ wnfc (λ x3, F x3))
  (nffv_2 : ⊦ wnfc (λ x3, A2 x3)) :
  ⊦ wnfc (λ x3, cfv (A2 x3) (F x3)) :=
@nfcxfr (λ x3, cfv (A2 x3) (F x3)) (λ x3, cio (λ y, wbr (A2 x3) (cv y) (F x3)))
  (λ x3, @df_fv (A2 x3) (F x3))
  (@nfiotaw (λ x3 y, wbr (A2 x3) (cv y) (F x3))
    (λ y, @nfbr (λ x3, A2 x3) (λ x3, cv y) (λ x3, F x3)
      nffv_2
      nffv_1
      (@nfcv (cv y))))


/-- Bound-variable hypothesis builder for mapping, special case. (Contributed by Mario Carneiro,
25-Dec-2016.) -/
theorem nffvmpt1 {A2 B2 : setvar → «class»} {C : «class»} :
  ⊦ wnfc (λ x3, cfv C (cmpt (λ x3, A2 x3) (λ x3, B2 x3))) :=
@nffv (λ x3, C) (λ x3, cmpt (λ x3, A2 x3) (λ x3, B2 x3))
  (@nfmpt1 (λ x3, A2 x3) (λ x3, B2 x3))
  (@nfcv C)


/-- Deduction version of bound-variable hypothesis builder ~ nffv . (Contributed by NM,
10-Nov-2005.) (Revised by Mario Carneiro, 15-Oct-2016.) -/
theorem nffvd {ph : setvar → wff} {A2 F : setvar → «class»}
  (nffvd_2 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, F x3)))
  (nffvd_3 : ∀ x3, ⊦ wi (ph x3) (wnfc (λ x3, A2 x3)))
  (x3 : setvar) : ⊦ wi (ph x3) (wnfc (λ x3, cfv (A2 x3) (F x3))) :=
@mpbii (ph x3) (wnfc (λ x3, cfv (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (F x3)))))) (wnfc (λ x3, cfv (A2 x3) (F x3)))
  (@nffv (λ x3, cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (λ x3, cab (λ z, wal (λ x3, wcel (cv z) (F x3))))
    (@nfaba1 (λ x3 z, wcel (cv z) (F x3)))
    (@nfaba1 (λ x3 z, wcel (cv z) (A2 x3))))
  (@syl2anc (ph x3) (wnfc (λ x3, F x3)) (wnfc (λ x3, A2 x3)) (wb (wnfc (λ x3, cfv (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (F x3)))))) (wnfc (λ x3, cfv (A2 x3) (F x3))))
    (nffvd_2 x3)
    (nffvd_3 x3)
    (setvar.forget $ λ x3 : setvar,
      show ⊦ wi (wa (wnfc (λ x3, F x3)) (wnfc (λ x3, A2 x3))) (wb (wnfc (λ x3, cfv (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (F x3)))))) (wnfc (λ x3, cfv (A2 x3) (F x3)))), from
      @nfceqdf (λ x3, wa (wnfc (λ x3, F x3)) (wnfc (λ x3, A2 x3))) (λ x3, cfv (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (cab (λ z, wal (λ x3, wcel (cv z) (F x3))))) (λ x3, cfv (A2 x3) (F x3))
        (@nfan (λ x3, wnfc (λ x3, F x3)) (λ x3, wnfc (λ x3, A2 x3))
          (@nfnfc1 (λ x3, F x3))
          (@nfnfc1 (λ x3, A2 x3)))
        (λ x3, @fveq12d (wa (wnfc (λ x3, F x3)) (wnfc (λ x3, A2 x3))) (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (A2 x3) (cab (λ z, wal (λ x3, wcel (cv z) (F x3)))) (F x3)
          (@adantr (wnfc (λ x3, F x3)) (wceq (cab (λ z, wal (λ x3, wcel (cv z) (F x3)))) (F x3)) (wnfc (λ x3, A2 x3))
            (@abidnf (λ x3, F x3) x3))
          (@adantl (wnfc (λ x3, A2 x3)) (wceq (cab (λ z, wal (λ x3, wcel (cv z) (A2 x3)))) (A2 x3)) (wnfc (λ x3, F x3))
            (@abidnf (λ x3, A2 x3) x3))) x3))


/-- The value of a class exists. Corollary 6.13 of [TakeutiZaring] p. 27. (Contributed by NM,
30-Dec-1996.) -/
theorem fvex {A2 F : «class»} :
  ⊦ wcel (cfv A2 F) cvv :=
@eqeltri (cfv A2 F) (cio (λ x3, wbr A2 (cv x3) F)) cvv
  (@df_fv A2 F)
  (@iotaex (λ x3, wbr A2 (cv x3) F))


/-- The value of a class exists. Inference form of ~ fvex . (Contributed by Glauco Siliprandi,
23-Oct-2021.) -/
theorem fvexi {A2 B2 F : «class»}
  (fvexi_1 : ⊦ wceq A2 (cfv B2 F)) :
  ⊦ wcel A2 cvv :=
@eqeltri A2 (cfv B2 F) cvv
  fvexi_1
  (@fvex B2 F)


/-- The value of a class exists (as consequent of anything). (Contributed by Glauco Siliprandi,
23-Oct-2021.) -/
theorem fvexd {ph : wff} {A2 F : «class»} :
  ⊦ wi ph (wcel (cfv A2 F) cvv) :=
@a1i (wcel (cfv A2 F) cvv) ph
  (@fvex A2 F)


/-- Move a conditional outside of a function. (Contributed by Jeff Madsen, 2-Sep-2009.) -/
theorem fvif {ph : wff} {A2 B2 F : «class»} :
  ⊦ wceq (cfv (cif ph A2 B2) F) (cif ph (cfv A2 F) (cfv B2 F)) :=
@ifsb ph A2 B2 (cfv (cif ph A2 B2) F) (cfv A2 F) (cfv B2 F)
  (@fveq2 (cif ph A2 B2) A2 F)
  (@fveq2 (cif ph A2 B2) B2 F)


/-- The value of a restricted function. (Contributed by NM, 2-Aug-1994.) -/
theorem fvres {A2 B2 F : «class»} :
  ⊦ wi (wcel A2 B2) (wceq (cfv A2 (cres F B2)) (cfv A2 F)) :=
@«3eqtr4g» (wcel A2 B2) (cio (λ x3, wbr A2 (cv x3) (cres F B2))) (cio (λ x3, wbr A2 (cv x3) F)) (cfv A2 (cres F B2)) (cfv A2 F)
  (@iotabidv (wcel A2 B2) (λ x3, wbr A2 (cv x3) (cres F B2)) (λ x3, wbr A2 (cv x3) F)
    (λ x3, @baib (wbr A2 (cv x3) (cres F B2)) (wcel A2 B2) (wbr A2 (cv x3) F)
      (@brresi B2 A2 (cv x3) F
        (@vex x3))))
  (@df_fv A2 (cres F B2))
  (@df_fv A2 F)


/-- The value of a restricted function, deduction version of ~ fvres . (Contributed by Glauco
Siliprandi, 8-Apr-2021.) -/
theorem fvresd {ph : wff} {A2 B2 F : «class»}
  (fvresd_1 : ⊦ wi ph (wcel A2 B2)) :
  ⊦ wi ph (wceq (cfv A2 (cres F B2)) (cfv A2 F)) :=
@syl ph (wcel A2 B2) (wceq (cfv A2 (cres F B2)) (cfv A2 F))
  fvresd_1
  (@fvres A2 B2 F)

end mm

