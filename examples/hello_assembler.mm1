import "compiler.mm1";

do {
  (assemble 'hello 'main 0 #t '(
    (func main (
      (mov.32 rdx 0xe)
      (mov.32 rsi (data))
      (mov.32 rdi 1)
      (mov.32 rax 1)
      (syscall)
      (mov.32 rdi 0)
      (mov.32 rax 0x3c)
      (syscall)))

    (string data "Hello, world!\n")
  ))

  -- pub theorem hello_basicElf: $ isBasicElf (hello) $;
  (get-decl 'hello_basicElf)
  -- (display @ pp @ nth 6 @ get-decl 'hello_main)
};

theorem _: $ decode
  (xastMov (wSz32) (Rm_i (RM_reg x2) (chopZ 64 (b0 xe))))
  (s2n (ch (xb) (xa) ':
  ch (x0) (xe) ': ch (x0) (x0) ': ch (x0) (x0) ': s1 (ch (x0) (x0)))) $ =
(match (assemble-inst @ (assemble-desugar list) '(mov.32 rdx 0xe))
  [(t s p) '{,(verb p) : $ decode ,t ,s $}]);

theorem _: $ sat_CFG_func hello_main ,0x400078
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x2))) (chopZ 64 (b0 (h2n (xe))))))
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x6))) (chopZ 64 (b0 ,0x40009a))))
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x7))) (chopZ 64 (b0 (h2n (x1))))))
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x0))) (chopZ 64 (b0 (h2n (x1))))))
  (CFG_S (xastSysCall)
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x7))) (chopZ 64 0)))
  (CFG_S (xastMov (wSz32) (Rm_i (RM_reg (h2n (x0))) (chopZ 64 (b0 ,0x3c))))
  (CFG_S (xastSysCall)
  (CFG0))))))))) $ =
(focus
  '(sat_CFG_func_i _)
  (def pos (ref! @ ->hex 0x400078))
  (def xs '(
    (mov.32 (reg 2) 14)
    (mov.32 (reg 6) 0x40009a)
    (mov.32 (reg 7) 1)
    (mov.32 (reg 0) 1)
    (syscall)
    (mov.32 (reg 7) 0)
    (mov.32 (reg 0) 0x3c)
    (syscall)))
  (scan xs @ fn (inst)
    @ match (assemble-inst inst) @ (t s p)
    @ match (mk-asm1 (get! pos) s) @ (pos2 p2)
    (refine '(sat_CFG_S
      {,(verb p2) : $ assemble1OLD ,s ,(get! pos) ,pos2 $}
      {,(verb p) : $ decode ,t ,s $}
      _))
    (set! pos pos2))
  (refine 'sat_CFG0));

theorem hello_terminates:
  $ initialConfig hello k -> terminates_ensuring k (S\ i, {o |
      i = 0 /\ o = ,"Hello, World!\n"}) $;

output string: $ hello $;
