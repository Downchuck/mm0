import "assembler-old.mm1";

axiom sorry (p: wff): $ p $;
term sorry_nat: nat;
term sorry_set: set;
term sorry_wff: wff;
do (warn-unused-vars #f);

do {
  --| A dummy annotation to indicate that the term/theorem is referenced in
  --| `mm0-rs/src/proof/predefs.rs`, and any changes here have to be reflected
  --| in uses in the compiler.
  (def mmc-th
    (def map (atom-map!))
    @ fn (name)
    @ letrec ([check @ match-fn
      [(tm . rest)
        (if (not (def? @ lookup map tm))
          (error @ string-append "theorem " name " references unannotated constant " tm))
        (scan rest check)]
      [(? atom?)]])
    @ match (get-decl name)
    [('term _ _ _) (insert map name #t)]
    [('def _ _ _ _ _ _) (insert map name #t)]
    [('axiom _ _ hyps ret)
      (scan hyps @ match-fn [(_ hyp) (check hyp)])
      (check ret)]
    [('theorem _ _ hyps ret _ _)
      (scan hyps @ match-fn [(_ hyp) (check hyp)])
      (check ret)]
    [#undef @ error @ string-append "unknown theorem " name])

  ((fn xs @ scan xs @ fn (x) @ scan x mmc-th)
    '(fal tru eq ne d0 suc add mul le lt ltlei ltnei ltneri leid pr
      znsub cons len sadd scons s0 s1 ch c2n h2n hex s2n)
    (map dn (range 0 17))
    (join @ map (fn (x) (map (fn (i) (atom-app x i)) hexstrings))
      '(x h2n _x00x decsuc))
    '(decsucx decsucxf decltx1 decltx2
      add_xx0 add_xx1 add_0x0 add_0x1 add_x00 add_x01
      adc_xx0 adc_xx1 adc_0x0 adc_0x1 adc_x00 adc_x01
      sub64 bit wSz8 wSz32 wSz64
      opSize opSize_8 opSize_32 opSize_64
      opSizeW opSizeW_0 opSizeW_S
      REX_W REX_R REX_X REX_B
      base_RIP base_reg
      unopInc unopDec unopNot unopNeg
      isBasicElf ELF_lit))
};

@mmc-th local def strlen (s: string) (n: nat): wff = $ len s = n $;
@mmc-th theorem strlen0: $ strlen s0 x0 $ = '(eqtr (leneq s2ns0) @ eqtr4 len0 h2n0);
@mmc-th theorem strlen1: $ strlen (s1 c0) x1 $ = '(eqtr (leneq s2ns1) @ eqtr4 len1 h2n1);
theorem strlenSi (h: $ strlen s a $) (h2: $ suc a = b $): $ strlen (c ': s) b $ =
'(eqtr (leneq s2nscons) @ eqtr lenS @ eqtr (suceq h) h2);
theorem strlen_repeat (h: $ s = repeat 0 n $): $ strlen s n $ = '(eqtr (leneq h) repeatlen);
do {
  (def (strlenn n) @ atom-app 'strlen (hexstring n))
  (for 1 15 @ fn (a)
    @ let ([b {a + 1}] [xb (hexdigit b)] [name (strlenn b)])
    (def args @ rmap (range 0 b) @ fn (i) (atom-app 'c i))
    (def str @ foldr args #undef @ fn (a b) @ if (def? b) '(scons ,a ,b) '(s1 ,a))
    (add-tac-thm! name
      (map (fn (x) '(,x char ())) args) () '(strlen ,str ,xb) () @ fn ()
      '(strlenSi ,(strlenn a) ,(decsucn a)))
    (mmc-th name))
  (ignore @ on-hexstrings @ fn (n)
    @ let ([xn (atom-app 'x n)] [i (hex->number xn)] [t '(,(_x00xn i))])
    (def name (atom-app "strlen_x00x" n))
    (add-tac-thm! name () () $ strlen ,t ,'(,xn) $ () @ fn () '(strlen_repeat ,(_x00xn_eq i)))
    (mmc-th name))
};

local def assembleN (s x y: nat) (P: set): wff =
$ y = x + len s /\ (text_start + y e. u64 -> s, x e. P) $;

@mmc-th local def assemble (s: string) (x y: nat) (P: set): wff =
$ s != 0 /\ assembleN s x y P $;

@_ @mmc-th local def assembleA (A B: set): set =
$ S\ s, {x | E. t1 E. t2 (s = t1 ++ t2 /\ t1, x e. A /\ t2, x + len t1 e. B)} $;
infixr assembleA: $++asm$ prec 120;

@mmc-th theorem assembleA_I (s t x y z A B)
  (h1: $ assemble s x y A $) (h2: $ assemble t y z B $):
  $ assemble (s '+ t) x z (A ++asm B) $ = 'sorry;

@mmc-th local def localAssemble (p: nat) (s: string) (x y: nat) (P: set): wff =
$ assembleN s (p + x) (p + y) (P @' p) $;

@_ @mmc-th local def ASM_A (A B: set): set = $ S\ p, A @' p ++asm B @' p $;
infixr ASM_A: $+asm$ prec 122;

@mmc-th local def ASM0: set = $ S\ p, S\ s, {x | s = 0} $;

@mmc-th theorem localAssembleA_I
  (h1: $ localAssemble p s x y A $) (h2: $ localAssemble p t y z B $):
  $ localAssemble p (s '+ t) x z (A +asm B) $ = 'sorry;

@mmc-th local def localAssemble0 (p: nat) (x: nat) (P: set): wff =
$ text_start + p + x e. u64 -> p, 0, x e. P $;

@mmc-th theorem localAssemble0_0: $ localAssemble0 p x ASM0 $ = 'sorry;

@mmc-th theorem localAssemble0_l
  (h1: $ localAssemble0 p x A $) (h2: $ localAssemble p s x y B $):
  $ localAssemble p s x y (A +asm B) $ = 'sorry;

@mmc-th theorem localAssemble0_r
  (h1: $ localAssemble p s x y A $) (h2: $ localAssemble0 p y B $):
  $ localAssemble p s x y (A +asm B) $ = 'sorry;

@mmc-th theorem localAssemble0_A
  (h1: $ localAssemble0 p x A $) (h2: $ localAssemble0 p x B $):
  $ localAssemble0 p x (A +asm B) $ = 'sorry;

@mmc-th local def asmAt (n: nat) (A: set): set =
$ S\ p, S\ s, {x | x = n /\ p, s, x e. A} $;

@mmc-th theorem asmAtI
  (h1: $ localAssemble p s x y A $): $ localAssemble p s x y (asmAt x A) $ = 'sorry;

@mmc-th theorem asmAt0
  (h1: $ localAssemble0 p x A $): $ localAssemble0 p x (asmAt x A) $ = 'sorry;

@mmc-th local def asmEntry (n: nat) (A: set): set =
$ S\ p, S\ s, {x | p = n /\ x = 0 /\ p, s, x e. A} $;

@mmc-th theorem asmEntryI
  (h1: $ localAssemble p s x0 y A $): $ localAssemble p s x0 y (asmEntry p A) $ = 'sorry;

@mmc-th theorem asmEntry0
  (h1: $ localAssemble0 p x0 A $): $ localAssemble0 p x0 (asmEntry p A) $ = 'sorry;

--| See `parseInst`. (The `*N` functions are proof-internal, used for proving compiler lemmas.)
@_ local def parseInstN (p ip s: nat) (I: set): wff =
$ text_start + p + ip e. u64 -> A. x (ip = x + len s -> p, s, x e. I) $;

--| `parseInst p ip s I` means that decoding `s` with proc pos `p`
--| and local instruction end at `ip` results in instruction `I`.
@mmc-th local def parseInst (p ip: nat) (s: string) (I: set): wff = $ parseInstN p ip s I $;

@mmc-th theorem parseInstE (p s x y n I) (h1: $ strlen s n $) (h2: $ x + n = y $)
  (h3: $ parseInst p y s I $): $ localAssemble p s x y I $ = 'sorry;

--| `parseOpc p ip s rex opc I` means that after decoding the REX byte to `rex`,
--| if the first byte of the instruction is `opc` and the remainder is `s`,
--| with proc pos `p` and local instruction end at `ip`, then instruction `I` results.
@mmc-th local def parseOpc (p ip: nat) (s: string) (rex: nat) (opc: char) (I: set): wff =
$ A. l (readPrefixes rex l -> parseInstN p ip (l ++ opc : s) I) $;

@mmc-th theorem parseInst01 (h: $ parseOpc p ip s 0 opc I $):
  $ parseInst p ip (opc ': s) I $ = 'sorry;
@mmc-th theorem parseInst11 (h: $ parseOpc p ip s (suc rex) opc I $):
  $ parseInst p ip (ch x4 rex ': opc ': s) I $ = 'sorry;
@mmc-th theorem parseInst00 (h: $ parseOpc p ip s0 0 opc I $):
  $ parseInst p ip (s1 opc) I $ = '(mpbi (parseInstNeq3 s2nscons0) @ parseInst01 h);
@mmc-th theorem parseInst10 (h: $ parseOpc p ip s0 (suc rex) opc I $):
  $ parseInst p ip (ch x4 rex ': s1 opc) I $ =
'(mpbi (parseInstNeq3 @ sconseq2 s2nscons0) @ parseInst11 h);

@_ local def guarded (x: nat) (F: set): wff = $ x != 0 /\ x - 1 e. F $;

@_ local def guard (p: wff) (x: nat): nat = $ if p x 0 $;

@_ local def asI32 (imm: nat): nat = $ guard (imm e. u32) (suc (chopZ 64 imm)) $;
@_ local def asI64 (imm: nat): nat = $ guard (imm e. u64) (suc (chopZ 64 imm)) $;

@_ local def IRM_reg_N (reg: nat): nat = $ suc (immRM_rm (RM_reg reg)) $;
@mmc-th local def IRM_reg (reg: hex): nat = $ IRM_reg_N reg $;
@mmc-th @_ local def IRM_mem (si base off: nat): nat =
$ obind (asI64 off) (\ q, suc (immRM_rm (RM_mem si base q))) $;
@mmc-th @_ local def IRM_imm32 (imm: nat): nat = $ obind (asI32 imm) (\ x, suc (immRM_imm x)) $;
@mmc-th @_ local def IRM_imm64 (imm: nat): nat = $ obind (asI64 imm) (\ x, suc (immRM_imm x)) $;

@mmc-th local def consStr (c: char) (l l2: string): wff = $ c ': l = l2 $;
@mmc-th theorem consStr0: $ consStr c s0 (s1 c) $ = 's2nscons0;
@mmc-th theorem consStrS: $ consStr c l (c ': l) $ = 'eqid;

@mmc-th local def parseUBytes (k n: nat) (s: string): wff =
$ n e. Bits (8 * suc k) /\ s = toBytes (suc k) n $;

@mmc-th theorem parseUBytesS (h: $ parseUBytes k n s $):
  $ parseUBytes (suc k) (n :x a1 :x a0) (ch a1 a0 ': s) $ =
'(iani (xelBits8S (anli h)) @ xtoBytesS (anri h));
@mmc-th theorem parseUBytesS2 (h: $ parseUBytes k x0 s $):
  $ parseUBytes (suc k) (a1 :x a0) (ch a1 a0 ': s) $ =
'(iani xelBits82 @ xtoBytesS2 (anri h));
@mmc-th theorem parseUBytesS1 (h: $ parseUBytes k x0 s $):
  $ parseUBytes (suc k) a0 (ch x0 a0 ': s) $ =
'(iani xelBits81 @ xtoBytesS1 (anri h));
@mmc-th theorem parseUBytes02: $ parseUBytes 0 (a1 :x a0) (s1 (ch a1 a0)) $ =
'(iani xelBits82 xtoBytes12);
@mmc-th theorem parseUBytes01: $ parseUBytes 0 a0 (s1 (ch x0 a0)) $ =
'(iani xelBits81 xtoBytes11);

theorem parseUBytes_x00xN (h1: $ s = repeat 0 x $) (h2: $ x = suc k $): $ parseUBytes k x0 s $ =
'(iani xelBits81 @ eqtr h1 @ eqtr4 (repeateq2 h2) @ eqtr (toByteseq2 h2n0) toBytes02);
do {
  --| (parseUBytes_x00xn i) proves `|- parseUBytes {i-1} x0 _x00x{i}`
  (def (parseUBytes_x00xn i) (atom-app 'parseUBytes_x00x i))
  (scan (range 1 8) @ fn (i)
    (add-tac-thm! (parseUBytes_x00xn i) () ()
        $ parseUBytes ,(sucs {i - 1}) x0 ,(_x00xn i) $ () @ fn ()
      @ refine '(parseUBytes_x00xN (,(_x00xn_eq i)) (,(h2nn i))))
    (mmc-th (parseUBytes_x00xn i)))
};

@mmc-th local def parseIBytesPos (k n: nat) (s: string): wff =
$ n e. Bits (8 * k + 7) /\ s = toBytes (suc k) n $;

@mmc-th theorem parseIBytesPosS (h: $ parseIBytesPos k n s $):
  $ parseIBytesPos (suc k) (n :x a1 :x a0) (ch a1 a0 ': s) $ =
'(iani (xelBits7S (anli h)) @ xtoBytesS (anri h));
@mmc-th theorem parseIBytesPosS2 (h: $ parseIBytesPos k x0 s $):
  $ parseIBytesPos (suc k) (a1 :x a0) (ch a1 a0 ': s) $ =
'(iani xelBits72S @ xtoBytesS2 (anri h));
@mmc-th theorem parseIBytesPosS1 (h: $ parseIBytesPos k x0 s $):
  $ parseIBytesPos (suc k) a0 (ch x0 a0 ': s) $ =
'(iani xelBits71 @ xtoBytesS1 (anri h));
@mmc-th theorem parseIBytesPos02 (h: $ a1 < x8 $):
  $ parseIBytesPos 0 (a1 :x a0) (s1 (ch a1 a0)) $ =
'(iani (xelBits720 h) xtoBytes12);
@mmc-th theorem parseIBytesPos01:
  $ parseIBytesPos 0 a0 (s1 (ch x0 a0)) $ =
'(iani xelBits71 xtoBytes11);

@mmc-th local def parseIBytesNeg (k n: nat) (s: string): wff =
$ n e. Bits (8 * k + 7) /\ s = toIBytes (suc k) (b1 n) $;

@mmc-th theorem parseIBytesNegS (h0: $ a0 + c0 = xf $) (h1: $ a1 + c1 = xf $)
  (h: $ parseIBytesNeg k n s $):
  $ parseIBytesNeg (suc k) (n :x a1 :x a0) (ch c1 c0 ': s) $ =
'(iani (xelBits7S (anli h)) @ xtoIBytesSb1S h0 h1 (anri h));
@mmc-th theorem parseIBytesNegS2 (h0: $ a0 + c0 = xf $) (h1: $ a1 + c1 = xf $)
  (h: $ parseIBytesNeg k x0 s $):
  $ parseIBytesNeg (suc k) (h2n a1 :x a0) (ch c1 c0 ': s) $ =
'(iani xelBits72S @ xtoIBytesSb12 h0 h1 (anri h));
@mmc-th theorem parseIBytesNegS1 (h0: $ a0 + c0 = xf $) (h: $ parseIBytesNeg k x0 s $):
  $ parseIBytesNeg (suc k) (h2n a0) (ch xf c0 ': s) $ =
'(iani xelBits71 @ xtoIBytesSb11 h0 (anri h));
@mmc-th theorem parseIBytesNegS0 (h: $ parseIBytesNeg k x0 s $):
  $ parseIBytesNeg (suc k) x0 (ch xf xf ': s) $ =
'(iani xelBits71 @ xtoIBytesSb10 (anri h));
@mmc-th theorem parseIBytesNeg02 (h0: $ a0 + c0 = xf $) (h1: $ a1 + c1 = xf $) (h: $ a1 < x8 $):
  $ parseIBytesNeg 0 (h2n a1 :x a0) (s1 (ch c1 c0)) $ =
'(iani (xelBits720 h) @ eqtr3 s2nscons0 @ xtoIBytesSb12 h0 h1 xtoIBytes0);
@mmc-th theorem parseIBytesNeg01 (h0: $ a0 + c0 = xf $):
  $ parseIBytesNeg 0 (h2n a0) (s1 (ch xf c0)) $ =
'(iani xelBits71 @ eqtr3 s2nscons0 @ xtoIBytesSb11 h0 xtoIBytes0);

@mmc-th local def posZ (n: nat): nat = $ b0 n $;
@mmc-th local def negZ (n: nat): nat = $ b1 n $;

@mmc-th theorem znsub_posZ (h: $ b + c = a $): $ a -ZN b = posZ c $ =
'(eqtr3 (znsubeq1 h) @ eqtr (znsubpos leaddid1) @ b0eq pncan2);

@mmc-th theorem znsub_negZ (h: $ suc (a + c) = b $): $ a -ZN b = negZ c $ =
'(eqtr3 (znsubeq2 h) @ eqtr (znsubneg @ mpbi leltsuc leaddid1) @ b1eq @ eqtr subSS pncan2);

@_ local def parseImmN_N (k imm l: nat): wff =
$ imm e. Bits (8 * suc k) /\ l = toBytes (suc k) (chopZ (8 * suc k) imm) $;
@mmc-th local def parseImmN (k imm: nat) (s: string): wff = $ parseImmN_N k imm s $;

@mmc-th theorem parseImmN_pos (h: $ parseIBytesPos k n s $): $ parseImmN k (posZ n) s $ = 'sorry;
@mmc-th theorem parseImmN_neg (h: $ parseIBytesNeg k n s $): $ parseImmN k (negZ n) s $ = 'sorry;

@mmc-th local def parseImm8 (imm: nat) (s: string): wff = $ parseImmN 0 imm s $;
@mmc-th local def parseImm32 (imm: nat) (s: string): wff = $ parseImmN ,(sucs 3) imm s $;
@mmc-th local def parseImm64 (imm: nat) (s: string): wff = $ parseImmN ,(sucs 7) imm s $;

@mmc-th theorem parseImm8_I (h: $ parseImmN 0 imm s $): $ parseImm8 imm s $ = 'h;
@mmc-th theorem parseImm32_I (h: $ parseImmN ,(sucs 3) imm s $): $ parseImm32 imm s $ = 'h;
@mmc-th theorem parseImm64_I (h: $ parseImmN ,(sucs 7) imm s $): $ parseImm64 imm s $ = 'h;

local def parseImmNS_N (k imm s s2: nat): wff =
$ E. l (s = l ++ s2 /\ parseImmN_N k imm l) $;

theorem parseImmNS_N_I (h: $ parseImmN_N k imm t $) (h2: $ s = t ++ s2 $):
  $ parseImmNS_N k imm s s2 $ =
(focus '(iexe _ @ iani h2 h) eqtac);

theorem parseImmNS_N_0 (h: $ parseImmN_N k imm s $): $ parseImmNS_N k imm s s0 $ =
'(parseImmNS_N_I h @ eqtr2 (appendeq2 s2ns0) append02);

@mmc-th local def parseImm8S (imm) (s s2: string): wff = $ parseImmNS_N 0 imm s s2 $;
@mmc-th local def parseImm32S (imm) (s s2: string): wff = $ parseImmNS_N ,(sucs 3) imm s s2 $;

@mmc-th theorem parseImm8S_0 (h: $ parseImmN 0 imm s $): $ parseImm8S imm s s0 $ =
'(parseImmNS_N_0 h);
@mmc-th theorem parseImm32S_0 (h: $ parseImmN ,(sucs 3) imm s $): $ parseImm32S imm s s0 $ =
'(parseImmNS_N_0 h);

@mmc-th theorem parseImm8S_I (h: $ parseImmN 0 imm (s1 c1) $):
  $ parseImm8S imm (c1 ': s) s $ =
'(parseImmNS_N_I h s2nsadd);
@mmc-th theorem parseImm32S_I (h: $ parseImmN ,(sucs 3) imm (c1 ': c2 ': c3 ': s1 c4) $):
  $ parseImm32S imm (c1 ': c2 ': c3 ': c4 ': s) s $ =
'(parseImmNS_N_I h @ s2n_SASE @ s2n_SASE @ s2n_SASE s2nsadd);

@mmc-th local def parseImm (sz imm: nat) (s: string): wff =
$ parseImmN (min (wsizeBits sz) 32) imm s $;

@mmc-th theorem parseImm_8 (h: $ parseImm8 imm s $): $ parseImm (wSz8 r) imm s $ = 'sorry;
@mmc-th theorem parseImm_32 (h: $ parseImm32 imm s $): $ parseImm wSz32 imm s $ = 'sorry;
@mmc-th theorem parseImm_64 (h: $ parseImm32 imm s $): $ parseImm wSz64 imm s $ = 'sorry;

@mmc-th local def splitBits13 (a b) (x: hex) = $ splitBits ((1, a) : (3, b) : 0) x $;
@mmc-th local def splitBits22 (a b) (x: hex) = $ splitBits ((2, a) : (2, b) : 0) x $;
@mmc-th local def splitBits31 (a b) (x: hex) = $ splitBits ((3, a) : (1, b) : 0) x $;
@mmc-th local def splitBits121 (a b c) (x: hex) = $ splitBits ((1, a) : (2, b) : (1, c) : 0) x $;
@mmc-th local def splitBits1111 (a b c d) (x: hex) =
$ splitBits ((1, a) : (1, b) : (1, c) : (1, d) : 0) x $;

do {
  (def (splitBits2 l i) (atom-app (apply atom-app 'splitBits l) "_" (hexstring i)))

  -- Adds theorems such as
  -- theorem splitBits121_a:
  --   $ splitBits121 0 1 1 xa $;
  -- which decompose hex values into bits in different groupings.
  -- The naming system is 'splitBits' + partition + '_' + hex digit,
  -- where partition is one of 13, 22, 31, 121, 1111 representing a partition of 4
  (scan '((1 3) (2 2) (3 1) (1 2 1) (1 1 1 1)) @ fn (l)
    @ for 0 16 @ fn (i)
      @ letrec ([lhs @ match-fn*
        [(() _ r) r]
        [((k . xs) n r) '((,(dn {n % {2 ^ k}})) . ,(lhs xs {n shr k} r))]])
      (add-tac-thm! (splitBits2 l i) () ()
        '(,(apply atom-app 'splitBits l) . ,(lhs l i '((,(hexdigit i))))) ()
        @ fn () (xsplitBits l i))
      (mmc-th (splitBits2 l i)))
};

@mmc-th local def parseDisplacement (mod q: nat) (l l2: string): wff =
$ E. l1 (l = l1 ++ l2 /\ readDisplacement mod q l1) $;

@mmc-th theorem parseDisplacement_0: $ parseDisplacement 0 (posZ x0) s s $ = 'sorry;
@mmc-th theorem parseDisplacement_8 (h: $ parseImm8S a s s2 $):
  $ parseDisplacement 1 a s s2 $ = 'sorry;
@mmc-th theorem parseDisplacement_32 (h: $ parseImm32S a s s2 $):
  $ parseDisplacement 2 a s s2 $ = 'sorry;

@mmc-th local def scaleReg (sc: nat) (ix: hex): nat = $ suc (sc, ix) $;

@mmc-th local def parseSI (sc: nat) (ix: hex) (osi: nat): wff =
$ if (ix = RSP) 0 (scaleReg sc ix) = osi $;

@mmc-th theorem parseSI_4: $ parseSI 0 x4 0 $ = 'sorry;
theorem parseSI_S (h: $ ix != x4 $): $ parseSI sc ix (scaleReg sc ix) $ = 'sorry;

do (ignore @ on-hexstrings @ fn (n) @ if (not {n == "4"}) @ begin
  (def name (atom-app 'parseSI_ n))
  (def ix '(,(atom-app 'x n)))
  (add-tac-thm! name '((sc nat ())) ()
    $ parseSI sc ,ix (scaleReg sc ,ix) $ () @ fn ()
    '(parseSI_S ,norm_num))
  (mmc-th name));

@mmc-th local def sibSideCond (base: hex) (md: nat): wff = $ base != x5 \/ 0 < md $;
@mmc-th theorem sibSideCond_M1: $ sibSideCond base 1 $ = '(orr d0lt1);
@mmc-th theorem sibSideCond_M2: $ sibSideCond base 2 $ = '(orr d0lt2);

do (ignore @ on-hexstrings @ fn (n) @ if (not {n == "5"}) @ begin
  (def name (atom-app 'sibSideCond_B n))
  (add-tac-thm! name '((md nat ())) ()
    $ sibSideCond (,(atom-app 'x n)) md $ () @ fn ()
    '(orl ,norm_num))
  (mmc-th name));

@mmc-th local def modrmSideCond (n md) = $ n != 4 /\ (n != 5 \/ 0 < md) $;
@mmc-th theorem modrmSideCond_51: $ modrmSideCond 5 1 $ = '(iani ,norm_num @ orr d0lt1);
@mmc-th theorem modrmSideCond_52: $ modrmSideCond 5 2 $ = '(iani ,norm_num @ orr d0lt2);

do (for 0 8 @ fn (n) @ if (not {{n == 4} or {n == 5}}) @ begin
  (def name (atom-app 'modrmSideCond_ n))
  (add-tac-thm! name '((md nat ())) ()
    $ modrmSideCond (,(atom-app 'd n)) md $ () @ fn ()
    '(iani ,norm_num @ orl ,norm_num))
  (mmc-th name));

@mmc-th local def parseModRM2 (rex rmi rm2 mod: nat) (l l2: string): wff =
$ E. l1 (l = l1 ++ l2 /\ E. rm (rmi = suc (immRM_rm rm) /\ readModRM2 rex rm rm2 mod l)) $;

@mmc-th theorem parseModRM2_reg (h1: $ REX_B rex = b $) (h2: $ splitBits31 rm2 b r $):
  $ parseModRM2 rex (IRM_reg r) rm2 3 s s $ = 'sorry;
@mmc-th theorem parseModRM2_rip (h1: $ parseImm32S a l l2 $):
  $ parseModRM2 rex (IRM_mem 0 base_RIP a) 5 0 l l2 $ = 'sorry;
@mmc-th theorem parseModRM2_sib0
  (h1: $ splitBits31 bs ixl y $)
  (h2: $ splitBits22 ixh sc x $)
  (h3: $ REX_X rex = rx $)
  (h4: $ splitBits121 ixl ixh rx index $)
  (h5: $ parseSI sc index osi $)
  (h6: $ REX_B rex = rb $)
  (h7: $ splitBits31 bs rb x5 $)
  (h8: $ parseImm32S a l l2 $):
  $ parseModRM2 rex (IRM_mem osi 0 a) 4 0 (ch x y ': l) l2 $ = 'sorry;
@mmc-th theorem parseModRM2_sibReg
  (h1: $ splitBits31 bs ixl y $)
  (h2: $ splitBits22 ixh sc x $)
  (h3: $ REX_X rex = rx $)
  (h4: $ splitBits121 ixl ixh rx index $)
  (h5: $ parseSI sc index osi $)
  (h6: $ REX_B rex = rb $)
  (h7: $ splitBits31 bs rb base $)
  (h8: $ sibSideCond base md $)
  (h9: $ parseDisplacement md a l2 l3 $)
  (h10: $ consStr (ch x y) l2 l $):
  $ parseModRM2 rex (IRM_mem osi (base_reg base) a) 4 md l l3 $ = 'sorry;
@mmc-th theorem parseModRM2_disp
  (h1: $ REX_B rex = b $)
  (h2: $ splitBits31 rm2 b r $)
  (h3: $ modrmSideCond rm2 md $)
  (h4: $ parseDisplacement md disp l l2 $):
  $ parseModRM2 rex (IRM_mem 0 (base_reg r) disp) rm2 md l l2 $ = 'sorry;

@_ local def parseModRM_N (rex rn rmi l l2: nat): wff =
$ E. l1 (l = l1 ++ l2 /\ E. rm (rmi = suc (immRM_rm rm) /\ readModRM rex rn rm l)) $;

@mmc-th local def parseModRM (rex: nat) (rn: hex) (rm: nat) (l l2: string): wff =
$ parseModRM_N rex rn rm l l2 $;

@mmc-th theorem parseModRM_I
  (h1: $ splitBits31 rm2 o y $)
  (h2: $ splitBits22 pc md x $)
  (h3: $ REX_R rex = r $)
  (h4: $ splitBits121 o pc r rn $)
  (h5: $ parseModRM2 rex rm rm2 md l l2 $)
  (h6: $ consStr (ch x y) l s $):
  $ parseModRM rex rn rm s l2 $ = 'sorry;

@_ local def mkRegRMI_N (dst src ds): wff =
$ ds e. DestSrc /\ destRM ds = IRM_reg_N dst /\ src = suc (srcIRM ds) $;

local def mkRegRMI (dst src ds): wff = $ mkRegRMI_N dst src ds $;

@_ local def instBinopN (opc sz dst src: nat): set =
$ S\ p, S\ s, {x | E. ds (mkRegRMI_N dst src ds /\
  opc < x8 -> decode (xastBinop opc sz ds) s)} $;

@mmc-th local def instBinop (opc: hex) (sz: nat) (dst: hex) (src: nat): set =
$ S\ p, S\ s, {x | E. ds (mkRegRMI dst src ds /\
  opc < x8 -> decode (xastBinop opc sz ds) s)} $;

@_ local def instAddN (sz dst src: nat): set = $ instBinopN x0 sz dst src $;
@_ local def instSubN (sz dst src: nat): set = $ instBinopN x5 sz dst src $;

do {
  --| A macro for `(instBinop x0 sz dst src)` which is a bit easier to read
  (def (instAdd sz dst src) '(instBinop ,(hexdigit @ eval '(binopAdd)) ,sz ,dst ,src))
  --| A macro for `(instBinop x5 sz dst src)` which is a bit easier to read
  (def (instSub sz dst src) '(instBinop ,(hexdigit @ eval '(binopSub)) ,sz ,dst ,src))
  --| A macro for `x4` when used as the stack pointer register
  (def RSP (hexdigit @ eval '(RSP)))
};

@mmc-th local def parseBinop (op: hex) (sz: nat) (dst: hex) (src: nat) (I: set): wff =
$ src != 0 -> instBinop op sz dst src C_ I $;

@mmc-th theorem parseBinopBinop (op sz dst src):
  $ parseBinop op sz dst src (instBinop op sz dst src) $ = '(a1i ssid);

@mmc-th theorem parseBinopRAX
  (h1: $ splitBits121 v 2 o y $)
  (h2: $ splitBits22 pc 0 x $)
  (h3: $ splitBits121 o pc 0 opc $)
  (h4: $ opSizeW rex v = sz $)
  (h5: $ parseImm sz src l $)
  (h6: $ parseBinop opc sz x0 (IRM_imm32 src) I $):
  $ parseOpc p ip l rex (ch x y) I $ = 'sorry;

@mmc-th theorem parseBinopImm
  (h1: $ splitBits13 v 0 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex opc (IRM_reg dst) l1 l2 $)
  (h4: $ parseImm sz src l2 $)
  (h5: $ parseBinop opc sz dst (IRM_imm32 src) I $):
  $ parseOpc p ip l1 rex (ch x8 y) I $ = 'sorry;

@mmc-th theorem parseBinopImm8
  (h1: $ opSizeW rex 1 = sz $)
  (h2: $ parseModRM rex opc (IRM_reg dst) l1 l2 $)
  (h3: $ parseImm8 src l2 $)
  (h4: $ parseBinop opc sz dst (IRM_imm32 src) I $):
  $ parseOpc p ip l1 rex (ch x8 x3) I $ = 'sorry;

@mmc-th theorem parseBinopReg
  (h1: $ splitBits121 v 1 o y $)
  (h2: $ splitBits22 pc 0 x $)
  (h3: $ splitBits121 o pc 0 opc $)
  (h4: $ opSizeW rex v = sz $)
  (h5: $ parseModRM rex dst src l s0 $)
  (h6: $ parseBinop opc sz dst src I $):
  $ parseOpc p ip l rex (ch x y) I $ = 'sorry;

@mmc-th local def instShift (opc: hex) (sz: nat) (dst: hex) (src: nat): set =
$ S\ p, S\ s, {x | opc < x8 /\ opc != 6 -> E. ds (mkRegRMI dst src ds /\
  (src = IRM_reg x1 \/ E. i (i < wsizeBits sz /\ src = IRM_imm32 (posZ i))) /\
  decode (xastBinop (rex_reg 1 opc) sz ds) s)} $;

@mmc-th theorem parseBinopHi
  (h1: $ splitBits13 v 0 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex opc (IRM_reg dst) l1 l2 $)
  (h4: $ parseImm8 src l2 $):
  $ parseOpc p ip l1 rex (ch xc y) (instShift opc sz dst (IRM_imm32 src)) $ = 'sorry;

@mmc-th theorem parseBinopHi1
  (h1: $ splitBits13 v 0 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex opc (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xd y) (instShift opc sz dst (IRM_imm32 (posZ 1))) $ = 'sorry;

@mmc-th theorem parseBinopHiReg
  (h1: $ splitBits13 v 1 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex opc (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xd y) (instShift opc sz dst (IRM_reg x1)) $ = 'sorry;

@mmc-th local def instImm (sz: nat) (dst: hex) (src: nat): set =
$ S\ p, S\ s, {x | sz e. wSz32 ; sn wSz64 /\ src e. Bits (wsizeBits sz) /\ (
  src = 0 /\ E. ds (
    mkRegRMI dst (IRM_reg dst) ds /\
    decode (xastBinop binopXor wSz32 ds) s) \/
  decode (xastMov sz (Rm_i (RM_reg dst) (chopZ 64 src))) s)} $;

theorem parseBinopClear (h: $ sz e. wSz32 ; sn wSz64 $):
  $ parseBinop x6 wSz32 dst (IRM_reg dst) (instImm sz dst x0) $ = 'sorry;
@mmc-th theorem parseBinopClear32:
  $ parseBinop x6 wSz32 dst (IRM_reg dst) (instImm wSz32 dst (posZ x0)) $ = 'sorry;
@mmc-th theorem parseBinopClear64:
  $ parseBinop x6 wSz32 dst (IRM_reg dst) (instImm wSz64 dst (posZ x0)) $ = 'sorry;

@mmc-th local def instMovSX (dst_sz: nat) (dst: hex) (src_sz src: nat): set =
$ S\ p, S\ s, {x | wsizeBytes src_sz < wsizeBytes dst_sz /\
  E. ds (mkRegRMI dst src ds /\
    decode (xastMovSX src_sz ds dst_sz) s)} $;

@mmc-th local def instMovZX (dst_sz: nat) (dst: hex) (src_sz src: nat): set =
$ S\ p, S\ s, {x | wsizeBytes src_sz < wsizeBytes dst_sz /\
  E. ds (mkRegRMI dst src ds /\ (
    decode (xastMovZX src_sz ds dst_sz) s \/
    src_sz = wSz32 /\ dst_sz = wSz64 /\ decode (xastMov wSz32 ds) s))} $;

@mmc-th theorem parseMovSLQ
  (h1: $ REX_W rex = 1 $)
  (h2: $ parseModRM rex dst src l s0 $):
  $ parseOpc p ip l rex (ch x6 x3) (instMovSX wSz64 dst wSz32 src) $ = 'sorry;

@mmc-th local def hasREX (rex: nat) (b: wff): wff = $ rex != 0 <-> b $;
@mmc-th theorem hasREX0: $ hasREX 0 F. $ = '(mpbir neqfal eqid);
@mmc-th theorem hasREXS (rex: hex): $ hasREX (suc rex) T. $ = '(mpbir eqtru peano1);

@mmc-th theorem parseMovSB
  (h1: $ hasREX rex b $)
  (h2: $ opSizeW rex 1 = sz $)
  (h3: $ parseModRM rex dst src l s0 $):
  $ parseOpc p ip (ch xb xe ': l) rex (ch x0 xf) (instMovSX sz dst (wSz8 b) src) $ = 'sorry;

@mmc-th theorem parseMovZB
  (h1: $ hasREX rex b $)
  (h2: $ opSizeW rex 1 = sz $)
  (h3: $ parseModRM rex dst src l s0 $):
  $ parseOpc p ip (ch xb x6 ': l) rex (ch x0 xf) (instMovZX sz dst (wSz8 b) src) $ = 'sorry;

local def mkRMI2 (dst src ds): wff =
$ ds e. DestSrc /\ dst = suc (immRM_rm (destRM ds)) /\ src = suc (srcIRM ds) $;

@mmc-th local def instMov (sz dst src: nat): set =
$ S\ p, S\ s, {x | E. ds (mkRMI2 dst src ds /\ decode (xastMov sz ds) s)} $;

@mmc-th theorem parseMovLoad
  (h1: $ splitBits13 v 5 y $)
  (h2: $ parseModRM rex dst src l s0 $)
  (h3: $ opSizeW rex v = sz $):
  $ parseOpc p ip l rex (ch x8 y) (instMov sz (IRM_reg dst) src) $ = 'sorry;

@mmc-th theorem parseMovZLQ
  (h1: $ splitBits13 v 5 y $)
  (h2: $ parseModRM rex dst src l s0 $)
  (h3: $ REX_W rex = 0 $):
  $ parseOpc p ip l rex (ch x8 y) (instMovZX wSz64 dst wSz32 src) $ = 'sorry;

@mmc-th theorem parseMovStore
  (h1: $ splitBits13 v 4 y $)
  (h2: $ parseModRM rex src dst l s0 $)
  (h3: $ opSizeW rex v = sz $):
  $ parseOpc p ip l rex (ch x8 y) (instMov sz dst (IRM_reg src)) $ = 'sorry;

@mmc-th theorem parseMov32
  (h1: $ splitBits31 r 1 y $)
  (h2: $ REX_B rex = rb $)
  (h3: $ splitBits31 r rb dst $)
  (h4: $ REX_W rex = 0 $)
  (h5: $ parseImm32 src l $):
  $ parseOpc p ip l rex (ch xb y) (instImm wSz32 dst src) $ = 'sorry;

@mmc-th theorem parseMov64
  (h1: $ splitBits31 r 1 y $)
  (h2: $ REX_B rex = rb $)
  (h3: $ splitBits31 r rb dst $)
  (h4: $ REX_W rex = 1 $)
  (h5: $ parseImm64 src l $):
  $ parseOpc p ip l rex (ch xb y) (instImm wSz64 dst src) $ = 'sorry;

@mmc-th theorem parseMovImmM
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x0 dst l1 l2 $)
  (h4: $ parseImm sz src l2 $):
  $ parseOpc p ip l1 rex (ch xc y) (instMov sz dst (IRM_imm32 src)) $ = 'sorry;

@mmc-th theorem parseMovImmI
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x0 (IRM_reg dst) l1 l2 $)
  (h4: $ parseImm sz src l2 $):
  $ parseOpc p ip l1 rex (ch xc y) (instImm sz dst src) $ = 'sorry;

@mmc-th local def instPush (src: nat): set =
$ S\ p, S\ s, {x | guarded src {src2 | decode (xastPush src2) s}} $;

@mmc-th theorem parsePushImm8
  (h1: $ parseImm8 src l $):
  $ parseOpc p ip l rex (ch x6 xa) (instPush (IRM_imm32 src)) $ = 'sorry;

@mmc-th theorem parsePushImm32
  (h1: $ parseImm32 src l $):
  $ parseOpc p ip l rex (ch x6 x8) (instPush (IRM_imm32 src)) $ = 'sorry;

@mmc-th theorem parsePushReg
  (h1: $ splitBits31 r 0 y $)
  (h2: $ REX_B rex = rb $)
  (h3: $ splitBits31 r rb src $):
  $ parseOpc p ip s0 rex (ch x5 y) (instPush (IRM_reg src)) $ = 'sorry;

@mmc-th theorem parsePushMem
  (h1: $ parseModRM rex x6 src l s0 $):
  $ parseOpc p ip l rex (ch xf xf) (instPush src) $ = 'sorry;

local def instSimple (ast: nat): set = $ S\ p, S\ s, {x | decode ast s} $;

@mmc-th local def instPop (dst: hex): set = $ instSimple (xastPop (RM_reg dst)) $;

@mmc-th theorem parsePopReg
  (h1: $ splitBits31 r 1 y $)
  (h2: $ REX_B rex = rb $)
  (h3: $ splitBits31 r rb dst $):
  $ parseOpc p ip s0 rex (ch x5 y) (instPop dst) $ = 'sorry;

@mmc-th local def instJump (tgt: nat): set =
$ S\ p, S\ s, {x | tgt e. u64 ->
  s = 0 /\ tgt = x \/
  decode (xastJCC condAlways (tgt -_64 (x + len s))) s} $;

@mmc-th theorem parseFallthrough:
  $ localAssemble0 p ip (instJump ip) $ = 'sorry;

@mmc-th theorem parseJump8
  (h1: $ tgt -ZN ip = imm $)
  (h2: $ parseImm8 imm l $):
  $ parseOpc p ip l rex (ch xe xb) (instJump tgt) $ = 'sorry;

@mmc-th theorem parseJump32
  (h1: $ tgt -ZN ip = imm $)
  (h2: $ parseImm32 imm l $):
  $ parseOpc p ip l rex (ch xe x9) (instJump tgt) $ = 'sorry;

@mmc-th local def instJCC (c: hex) (tgt: nat): set =
$ S\ p, S\ s, {x | tgt e. u64 -> decode (xastJCC (suc c) (tgt -_64 (x + len s))) s} $;

@mmc-th theorem parseJCC8
  (h1: $ tgt -ZN ip = imm $)
  (h2: $ parseImm8 imm l $):
  $ parseOpc p ip l rex (ch x7 c) (instJCC c tgt) $ = 'sorry;

@mmc-th theorem parseJCCTwo
  (h1: $ tgt -ZN ip = imm $)
  (h2: $ parseImm32 imm l $):
  $ parseOpc p ip (ch x8 c ': l) rex (ch x0 xf) (instJCC c tgt) $ = 'sorry;

@mmc-th local def instCall (tgt: nat): set =
$ S\ p, S\ s, {x | tgt e. u64 -> decode (xastCall (immRM_imm (tgt -_64 (p + x + len s)))) s} $;

@mmc-th theorem parseCall
  (h1: $ p + ip = a $)
  (h2: $ tgt -ZN a = imm $)
  (h3: $ parseImm32 imm l $):
  $ parseOpc p ip l rex (ch xe x8) (instCall tgt) $ = 'sorry;

@mmc-th local def instRet: set = $ instSimple (xastRet 0) $;

@mmc-th theorem parseRet: $ parseOpc p ip s0 rex (ch xc x3) instRet $ = 'sorry;

@mmc-th local def instCDX (sz: nat): set = $ instSimple (xastCDX sz) $;

@mmc-th theorem parseCDQ (h1: $ REX_W rex = 0 $):
  $ parseOpc p ip s0 rex (ch x9 x9) (instCDX wSz32) $ = 'sorry;
@mmc-th theorem parseCQO (h1: $ REX_W rex = 1 $):
  $ parseOpc p ip s0 rex (ch x9 x9) (instCDX wSz64) $ = 'sorry;

@mmc-th local def instLea (sz: nat) (dst: hex) (si base off: nat): set =
$ S\ p, S\ s, {x | guarded (asI64 off) {q |
  decode (xastLea sz (R_rm dst (RM_mem si base q))) s}} $;

@mmc-th theorem parseLea32
  (h1: $ parseModRM rex dst (IRM_mem si base off) l s0 $)
  (h2: $ REX_W rex = 0 $):
  $ parseOpc p ip l rex (ch x8 xd) (instLea wSz32 dst si base off) $ = 'sorry;

@mmc-th theorem parseLea64
  (h1: $ parseModRM rex dst (IRM_mem si base off) l s0 $)
  (h2: $ REX_W rex = 1 $):
  $ parseOpc p ip l rex (ch x8 xd) (instLea wSz64 dst si base off) $ = 'sorry;

@mmc-th local def instTest (sz src1 src2: nat): set =
$ S\ p, S\ s, {x | E. ds (mkRMI2 src1 src2 ds /\
    decode (xastBinop binopTst sz ds) s)} $;

@mmc-th theorem parseTest
  (h1: $ splitBits13 v 2 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex src2 src1 l s0 $):
  $ parseOpc p ip l rex (ch x8 y) (instTest sz src1 (IRM_reg src2)) $ = 'sorry;

@mmc-th theorem parseTestRAX
  (h1: $ splitBits13 v 4 y $)
  (h3: $ REX_W rex = w $)
  (h3: $ opSize T. w v = sz $)
  (h4: $ parseImm sz src l $):
  $ parseOpc p ip l rex (ch xa y) (instTest sz (IRM_reg x0) src) $ = 'sorry;

@mmc-th theorem parseTestHi
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x0 src1 l1 l2 $)
  (h4: $ parseImm sz src2 l2 $):
  $ parseOpc p ip l1 rex (ch xf y) (instTest sz src1 (IRM_imm32 src2)) $ = 'sorry;

@mmc-th local def instUnop (op sz: nat) (dst: hex): set =
$ S\ p, S\ s, {x | op e. Unop /\ decode (xastUnop op sz (RM_reg dst)) s} $;

@mmc-th theorem parseInc
  (h1: $ splitBits13 v 7 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x0 (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instUnop unopInc sz dst) $ = 'sorry;

@mmc-th theorem parseDec
  (h1: $ splitBits13 v 7 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x1 (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instUnop unopDec sz dst) $ = 'sorry;

@mmc-th theorem parseNot
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x2 (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instUnop unopNot sz dst) $ = 'sorry;

@mmc-th theorem parseNeg
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x3 (IRM_reg dst) l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instUnop unopNeg sz dst) $ = 'sorry;

@mmc-th local def instMul (sz src: nat): set =
$ S\ p, S\ s, {x | E. rm (src = suc (immRM_rm rm) /\ decode (xastMul sz rm) s)} $;

@mmc-th theorem parseMul
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x4 src l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instMul sz src) $ = 'sorry;

@mmc-th local def instDiv (sz src: nat): set =
$ S\ p, S\ s, {x | E. rm (src = suc (immRM_rm rm) /\ decode (xastDiv sz rm) s)} $;

@mmc-th theorem parseDiv
  (h1: $ splitBits13 v 3 y $)
  (h2: $ opSizeW rex v = sz $)
  (h3: $ parseModRM rex x6 src l s0 $):
  $ parseOpc p ip l rex (ch xf y) (instDiv sz src) $ = 'sorry;

@mmc-th local def instSetCC (c: hex) (b: wff) (dst: hex): set =
$ instSimple (xastSetCC (suc c) (nat b) (RM_reg dst)) $;

@mmc-th theorem parseSetCC
  (h1: $ hasREX rex b $)
  (h2: $ parseModRM rex x0 (IRM_reg dst) l s0 $):
  $ parseOpc p ip (ch x9 c ': l) rex (ch x0 xf) (instSetCC c b dst) $ = 'sorry;

@mmc-th local def instCMov (c: hex) (sz dst src: nat): set =
$ S\ p, S\ s, {x | E. ds (mkRMI2 dst src ds /\ decode (xastCMov (suc c) sz ds) s)} $;

@mmc-th theorem parseCMov
  (h1: $ REX_W rex = w $)
  (h2: $ opSize T. w 1 = sz $)
  (h3: $ parseModRM rex dst src l s0 $):
  $ parseOpc p ip (ch x4 c ': l) rex (ch x0 xf) (instCMov c sz (IRM_reg dst) src) $ = 'sorry;

@mmc-th local def instSysCall: set = $ instSimple xastSysCall $;

@mmc-th theorem parseSysCall: $ parseOpc p ip (s1 (ch x0 x5)) rex (ch x0 xf) instSysCall $ = 'sorry;

@mmc-th local def instUD2: set = $ instSimple xastUD2 $;

@mmc-th theorem parseUD2: $ parseOpc p ip (s1 (ch x0 xb)) rex (ch x0 xf) instUD2 $ = 'sorry;

--| Assert pseudo-instruction
@mmc-th local def instAssert (c: hex) (tgt: nat): set = $ instJCC c tgt +asm xastUD2 $;

@mmc-th theorem parseAssert:
  $ parseOpc p ip (ch x0 x2 ': ch x0 xf ': s1 (ch x0 xb)) rex (ch x7 c) (instAssert c ip) $ =
'sorry;

--------------------------------------------
-- Post-processing the result of assembly --
--------------------------------------------

@mmc-th local def asmProc (n: nat) (A: set): set =
$ S\ s, {p | p = n /\ E. t1 E. t2 (s = t1 ++ t2 /\ t1 != 0 /\ p, t1, 0 e. A)} $;

@mmc-th theorem asmProcI (s x n y A)
  (h1: $ localAssemble x s x0 n A $)
  (h2: $ x + n = y $):
  $ assemble s x y (asmProc x A) $ = 'sorry;

@mmc-th theorem assemble_pad
  (h1: $ assemble s x y (asmProc x A) $)
  (h2: $ y + n = z $)
  (h3: $ strlen t n $):
  $ assemble (s '+ t) x z (asmProc x A) $ = 'sorry;

@mmc-th local def isU64 (n: nat): wff = $ n e. u64 $;

-- Proves, for digits i = 0, .., 15:
-- theorem isU64_5 (a0 a1 a2 a3 a4 a5: hex):
--   $ isU64 (a5 :x a4 :x a3 :x a2 :x a1 :x a0) $;
-- (Note that the number of digits is one more than the index value.)
do (ignore @ on-hexstrings @ fn (n)
  @ let ([xn (atom-app 'x n)] [i (hex->number xn)] [t '(,(_x00xn i))]
         [(ai j) (atom-app 'a j)])
  (def name (atom-app "isU64_" n))
  (add-tac-thm! name
    (map (fn (j) '(,(ai j) hex ())) (range 0 {i + 1})) ()
    '(isU64 ,(foldr (range 0 i) '(h2n ,(ai i)) @ fn (j x) '(hex ,x ,(ai j)))) () @ fn ()
    '(xelu64i ,(iterate {i // 2} (fn (x) '(xelBits8S ,x)) (atom-app 'xelBits8 {{i % 2} + 1})))));

--| Global context. In lean:
--| ```lean
--| structure GCtx where
--|   content : String
--|   fileSz : UInt64
--|   memSz : UInt64
--|   result : SProp
--| ```
@mmc-th local def mkGCtx (content: string) (filesz memsz: nat) (result: set): set =
$ Sum (Sum (content, filesz, memsz) result) 0 $;

@_ local def gctx_content (G: set): nat = $ fst (lower (Fst G)) $;
@mmc-th local def getContent (G: set) (c: string): wff = $ gctx_content G = c $;
@mmc-th theorem getContentGI: $ getContent (mkGCtx c fs ms T) c $ = 'sorry;

@_ local def gctx_filesz (G: set): nat = $ pi21 (lower (Fst G)) $;
@_ local def gctx_memsz (G: set): nat = $ pi22 (lower (Fst G)) $;

@_ local def gctx_result (G: set): set = $ Snd (Fst G) $;
@mmc-th local def getResult (G: set) (T: set): wff = $ gctx_result G == T $;
@mmc-th theorem getResultGI: $ getResult (mkGCtx c fs ms T) T $ = 'sorry;

--| `assembled c fs ms P` (assembly output) asserts that
--| if the full file content is `c`, then `len c` is in range, and
--| `P` holds of some nonempty substring in `c`.
--| `P` will contain embedded assertions about the position or the
--| string where relevant (using `asmAt`), so that the existential is uniquely determined.
@_ local def assembledN (c fs ms: nat) (P: set): wff =
$ len c = fs /\ fs <= ms /\ text_start + ms e. u64 /\
  E. x E. s (s != 0 /\ sublistAt x c s /\ s, text_start + x e. P) $;

--| `assembled (mkGCtx c fs ms _) P` (assembly output) asserts that
--| if the full file content is `c`, then `len c` is in range, and
--| `P` holds of some nonempty substring in `c`.
--| `P` will contain embedded assertions about the position or the
--| string where relevant (using `asmAt`), so that the existential is uniquely determined.
@mmc-th local def assembled (G P: set): wff =
$ assembledN (gctx_content G) (gctx_filesz G) (gctx_memsz G) P $;

@mmc-th theorem assembledI
  (h1: $ assemble c x0 filesz A $)
  (h2: $ filesz <= memsz $)
  (h3: $ ,0x400078 + memsz = end $)
  (h4: $ isU64 end $):
  $ assembled (mkGCtx c filesz memsz T) A $ = 'sorry;

@mmc-th theorem assembled_l (h1: $ assembled G (A ++asm B) $): $ assembled G A $ = 'sorry;

@mmc-th theorem assembled_r (h1: $ assembled G (A ++asm B) $): $ assembled G B $ = 'sorry;

do (warn-unused-vars #t);
