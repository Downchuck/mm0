import "x86_determ.mm1";

----------------
-- ELF header --
----------------

local def _x00: char = 0;
local def _x01: char = 1;
local def _x02: char = 2;
local def _x00x0: string = $ s0 $;
local def _x00x1: string = $ s1 _x00 $;
local def _x00x2: string = $ _x00 ': _x00x1 $;
local def _x00x3: string = $ _x00 ': _x00x2 $;
local def _x00x4: string = $ _x00x2 '+ _x00x2 $;
local def _x00x5: string = $ _x00 ': _x00x4 $;
local def _x00x6: string = $ _x00x2 '+ _x00x4 $;
local def _x00x7: string = $ _x00x3 '+ _x00x4 $;
local def _x00x8: string = $ _x00x4 '+ _x00x4 $;
local def _x00x9: string = $ _x00 ': _x00x8 $;
local def _x00xa: string = $ _x00x2 '+ _x00x8 $;
local def _x00xb: string = $ _x00x3 '+ _x00x8 $;
local def _x00xc: string = $ _x00x4 '+ _x00x8 $;
local def _x00xd: string = $ _x00x5 '+ _x00x8 $;
local def _x00xe: string = $ _x00x6 '+ _x00x8 $;
local def _x00xf: string = $ _x00x7 '+ _x00x8 $;
do (def _x00xn @ on-hexstrings @ fn (s) (atom-app "_x00x" s));

theorem _x00_eq: $ _x00 = 0 $ = '{,norm_num : $ ch = _ $};
theorem _x01_eq: $ _x01 = 1 $ = '{,norm_num : $ ch = _ $};
theorem _x02_eq: $ _x02 = 2 $ = '{,norm_num : $ ch = _ $};

theorem _x00x0_eq: $ _x00x0 = repeat 0 x0 $ = '(eqtr4 s2n_R0 @ repeateq2 h2n0);
theorem _x00x1_eq: $ _x00x1 = repeat 0 x1 $ = '(eqtr4 (s2n_R1 _x00_eq) @ repeateq2 h2n1);
theorem _x00x2_eq: $ _x00x2 = repeat 0 x2 $ = '(s2n_RS _x00_eq _x00x1_eq ,norm_num);
theorem _x00x3_eq: $ _x00x3 = repeat 0 x3 $ = '(s2n_RS _x00_eq _x00x2_eq ,norm_num);
theorem _x00x4_eq: $ _x00x4 = repeat 0 x4 $ = '(s2n_RA _x00x2_eq _x00x2_eq ,norm_num);
theorem _x00x5_eq: $ _x00x5 = repeat 0 x5 $ = '(s2n_RS _x00_eq _x00x4_eq ,norm_num);
theorem _x00x6_eq: $ _x00x6 = repeat 0 x6 $ = '(s2n_RA _x00x2_eq _x00x4_eq ,norm_num);
theorem _x00x7_eq: $ _x00x7 = repeat 0 x7 $ = '(s2n_RA _x00x3_eq _x00x4_eq ,norm_num);
theorem _x00x8_eq: $ _x00x8 = repeat 0 x8 $ = '(s2n_RA _x00x4_eq _x00x4_eq ,norm_num);
theorem _x00x9_eq: $ _x00x9 = repeat 0 x9 $ = '(s2n_RS _x00_eq _x00x8_eq ,norm_num);
theorem _x00xa_eq: $ _x00xa = repeat 0 xa $ = '(s2n_RA _x00x2_eq _x00x8_eq ,norm_num);
theorem _x00xb_eq: $ _x00xb = repeat 0 xb $ = '(s2n_RA _x00x3_eq _x00x8_eq ,norm_num);
theorem _x00xc_eq: $ _x00xc = repeat 0 xc $ = '(s2n_RA _x00x4_eq _x00x8_eq ,norm_num);
theorem _x00xd_eq: $ _x00xd = repeat 0 xd $ = '(s2n_RA _x00x5_eq _x00x8_eq ,norm_num);
theorem _x00xe_eq: $ _x00xe = repeat 0 xe $ = '(s2n_RA _x00x6_eq _x00x8_eq ,norm_num);
theorem _x00xf_eq: $ _x00xf = repeat 0 xf $ = '(s2n_RA _x00x7_eq _x00x8_eq ,norm_num);
do (def _x00xn_eq @ on-hexstrings @ fn (s) (atom-app "_x00x" s "_eq"));

local def ELF_IDENT_s: string =
$ ,0x7f ': ,"E" ': ,"L" ': ,"F" ':
  _x02 ': _x01 ': _x01 ': _x00x9 $;

theorem ELF_IDENT_eq: $ ELF_IDENT_s = ELF_IDENT $ =
'(s2n_SAE @ s2n_SAE @ s2n_SAE @ s2n_SAE @ append01i @
  s2n_S _x02_eq @ s2n_S _x01_eq @ s2n_S _x01_eq @
  eqtr _x00x9_eq @ repeateq2 h2n9);

local def _ch16 (c: char): string = $ c ': _x00x1 $;
local def _ch32 (c: char): string = $ c ': _x00x3 $;
local def _ch64 (c: char): string = $ c ': _x00x7 $;

theorem _ch16_eq (h: $ c = a $): $ _ch16 c = u16Bytes a $ =
'(s2n_toBytesS0 h @ eqtr _x00x1_eq @ repeateq2 h2n1);
theorem _ch32_eq (h: $ c = a $): $ _ch32 c = u32Bytes a $ =
'(s2n_toBytesS0 h @ eqtr _x00x3_eq @ repeateq2 h2n3);
theorem _ch64_eq (h: $ c = a $): $ _ch64 c = u64Bytes a $ =
'(s2n_toBytesS0 h @ eqtr _x00x7_eq @ repeateq2 h2n7);

--| `0x400000` as u64, the hard coded file start point
local def load_start_s (c: char): string = $ c ': _x00 ': ,0x40 ': _x00x5 $;
local def load_start (x y): nat = $ ,0x4000 :x x :x y $;
--| `0x400078`, the hard coded entry point
local def text_start: nat = $ load_start x7 x8 $;

theorem load_start_eq2: $ load_start x0 x0 + x :x y = load_start x y $ =
'(add_xx0 (add_x00 addx01) addx01);
theorem load_start_pow2: $ load_start x0 x0 = 2 ^ ,22 $ =
'(eqtr (x2powS @ x2powS @ x2powS @ x2powS @ x2powS @ eqtr2 d2pow2 dec4) @
  poweq2 ,norm_num);

theorem load_start_T: $ load_start x y e. u64 $ =
'(ssel u32ss64 @ xelu32i @ xelBits8S @ xelBits8S xelBits82);
theorem load_start_eq: $ load_start_s (ch x y) = u64Bytes (load_start x y) $ =
(focus
  '(xtoBytesS @ xtoBytesS @ eqtr _ @ toByteseq2 @ hexeq1 hex01_)
  '(xtoBytesS @ eqtr4 (eqtr _x00x5_eq @ repeateq2 h2n5) toBytes02));

local def ELF_header_s: string =
$ ELF_IDENT_s '+ _ch16 _x02 '+ _ch16 ,0x3e '+ _ch32 _x01 '+
  load_start_s ,0x78 '+ _ch64 ,64 '+ _x00x8 '+
  _x00x4 '+ _ch16 ,64 '+ _ch16 ,0x38 '+ _ch16 _x01 '+
  _ch16 ,64 '+ _x00x4 $;

theorem ELF_header_ok: $ elfHeader ELF_header_s text_start 64 0 1 0 $ =
(focus
  (for 0 7 @ fn (_) (refine '(ian _ _)))
  (def h0 '(mpbir (eleq1 ,to_hex) xelu8_1))
  (def h1 '(mpbir (eleq1 ,to_hex) xelu8_2))
  (def h2 '(mpbir (lteq2 @ eqtr bitsNeg1 upto16) ,norm_num))
  (def (f x) '(eqtr4 (eqtr ,(_x00xn_eq x) @ repeateq2 ,(h2nn x)) toBytes02))
  (refine 'load_start_T '(ssel u8ss64 ,h1) 'elBits01
    '(ssel u8ss16 ,h0) h2 'elBits01 h2) (swap)
  '(ax_mp (iexe ,eqtac) @ ian elBits01 _)
  '(s2n_A ELF_IDENT_eq @ s2n_A (_ch16_eq _x02_eq) @
    s2n_A (_ch16_eq eqid) @ s2n_A (_ch32_eq _x01_eq) @
    s2n_A load_start_eq @ s2n_A (_ch64_eq ,norm_num) @ s2n_A ,(f 8) @  s2n_A ,(f 4) @
    s2n_A (! _ch16_eq $64$ _ ,norm_num) @ s2n_A (_ch16_eq eqid) @
    s2n_A (_ch16_eq _x01_eq) @ s2n_A (! _ch16_eq $64$ _ ,norm_num) @
    s2n_A ,(f 2) ,(f 2)));

local def PAGE_SIZE_s: string = $ _x00 ': _x00 ': ,0x20 ': _x00x5 $;
local def PAGE_SIZE: nat = $ 2 ^ ,21 $;
theorem PAGE_SIZE_val: $ PAGE_SIZE = ,0x200000 $ =
'(eqtr2 (x2powS @ x2powS @ x2powS @ x2powS @ x2powS @ eqtr2 pow12 dec2) @
  poweq2 ,norm_num);
theorem PAGE_SIZE_eq: $ PAGE_SIZE_s = u64Bytes PAGE_SIZE $ =
(focus
  '(eqtr4 _ @ u64Byteseq PAGE_SIZE_val)
  '(xtoBytesS @ xtoBytesS @ eqtr _ @ toByteseq2 @ hexeq1 hex01_)
  '(xtoBytesS @ eqtr4 (eqtr _x00x5_eq @ repeateq2 h2n5) toBytes02));

local def basic_pHeader_s (filesz memsz: string): string =
$ _ch32 _x01 '+ _ch32 ,7 '+
  _ch64 ,0x78 '+ load_start_s ,0x78 '+ _x00x8 '+
  filesz '+ memsz '+ PAGE_SIZE_s $;

local def PROT_RWX = $ 7 $;
theorem PROT_RWX_val: $ PROT_RWX = upto 3 $ =
'(mpbi addcan1 @ eqtr4 (eqtr4 add12 d2pow3) uptoadd1);
theorem ss_PROT_RWX: $ p e. Prot <-> p C_ PROT_RWX $ =
'(bitr4 elBits @ sseq2 @ nseq PROT_RWX_val);
theorem PROT_RWX_T: $ PROT_RWX e. Prot $ = '(mpbir ss_PROT_RWX ssid);
theorem PROT_RWX_R: $ PROT_READ C_ PROT_RWX $ = '(mpbi ss_PROT_RWX PROT_READ_T);
theorem PROT_RWX_W: $ PROT_WRITE C_ PROT_RWX $ = '(mpbi ss_PROT_RWX PROT_WRITE_T);
theorem PROT_RWX_X: $ PROT_EXEC C_ PROT_RWX $ = '(mpbi ss_PROT_RWX PROT_EXEC_T);
theorem PROT_RWX_flags: $ protToFlags PROT_RWX = 7 $ =
(focus
  '(eqtr (ifpos PROT_RWX_X) @ eqtr4 (b1eq _) d7half)
  '(eqtr (ifpos PROT_RWX_W) @ eqtr4 (b1eq _) d3half)
  '(ifpos PROT_RWX_R));

theorem basic_pHeader_ok
  (hfs: $ fs = u64Bytes filesz $)
  (hms: $ ms = u64Bytes memsz $)
  (hle: $ filesz <= memsz $)
  (hms2: $ memsz e. u64 $):
  $ pHeader (basic_pHeader_s fs ms) PT_LOAD PROT_RWX
      (ch x7 x8) text_start filesz memsz $ =
(focus
  (for 0 7 @ fn (_) (refine '(ian _ _)))
  (def h0 '(mpbir (eleq1 ,to_hex) xelu8_1))
  (def h1 '(mpbir (eleq1 ,to_hex) xelu8_2))
  (refine '(ssel u8ss32 {,h0 : $ 1 e. _ $}) 'PROT_RWX_T
    '(ssel u8ss64 ,h1) 'load_start_T '(Bitsle1 hle hms2) 'hms2 'hle)
  (have 'hM '(eqtr3 load_start_eq2 @ addeq load_start_pow2 @ eqcom c2nhex))
  '(ax_mp (iexe ,eqtac) @ ian
    (ian _ @ mpbir (dvdeq2 @
      eqtr (bitsSub_eq_sub (mpbir (leeq2 hM) leaddid2) load_start_T) @
      eqtr (subeq1 hM) pncan) @ powdvd _)
    (s2n_A (_ch32_eq _x01_eq) @
      s2n_A (_ch32_eq @ eqcom @ eqtr PROT_RWX_flags ,norm_num) @
      s2n_A (_ch64_eq eqid) @ s2n_A load_start_eq @
      s2n_A (eqtr4 (eqtr _x00x8_eq @ repeateq2 h2n8) toBytes02) @
      s2n_A hfs @ s2n_A hms PAGE_SIZE_eq))
  norm_num
  norm_num);

local def ELF_lit (fs ms c: string): string =
$ ELF_header_s '+ basic_pHeader_s fs ms '+ c $;

local def ELF_parse (bss: nat) (c: string): nat =
$ text_start, PROT_RWX, text_start, c ++ repeat 0 bss $;

local def ELF_lit_ok (elf: string) (bss: nat) (c: string) =
$ parseBasicElf elf text_start PROT_RWX text_start (c ++ repeat 0 bss) $;

theorem ELF_lit_ok_isBasicElf (s bss c)
  (h: $ ELF_lit_ok s bss c $): $ isBasicElf s $ =
'(iexie @ iexde @ iexde @ iexde @ mpbiri h ,eqtac);

theorem basicElf_ok
  (hfs: $ fs = u64Bytes filesz $)
  (hms: $ ms = u64Bytes memsz $)
  (hbss: $ filesz + bss = memsz $)
  (hlen: $ len c = filesz $)
  (hend: $ ,0x400078 + memsz = end $)
  (hea: $ c != 0 $)
  (hbd: $ end e. u64 $):
  $ ELF_lit_ok (ELF_lit fs ms c) bss c $ =
(focus
  '(ian s2nT @ iexie ,(iterate 5 (fn (x) '(iexde ,x)) '(mpbiri _ ,eqtac)))
  (have 'h1 '(eqtr s2nsadd @ appendeq2 s2nsadd))
  (have 'hl1 '(elArraylen @ an5l @ elfHeaderT ELF_header_ok))
  (have 'phok '(basic_pHeader_ok
    (eqtr4 hfs @ u64Byteseq hlen)
    (eqtr4 hms @ u64Byteseq hbss)
    (mpbir (leeq1 hlen) leaddid1)
    (mpbir (eleq1 hbss) @ Bitsle1 (mpbi (leeq2 hend) leaddid2) hbd))) (swap)
  (have 'hl2 '(elArraylen @ an6l @ pHeaderT phok))
  (for 0 8 @ fn (_) (refine '(ian _ _)))
  (focus
    '(mpbir (sublistAteq2 h1) @ sublistAt_left sublistAt_id))
  (focus 'ELF_header_ok)
  (focus
    '(mpbir (sublistAteq (eqtr2 add02 hl1) h1 eqid) _)
    '(sublistAt_right @ sublistAt_left sublistAt_id))
  (focus 'phok)
  (focus
    '(mpbir (sublistAteq (eqtr2 (addeq hl1 @ eqtr add02 hl2)
        {,norm_num : $ 64 + ch x3 x8 = ch x7 x8 $}) h1 eqid) _)
    '(sublistAt_right @ sublistAt_right sublistAt_id))
  (focus '(mpbir (eleq1 @ eqtr (addeq2 hbss) hend) hbd))
  (focus 'leid)
  (focus
    '(mpbi (lteq1 add02) @ mpbi ltadd2 @ ltletr _ leaddid1)
    '(mpbi (lteq2 hlen) @ mpbir lt01 @ mtbir leneq0 hea))
  (focus '(appendeq2 @ repeateq2 @ eqtr2 (subeq2 hlen) pncan2)));

------------
-- Linker --
------------

local def assembledOLD (c s: string) (start end: nat): wff =
$ end e. u64 /\ end = start + len s /\ E. n (start = text_start + n /\ sublistAt n c s) $;

theorem assembledOLD_start (h: $ assembledOLD c s x y $): $ text_start <= x $ =
(named '(eex (anwl @ mpbiri leaddid1 leeq2) @ anr h));

theorem assembledOLD_end (h: $ assembledOLD c s x y $): $ y <= text_start + len c $ =
(named @ focus
  '(mpbir (leeq1 @ anlr h) @ eex _ @ anr h)
  '(mpbird (leeq1d @ syl6eq addass @ addeq1d anl) @
    sylib leadd2 @ anwr sublistAt_len_le));

local def assembledOLD_func (c s: string) (start end: nat): wff =
$ assembledOLD c s start end /\ start < end $;

theorem assembledOLD_func_lt (h: $ assembledOLD_func c s x y $): $ x < text_start + len c $ =
'(ltletr (anr h) (assembledOLD_end @ anl h));

theorem assembledOLD_func_bound (h: $ assembledOLD_func c s x y $):
  $ text_start <= x /\ x < text_start + len c $ =
'(ian (assembledOLD_start @ anl h) @ assembledOLD_func_lt h);

theorem assembledOLD_func_n0 (h: $ assembledOLD_func c s x y $): $ c != 0 $ =
'(mtbi (bitr3 (eqeq2 add02) @ bitr addcan2 leneq0) @ ltner @
  lelttr (anli (assembledOLD_func_bound h)) (anri (assembledOLD_func_bound h)));

local def assemblesOLD (c s: string) (start end: nat) (p q: wff): wff =
$ E. n (start = text_start + n /\ sublistAt n c s) ->
  end = start + len s /\ (text_start + len c e. u64 -> p -> q) $;

theorem assemblesOLD_trul (h: $ assemblesOLD c s x y p (T. /\ q) $): $ assemblesOLD c s x y p q $ =
(named '(sylib (aneq2i @ imeq2i @ imeq2i @ bian1 itru) h));
theorem assemblesOLD_assoc (h: $ assemblesOLD c s x y p (q1 /\ q2 /\ q3) $):
  $ assemblesOLD c s x y p (q1 /\ (q2 /\ q3)) $ =
(named '(sylib (aneq2i @ imeq2i @ imeq2i anass) h));

local def assemble1OLD (s: string) (start end: nat): wff =
$ end = start + len s $;

theorem assemble1OLD_0: $ assemble1OLD s0 x x $ =
'(eqtr2 (addeq2 @ eqtr (leneq s2ns0) len0) add02);
theorem assemble1OLD_1 (h1: $ suc x = y $): $ assemble1OLD (s1 c) x y $ =
'(eqtr2 (addeq2 @ eqtr (leneq s2ns1) len1) @ eqtr add12 h1);
theorem assemble1OLD_A_lem: $ y = x + len s -> z = y + len t -> u = s ++ t -> z = x + len u $ =
'(exp @ exp @ eqtrd anlr @ eqtr4d (anwll addeq1) @
  syl6eqr addass @ addeq2d @ syl6eq appendlen @ leneqd anr);
theorem assemble1OLD_A (h1: $ assemble1OLD s x y $) (h2: $ assemble1OLD t y z $):
  $ assemble1OLD (s '+ t) x z $ = '(assemble1OLD_A_lem h1 h2 s2nsadd);
theorem assemble1OLD_S (h1: $ suc x = y $) (h2: $ assemble1OLD s y z $):
  $ assemble1OLD (c ': s) x z $ =
'(assemble1OLD_A (assemble1OLD_1 h1) h2);

--| `(mk-asm1 x s)` returns a pair `(y p)` where `p: assemble1OLD s x y`
do (def (mk-asm1 x s) @ match s
  [('scons c s)
    @ match (mksuc x) @ (y p)
    @ match (mk-asm1 y s) @ (z p2)
    '(,z (assemble1OLD_S ,c ,s ,x ,y ,z ,p ,p2))]
  [('sadd s t)
    @ match (mk-asm1 x s) @ (y p)
    @ match (mk-asm1 y t) @ (z p2)
    '(,z (assemble1OLD_A ,s ,t ,x ,y ,z ,p ,p2))]
  [('s1 c) @ match (mksuc x) @ (y p) '(,y (assemble1OLD_1 ,c ,x ,y ,p))]
  ['(s0) '(,x (assemble1OLD_0 ,x))]);

local def assemblesOLD_func (s: string) (start end: nat): wff =
$ assemble1OLD s start end /\ start < end $;

theorem assemblesOLD_func_I (h: $ assemble1OLD (c ': s '+ t) x y $):
  $ assemblesOLD_func (c ': s '+ t) x y $ =
'(iani h @ mpbir (lteq (eqcom add0) h) @ mpbi ltadd2 @ mpbir (lteq2 @
    eqtr (leneq @ eqtr s2nsadd @ eqtr (appendeq1 s2nscons) appendS) lenS) lt01S);

theorem assemble_1 (h: $ assemble1OLD s x y $):
  $ assemblesOLD c s x y p (p /\ assembledOLD c s x y) $ =
(named @ focus
  '(iand (a1i h) @ expcom @ expcom @ anim2 @ anim1a @ eex @ exp @ iand _ (a1i h))
  '(sylibr (eleq1 h) @ sylc u64le1 _ anr)
  '(mpbird (leeq1d @ syl6eq addass (addeq1d anll)) @
    sylib leadd2 @ rsyl anlr sublistAt_len_le));

theorem assemble_func (h: $ assemblesOLD_func s x y $):
  $ assemblesOLD c s x y p (p /\ assembledOLD_func c s x y) $ =
(named '(sylibr (aneq2i @ imeq2i @ imeq2i @ aneq2i @ bian2 @ anr h) @ assemble_1 @ anl h));

theorem assemblesOLDA
  (h1: $ assemblesOLD c s x y p q $)
  (h2: $ assemblesOLD c t y z q r $):
  $ assemblesOLD c (s '+ t) x z p r $ =
(named @ focus
  (have 'h3 '(bitr (sublistAteq3 s2nsadd) sublistAt_append))
  '(mpand (syl h1 @ eximi @ anim2 @ sylbi h3 anl) @
    mpand (syl h2 @ imp @ syl5 anl @ eex @ exp @ iexde @ mpbird ,eqtac @ anwl @
      iand (syl6eq addass @ addeq1d anll) @ rsyl anlr @ sylbi h3 anr) @
    iand (eqtrd anrl @ syl6eqr (addeq2 @ eqtr (leneq s2nsadd) appendlen) @
      syl6eq addass @ addeq1d @ anwl anrl) @
    exp @ syld (imp @ anrd anlr) (imp anrr)));

theorem assemblesOLD0: $ assemblesOLD c s0 x x p p $ =
(named '(a1i @ iani assemble1OLD_0 idd));

theorem assemblesOLD_finish
  (h1: $ assemblesOLD c c ,0x400078 end T. p $)
  (h2: $ ,0x400078 + n = end $)
  (h3: $ end e. u64 $):
  $ len c = n /\ p $ =
(focus
  (have 'H '(h1 @ iexe _ @ iani (eqcom add02) sublistAt_id)) eqtac
  (have 'H2 '(eqcom @ mpbi addcan2 @ eqtr h2 (anli H)))
  '(iani H2 @ anri H (mpbir (eleq1 @ eqtr (addeq2 H2) h2) h3) itru));

do {
  --| Builds a sequence of applications of `push` and `reassoc` to `x1` that
  --| would construct a balanced binary tree with `n > 0` nodes assuming
  --| `x1 = ()`, `(push 'x) = '(x ())` and `(reassoc '((a b) c)) = '(a (b c))`.
  --| (However since the actual data is simply threaded through, the functions
  --| may have additional side state, or may not be tree operations at all.)
  --|
  --| Ex:
  --| ```
  --| do {
  --|   (def (push x) '(,x a))
  --|   (def reassoc @ match-fn ['((,x ,y) ,z) '(,x (,y ,z)])
  --|   (ra-list 'a push reassoc 8)
  --|     -- (((a a) (a a)) ((a a) (a a)))
  --| };
  --| ```
  (def (ra-list x1 push reassoc n)
    @ letrec (
      [(right n x) @ if {n = 1} (push x) @ let ([m {n // 2}])
        @ reassoc @ right m @ right {n - m} x]
      [(left n) @ if {n = 1} x1 @ let ([m {n // 2}])
        @ right m @ left {n - m}])
    (left n))

  --| Like `(ra-list)`, but supports additionally the `n = 0` case. Here the base case
  --| for n = 0 is `x0`, `push` and `reassoc` have the same behavior, and `merge1`
  --| is called on the n = 1 case on `push x0`, for instance if `x0 = 0` then
  --| `merge1` might be defined such that `(merge1 '(0 ())) = ()`.
  (def (ra-list0 x0 push merge1 reassoc n)
    @ if {n = 0} x0 (ra-list (merge1 @ push x0) push reassoc n))

  --| `(reg-idx)` converts atoms denoting x86 registers
  --| like 'rax, 'rcx, and 'r14 into their indexes.
  (def reg-idx @ lookup-fn @ append
    '([rax 0] [rcx 1] [rdx 2] [rbx 3] [rsp 4] [rbp 5] [rsi 6] [rdi 7])
    (rmap (range 0 15) @ fn (i) '[,(atom-app 'r i) i]))

  --| `(asm1-len inst)` gets the projected byte length of an instruction.
  (def asm1-len @ match-fn
    ['(mov.32 (reg ,_) ,_) 5]
    ['(syscall) 2])

  --| `(assemble-rex x1 ... xn)` takes a list of specifications `xi = (bit val)`
  --| where bit is `'B`, `'X`, `'R`, `'W` or a number 0-3 and `val` is `$0$` or `$1$`,
  --| and produces `(rex p1 ... pn)` where
  --| * if `xi = (R val)` then `pi` proves `REX_R rex = val`, and
  --| * if `xi = (n val)` then `pi` proves `bit rex n = val`.
  (def (assemble-rex . xs)
    (def idx @ match-fn ['B 0] ['X 1] ['R 2] ['W 3] [n n])
    (def i @ foldl xs 0 @ match-fn*
      ['(,i (,bit (d1))) {i + {2 ^ (idx bit)}}]
      [(i _) i])
    @ if {i = 0}
      (cons $0$
        @ rmap xs @ match-fn @ (bit _)
        @ if (number? bit) '(,(xbit i bit)) '(,(atom-app 'REX_ bit '_0)))
      (cons (def rex '(h2n @ ,(hexdigit i))) '(suc ,rex)
        @ rmap xs @ match-fn @ (bit a)
        (def p '(,(xbit i (idx bit))))
        @ if (number? bit) p '(,(atom-app 'REX_ bit '_Si) ,a ,rex ,p)))

  --| `(assemble-inst inst)` assembles the instruction `inst`, and
  --| returns `(ast s p)` where `p` proves `decode ast s`.
  (def assemble-inst
    (def (asm-aux rex ast opc s p) @ match rex
      [$0$ '(,ast $,opc ': ,s$ (decode0I ,ast ,opc ,s ,p))]
      [$suc (h2n ,rex)$
        '(,ast $ch ,'(x4) ,rex ': ,opc ': ,s$ (decode1I ,ast ,opc ,rex ,s ,p))])
    @ match-fn
      ['(mov.32 (reg ,r2) ,(? number? imm))
        @ match (mk-splitBits '(3 1) r2) @ (r rb hr2)
        (def v $1$) (def sz '(wSz32))
        @ match (merge-bits '(3 1) r v) @ (a ha)
        (def r2 '(,(hexdigit r2))) (def a '(,(hexdigit a)))
        @ match (assemble-rex '(B ,rb) '(3 $0$)) @ (rex hrb hsz)
        (def hsz @ match rex
          [$0$ '(opSizeW_0 ,sz ,v (opSize_32 $F.$))]
          [$suc ,rex$ '(opSizeW_S ,sz ,rex ,v $0$ ,hsz (opSize_32 $F.$))])
        (def imm (->zhex imm))
        @ match (to-iNBytes 32 imm) @ (l heq)
        (def himm '(readFullImm32I ,imm ,l ,(to-eli 32 imm) ,heq))
        @ asm-aux rex
          $ xastMov ,sz (Rm_i (RM_reg (h2n ,r2)) (chopZ 64 ,imm)) $
          '(ch (xb) ,a) l
        @ list 'decodeMov64I a imm l r r2 rb rex sz v ha hsz himm hrb hr2]
      ['(syscall)
        '((xastSysCall) (scons (ch (x0) (xf)) @ s1 @ ch (x0) (x5)) (decodeSysCallI))])

  (def (assemble-desugar fwd-ref)
    @ letrec (
      [desugar-si @ match-fn ['{,k * ,x} '{,k * ,(desugar x)}] [x x]]
      [desugar @ match-fn
        ['(M {,si + ,x + ,n}) '(M ,(desugar-si si) ,(desugar x) ,(desugar n))]
        ['(M {,si + ,n}) @ match (desugar n)
          ['(reg ,x) '(M ,(desugar-si si) (reg ,x) 0)]
          [n '(M ,(desugar-si si) 0 ,n)]]
        ['(M ,si) '(M ,(desugar-si si) 0 0)]
        ['(M ,si ,x ,n) '(M ,(desugar-si si) ,(desugar x) ,(desugar n))]
        [((? atom? x)) (fwd-ref x)]
        [(? number? n) n]
        [(? atom? x) '(reg ,(reg-idx x))]])
    @ match-fn @ (asm . args) (cons asm @ map desugar args))

  --| `(assemble-measure xs)` does the first assembly pass, calculating the length of
  --| all instructions and assigning positions to the symbols.
  --| It returns `(entry_idx entry xs')` where `entry` is the entry address and
  --| `entry_idx` is the index of the entry function in the `xs` list, and `xs'` is
  --| the same as `xs` but with symbol references replaced by their locations.
  --|
  --| See `(assemble)` for the input grammar of `xs`.
  (def (assemble-measure xs)
    (def fwd-ref
      (def refs (atom-map!))
      @ fn (x) @ match (lookup refs x)
        [#undef (def r (ref! '(,x))) (insert refs x r) r]
        [r r])

    (def xs @ rmap xs @ match-fn
      [('func name data) @ list 'func name
        @ rmap data (assemble-desugar fwd-ref)]
      [e e])

    (def entry-idx (ref!))
    (foldl xs '(0 0x400078) @ match-fn* @ ((idx pos) (ty name data))
      (set! (fwd-ref name) pos)
      (if {name == 'main} (set! entry-idx idx))
      @ list {idx + 1} {pos + (match ty
        ['func @ apply + @ map asm1-len data]
        ['string (string-len data)])})
    @ list (get! entry-idx) (get! @ fwd-ref 'main) xs)

  --| `(assemble-core base main bss pub entry_idx entry xs')`
  --| assembles an ELF file, producing the file and a correctness theorem.
  --| See `(assemble)` for the meaning of the `base main bss pub` arguments,
  --| and `(assemble-measure)` for the `entry_idx entry xs'` arguments.
  (def (assemble-core base main bss pub entry_idx entry xs)
    (def start 0x400078)
    (def start_x (->hex start))
    (def pfx (atom-app base _))
    (def content (atom-app pfx 'content))
    (def pos_x (ref! start_x))

    -- items: list (pfx_name, assembled_prop, assembled_proof,
    --   option (list (inst_ast, inst_byte_str, decode_proof)))
    (def items @ rmap xs @ match-fn @ (ty name data)
      (def name_asm (atom-app pfx name '_asm))
      @ match (match ty
        ['func
          (def asm @ map assemble-inst data)
          (def str @ foldr asm '(s0) @ fn (asm s) '(sadd ,(nth 1 asm) ,s))
          '(,str assembledOLD_func (assemble_func @ assemblesOLD_func_I ,name_asm) ,asm)]
        ['string '(,(string->hex data) assembledOLD (assemble_1 ,name_asm) #undef)])
        @ (str kind asf asm)
      @ match (mk-asm1 (get! pos_x) str) @ (pos2_x pf)
      (def name2 (atom-app pfx name))
      (add-term! name2 () '(string ()) 'local () str)
      (add-tac-thm! name_asm () ()
        '(assemble1OLD (,name2) ,(get! pos_x) ,pos2_x) ()
        (fn () (verb pf)))
      (def prop '(,kind (,content) (,name2) ,(get! pos_x) ,pos2_x))
      (set! pos_x pos2_x)
      (list name2 prop asf asm))

    (def content_s
      @ foldl items '(s0) (fn (x y) '(sadd ,x (,(nth 0 y)))))
    (add-term! content () '(string ()) 'local () content_s)

    (def pos (hex->number pos_x))
    (def filesz {pos - start})
    (def filesz_x (->hex filesz))
    @ match (to-uNBytes 64 filesz_x) @ (filesz_s filesz_p)

    (def asmd (atom-app pfx 'assembledOLD))
    (def asmd-pf
      (def n (len items))
      @ match (ra-list0
        '((tru) assemblesOLD0 ,items)
        (match-fn @ (t p ((_ prop asf _) . its))
          '((an ,t ,prop) (assemblesOLDA ,p ,asf) ,its))
        (match-fn @ ($ T. /\ ,t $ p its)
          '(,t (assemblesOLD_trul ,p) ,its))
        (match-fn @ ($ ,q1 /\ ,q2 /\ ,q3 $ p its)
          '($ ,q1 /\ (,q2 /\ ,q3) $ (assemblesOLD_assoc ,p) ,its))
        n) @ (prop pf _)
      @ match (mkadd start_x filesz_x) @ (fileend_x fileend_p)
      (add-tac-thm! asmd () ()
        '(an (eq (len (,content)) ,filesz_x) ,prop) ()
        @ fn () '(assemblesOLD_finish ,pf ,(verb fileend_p)
          ,(verb @ to-elu 64 fileend_x)))
      @ fn (i x)
      @ letrec ([(f i n) @ if {n = 1} x
        @ let ([m {n // 2}] [m2 {n - m}])
        @ if {i < m2} '(anli ,(f i m2)) '(anri ,(f {i - m2} m))])
      (f i n))

    (def entry_x (->hex entry))
    @ match (to-uNBytes 64 entry_x) @ (entry_s entry_p)

    (def bss_x (->hex bss))
    (def memsz {filesz + bss})
    (def memsz_x (->hex memsz))
    @ match (to-uNBytes 64 memsz_x) @ (memsz_s memsz_p)

    (add-term! base () '(string ()) (if pub () 'local) ()
      '(ELF_lit ,filesz_s ,memsz_s (,content)))

    @ match (mkadd start_x memsz_x) @ (end_x end_p)
    (def parseElf (atom-app pfx 'parseElf))
    (add-tac-thm! parseElf () ()
      '(ELF_lit_ok (,base) ,bss_x (,content)) () @ fn () @ focus
      '(basicElf_ok
        ,(verb filesz_p)
        ,(verb memsz_p)
        ,(verb @ nth 1 @ mkadd filesz_x bss_x)
        (anli ,asmd)
        ,(verb end_p)
        (assembledOLD_func_n0 ,(asmd-pf entry_idx '(anri ,asmd)))
        ,(verb @ to-elu 64 end_x)))

    (add-thm! (atom-app pfx 'basicElf) () ()
      '(isBasicElf (,base)) (if pub 'pub ())
      '(() (ELF_lit_ok_isBasicElf (,base) ,bss_x (,content)
        (,parseElf)))))

  --| `(assemble base main bss pub xs)` assembles an ELF file, producing the file
  --| and a correctness theorem. `base` is the base name for all declarations,
  --| `main` is the name of the main function, `bss` is the number of bytes in the
  --| zeroed section, `pub` is the target visibility of the main theorems
  --| (either `#t` public or `#f` local), and `xs` is the list of functions and data
  --| elements to assemble.
  --|
  --| The xs argument is a list, where the arguments can have the form:
  --| * `('func name data)` where `name` is the name of the function and `data`
  --|   is a list of assembly instructions
  --| * `('data name str)` where `name` is the name of the data element
  --|   and `str` is a string literal with the target bytes
  --|
  --| The assembly instructions in `data` are similar to those in a traditional
  --| assembler, but written as s-expressions. Most source/destination arguments
  --| can have the form:
  --| * `37`, etc: an immediate argument
  --| * `rax`, `r14`, etc: a register
  --| * `(reg 2)`: a register referenced by index
  --| * `(sym)`, where `sym` is a symbol: a symbol address
  --|   (these are elaborated by (assemble-measure))
  --| * `(M 42)`, `(M rax)`, `(M {{4 * rax} + rsi + 14})`: memory reference
  --|
  --| Available instructions:
  --| * `(mov.32 dst src)`: 32 bit move dst <- src
  --| * `(syscall)`: syscall instruction
  --|
  --| The result of the program is a number of new definitions starting with `base`.
  --|
  --| * ```
  --|   def (base)_(name): string;
  --|   ```
  --|   This defines the strings in `xs`, the individual items that were declared
  --|   with their given names
  --| * ```
  --|   theorem (base)_(name)_asm: $ assemble1OLD base_name start end $;
  --|   ```
  --|   The proof that base_name assembles from `start` to `end`
  --| * ```
  --|   def (base)_content: string;
  --|   ```
  --|   This is the "content" part of the ELF file, after the header. It is the
  --|   concatenation of all the items
  --| * ```
  --|   theorem (base)_assembledOLD:
  --|     $ len content = n /\ (/\_i assembledOLD content name_i x_i x_i+1) $;
  --|   ```
  --|   The result of assembly, which asserts the total length of the content
  --|   as well as a conjunction asserting that every name_i assembles to its
  --|   final location.
  --| * ```
  --|   (pub) def (base): string;
  --|   ```
  --|   This is the complete ELF file string, with visibility `pub`.
  --| * ```
  --|   theorem (base)_parseElf: $ ELF_lit_ok base bss base_content $;
  --|   ```
  --|   The proof that `base` is an ELF file that parses to `base_content`.
  --| * ```
  --|   (pub) def (base)_basicElf: $ isBasicElf base $;
  --|   ```
  --|   The proof that `base` is an ELF file.
  (def (assemble base main bss pub xs)
    @ match (assemble-measure xs) @ (entry_idx entry xs)
    (assemble-core base main bss pub entry_idx entry xs))
};

-------------------------------
-- Control flow graph layout --
-------------------------------

--| A CFG predicate is a 4-ary predicate `A` which describes a piece of code.
--| `A(s,l,x,y)` means that if the code described by `A` is laid out at location
--| `x`, then the code will go in the bytes `x..y` (so `y` is the end of the code
--| segment), and `s` is the byte string that was placed in these bytes.
--|
--| The variable `l` is a list of addresses representing labels that can be
--| jumped to. The end result is that `A` can describe only the "essence" of the code
--| without any concrete references to its own memory location or that of jump targets.

@_ local def CFG_ok: set = $ S\ s, S\ l, S\ x, {y | y = x + len s} $;

theorem CFG_ok_i: $ A C_ CFG_ok -> s, l, x, y e. A -> y = x + len s $ =
(focus '(syl6ib _ ssel) '(elsabe @ elsabed @ elsabed @ elabed ,eqtac));

theorem mk_CFG_ok (p: wff s l x y) (h: $ p -> y = x + len s $):
  $ S\ s, S\ l, S\ x, {y | p} C_ CFG_ok $ =
'(sabssi @ sabssi @ sabssi @ mpbi ssab @ ax_gen h);

local def sat_CFG (s t: string) (l x y: nat) (A: set): wff =
$ A C_ CFG_ok /\ E. u (s = u ++ t /\ u, l, x, y e. A) $;

theorem sat_CFG_i (p: wff s l x y) (x2)
  (h1: $ p -> y = x + len s $) (h2: $ s2 = u2 ++ t2 $)
  (h3: $ s = u2 /\ l = l2 /\ x = x2 /\ y = y2 -> (p <-> q) $) (h4: $ q $):
  $ sat_CFG s2 t2 l2 x2 y2 (S\ s, S\ l, S\ x, {y | p}) $ =
'(iani (mk_CFG_ok h1) @ iexie @
  mpbiri (iani h2 @ mpbir (elsabe @ elsabed @ elsabed @ elabed h3) h4) ,eqtac);

local def sat_CFG_func (s: string) (x: nat) (A: set): wff =
$ E. y sat_CFG s s0 0 x y A $;
theorem sat_CFG_func_i (h: $ sat_CFG s s0 0 x y A $):
  $ sat_CFG_func s x A $ = (named '(iexie @ mpbiri h @ aneq2d ,eqtac));
theorem sat_CFG_func_iff (h: $ assemble1OLD s x y $):
  $ sat_CFG_func s x A <-> A C_ CFG_ok /\ s, 0, x, y e. A $ =
'(bitr exan1 @ aneq2a @
  syl5bb (exeqi @
    bitr (exeqi @ aneq1i @ bitr eqcomb @ eqeq1 @ eqtr (appendeq2 s2ns0) append02) @
    exeqe ,eqtac) @
  bitr3d (exeqd @ syl bian1a @ syl6ibr (eqeq2 h) CFG_ok_i) @
  a1i @ exeqe ,eqtac);

@_ local def CFG0: set = $ S\ s, S\ l, S\ x, {y | s = 0 /\ y = x} $;
theorem sat_CFG0: $ sat_CFG s s l x x CFG0 $ =
'(sat_CFG_i
  (eqtr4d anr @ syl6eq add0 @ addeq2d @ syl6eq len0 @ leneqd anl)
  (eqcom append0) ,eqtac @ iani eqid eqid);

@_ local def CFG1 (ast: nat): set =
$ S\ s, S\ l, S\ x, {y | decode ast s /\ y = x + len s} $;
theorem CFG1_ok: $ CFG1 ast C_ CFG_ok $ = (named '(mk_CFG_ok anr));
theorem sat_CFG1 (h1: $ assemble1OLD s x y $) (h2: $ decode ast s $):
  $ sat_CFG (s '+ t) t l x y (CFG1 ast) $ =
'(sat_CFG_i anr s2nsadd ,eqtac @ iani h2 h1);

@_ local def CFG_seq (A B: set): set =
$ S\ s, S\ l, S\ x, {y | E. t1 E. t2 E. z (s = t1 ++ t2 /\
  t1, l, x, z e. A /\ t2, l, z, y e. B)} $;
theorem sat_CFG_seq (h1: $ sat_CFG s t l x y A $) (h2: $ sat_CFG t u l y z B $):
  $ sat_CFG s u l x z (CFG_seq A B) $ =
(named @ focus
  '(iani (mk_CFG_ok _) @ eex (mpi (anri h2) @ eexda _) @ anri h1)
  '(eex @ eex @ eex @ mpd anll @ sylc assemble1OLD_A_lem
    (rsyl anlr @ CFG_ok_i @ anli h1) (anwr @ CFG_ok_i @ anli h2))
  '(sylan (iexe ,eqtac) (syl6eqr appendass @ eqtrd anll @ appendeq2d anrl) @
    sylibr (elsabe @ elsabed @ elsabed @ elabed ,eqtac) @
    syl (trud @ iexdde @ iexdde @ iexdde @ bi2d ,eqtac) @
    iand (iand eqidd anlr) anrr));

@_ local def CFG_S (ast: nat) (A: set): set = $ CFG_seq (CFG1 ast) A $;
theorem sat_CFG_S (h1: $ assemble1OLD s x y $) (h2: $ decode ast s $)
  (h3: $ sat_CFG t u l y z A $): $ sat_CFG (s '+ t) u l x z (CFG_S ast A) $ =
'(sat_CFG_seq (sat_CFG1 h1 h2) h3);

@_ local def CFG_scope (A: set): set =
$ S\ s, S\ l, S\ x, {y | E. a (s, a : l, x, y e. A)} $;
theorem sat_CFG_scope (h: $ sat_CFG s t (a : l) x y A $):
  $ sat_CFG s t l x y (CFG_scope A) $ =
(named @ focus
  '(iani (mk_CFG_ok @ eex @ CFG_ok_i @ anli h) @ eex _ @ anri h)
  '(syl (iexe ,eqtac) @ anim2 @
    sylibr (elsabe @ elsabed @ elsabed @ elabed ,eqtac) @
    iexe ,eqtac));

@_ local def CFG_label: set =
$ S\ s, S\ l, S\ x, {y | s = 0 /\ y = x /\ E. l2 l = x : l2} $;
theorem sat_CFG_label: $ sat_CFG s s (x : l) x x CFG_label $ =
(named '(sat_CFG_i
  (eqtr4d anlr @ syl6eq add0 @ addeq2d @ syl6eq len0 @ leneqd anll)
  (eqcom append0) ,eqtac @ iani (iani eqid eqid) @ iexie @ eqcomd conseq2));

@_ local def CFG_lift (A: set): set =
$ S\ s, S\ l, S\ x, {y | E. a E. l2 (l = a : l2 /\ s, l2, x, y e. A)} $;
theorem sat_CFG_lift (h: $ sat_CFG s t l x y A $):
  $ sat_CFG s t (a : l) x y (CFG_lift A) $ =
(named @ focus
  '(iani (mk_CFG_ok @ eex @ eex @ anwr @ CFG_ok_i @ anli h) @ eex _ @ anri h)
  '(syl (iexe ,eqtac) @ anim2 @
    sylibr (elsabe @ elsabed @ elsabed @ elabed ,eqtac) @
    iexde @ iexde @ mpbird ,eqtac @ iand eqidd anll));

@_ local def CFG_block (A B: set): set =
$ CFG_seq (CFG_scope (CFG_seq A CFG_label)) B $;
theorem sat_CFG_block (h1: $ sat_CFG s t (y : l) x y A $) (h2: $ sat_CFG t u l y z B $):
  $ sat_CFG s u l x z (CFG_block A B) $ =
'(sat_CFG_seq (sat_CFG_scope @ sat_CFG_seq h1 sat_CFG_label) h2);

@_ local def CFG_loop (A B: set): set =
$ CFG_seq (CFG_scope (CFG_seq CFG_label A)) B $;
theorem sat_CFG_loop (h1: $ sat_CFG s t (x : l) x y A $) (h2: $ sat_CFG t u l y z B $):
  $ sat_CFG s u l x z (CFG_loop A B) $ =
'(sat_CFG_seq (sat_CFG_scope @ sat_CFG_seq sat_CFG_label h1) h2);

@_ local def CFG_ex (p: wff x) (A: set x): set = $ {z | E. x (p /\ z e. A)} $;
theorem sat_CFG_ex (p: wff a) (A: set a)
  (e1: $ a = b -> (p <-> q) $) (e2: $ a = b -> A == B $)
  (h1: $ q $) (h2: $ A C_ CFG_ok $) (h3: $ sat_CFG s t l x y B $):
  $ sat_CFG s t l x y (CFG_ex a p A) $ =
(named '(iani (mpbi ssab1 @ ax_gen @ eex @ anwr @ ssel h2) @
  eximi (anim2 @ ssel @ mpbi ssab2 @
    ax_gen @ exp (iexe @ aneqd e1 @ eleq2d e2) h1) (anri h3)));

-- @_ local def CFG_mov (sz dest src: nat) (A: set): set =
-- $ CFG_seq (CFG_ex ds (destsrcIRM ds = dest, src) (CFG1 (xastMov sz ds))) A $;
-- theorem sat_CFG_mov (e: $ destsrcIRM ds = dest, src $)
--   (h1: $ assemble1OLD s x y $) (h2: $ decode (xastMov sz ds) s $)
--   (h3: $ sat_CFG t u l y z A $): $ sat_CFG (s '+ t) u l x z (CFG_mov sz dest src A) $ =
-- '(sat_CFG_seq (sat_CFG_ex ,eqtac ,eqtac e CFG1_ok @ sat_CFG1 h1 h2) h3);
